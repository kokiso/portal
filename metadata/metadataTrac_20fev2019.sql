SET NOCOUNT ON;
USE TRAC;
--https://www.youtube.com/watch?v=v1rByVX1_FY NFE
--Zerar ident DBCC CHECKIDENT('GRUPOMODELO', RESEED, 0)
--aa
-----------------------------------------------------------------------------
-- TABELA                 | RES | DIR | TBL | TRG | ESP | F10  | FORM | BKP |
-----------------------------------------------------------------------------
-- AGENDA                 | AGE | 32  |  x  |  x  |     |      |      |     |   
-- AGENDATAREFA           | AT  | 18  |  x  |  x  |  x  |      |  x   |  x  |
-- ALIQUOTASIMPLES        | AS  | 17  |  x  |  x  |  x  |      |  x   |  x  |
-- AUTOCOMPOSICAO         | AC  | 36  |     |     |     |      |      |     | - Guarda individualmente todos os itens que formaram um auto
-- BALANCO                | BLN | 13  |  x  |  x  |  x  |      |  x   |  x  |
-- BANCO                  | BNC | 06  |  x  |  x  |  x  |      |  x   |  x  |
-- BANCOCODIGO            | BCD | 06  |  x  |  x  |  x  |      |  x   |  x  |
-- BANCOSTATUS            | BST | 06  |  x  |  x  |  x  |      |  x   |  x  |
-- CARGO                  | CRG | 01  |  x  |  x  |  x  |  x   |  x   |  x  |
-- CATEGORIA              | CTG | 12  |  x  |  x  |  x  |      |  x   |  x  |
-- CIDADE                 | CDD | 08  |  x  |  x  |  x  |      |  x   |  x  |
-- CONTACONTABIL          | CC  | 13  |  x  |  x  |     |      |      |     |
-- CONTARESUMO            | CTR | 13  |  x  |  x  |  x  |      |  x   |  x  |
-- CONTRATO               | CNTT| 13  |  x  |  x  |  x  |      |  x   |  x  | (CNTT devido contador(CNT))
-- CFOP                   | CFO | 14  |  x  |  x  |  x  |      |  x   |  x  |
-- CNABARQUIVO            | ARQ | 10  |     |     |     |      |      |     | (Ver se necessario)
-- CNABENVIO              | ENV | 10  |     |     |     |      |      |     | (Ver se necessario)
-- CNABERRO               | ERR | 30  |  x  |  x  |  x  |      |  x   |  x  |
-- CNABINSTRUCAO          | CI  | 30  |  x  |  x  |  x  |      |  x   |  x  |
-- CNABLAYOUT             | LAY | 30  |     |     |     |      |      |     | (Ver se necessario)
-- CNABRETORNO            | CR  | 30  |  x  |  x  |  x  |      |  x   |  x  |
-- COMPETENCIA            | CMP | 07  |  x  |  x  |  x  |      |  x   |  x  |
-- CONTADOR               | CNT | 03  |  x  |  x  |  x  |      |  x   |  x  |
-- CONTRATO               | CTT | 15  |     |     |     |      |      |     |
-- CSTICMS                | ICMS| 14  |  x  |  x  |  x  |      |  x   |  x  |
-- CSTIPI                 | IPI | 14  |  x  |  x  |  x  |      |  x   |  x  |
-- CSTPIS                 | PIS | 14  |  x  |  x  |  x  |      |  x   |  x  |
-- CSTSIMPLES             | SN  | 14  |  x  |  x  |  x  |      |  x   |  x  |
-- DUPLICIDADEGMP         | DUP | 11  |     |     |     |      |      |     | - Checa a duplicidade de serie/sincard por fabricante em GRUPOMODELOPRODUTO(GMP)
-- EMAIL                  | EMA | 16  |  x  |  x  |  x  |      |  x   |  x  |
-- EMBALAGEM              | EMB | 24  |  x  |  x  |  x  |      |  x   |  x  |
-- EMPRESA                | EMP | 03  |  x  |  x  |  x  |      |  x   |  x  |
-- EMPRESARAMO            | ERM | 25  |  x  |  x  |  x  |      |  x   |  x  |
-- EMPRESAREGTRIB         | ERT | 25  |  x  |  x  |  x  |      |  x   |  x  |
-----------------------------------------------------------------------
-- TABELA                 | RES | DIR | TBL | TRG | ESP | F10  | FORM | BKP |
-----------------------------------------------------------------------
-- EMPRESATIPO            | ETP | 25  |  x  |  x  |  x  |      |  x   |  x  |
-- EMPRESATRIBFED         | ETF | 25  |  x  |  x  |  x  |      |  x   |  x  |
-- ESTADO                 | EST | 08  |  x  |  x  |  x  |      |  x   |  x  |
-- FABRICANTE             | FBR | 33  |  x  |  x  |  x  |      |  x   |  x  |
-- FAVORECIDO             | FVR | 05  |  x  |  x  |  x  |      |  x   |  x  |
-- FERIADO                | FRD | 19  |  x  |  x  |  x  |      |  x   |  x  |
-- FILIAL                 | FLL | 03  |  x  |  x  |  x  |      |  x   |  x  |
-- FORMACOBRANCA          | FC  | 20  |  x  |  x  |  x  |      |  x   |  x  |
-- GENERATOR              | GNR | **  |     |     |     |      |      |     | - Tabela do sistema
-- GRUPOFAVORECIDO        | GF  | 11  |  x  |  x  |  x  |      |  x   |  x  |
-- GRUPOMODELO            | GM  | 11  |  x  |  x  |  x  |      |  x   |  x  | - Modelos para produtos e autos(rotinas separadas)
-- GRUPOMODELOLOTE        | GML | 11  |     |     |     |      |      |     | - Guarda individualmente os lotes GRUPOMODELO
-- GRUPOMODELOPRODUTO     | GMP | 11  |     |     |     |      |      |     | - Guarda individualmente todos os cadastros de GRUPOMODELO
-- GRUPOPRODUTO           | GP  | 11  |  x  |  x  |  x  |      |  x   |  x  |
-- IMPOSTO                | IMP | 23  |  x  |  x  |  x  |      |  x   |  x  |
-- LOGRADOURO             | LGR | 08  |  x  |  x  |  x  |      |  x   |  x  |
-- MOEDA                  | MOE | 08  |  x  |  x  |  x  |      |  x   |  x  |
-- NATUREZAOPERACAO       | NO  | 14  |  x  |  x  |  x  |      |  x   |  x  |
-- NCM                    | NCM | 14  |  x  |  x  |  x  |      |  x   |  x  |
-- NFPRODUTO              | NFP | 26  |     |     |     |      |      |     |
-- NFSERVICO              | NFS | 27  |     |     |     |      |      |     |
-- NFSERVICOITEM          | NFSI| 27  |     |     |     |      |      |     |
-- OPERADORA              | OPE | 33  |  x  |  x  |  x  |      |  x   |  x  |
-- PADRAO                 | PDR | 10  |  x  |  x  |  x  |      |  x   |  x  |
-- PADRAOGRUPO            | PG  | 10  |  x  |  x  |  x  |      |  x   |  x  |
-- PADRAOTITULO           | PT  | 10  |  x  |  x  |  x  |      |  x   |  x  |
-- PAGAR                  | PGR | 28  |     |     |     |      |      |     |
-- PAGARMASTER            | PM  | 28  |     |     |     |      |      |     | Tabela do sistema que guarda master unica + numero de parcelas
-- PAGARTITULO            | PTT | 25  |  x  |  x  |  x  |      |  x   |  x  |
-- PAGARTIPO              | PTP | 25  |  x  |  x  |  x  |      |  x   |  x  |
-- PAIS                   | PAI | 08  |  x  |  x  |  x  |   x  |  x   |  x  |
-- PEDIDO                 | PDD | 37  |  x  |     |     |      |  x   |     |
-- PONTOESTOQUE           | PE  | 33  |  x  |  x  |  x  |      |  x   |  x  |
-- PONTOESTOQUEIND        | PEI | 33  |  x  |  x  |  x  |      |  x   |  x  | - Guarda individualmente favorecidos de cada ponto
-- PRODUTO                | PRD | 09  |     |     |     |      |      |     |
-- PRODUTOORIGEM          | PO  | 09  |  x  |  x  |  x  |      |  x   |  x  |
-- QUALIFICACAOCONT       | QC  | 03  |  x  |  x  |  x  |      |  x   |  x  |
-- R10FAVORECIDO          | R10 | 05  |     |     |     |      |      |     |
-- R02CONTRATO            | R02 | 15  |     |     |     |      |      |     |
-- R03CONTRATO            | R03 | 15  |     |     |     |      |      |     |
-- R07NFPRODUTO           | R07 | 26  |     |     |     |      |      |     |
-- RATEIO                 | RAT | 28  |     |     |     |      |      |     |
-- REGIAO                 | REG | 08  |  x  |  x  |  x  |  x   |  x   |  x  |
-----------------------------------------------------------------------
-- TABELA                 | RES | DIR | TBL | TRG | ESP | F10  | FORM | BKP |
-----------------------------------------------------------------------
-- SERIENF                | SNF | 22  |  x  |  x  |     |      |      |     |
-- SERVICO                | SRV | 04  |  x  |  x  |  x  |      |  x   |  x  |
-- SERVICOPREFEITURA      | SPR | 04  |  x  |  x  |  x  |      |  x   |  x  |
-- SPED                   | SPD | 12  |  x  |  x  |  x  |      |  x   |  x  |
-- TIPODOCUMENTO          | TD  | 20  |  x  |  x  |  x  |      |  x   |  x  |
-- TRANSPORTADORA         | TRN | 33  |  x  |  x  |  x  |      |  x   |  x  |
-- USUARIO                | USR | 01  |  x  |  x  |     |      |  x   |     | 
-- USUARIOEMPRESA         | UE  | 02  |  x  |     |     |      |      |     |
-- USUARIOPERFIL          | UP  | 01  |  x  |  x  |  x  |      |  x   |  x  |
-- USUARIOSISTEMA         | US  | **  |  x  |  ?  |  ?  |  ?   |  x   |  ?  |
-- VENDEDOR               | VND | 29  |  x  |  x  |  x  |      |  x   |  x  |

-------Para edi
-- PAGARTITULO      | PTT | 25  |  x  |  x  |     |      |      |     |

--
-- DIREITO 01 USUARIO/USUARIOPERFIL/CARGO
--         02 USUARIOEMPRESA
--         03 EMPRESA/FILIAL/CONTADOR/QUALIFICACAOCONT
--         04 SERVICO/SERVICOPREFEITURA
--         05 FAVORECIDO/R10FAVORECIDO
--         06 BANCO/BANCOCODIGO/BANCOSTATUS
--         07 COMPETENCIA
--         08 CIDADE/REGIAO/ESTADO/PAIS/LOGRADOURO/MOEDA
--         09 PRODUTO
--         10 PADRAO/PADRAOGRUPO/PADRAOTITULO/CNABARQUIVO/CNABENVIO
--         11 GRUPOFAVORECIDO
--         12 CATEGORIA/SPED
--         13 CONTACONTABIL/CONTARESUMO/BALANCO
--         14 CFOP/CSTICMS/CSTIPI/CSTPIS/CSTSIMPLES/NCM/NATUREZAOPERACAO
--         15 CONTRATO/R02CONTRATO
--         16 EMAIL
--         17 ALIQUOTASIMPLES
--         18 AGENDATAREFA
--         19 FERIADO 
--         20 FORMACOBRANCA/TIPODOCUMENTO
--         21 TRANSPORTADORA
--         22 SERIENF
--         23 IMPOSTO
--         24 EMBALAGEM
--         25 EMPRESARAMO/EMPRESAREGTRIB/EMPRESATIPO/EMPRESATRIBFED/PAGARTITULO/PAGARTIPO
--         26 NFPRODUTO/R07NFPRODUTO
--         27 NFSERVICO/NFSERVICOITEM
--         28 PAGAR/RATEIO
--         29 VENDEDOR
--         30 CNABERRO/CNABINSTRUCAO/CNABLAYOUT/CNABRETORNO
--         31 **TRANSFORMAR EM REGISTRO DO SISTEMA
--         32 AGENDA
--         33 PONTOESTOQUE/FABRICANTE/GRUPOPRODUTO/OPERADORA
--         34 BAIXA FINANCEIRA
--         35 MODELO/ESTOQUE
--         36 AUTO
--         37 PEDIDO
--         38 VEICULO/PARAMETROS(COR/TIPO/FABRICANTE/MODELO)
--         39 APROVAR PEDIDO
--***********************************************************************************
--                             F U N C T I O N S                                   **
--***********************************************************************************
GO
CREATE PROCEDURE dbo.prcGenerator
@Tabela VARCHAR(20)
,@Retorno INTEGER OUTPUT
AS
BEGIN
  SET NOCOUNT ON;
  UPDATE GENERATOR SET GNR_VALOR=(GNR_VALOR+1) WHERE GNR_CODIGO=@Tabela;
  SELECT @Retorno=GNR_VALOR FROM GENERATOR WHERE GNR_CODIGO=@Tabela;
END
GO
CREATE PROCEDURE dbo.prcNumNf
@Codigo INTEGER
,@Retorno INTEGER OUTPUT
AS
BEGIN
  SET NOCOUNT ON;  
  UPDATE SERIENF SET SNF_NFFIM=(SNF_NFFIM+1) WHERE SNF_CODIGO=@Codigo;
  SELECT @Retorno=(SNF_NFFIM-1) FROM SERIENF WHERE SNF_CODIGO=@Codigo;
END
GO
CREATE FUNCTION dbo.fncCampoRegInc(@parAdmPub VARCHAR(1),@parReg VARCHAR(1),@parDir31 INTEGER)
RETURNS VARCHAR(70)
AS
BEGIN
  DECLARE @retorno VARCHAR(70) = 'OK';
  IF( (@parAdmPub='P') AND (@parReg='A') )
    SET @retorno='USUARIO COM STATUS PUB NAO PODE INCLUIR UM REGISTRO DO ADMINISTRADOR';
  IF( (@parAdmPub='P') AND (@parReg='S') )
    SET @retorno='USUARIO COM STATUS PUB NAO PODE INCLUIR UM REGISTRO DO SISTEMA';
  IF( (@parReg='S') AND (@parDir31<>4) )    
    SET @retorno='USUARIO NAO POSSUI DIREITO 31 PARA CADASTRAR REGISTRO DO SISTEMA';
  RETURN @retorno;    
END
GO
CREATE FUNCTION dbo.fncCampoRegAlt(@parAdmPub VARCHAR(1),@parRegOld VARCHAR(1),@parRegNew VARCHAR(1),@parDir31 INTEGER)
RETURNS VARCHAR(70)
AS
BEGIN
  DECLARE @retorno VARCHAR(70) = 'OK';
  IF( (@parAdmPub='P') AND (@parRegNew='A') )
    SET @retorno='USUARIO COM STATUS PUB NAO PODE ALTERAR UM REGISTRO DO ADMINISTRADOR';
  IF( @parRegOld='S' )
    SET @retorno='REGISTRO DO SISTEMA NAO PODE SER ALTERADO';
  IF( (@parRegNew='S') AND (@parDir31<>4) )    
    SET @retorno='USUARIO NAO POSSUI DIREITO 31 PARA ALTERAR COMO REGISTRO DO SISTEMA';
  RETURN @retorno;    
END
GO
CREATE FUNCTION dbo.fncCampoRegExc(@parAdmPub VARCHAR(1),@parReg VARCHAR(1))
RETURNS VARCHAR(70)
AS
BEGIN
  DECLARE @retorno VARCHAR(70) = 'OK';
  IF( (@parAdmPub='P') AND (@parReg='A') )
    SET @retorno='USUARIO COM STATUS PUB NAO PODE EXCLUIR UM REGISTRO DO ADMINISTRADOR';
  IF( @parReg='S' )
    SET @retorno='REGISTRO DO SISTEMA NAO PODE SER ALTERADO';
  RETURN @retorno;    
END
GO
CREATE FUNCTION dbo.fncTranslate(@string_in VARCHAR(120),@tamanho INTEGER)
RETURNS VARCHAR(120)
AS
BEGIN
  DECLARE @string_1 VARCHAR(120)
  DECLARE @string_2 VARCHAR(120)
  SET @string_1='ªµºÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜYßàáâãäåæçèéêëìíîï¿ñòóôõöùúûüÿ¿øØÞðÐ¿¿¿¿Ýý¿ÿ¨"#&*+{}'
  SET @string_2='auoAAAAAAACEEEEIIIINOOOOOUUUUYSaaaaaaaceeeeiiiiDnooooouuuuyyoODdDOoSsYyYy||||||||'
  --
  --
  DECLARE @string_out VARCHAR(120)
  DECLARE @string CHAR(1)
  DECLARE @i SMALLINT
  DECLARE @pos SMALLINT
  DECLARE @list TABLE(indx SMALLINT,string CHAR(1),trans BIT)
  --
  --
  SELECT @string_out = '',@i = 1,@pos = 0
  WHILE @i <= LEN(@string_in) BEGIN
    INSERT INTO @list VALUES (@i,SUBSTRING(@string_in, @i, 1),0)
    SELECT @i = @i + 1
  END
  --
  --
  SELECT @i = 1
  WHILE @i <= LEN(@string_1) BEGIN
    UPDATE @list
       SET string = SUBSTRING(@string_2, @i, 1),
           trans = 1
     WHERE ASCII(string) = ASCII(SUBSTRING(@string_1, @i, 1))
       AND trans = 0
    SELECT @i = @i + 1
  END
  SELECT @pos = MAX(indx),@i = 1
    FROM @list 
  WHILE @i <= @pos BEGIN
    SELECT @string = string
      FROM @list
     WHERE indx = @i
    SELECT @string_out = @string_out + @string
    SELECT @i = @i + 1
  END
  SET @string_out=REPLACE(@string_out,'|','');
  SET @string_out=UPPER(RTRIM(LTRIM(@string_out)));
  IF( @tamanho>0 )
    SET @string_out=SUBSTRING(@string_out,1,@tamanho);
  IF( @string_out='' ) SET @string_out=NULL;  
  RETURN @string_out;
END
GO
CREATE FUNCTION [dbo].[fncDigitosValidos](@parCampo VARCHAR(30),@parString VARCHAR(60),@parFlag INTEGER)
RETURNS VARCHAR(1)
AS
BEGIN
  DECLARE @retorno VARCHAR(1);
  DECLARE @tam INTEGER;
  DECLARE @dig VARCHAR(1);
  --DECLARE @validos VARCHAR(60);
  
  SET @retorno  = 'F';
  SET @tam      = 1;
	-------------------------------------------------------------
	-- FLAG 1 = SN
	--      2 = PAB
	-------------------------------------------------------------
  IF( @parFlag=1 ) BEGIN
    IF( (@parString='S') OR (@parString='N') ) BEGIN
      SET @retorno  = 'T';  
    END
  END
  RETURN @retorno;
END
--***********************************************************************************
--                         T A B E L A S / V I E W S                               **
--***********************************************************************************
-------------------------------------------------------------------------------------
--                                A G E N D A                                      --
--tblagenda
-------------------------------------------------------------------------------------
GO
CREATE TABLE AGENDA(
  AGE_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,AGE_CODAT INTEGER NOT NULL
  ,AGE_RESPONSAVEL VARCHAR(15) NOT NULL
  ,AGE_VENCTO DATE NOT NULL
  ,AGE_DTCADASTRO DATE DEFAULT GETDATE() NOT NULL
  ,AGE_CADASTROU VARCHAR(15) NOT NULL
  ,AGE_DTBAIXA DATE
  ,AGE_CODEMP INTEGER NOT NULL
  ,AGE_REG VARCHAR(1) NOT NULL
  ,AGE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_ageReg CHECK( AGE_REG IN('A','P','S')));
GO
CREATE VIEW VAGENDA AS
  SELECT AGE_CODIGO,AGE_CODAT,AGE_RESPONSAVEL,AGE_VENCTO,AGE_DTCADASTRO
         ,AGE_CADASTROU,AGE_DTBAIXA,AGE_CODEMP,AGE_REG,AGE_CODUSR FROM AGENDA
GO
CREATE TABLE dbo.BKPAGENDA(
  AGE_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,AGE_ACAO VARCHAR(1) NOT NULL
  ,AGE_DATA DATE DEFAULT GETDATE() NOT NULL
  ,AGE_CODIGO INTEGER NOT NULL 
  ,AGE_CODAT INTEGER NOT NULL
  ,AGE_RESPONSAVEL VARCHAR(15) NOT NULL
  ,AGE_VENCTO DATE NOT NULL
  ,AGE_DTCADASTRO DATE DEFAULT GETDATE() NOT NULL
  ,AGE_CADASTROU VARCHAR(15) NOT NULL
  ,AGE_DTBAIXA DATE
  ,AGE_CODEMP INTEGER NOT NULL
  ,AGE_REG VARCHAR(1) NOT NULL
  ,AGE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpAgeAcao CHECK( AGE_ACAO IN('I','A','E'))  
);
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- AGE_CODIGO     | PK  |    |    | INT                | Auto incremento
   -- AGE_CODAT      |     |    |    | INT NN             | Campo relacionado (AGENDATAREFA)
   -- AT_NOME        |     |    |    | VC(40) NN          | Campo relacionado (AGENDATAREFA)   
   -- AGE_RESPONSAVEL|     |    |    | VC(15) NN          | Nome do usuario responsavel soh ele/quem cadastrou pode alterar 
   -- AGE_VENCTO     |     |    |    | DAT NN             |
   -- AGE_DTCADASTRO | DEF |    |    | DAT NN             | Campo automatico
   -- AGE_CADASTROU  |     |    |    | VC(15) NN          | Nome do usuario que cadastrou
   -- AGE_DTBAIXA    |     |    |    | DAT                |
   -- AGE_CODE       | REL |    |    | INT NN             | Campo relacionado (EMPRESA)            
   -- EMP_APELIDO    | REL |    |    | VC(15)             | Campo relacionado (EMPRESA)               
   -- AGE_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- AGE_CODUSR     | REL |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D32         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
--         
--         
-------------------------------------------------------------------------------------
--                              A G E N D A T A R E F A                            --
--tblagendatarefa
-------------------------------------------------------------------------------------
GO
CREATE TABLE AGENDATAREFA(
  AT_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,AT_NOME VARCHAR(40) NOT NULL
  ,AT_ATIVO VARCHAR(1) NOT NULL
  ,AT_REG VARCHAR(1) NOT NULL
  ,AT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_atAtivo CHECK( AT_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_atReg CHECK( AT_REG IN('A','P','S')));
GO
CREATE VIEW VAGENDATAREFA AS
  SELECT AT_CODIGO,AT_NOME,AT_ATIVO,AT_REG,AT_CODUSR FROM AGENDATAREFA
GO  
CREATE TABLE dbo.BKPAGENDATAREFA(
  AT_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,AT_ACAO VARCHAR(1) NOT NULL
  ,AT_DATA DATE DEFAULT GETDATE() NOT NULL
  ,AT_CODIGO INTEGER NOT NULL
  ,AT_NOME VARCHAR(40) NOT NULL
  ,AT_ATIVO VARCHAR(1) NOT NULL
  ,AT_REG VARCHAR(1) NOT NULL
  ,AT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpAtAcao CHECK( AT_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                      A L I Q U O T A S I M P L E S                              --
--tblaliquotasimples
-------------------------------------------------------------------------------------
GO
CREATE TABLE ALIQUOTASIMPLES(
  AS_ANEXO INTEGER NOT NULL
  ,AS_ITEM INTEGER NOT NULL
  ,AS_CODEMP INTEGER NOT NULL  
  ,AS_VLRINI NUMERIC(15,2) NOT NULL
  ,AS_VLRFIM NUMERIC(15,2) NOT NULL
  ,AS_ALIQUOTA NUMERIC(15,2) NOT NULL
  ,AS_IRPJ NUMERIC(15,2) NOT NULL
  ,AS_CSLL NUMERIC(15,2) NOT NULL
  ,AS_COFINS NUMERIC(15,2) NOT NULL
  ,AS_PIS NUMERIC(15,2) NOT NULL
  ,AS_CPP NUMERIC(15,2) NOT NULL
  ,AS_ICMS NUMERIC(15,2) NOT NULL
  ,AS_IPI NUMERIC(15,2) NOT NULL
  ,AS_ISS NUMERIC(15,2) NOT NULL
  ,AS_REG VARCHAR(1) NOT NULL
  ,AS_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_asReg CHECK( AS_REG IN('A','P','S'))
  ,CONSTRAINT PKALIQUOTASIMPLES PRIMARY KEY(AS_ANEXO,AS_ITEM,AS_CODEMP));  
GO  
CREATE VIEW VALIQUOTASIMPLES AS
  SELECT AS_ANEXO,AS_ITEM,AS_CODEMP,AS_VLRINI,AS_VLRFIM,AS_ALIQUOTA,AS_IRPJ,AS_CSLL,AS_COFINS
         ,AS_PIS,AS_CPP,AS_ICMS,AS_IPI,AS_ISS,AS_REG,AS_CODUSR FROM ALIQUOTASIMPLES
GO         
CREATE TABLE dbo.BKPALIQUOTASIMPLES(
  AS_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,AS_ACAO VARCHAR(1) NOT NULL
  ,AS_DATA DATE DEFAULT GETDATE() NOT NULL
  ,AS_ANEXO INTEGER NOT NULL
  ,AS_ITEM INTEGER NOT NULL
  ,AS_CODEMP INTEGER NOT NULL  
  ,AS_VLRINI NUMERIC(15,2) NOT NULL
  ,AS_VLRFIM NUMERIC(15,2) NOT NULL
  ,AS_ALIQUOTA NUMERIC(15,2) NOT NULL
  ,AS_IRPJ NUMERIC(15,2) NOT NULL
  ,AS_CSLL NUMERIC(15,2) NOT NULL
  ,AS_COFINS NUMERIC(15,2) NOT NULL
  ,AS_PIS NUMERIC(15,2) NOT NULL
  ,AS_CPP NUMERIC(15,2) NOT NULL
  ,AS_ICMS NUMERIC(15,2) NOT NULL
  ,AS_IPI NUMERIC(15,2) NOT NULL
  ,AS_ISS NUMERIC(15,2) NOT NULL
  ,AS_REG VARCHAR(1) NOT NULL
  ,AS_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpAsAcao CHECK( AS_ACAO IN('I','A','E'))  
);
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- AS_ANEXO       | PK  |    |    | INT                | 
   -- AS_ITEM        | PK  |    |    | INT                |    
   -- AS_CODEMP      | PK  |    |    | INT NN             | Campo relacionado (EMPRESA)  
   -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
   -- AS_VLRINI      |     |    |    | NUM(15,2) NN       |
   -- AS_VLRFIM      |     |    |    | NUM(15,2) NN       |
   -- AS_ALIQUOTA    |     |    |    | NUM(15,2) NN       |
   -- AS_IRPJ        |     |    |    | NUM(15,2) NN       |
   -- AS_CSLL        |     |    |    | NUM(15,2) NN       |
   -- AS_COFINS      |     |    |    | NUM(15,2) NN       |
   -- AS_PIS         |     |    |    | NUM(15,2) NN       |
   -- AS_CPP         |     |    |    | NUM(15,2) NN       |
   -- AS_ICMS        |     |    |    | NUM(15,2) NN       |
   -- AS_IPI         |     |    |    | NUM(15,2) NN       |
   -- AS_ISS         |     |    |    | NUM(15,2) NN       |
   -- AS_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- AS_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D17         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
-------------------------------------------------------------------------------------
--                           A U T O C O M P O S I C A O
--tblautocomposicao
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.AUTOCOMPOSICAO(
  AC_CODAMP INTEGER NOT NULL
  ,AC_CODGMP INTEGER NOT NULL
  ,AC_STATUS VARCHAR(3) NOT NULL
  ,AC_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_acStatus CHECK( AC_STATUS IN('ATV','EXC'))  
  ,CONSTRAINT PKAUTOCOMPOSICAO PRIMARY KEY (AC_CODAMP,AC_CODGMP)      
);
GO
CREATE VIEW VAUTOCOMPOSICAO AS
  SELECT AC_CODAMP,AC_CODGMP,AC_STATUS,AC_CODUSR 
    FROM AUTOCOMPOSICAO
GO
CREATE TABLE dbo.BKPAUTOCOMPOSICAO(
  AC_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,AC_ACAO VARCHAR(1) NOT NULL
  ,AC_DATA DATE DEFAULT GETDATE() NOT NULL
  ,AC_CODAMP INTEGER NOT NULL
  ,AC_CODGMP INTEGER NOT NULL
  ,AC_STATUS VARCHAR(3) NOT NULL
  ,AC_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpAcAcao CHECK( AC_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                              B A L A N C O                                      --
--tblbalanco
-------------------------------------------------------------------------------------
GO
CREATE TABLE BALANCO(
  BLN_CODIGO VARCHAR(15) PRIMARY KEY NOT NULL
  ,BLN_NOME VARCHAR(40) NOT NULL
  ,BLN_CODSPD VARCHAR(2) NOT NULL
  ,BLN_ATIVO VARCHAR(1) NOT NULL
  ,BLN_REG VARCHAR(1) NOT NULL
  ,BLN_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_blnAtivo CHECK( BLN_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_blnReg CHECK( BLN_REG IN('A','P','S')));
GO
CREATE VIEW VBALANCO AS
  SELECT BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR FROM BALANCO
GO  
CREATE TABLE dbo.BKPBALANCO(
  BLN_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,BLN_ACAO VARCHAR(1) NOT NULL
  ,BLN_DATA DATE DEFAULT GETDATE() NOT NULL
  ,BLN_CODIGO VARCHAR(15) NOT NULL
  ,BLN_NOME VARCHAR(40) NOT NULL
  ,BLN_CODSPD VARCHAR(2) NOT NULL
  ,BLN_ATIVO VARCHAR(1) NOT NULL
  ,BLN_REG VARCHAR(1) NOT NULL
  ,BLN_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpBlnAcao CHECK( BLN_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                B A N C O                                        --
--tblbanco
-------------------------------------------------------------------------------------
GO
CREATE TABLE BANCO(
  BNC_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,BNC_CODEMP INTEGER NOT NULL  
  ,BNC_NOME VARCHAR(40) NOT NULL  
  ,BNC_CODFVR INTEGER NOT NULL
  ,BNC_CODCC VARCHAR(15) NOT NULL
  ,BNC_ENTRAFLUXO VARCHAR(1) NOT NULL
  ,BNC_CODBST VARCHAR(3) NOT NULL
  ,BNC_PADRAOFLUXO VARCHAR(1) NOT NULL
  ,BNC_CODBCD VARCHAR(6) NOT NULL
  ,BNC_AGENCIA VARCHAR(8)
  ,BNC_AGENCIADV VARCHAR(1)
  ,BNC_CONTA VARCHAR(20)
  ,BNC_CONTADV VARCHAR(1)
  ,BNC_SALDO NUMERIC(15,2) NOT NULL
  ,BNC_ATIVO VARCHAR(1) NOT NULL
  ,BNC_REG VARCHAR(1) NOT NULL
  ,BNC_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bncEntraFluxo CHECK( BNC_ENTRAFLUXO IN('S','N'))
  ,CONSTRAINT chk_bncPadraoFluxo CHECK( BNC_PADRAOFLUXO IN('S','N'))  
  ,CONSTRAINT chk_bncAtivo CHECK( BNC_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_bncReg CHECK( BNC_REG IN('A','P','S')));
GO
CREATE VIEW VBANCO AS
  SELECT BNC_CODIGO
         ,BNC_CODEMP
         ,BNC_NOME
         ,BNC_CODFVR
         ,BNC_CODCC
         ,BNC_ENTRAFLUXO
         ,BNC_CODBST
         ,BNC_PADRAOFLUXO
         ,BNC_CODBCD
         ,BNC_AGENCIA
         ,BNC_AGENCIADV
         ,BNC_CONTA
         ,BNC_CONTADV
         ,BNC_SALDO
         ,BNC_ATIVO
         ,BNC_REG
         ,BNC_CODUSR
    FROM BANCO
GO  
CREATE TABLE dbo.BKPBANCO(
  BNC_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,BNC_ACAO VARCHAR(1) NOT NULL
  ,BNC_DATA DATE DEFAULT GETDATE() NOT NULL
  ,BNC_CODIGO INTEGER NOT NULL 
  ,BNC_CODEMP INTEGER NOT NULL  
  ,BNC_NOME VARCHAR(40) NOT NULL  
  ,BNC_CODFVR INTEGER NOT NULL
  ,BNC_CODCC VARCHAR(15) NOT NULL
  ,BNC_ENTRAFLUXO VARCHAR(1) NOT NULL
  ,BNC_CODBST VARCHAR(3) NOT NULL
  ,BNC_PADRAOFLUXO VARCHAR(1) NOT NULL
  ,BNC_CODBCD VARCHAR(6) NOT NULL
  ,BNC_AGENCIA VARCHAR(8)
  ,BNC_AGENCIADV VARCHAR(1)
  ,BNC_CONTA VARCHAR(20)
  ,BNC_CONTADV VARCHAR(1)
  ,BNC_ATIVO VARCHAR(1) NOT NULL
  ,BNC_REG VARCHAR(1) NOT NULL
  ,BNC_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpBncAcao CHECK( BNC_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                B A N C O C O D I G O
--tblbancocodigo
-------------------------------------------------------------------------------------
GO
CREATE TABLE BANCOCODIGO(
  BCD_CODIGO VARCHAR(6) PRIMARY KEY NOT NULL
  ,BCD_NOME VARCHAR(30) NOT NULL
  ,BCD_ATIVO VARCHAR(1) NOT NULL
  ,BCD_REG VARCHAR(1) NOT NULL
  ,BCD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bcdAtivo CHECK( BCD_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_bcdReg CHECK( BCD_REG IN('A','P','S')));
GO
CREATE VIEW VBANCOCODIGO AS
  SELECT BCD_CODIGO,BCD_NOME,BCD_ATIVO,BCD_REG,BCD_CODUSR FROM BANCOCODIGO
GO  
CREATE TABLE dbo.BKPBANCOCODIGO(
  BCD_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,BCD_ACAO VARCHAR(1) NOT NULL
  ,BCD_DATA DATE DEFAULT GETDATE() NOT NULL
  ,BCD_CODIGO VARCHAR(6) NOT NULL
  ,BCD_NOME VARCHAR(30) NOT NULL
  ,BCD_ATIVO VARCHAR(1) NOT NULL
  ,BCD_REG VARCHAR(1) NOT NULL
  ,BCD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpBcdAcao CHECK( BCD_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                B A N C O S T A T U S
--tblbancostatus
-------------------------------------------------------------------------------------
GO
CREATE TABLE BANCOSTATUS(
  BST_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,BST_NOME VARCHAR(20) NOT NULL
  ,BST_ATIVO VARCHAR(1) NOT NULL
  ,BST_REG VARCHAR(1) NOT NULL
  ,BST_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bstAtivo CHECK( BST_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_bstReg CHECK( BST_REG IN('A','P','S')));
GO
CREATE VIEW VBANCOSTATUS AS
  SELECT BST_CODIGO,BST_NOME,BST_ATIVO,BST_REG,BST_CODUSR FROM BANCOSTATUS
GO  
CREATE TABLE dbo.BKPBANCOSTATUS(
  BST_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,BST_ACAO VARCHAR(1) NOT NULL
  ,BST_DATA DATE DEFAULT GETDATE() NOT NULL
  ,BST_CODIGO VARCHAR(3) NOT NULL
  ,BST_NOME VARCHAR(20) NOT NULL
  ,BST_ATIVO VARCHAR(1) NOT NULL
  ,BST_REG VARCHAR(1) NOT NULL
  ,BST_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpBstAcao CHECK( BST_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                     C A R G O                                   
--tblcargo
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.CARGO(
  CRG_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,CRG_NOME VARCHAR(20) NOT NULL
  ,CRG_ATIVO VARCHAR(1) NOT NULL
  ,CRG_REG VARCHAR(1) NOT NULL
  ,CRG_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_crgAtivo CHECK( CRG_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_crgReg CHECK( CRG_REG IN('A','P','S'))
);
GO
CREATE VIEW VCARGO AS
  SELECT CRG_CODIGO,CRG_NOME,CRG_ATIVO,CRG_REG,CRG_CODUSR FROM CARGO
GO  
CREATE TABLE dbo.BKPCARGO(
  CRG_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CRG_ACAO VARCHAR(1) NOT NULL
  ,CRG_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CRG_CODIGO VARCHAR(3) NOT NULL
  ,CRG_NOME VARCHAR(20) NOT NULL
  ,CRG_ATIVO VARCHAR(1) NOT NULL
  ,CRG_REG VARCHAR(1) NOT NULL
  ,CRG_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCrgAcao CHECK( CRG_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                              C A T E G O R I A                                  --
--tblcategoria
-------------------------------------------------------------------------------------
GO
CREATE TABLE CATEGORIA(
  CTG_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,CTG_NOME VARCHAR(20) NOT NULL
  ,CTG_FISJUR VARCHAR(2) NOT NULL
  ,CTG_ATIVO VARCHAR(1) NOT NULL
  ,CTG_REG VARCHAR(1) NOT NULL
  ,CTG_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_ctgFj CHECK( CTG_FISJUR IN('F','J','FJ'))  
  ,CONSTRAINT chk_ctgAtivo CHECK( CTG_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ctgReg CHECK( CTG_REG IN('A','P','S'))
);
GO
CREATE VIEW VCATEGORIA AS
  SELECT CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR FROM CATEGORIA
GO  
CREATE TABLE dbo.BKPCATEGORIA(
  CTG_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CTG_ACAO VARCHAR(1) NOT NULL
  ,CTG_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CTG_CODIGO VARCHAR(3) NOT NULL
  ,CTG_NOME VARCHAR(20) NOT NULL
  ,CTG_FISJUR VARCHAR(2) NOT NULL
  ,CTG_ATIVO VARCHAR(1) NOT NULL
  ,CTG_REG VARCHAR(1) NOT NULL
  ,CTG_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCtgAcao CHECK( CTG_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                   C F O P
--tblcfop
-------------------------------------------------------------------------------------
GO
CREATE TABLE CFOP(
  CFO_CODIGO VARCHAR(5) PRIMARY KEY NOT NULL
  ,CFO_NOME VARCHAR(60) NOT NULL
  ,CFO_ENTSAI VARCHAR(1) NOT NULL
  ,CFO_RELCOMPRA VARCHAR(1) NOT NULL
  ,CFO_RELVENDA VARCHAR(1) NOT NULL
  ,CFO_ATIVO VARCHAR(1) NOT NULL
  ,CFO_REG VARCHAR(1) NOT NULL
  ,CFO_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_cfoCodigo CHECK( CFO_CODIGO LIKE('[0-9][.][0-9][0-9][0-9]'))  
  ,CONSTRAINT chk_cfoEntSai CHECK( CFO_ENTSAI IN('E','S'))  
  ,CONSTRAINT chk_cfoRelCompra CHECK( CFO_RELCOMPRA IN('S','N'))  
  ,CONSTRAINT chk_cfoRelVenda CHECK( CFO_RELVENDA IN('S','N'))  
  ,CONSTRAINT chk_cfoAtivo CHECK( CFO_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_cfoReg CHECK( CFO_REG IN('A','P','S')));
GO
CREATE VIEW VCFOP AS
  SELECT CFO_CODIGO,CFO_NOME,CFO_ENTSAI,CFO_RELCOMPRA,CFO_RELVENDA,CFO_ATIVO,CFO_REG,CFO_CODUSR FROM CFOP
GO
CREATE TABLE dbo.BKPCFOP(
  CFO_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CFO_ACAO VARCHAR(1) NOT NULL
  ,CFO_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CFO_CODIGO VARCHAR(5) NOT NULL
  ,CFO_NOME VARCHAR(60) NOT NULL
  ,CFO_ENTSAI VARCHAR(1) NOT NULL
  ,CFO_RELCOMPRA VARCHAR(1) NOT NULL
  ,CFO_RELVENDA VARCHAR(1) NOT NULL
  ,CFO_ATIVO VARCHAR(1) NOT NULL
  ,CFO_REG VARCHAR(1) NOT NULL
  ,CFO_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCfoAcao CHECK( CFO_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                               C I D A D E
--tblcidade
-------------------------------------------------------------------------------------
GO
CREATE TABLE CIDADE(
  CDD_CODIGO VARCHAR(7) PRIMARY KEY NOT NULL
  ,CDD_NOME VARCHAR(30) NOT NULL
  ,CDD_CODEST VARCHAR(3) NOT NULL
  ,CDD_DDD INTEGER DEFAULT 0 NOT NULL
  ,CDD_LATITUDE NUMERIC(15,8) NOT NULL
  ,CDD_LONGITUDE NUMERIC(15,8) NOT NULL
  ,CDD_ATIVO VARCHAR(1) NOT NULL
  ,CDD_REG VARCHAR(1) NOT NULL
  ,CDD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_cddCodigo CHECK( CDD_CODIGO LIKE('[0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))  
  ,CONSTRAINT chk_cddAtivo CHECK( CDD_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_cddReg CHECK( CDD_REG IN('A','P','S'))
);
GO
CREATE VIEW VCIDADE AS
  SELECT CDD_CODIGO,CDD_NOME,CDD_CODEST,CDD_DDD,CDD_LATITUDE,CDD_LONGITUDE,CDD_ATIVO,CDD_REG,CDD_CODUSR FROM CIDADE
GO  
CREATE TABLE dbo.BKPCIDADE(
  CDD_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CDD_ACAO VARCHAR(1) NOT NULL
  ,CDD_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CDD_CODIGO VARCHAR(7) NOT NULL
  ,CDD_NOME VARCHAR(30) NOT NULL
  ,CDD_CODEST VARCHAR(3) NOT NULL
  ,CDD_DDD INTEGER DEFAULT 0 NOT NULL
  ,CDD_LATITUDE NUMERIC(15,8) NOT NULL
  ,CDD_LONGITUDE NUMERIC(15,8) NOT NULL
  ,CDD_ATIVO VARCHAR(1) NOT NULL
  ,CDD_REG VARCHAR(1) NOT NULL
  ,CDD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCddAcao CHECK( CDD_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                          C N A B E R R O                                        --
--tblcnaberro
-------------------------------------------------------------------------------------
GO
CREATE TABLE CNABERRO(
  ERR_CODBCD VARCHAR(6) NOT NULL
  ,ERR_CODPTP VARCHAR(2) NOT NULL       --PAGARTIPO
  ,ERR_CODIGO VARCHAR(10) NOT NULL
  ,ERR_NOME VARCHAR(100) NOT NULL
  ,ERR_EXECUTA VARCHAR(1) NOT NULL
  ,ERR_ATIVO VARCHAR(1) NOT NULL
  ,ERR_REG VARCHAR(1) NOT NULL
  ,ERR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_errExecuta CHECK( ERR_EXECUTA IN('A','B','P','R'))  
  ,CONSTRAINT chk_errAtivo CHECK( ERR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_errReg CHECK( ERR_REG IN('A','P','S'))  
  ,CONSTRAINT PKCNABERRO PRIMARY KEY (ERR_CODBCD, ERR_CODPTP, ERR_CODIGO));
GO
CREATE VIEW VCNABERRO AS
  SELECT ERR_CODBCD
         ,ERR_CODPTP
         ,ERR_CODIGO
         ,ERR_NOME
         ,ERR_EXECUTA
         ,ERR_ATIVO
         ,ERR_REG
         ,ERR_CODUSR
    FROM CNABERRO
GO    
CREATE TABLE dbo.BKPCNABERRO(
  ERR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,ERR_ACAO VARCHAR(1) NOT NULL
  ,ERR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,ERR_CODBCD VARCHAR(6) NOT NULL
  ,ERR_CODPTP VARCHAR(2) NOT NULL
  ,ERR_CODIGO VARCHAR(10) NOT NULL
  ,ERR_NOME VARCHAR(100) NOT NULL
  ,ERR_EXECUTA VARCHAR(1) NOT NULL
  ,ERR_ATIVO VARCHAR(1) NOT NULL
  ,ERR_REG VARCHAR(1) NOT NULL
  ,ERR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpErrAcao CHECK( ERR_ACAO IN('I','A','E'))  
);
--
--   
-------------------------------------------------------------------------------------
--                          C N A B I N S T R U C A O                              --
--tblcnabinstrucai
-------------------------------------------------------------------------------------
GO
CREATE TABLE CNABINSTRUCAO(
  CI_CODIGO VARCHAR(6) NOT NULL
  ,CI_CODBCD VARCHAR(6) NOT NULL
  ,CI_NOME VARCHAR(30) NOT NULL
  ,CI_ATIVO VARCHAR(1) NOT NULL
  ,CI_REG VARCHAR(1) NOT NULL
  ,CI_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_ciAtivo CHECK( CI_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ciReg CHECK( CI_REG IN('A','P','S'))  
  ,CONSTRAINT PKTABCNABINSTRUCAO PRIMARY KEY (CI_CODIGO, CI_CODBCD));
GO
CREATE VIEW VCNABINSTRUCAO AS
  SELECT CI_CODIGO
         ,CI_CODBCD
         ,CI_NOME
         ,CI_ATIVO
         ,CI_REG
         ,CI_CODUSR
    FROM CNABINSTRUCAO
GO    
CREATE TABLE dbo.BKPCNABINSTRUCAO(
  CI_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CI_ACAO VARCHAR(1) NOT NULL
  ,CI_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CI_CODIGO VARCHAR(6) NOT NULL
  ,CI_CODBCD VARCHAR(6) NOT NULL
  ,CI_NOME VARCHAR(30) NOT NULL
  ,CI_ATIVO VARCHAR(1) NOT NULL
  ,CI_REG VARCHAR(1) NOT NULL
  ,CI_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCiAcao CHECK( CI_ACAO IN('I','A','E'))  
);
--
--
-------------------------------------------------------------------------------------
--                          C N A B R E T O R N O                                  --
--tblcnabretorno
-------------------------------------------------------------------------------------
GO
CREATE TABLE CNABRETORNO(
  CR_CODIGO VARCHAR(6) NOT NULL
  ,CR_CODBCD VARCHAR(6) NOT NULL
  ,CR_NOME VARCHAR(30) NOT NULL
  ,CR_EXECUTA VARCHAR(3) NOT NULL
  ,CR_ATIVO VARCHAR(1) NOT NULL
  ,CR_REG VARCHAR(1) NOT NULL
  ,CR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_crExecuta CHECK( CR_EXECUTA IN('AGE','BAI','REC','IA','INA','BM','PRO'))  
  ,CONSTRAINT chk_crAtivo CHECK( CR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_crReg CHECK( CR_REG IN('A','P','S'))
  ,CONSTRAINT PKCNABRETORNO PRIMARY KEY (CR_CODIGO, CR_CODBCD));
GO
CREATE VIEW VCNABRETORNO AS
  SELECT CR_CODIGO
         ,CR_CODBCD
         ,CR_NOME
         ,CR_EXECUTA
         ,CR_ATIVO
         ,CR_REG
         ,CR_CODUSR
  FROM CNABRETORNO
GO
CREATE TABLE dbo.BKPCNABRETORNO(
  CR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CR_ACAO VARCHAR(1) NOT NULL
  ,CR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CR_CODIGO VARCHAR(6) NOT NULL
  ,CR_CODBCD VARCHAR(6) NOT NULL
  ,CR_NOME VARCHAR(30) NOT NULL
  ,CR_EXECUTA VARCHAR(3) NOT NULL
  ,CR_ATIVO VARCHAR(1) NOT NULL
  ,CR_REG VARCHAR(1) NOT NULL
  ,CR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCrAcao CHECK( CR_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             C O M P E T E N C I A                               --
-- Tabela multi-empresa                                                            --
-- Campo ativo informa se aceita lancamento
--tblcompetencia
-------------------------------------------------------------------------------------
CREATE TABLE COMPETENCIA(
  CMP_CODIGO INTEGER NOT NULL
  ,CMP_CODEMP INTEGER NOT NULL
  ,CMP_NOME VARCHAR(6) NOT NULL
  ,CMP_FECHAMENTO VARCHAR(1) NOT NULL
  ,CMP_ATIVO VARCHAR(1) NOT NULL
  ,CMP_REG VARCHAR(1) NOT NULL
  ,CMP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_cmpNome CHECK( CMP_NOME LIKE('[A-Z][A-Z][A-Z][/][0-9][0-9]'))    
  ,CONSTRAINT chk_cmpFechamento CHECK( CMP_FECHAMENTO IN('S','N'))      
  ,CONSTRAINT chk_cmpAtivo CHECK( CMP_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_cmpReg CHECK( CMP_REG IN('A','P','S'))
  ,CONSTRAINT PKCOMPETENCIA PRIMARY KEY(CMP_CODIGO,CMP_CODEMP));    
GO
CREATE VIEW VCOMPETENCIA AS
  SELECT CMP_CODIGO
         ,CMP_CODEMP
         ,CMP_NOME
         ,CMP_FECHAMENTO
         ,CMP_ATIVO
         ,CMP_REG
         ,CMP_CODUSR
  FROM COMPETENCIA
GO
CREATE TABLE dbo.BKPCOMPETENCIA(
  CMP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CMP_ACAO VARCHAR(1) NOT NULL
  ,CMP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CMP_CODIGO INTEGER NOT NULL
  ,CMP_CODEMP INTEGER NOT NULL
  ,CMP_NOME VARCHAR(6) NOT NULL
  ,CMP_FECHAMENTO VARCHAR(1) NOT NULL
  ,CMP_ATIVO VARCHAR(1) NOT NULL
  ,CMP_REG VARCHAR(1) NOT NULL
  ,CMP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCmpAcao CHECK( CMP_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             C O N T A C O N T A B I L                           --
--tblcontacontabil
-------------------------------------------------------------------------------------
GO
CREATE TABLE CONTACONTABIL(
  CC_CODIGO VARCHAR(15) PRIMARY KEY NOT NULL
  ,CC_NOME VARCHAR(40) NOT NULL
  ,CC_LANCTO VARCHAR(1) NOT NULL
  ,CC_CODCTR VARCHAR(9) DEFAULT '0.00.0000' NOT NULL
  ,CC_F10 VARCHAR(1) NOT NULL  
  ,CC_ATIVO VARCHAR(1) NOT NULL
  ,CC_REG VARCHAR(1) NOT NULL
  ,CC_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_ccCodigo CHECK( CC_CODIGO LIKE('[0-9][.][0-9][0-9][.][0-9][0-9][.][0-9][0-9][.][0-9][0-9][0-9][0-9]'))  
  ,CONSTRAINT chk_ccLancto CHECK( CC_LANCTO IN('S','N'))  
  ,CONSTRAINT chk_ccF10 CHECK( CC_F10 IN('S','N'))    
  ,CONSTRAINT chk_ccAtivo CHECK( CC_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ccReg CHECK( CC_REG IN('A','P','S')));
GO
CREATE VIEW VCONTACONTABIL AS
  SELECT CC_CODIGO,CC_NOME,CC_LANCTO,CC_CODCTR,CC_F10,CC_ATIVO,CC_REG,CC_CODUSR FROM CONTACONTABIL
GO  
CREATE TABLE dbo.BKPCONTACONTABIL(
  CC_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CC_ACAO VARCHAR(1) NOT NULL
  ,CC_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CC_CODIGO VARCHAR(15) NOT NULL
  ,CC_NOME VARCHAR(40) NOT NULL
  ,CC_LANCTO VARCHAR(1) NOT NULL
  ,CC_CODCTR VARCHAR(9) DEFAULT '0.00.0000' NOT NULL
  ,CC_F10 VARCHAR(1) NOT NULL    
  ,CC_ATIVO VARCHAR(1) NOT NULL
  ,CC_REG VARCHAR(1) NOT NULL
  ,CC_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCcAcao CHECK( CC_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                C O N T A D O R                                  --
--tblcontador
-------------------------------------------------------------------------------------
GO
CREATE TABLE CONTADOR(
  CNT_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CNT_CODEMP INTEGER NOT NULL
  ,CNT_CRC VARCHAR(15) NOT NULL
  ,CNT_CPF VARCHAR(14) NOT NULL
  ,CNT_CODQC VARCHAR(4) NOT NULL
  ,CNT_CODCDD VARCHAR(7) NOT NULL
  ,CNT_CNPJ VARCHAR(14) NOT NULL
  ,CNT_NOME VARCHAR(60) NOT NULL
  ,CNT_CEP VARCHAR(8) NOT NULL
  ,CNT_CODLGR VARCHAR(5) NOT NULL
  ,CNT_ENDERECO VARCHAR(60) NOT NULL
  ,CNT_NUMERO VARCHAR(10) NOT NULL
  ,CNT_FONE VARCHAR(10)
  ,CNT_EMAIL VARCHAR(60)
  ,CNT_BAIRRO VARCHAR(15) NOT NULL
  ,CNT_SUFRAMA VARCHAR(9)
  ,CNT_CODINCTRIB VARCHAR(1) NOT NULL
  ,CNT_INDAPROCRED VARCHAR(1) NOT NULL
  ,CNT_CODTIPOCONT VARCHAR(1) NOT NULL
  ,CNT_INDREGCUM VARCHAR(1) NOT NULL
  ,CNT_CODRECPIS VARCHAR(6)
  ,CNT_CODRECCOFINS VARCHAR(6)
  ,CNT_INDNATPJ VARCHAR(2)
  ,CNT_INDATIV VARCHAR(1)
  ,CNT_ATIVO VARCHAR(1) NOT NULL
  ,CNT_REG VARCHAR(1) NOT NULL
  ,CNT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_cntCep CHECK( CNT_CEP LIKE('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))      
  ,CONSTRAINT chk_cntCpf CHECK( CNT_CPF NOT LIKE '%[^0-9]%' )      
  ,CONSTRAINT chk_cntCnpj CHECK( CNT_CNPJ NOT LIKE '%[^0-9]%' )        
  ,CONSTRAINT chk_cntCodIncTrib CHECK( CNT_CODINCTRIB IN('1','2','3'))  
  ,CONSTRAINT chk_cntIndAproCred CHECK( CNT_INDAPROCRED IN('1','2'))  
  ,CONSTRAINT chk_cntCodTipoCont CHECK( CNT_CODTIPOCONT IN('1','2'))  
  ,CONSTRAINT chk_cntIndRegCum CHECK( CNT_INDREGCUM IN('1','2','9','*'))  
  ,CONSTRAINT chk_cntIndNatPj CHECK( CNT_INDNATPJ IN('00','01','02'))  
  ,CONSTRAINT chk_cntIndAtiv CHECK( CNT_INDATIV IN('0','1','2','4','9'))  
  ,CONSTRAINT chk_cntAtivo CHECK( CNT_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_cntReg CHECK( CNT_REG IN('A','P','S')));
GO  
CREATE VIEW VCONTADOR AS
  SELECT CNT_CODIGO
         ,CNT_CODEMP
         ,CNT_CRC
         ,CNT_CPF
         ,CNT_CODQC
         ,CNT_CODCDD
         ,CNT_CNPJ
         ,CNT_NOME
         ,CNT_CEP
         ,CNT_CODLGR
         ,CNT_ENDERECO
         ,CNT_NUMERO
         ,CNT_FONE
         ,CNT_EMAIL
         ,CNT_BAIRRO
         ,CNT_SUFRAMA
         ,CNT_CODINCTRIB
         ,CNT_INDAPROCRED
         ,CNT_CODTIPOCONT
         ,CNT_INDREGCUM
         ,CNT_CODRECPIS
         ,CNT_CODRECCOFINS
         ,CNT_INDNATPJ
         ,CNT_INDATIV
         ,CNT_ATIVO
         ,CNT_REG
         ,CNT_CODUSR
    FROM CONTADOR
GO
CREATE TABLE dbo.BKPCONTADOR(
  CNT_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CNT_ACAO VARCHAR(1) NOT NULL
  ,CNT_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CNT_CODIGO INTEGER NOT NULL 
  ,CNT_CODEMP INTEGER NOT NULL
  ,CNT_CRC VARCHAR(15) NOT NULL
  ,CNT_CPF VARCHAR(14) NOT NULL
  ,CNT_CODQC VARCHAR(4) NOT NULL
  ,CNT_CODCDD VARCHAR(7) NOT NULL
  ,CNT_CNPJ VARCHAR(14) NOT NULL
  ,CNT_NOME VARCHAR(60) NOT NULL
  ,CNT_CEP VARCHAR(8) NOT NULL
  ,CNT_CODLGR VARCHAR(5) NOT NULL
  ,CNT_ENDERECO VARCHAR(60) NOT NULL
  ,CNT_NUMERO VARCHAR(10) NOT NULL
  ,CNT_FONE VARCHAR(10)
  ,CNT_EMAIL VARCHAR(60)
  ,CNT_BAIRRO VARCHAR(15) NOT NULL
  ,CNT_SUFRAMA VARCHAR(9)
  ,CNT_CODINCTRIB VARCHAR(1) NOT NULL
  ,CNT_INDAPROCRED VARCHAR(1) NOT NULL
  ,CNT_CODTIPOCONT VARCHAR(1) NOT NULL
  ,CNT_INDREGCUM VARCHAR(1) NOT NULL
  ,CNT_CODRECPIS VARCHAR(6)
  ,CNT_CODRECCOFINS VARCHAR(6)
  ,CNT_INDNATPJ VARCHAR(2)
  ,CNT_INDATIV VARCHAR(1)
  ,CNT_ATIVO VARCHAR(1) NOT NULL
  ,CNT_REG VARCHAR(1) NOT NULL
  ,CNT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCntAcao CHECK( CNT_ACAO IN('I','A','E'))  
);
--
--    
-------------------------------------------------------------------------------------
--                              C O N T A R E S U M O                              
--tblcontaresumo
-------------------------------------------------------------------------------------
GO
CREATE TABLE CONTARESUMO(
  CTR_CODIGO VARCHAR(9) PRIMARY KEY NOT NULL
  ,CTR_NOME VARCHAR(40) NOT NULL
  ,CTR_ATIVO VARCHAR(1) NOT NULL
  ,CTR_REG VARCHAR(1) NOT NULL
  ,CTR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_ctrCodigo CHECK( CTR_CODIGO LIKE('[0-9][.][0-9][0-9][.][0-9][0-9][0-9][0-9]'))    
  ,CONSTRAINT chk_ctrAtivo CHECK( CTR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ctrReg CHECK( CTR_REG IN('A','P','S')));
GO
CREATE VIEW VCONTARESUMO AS
  SELECT CTR_CODIGO,CTR_NOME,CTR_ATIVO,CTR_REG,CTR_CODUSR FROM CONTARESUMO
GO  
CREATE TABLE dbo.BKPCONTARESUMO(
  CTR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,CTR_ACAO VARCHAR(1) NOT NULL
  ,CTR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,CTR_CODIGO VARCHAR(9) NOT NULL
  ,CTR_NOME VARCHAR(40) NOT NULL
  ,CTR_ATIVO VARCHAR(1) NOT NULL
  ,CTR_REG VARCHAR(1) NOT NULL
  ,CTR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpCtrAcao CHECK( CTR_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                C S T I C M S                                    --
--tblcsticms
-------------------------------------------------------------------------------------
CREATE TABLE CSTICMS(
  ICM_CODIGO VARCHAR(3) NOT NULL
  ,ICM_ENTSAI VARCHAR(1) NOT NULL
  ,ICM_NOME VARCHAR(60) NOT NULL
  ,ICM_SNALIQ VARCHAR(1) NOT NULL
  ,ICM_PCISENTAS NUMERIC(6,2) NOT NULL
  ,ICM_PCOUTRAS NUMERIC(6,2) NOT NULL
  ,ICM_REDUCAOBC VARCHAR(1) NOT NULL
  ,ICM_ATIVO VARCHAR(1) NOT NULL
  ,ICM_REG VARCHAR(1) NOT NULL
  ,ICM_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_icmEntSai CHECK( ICM_ENTSAI IN('E','S'))  
  ,CONSTRAINT chk_icmSnAliq CHECK( ICM_SNALIQ IN('S','N'))    
  ,CONSTRAINT chk_icmReducaoBc CHECK( ICM_REDUCAOBC IN('S','N'))  
  ,CONSTRAINT chk_icmAtivo CHECK( ICM_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_icmReg CHECK( ICM_REG IN('A','P','S'))
  ,CONSTRAINT PKCSTICMS PRIMARY KEY (ICM_CODIGO,ICM_ENTSAI));
GO
CREATE VIEW VCSTICMS AS
  SELECT ICM_CODIGO,ICM_NOME,ICM_ENTSAI,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR FROM CSTICMS
GO
CREATE TABLE dbo.BKPCSTICMS(
  ICM_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,ICM_ACAO VARCHAR(1) NOT NULL
  ,ICM_DATA DATE DEFAULT GETDATE() NOT NULL
  ,ICM_CODIGO VARCHAR(3) NOT NULL
  ,ICM_ENTSAI VARCHAR(1) NOT NULL
  ,ICM_NOME VARCHAR(60) NOT NULL
  ,ICM_SNALIQ VARCHAR(1) NOT NULL
  ,ICM_PCISENTAS NUMERIC(6,2) NOT NULL
  ,ICM_PCOUTRAS NUMERIC(6,2) NOT NULL
  ,ICM_REDUCAOBC VARCHAR(1) NOT NULL
  ,ICM_ATIVO VARCHAR(1) NOT NULL
  ,ICM_REG VARCHAR(1) NOT NULL
  ,ICM_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpIcmAcao CHECK( ICM_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                C S T I P I                                      --
--tblcstipi
-------------------------------------------------------------------------------------
GO
CREATE TABLE CSTIPI(
  IPI_CODIGO VARCHAR(3) NOT NULL
  ,IPI_ENTSAI VARCHAR(1) NOT NULL  
  ,IPI_NOME VARCHAR(60) NOT NULL  
  ,IPI_SNALIQ VARCHAR(1) NOT NULL
  ,IPI_PCISENTAS NUMERIC(6,2) NOT NULL
  ,IPI_PCOUTRAS NUMERIC(6,2) NOT NULL
  ,IPI_ATIVO VARCHAR(1) NOT NULL
  ,IPI_REG VARCHAR(1) NOT NULL
  ,IPI_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_ipiEntSai CHECK( IPI_ENTSAI IN('E','S'))  
  ,CONSTRAINT chk_ipiSnAliq CHECK( IPI_SNALIQ IN('S','N'))    
  ,CONSTRAINT chk_ipiAtivo CHECK( IPI_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ipiReg CHECK( IPI_REG IN('A','P','S'))
  ,CONSTRAINT PKCSTIPI PRIMARY KEY (IPI_CODIGO,IPI_ENTSAI));
GO
CREATE VIEW VCSTIPI AS
  SELECT IPI_CODIGO,IPI_NOME,IPI_ENTSAI,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR FROM CSTIPI
GO
CREATE TABLE dbo.BKPCSTIPI(
  IPI_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,IPI_ACAO VARCHAR(1) NOT NULL
  ,IPI_DATA DATE DEFAULT GETDATE() NOT NULL
  ,IPI_CODIGO VARCHAR(3) NOT NULL
  ,IPI_ENTSAI VARCHAR(1) NOT NULL  
  ,IPI_NOME VARCHAR(60) NOT NULL  
  ,IPI_SNALIQ VARCHAR(1) NOT NULL
  ,IPI_PCISENTAS NUMERIC(6,2) NOT NULL
  ,IPI_PCOUTRAS NUMERIC(6,2) NOT NULL
  ,IPI_ATIVO VARCHAR(1) NOT NULL
  ,IPI_REG VARCHAR(1) NOT NULL
  ,IPI_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpIpiAcao CHECK( IPI_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                C S T P I S                                      --
--tblcstpis
-------------------------------------------------------------------------------------
GO
 CREATE TABLE CSTPIS(
  PIS_CODIGO VARCHAR(3) NOT NULL
  ,PIS_ENTSAI VARCHAR(1) NOT NULL
  ,PIS_NOME VARCHAR(60) NOT NULL
  ,PIS_SNALIQ VARCHAR(1) NOT NULL
  ,PIS_PCISENTAS NUMERIC(6,2) NOT NULL
  ,PIS_PCOUTRAS NUMERIC(6,2) NOT NULL
  ,PIS_ATIVO VARCHAR(1) NOT NULL
  ,PIS_REG VARCHAR(1) NOT NULL
  ,PIS_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_pisEntSai CHECK( PIS_ENTSAI IN('E','S'))  
  ,CONSTRAINT chk_pisSnAliq CHECK( PIS_SNALIQ IN('S','N'))      
  ,CONSTRAINT chk_pisAtivo CHECK( PIS_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_pisReg CHECK( PIS_REG IN('A','P','S'))
  ,CONSTRAINT PKCSTPIS PRIMARY KEY (PIS_CODIGO,PIS_ENTSAI));
GO
CREATE VIEW VCSTPIS AS
  SELECT PIS_CODIGO,PIS_NOME,PIS_ENTSAI,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR FROM CSTPIS
GO
CREATE TABLE dbo.BKPCSTPIS(
  PIS_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PIS_ACAO VARCHAR(1) NOT NULL
  ,PIS_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PIS_CODIGO VARCHAR(3) NOT NULL
  ,PIS_ENTSAI VARCHAR(1) NOT NULL
  ,PIS_NOME VARCHAR(60) NOT NULL
  ,PIS_SNALIQ VARCHAR(1) NOT NULL
  ,PIS_PCISENTAS NUMERIC(6,2) NOT NULL
  ,PIS_PCOUTRAS NUMERIC(6,2) NOT NULL
  ,PIS_ATIVO VARCHAR(1) NOT NULL
  ,PIS_REG VARCHAR(1) NOT NULL
  ,PIS_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPisAcao CHECK( PIS_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                C S T S I M P L E S                              --
--tblcstsimples
-------------------------------------------------------------------------------------
GO
CREATE TABLE CSTSIMPLES(
  SN_CODIGO VARCHAR(3) NOT NULL
  ,SN_ENTSAI VARCHAR(1) NOT NULL
  ,SN_NOME VARCHAR(60) NOT NULL
  ,SN_SNALIQ VARCHAR(1) NOT NULL
  ,SN_PCISENTAS NUMERIC(6,2) NOT NULL
  ,SN_PCOUTRAS NUMERIC(6,2) NOT NULL
  ,SN_REDUCAOBC VARCHAR(1) NOT NULL
  ,SN_ATIVO VARCHAR(1) NOT NULL
  ,SN_REG VARCHAR(1) NOT NULL
  ,SN_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_snEntSai CHECK( SN_ENTSAI IN('E','S'))  
  ,CONSTRAINT chk_snSnAliq CHECK( SN_SNALIQ IN('S','N'))    
  ,CONSTRAINT chk_snReducaoBc CHECK( SN_REDUCAOBC IN('S','N'))  
  ,CONSTRAINT chk_snAtivo CHECK( SN_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_snReg CHECK( SN_REG IN('A','P','S'))
  ,CONSTRAINT PKCSTSIMPLES PRIMARY KEY (SN_CODIGO,SN_ENTSAI));
GO
CREATE VIEW VCSTSIMPLES AS
  SELECT SN_CODIGO,SN_NOME,SN_ENTSAI,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR FROM CSTSIMPLES
GO  
CREATE TABLE dbo.BKPCSTSIMPLES(
  SN_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,SN_ACAO VARCHAR(1) NOT NULL
  ,SN_DATA DATE DEFAULT GETDATE() NOT NULL
  ,SN_CODIGO VARCHAR(3) NOT NULL
  ,SN_ENTSAI VARCHAR(1) NOT NULL
  ,SN_NOME VARCHAR(60) NOT NULL
  ,SN_SNALIQ VARCHAR(1) NOT NULL
  ,SN_PCISENTAS NUMERIC(6,2) NOT NULL
  ,SN_PCOUTRAS NUMERIC(6,2) NOT NULL
  ,SN_REDUCAOBC VARCHAR(1) NOT NULL
  ,SN_ATIVO VARCHAR(1) NOT NULL
  ,SN_REG VARCHAR(1) NOT NULL
  ,SN_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpSnAcao CHECK( SN_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                     E M A I L                                   --
--tblemail
-------------------------------------------------------------------------------------
GO
CREATE TABLE EMAIL(
  EMA_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,EMA_NOME VARCHAR(20) NOT NULL
  ,EMA_EMAIL VARCHAR(50) NOT NULL
  ,EMA_ATIVO VARCHAR(1) NOT NULL
  ,EMA_REG VARCHAR(1) NOT NULL
  ,EMA_CODUSR INTEGER NOT NULL
  --,CONSTRAINT chk_emaNome CHECK( EMA_NOME IN('AVISO_VENCTO','BOLETO','CARTA_COBRANCA','FLUXO_CAIXA'))  
  ,CONSTRAINT chk_emaAtivo CHECK( EMA_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_emaReg CHECK( EMA_REG IN('A','P','S')));
GO  
CREATE VIEW VEMAIL AS
  SELECT EMA_CODIGO,EMA_NOME,EMA_EMAIL,EMA_ATIVO,EMA_REG,EMA_CODUSR FROM EMAIL
GO  
CREATE TABLE dbo.BKPEMAIL(
  EMA_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,EMA_ACAO VARCHAR(1) NOT NULL
  ,EMA_DATA DATE DEFAULT GETDATE() NOT NULL
  ,EMA_CODIGO INTEGER NOT NULL
  ,EMA_NOME VARCHAR(20) NOT NULL
  ,EMA_EMAIL VARCHAR(50) NOT NULL
  ,EMA_ATIVO VARCHAR(1) NOT NULL
  ,EMA_REG VARCHAR(1) NOT NULL
  ,EMA_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpEmaAcao CHECK( EMA_ACAO IN('I','A','E'))  
);
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- EMA_CODIGO     | PK  |    |    | INT                |  Auto incremento
   -- EMA_NOME       |     |    |    | VC(20) NN          |  
   -- EMA_EMAIL      |     |    |    | VC(20) NN          |    
   -- EMA_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- EMA_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- EMA_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D16         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
--
--  
-------------------------------------------------------------------------------------
--                               E M B A L A G E M                                 --
--tblembalagem
-------------------------------------------------------------------------------------
GO
CREATE TABLE EMBALAGEM(
  EMB_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,EMB_NOME VARCHAR(30) NOT NULL
  ,EMB_ATIVO VARCHAR(1) NOT NULL
  ,EMB_REG VARCHAR(1) NOT NULL
  ,EMB_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_embAtivo CHECK( EMB_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_embReg CHECK( EMB_REG IN('A','P','S')));
GO
CREATE VIEW VEMBALAGEM AS
  SELECT EMB_CODIGO,EMB_NOME,EMB_ATIVO,EMB_REG,EMB_CODUSR FROM EMBALAGEM
GO  
CREATE TABLE dbo.BKPEMBALAGEM(
  EMB_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,EMB_ACAO VARCHAR(1) NOT NULL
  ,EMB_DATA DATE DEFAULT GETDATE() NOT NULL
  ,EMB_CODIGO VARCHAR(3) NOT NULL
  ,EMB_NOME VARCHAR(30) NOT NULL
  ,EMB_ATIVO VARCHAR(1) NOT NULL
  ,EMB_REG VARCHAR(1) NOT NULL
  ,EMB_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpEmbAcao CHECK( EMB_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                  E M P R E S A
--tblempresa
-------------------------------------------------------------------------------------
GO
CREATE TABLE EMPRESA(
  EMP_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,EMP_NOME VARCHAR(40) NOT NULL
  ,EMP_APELIDO VARCHAR(15) NOT NULL
  ,EMP_CNPJ VARCHAR(14) NOT NULL
  ,EMP_INSESTAD VARCHAR(19) DEFAULT 'NSA' NOT NULL
  ,EMP_CODCDD VARCHAR(7) NOT NULL
  ,EMP_CODLGR VARCHAR(5) NOT NULL
  ,EMP_ENDERECO VARCHAR(60) NOT NULL
  ,EMP_NUMERO VARCHAR(10) NOT NULL
  ,EMP_CEP VARCHAR(8) NOT NULL              
  ,EMP_BAIRRO VARCHAR(15) NOT NULL
  ,EMP_FONE VARCHAR(10)
  ,EMP_CODETF VARCHAR(3) NOT NULL
  ,EMP_ALIQCOFINS NUMERIC(6,2) NOT NULL
  ,EMP_ALIQPIS NUMERIC(6,2) NOT NULL
  ,EMP_ALIQCSLL NUMERIC(6,2) NOT NULL
  ,EMP_ALIQIRRF NUMERIC(6,2) NOT NULL  
  ,EMP_BCPRESUMIDO NUMERIC(6,2) NOT NULL
  ,EMP_ALIQIRPRESUMIDO NUMERIC(6,2) NOT NULL
  ,EMP_ALIQCSLLPRESUMIDO NUMERIC(6,2) NOT NULL
  ,EMP_ANEXOSIMPLES INTEGER NOT NULL
  ,EMP_CODETP VARCHAR(3) NOT NULL
  ,EMP_CODERM VARCHAR(3) NOT NULL
  ,EMP_SMTPUSERNAME VARCHAR(60)
  ,EMP_SMTPPASSWORD VARCHAR(30)
  ,EMP_SMTPHOST VARCHAR(30)
  ,EMP_SMTPPORT VARCHAR(4)
  ,EMP_CERTPATH VARCHAR(100)
  ,EMP_CERTSENHA VARCHAR(20)
  ,EMP_CERTVALIDADE DATE
  ,EMP_PRODHOMOL VARCHAR(1) NOT NULL
  ,EMP_CONTINGENCIA VARCHAR(1) NOT NULL
  ,EMP_CODERT VARCHAR(3) NOT NULL
  ,EMP_ATIVO VARCHAR(1) NOT NULL
  ,EMP_REG VARCHAR(1) NOT NULL
  ,EMP_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_empCnpj CHECK( EMP_CNPJ NOT LIKE '%[^0-9]%' )        
  ,CONSTRAINT chk_empCep CHECK( EMP_CEP LIKE('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))    
  ,CONSTRAINT chk_empProdHomol CHECK( EMP_PRODHOMOL IN('P','H'))  
  ,CONSTRAINT chk_empContingencia CHECK( EMP_CONTINGENCIA IN('S','N'))  
  ,CONSTRAINT chk_empAtivo CHECK( EMP_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_empReg CHECK( EMP_REG IN('A','P','S')));
GO
CREATE VIEW VEMPRESA AS
  SELECT EMP_CODIGO
         ,EMP_NOME
         ,EMP_APELIDO
         ,EMP_CNPJ
         ,EMP_INSESTAD
         ,EMP_CODCDD
         ,EMP_CODLGR
         ,EMP_ENDERECO
         ,EMP_NUMERO
         ,EMP_CEP
         ,EMP_BAIRRO
         ,EMP_FONE
         ,EMP_CODETF
         ,EMP_ALIQCOFINS
         ,EMP_ALIQPIS
         ,EMP_ALIQCSLL
         ,EMP_BCPRESUMIDO
         ,EMP_ALIQIRPRESUMIDO
         ,EMP_ALIQCSLLPRESUMIDO
         ,EMP_ALIQIRRF
         ,EMP_ANEXOSIMPLES
         ,EMP_CODETP
         ,EMP_CODERM
         ,EMP_SMTPUSERNAME
         ,EMP_SMTPPASSWORD
         ,EMP_SMTPHOST
         ,EMP_SMTPPORT
         ,EMP_CERTPATH
         ,EMP_CERTSENHA
         ,EMP_CERTVALIDADE
         ,EMP_PRODHOMOL
         ,EMP_CONTINGENCIA
         ,EMP_CODERT
         ,EMP_ATIVO
         ,EMP_REG
         ,EMP_CODUSR
    FROM EMPRESA 
GO
CREATE TABLE dbo.BKPEMPRESA(
  EMP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,EMP_ACAO VARCHAR(1) NOT NULL
  ,EMP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,EMP_CODIGO INTEGER NOT NULL
  ,EMP_NOME VARCHAR(40) NOT NULL
  ,EMP_APELIDO VARCHAR(15) NOT NULL
  ,EMP_CNPJ VARCHAR(14) NOT NULL
  ,EMP_INSESTAD VARCHAR(19) DEFAULT 'NSA' NOT NULL
  ,EMP_CODCDD VARCHAR(7) NOT NULL
  ,EMP_CODLGR VARCHAR(5) NOT NULL
  ,EMP_ENDERECO VARCHAR(60) NOT NULL
  ,EMP_NUMERO VARCHAR(10) NOT NULL
  ,EMP_CEP VARCHAR(8) NOT NULL              
  ,EMP_BAIRRO VARCHAR(15) NOT NULL
  ,EMP_FONE VARCHAR(10)
  ,EMP_CODETF VARCHAR(3) NOT NULL
  ,EMP_ALIQCOFINS NUMERIC(6,2) NOT NULL
  ,EMP_ALIQPIS NUMERIC(6,2) NOT NULL
  ,EMP_ALIQCSLL NUMERIC(6,2) NOT NULL
  ,EMP_ALIQIRRF NUMERIC(6,2) NOT NULL  
  ,EMP_BCPRESUMIDO NUMERIC(6,2) NOT NULL
  ,EMP_ALIQIRPRESUMIDO NUMERIC(6,2) NOT NULL
  ,EMP_ALIQCSLLPRESUMIDO NUMERIC(6,2) NOT NULL
  ,EMP_ANEXOSIMPLES INTEGER NOT NULL
  ,EMP_CODETP VARCHAR(3) NOT NULL
  ,EMP_CODERM VARCHAR(3) NOT NULL
  ,EMP_SMTPUSERNAME VARCHAR(60)
  ,EMP_SMTPPASSWORD VARCHAR(30)
  ,EMP_SMTPHOST VARCHAR(30)
  ,EMP_SMTPPORT VARCHAR(4)
  ,EMP_CERTPATH VARCHAR(100)
  ,EMP_CERTSENHA VARCHAR(20)
  ,EMP_CERTVALIDADE DATE
  ,EMP_PRODHOMOL VARCHAR(1) NOT NULL
  ,EMP_CONTINGENCIA VARCHAR(1) NOT NULL
  ,EMP_CODERT VARCHAR(3) NOT NULL
  ,EMP_ATIVO VARCHAR(1) NOT NULL
  ,EMP_REG VARCHAR(1) NOT NULL
  ,EMP_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpEmpAcao CHECK( EMP_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             E M P R E S A R A M O
--tblempresaramo
-------------------------------------------------------------------------------------
GO
CREATE TABLE EMPRESARAMO(
  ERM_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,ERM_NOME VARCHAR(25) NOT NULL
  ,ERM_ATIVO VARCHAR(1) NOT NULL
  ,ERM_REG VARCHAR(1) NOT NULL
  ,ERM_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_ermAtivo CHECK( ERM_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ermReg CHECK( ERM_REG IN('A','P','S'))
);
GO
CREATE VIEW VEMPRESARAMO AS
  SELECT ERM_CODIGO,ERM_NOME,ERM_ATIVO,ERM_REG,ERM_CODUSR FROM EMPRESARAMO
GO
CREATE TABLE dbo.BKPEMPRESARAMO(
  ERM_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,ERM_ACAO VARCHAR(1) NOT NULL
  ,ERM_DATA DATE DEFAULT GETDATE() NOT NULL
  ,ERM_CODIGO VARCHAR(3) NOT NULL
  ,ERM_NOME VARCHAR(25) NOT NULL
  ,ERM_ATIVO VARCHAR(1) NOT NULL
  ,ERM_REG VARCHAR(1) NOT NULL
  ,ERM_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpErmAcao CHECK( ERM_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             E M P R E S A R E G T R I B
--tblempresaregtrib
-------------------------------------------------------------------------------------
GO
CREATE TABLE EMPRESAREGTRIB(
  ERT_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,ERT_NOME VARCHAR(50) NOT NULL
  ,ERT_ATIVO VARCHAR(1) NOT NULL
  ,ERT_REG VARCHAR(1) NOT NULL
  ,ERT_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_ertAtivo CHECK( ERT_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ertReg CHECK( ERT_REG IN('A','P','S'))
);
GO
CREATE VIEW VEMPRESAREGTRIB AS
  SELECT ERT_CODIGO,ERT_NOME,ERT_ATIVO,ERT_REG,ERT_CODUSR FROM EMPRESAREGTRIB
GO
CREATE TABLE dbo.BKPEMPRESAREGTRIB(
  ERT_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,ERT_ACAO VARCHAR(1) NOT NULL
  ,ERT_DATA DATE DEFAULT GETDATE() NOT NULL
  ,ERT_CODIGO VARCHAR(3) NOT NULL
  ,ERT_NOME VARCHAR(50) NOT NULL
  ,ERT_ATIVO VARCHAR(1) NOT NULL
  ,ERT_REG VARCHAR(1) NOT NULL
  ,ERT_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpErtAcao CHECK( ERT_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             E M P R E S A T I P O
--tblempresatipo
-------------------------------------------------------------------------------------
GO
CREATE TABLE EMPRESATIPO(
  ETP_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,ETP_NOME VARCHAR(20) NOT NULL
  ,ETP_ATIVO VARCHAR(1) NOT NULL
  ,ETP_REG VARCHAR(1) NOT NULL
  ,ETP_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_etpAtivo CHECK( ETP_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_etpReg CHECK( ETP_REG IN('A','P','S'))
);
GO
CREATE VIEW VEMPRESATIPO AS
  SELECT ETP_CODIGO,ETP_NOME,ETP_ATIVO,ETP_REG,ETP_CODUSR FROM EMPRESATIPO
GO
CREATE TABLE dbo.BKPEMPRESATIPO(
  ETP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,ETP_ACAO VARCHAR(1) NOT NULL
  ,ETP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,ETP_CODIGO VARCHAR(3) NOT NULL
  ,ETP_NOME VARCHAR(20) NOT NULL
  ,ETP_ATIVO VARCHAR(1) NOT NULL
  ,ETP_REG VARCHAR(1) NOT NULL
  ,ETP_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpEtpAcao CHECK( ETP_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             E M P R E S A T R I B F E D                         --
--tblempresatribfed
-------------------------------------------------------------------------------------
GO
CREATE TABLE EMPRESATRIBFED(
  ETF_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,ETF_NOME VARCHAR(20) NOT NULL
  ,ETF_ATIVO VARCHAR(1) NOT NULL
  ,ETF_REG VARCHAR(1) NOT NULL
  ,ETF_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_etfAtivo CHECK( ETF_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_etfReg CHECK( ETF_REG IN('A','P','S')));
GO
CREATE VIEW VEMPRESATRIBFED AS
  SELECT ETF_CODIGO,ETF_NOME,ETF_ATIVO,ETF_REG,ETF_CODUSR FROM EMPRESATRIBFED
GO
CREATE TABLE dbo.BKPEMPRESATRIBFED(
  ETF_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,ETF_ACAO VARCHAR(1) NOT NULL
  ,ETF_DATA DATE DEFAULT GETDATE() NOT NULL
  ,ETF_CODIGO VARCHAR(3) NOT NULL
  ,ETF_NOME VARCHAR(20) NOT NULL
  ,ETF_ATIVO VARCHAR(1) NOT NULL
  ,ETF_REG VARCHAR(1) NOT NULL
  ,ETF_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpEtfAcao CHECK( ETF_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                               E S T A D O
--tblestado
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.ESTADO(
  EST_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,EST_NOME VARCHAR(20) NOT NULL
  ,EST_ALIQICMS NUMERIC(6,2) NOT NULL
  ,EST_CODREG VARCHAR(5) NOT NULL
  ,EST_ATIVO VARCHAR(1) NOT NULL
  ,EST_REG VARCHAR(1) NOT NULL
  ,EST_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_estAtivo CHECK( EST_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_estReg CHECK( EST_REG IN('A','P','S'))
);
GO
CREATE VIEW VESTADO AS
  SELECT EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR 
    FROM ESTADO
GO  
CREATE TABLE dbo.BKPESTADO(
  EST_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,EST_ACAO VARCHAR(1) NOT NULL
  ,EST_DATA DATE DEFAULT GETDATE() NOT NULL
  ,EST_CODIGO VARCHAR(3) NOT NULL
  ,EST_NOME VARCHAR(20) NOT NULL
  ,EST_ALIQICMS NUMERIC(6,2) NOT NULL
  ,EST_CODREG VARCHAR(5) NOT NULL
  ,EST_ATIVO VARCHAR(1) NOT NULL
  ,EST_REG VARCHAR(1) NOT NULL
  ,EST_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpEstAcao CHECK( EST_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                               E X T R A T O                                     --
-- tblextrato                                                                      --
-------------------------------------------------------------------------------------
CREATE TABLE EXTRATO(
  EXT_CODIGO INTEGER IDENTITY NOT NULL 
  ,EXT_DATA DATE DEFAULT GETDATE() NOT NULL
  ,EXT_LANCTO INTEGER NOT NULL
  ,EXT_CODBNC INTEGER NOT NULL
  ,EXT_DEBITO NUMERIC(15,2) NOT NULL
  ,EXT_CREDITO NUMERIC(15,2) NOT NULL
  ,EXT_SALDO NUMERIC(15,2) NOT NULL
,CONSTRAINT PKEXTRATO PRIMARY KEY(EXT_CODIGO));  
CREATE INDEX EXT_DATAX ON EXTRATO(EXT_DATA);
-------------------------------------------------------------------------------------
--                               F A V O R E C I D O                               --
-- tblfavorecido                                                                   --
-------------------------------------------------------------------------------------
GO
CREATE TABLE FAVORECIDO(
  FVR_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,FVR_NOME VARCHAR(60) NOT NULL  
  ,FVR_APELIDO VARCHAR(15) NOT NULL
  ,FVR_BAIRRO VARCHAR(15) NOT NULL
  ,FVR_CNPJCPF VARCHAR(14) NOT NULL
  ,FVR_CEP VARCHAR(8) NOT NULL  
  ,FVR_CODCDD VARCHAR(7) NOT NULL
  ,FVR_DTCADASTRO DATE DEFAULT GETDATE() NOT NULL
  ,FVR_FISJUR VARCHAR(1) NOT NULL
  ,FVR_INSMUNIC VARCHAR(20)
  ,FVR_CONTATO VARCHAR(40)
  ,FVR_ENDERECO VARCHAR(60) NOT NULL
  ,FVR_FONE VARCHAR(10) NOT NULL
  ,FVR_INS VARCHAR(19)
  ,FVR_CTAATIVO VARCHAR(15) NOT NULL
  ,FVR_CTAPASSIVO VARCHAR(15) NOT NULL
  ,FVR_CADMUNIC VARCHAR(20)
  ,FVR_EMAIL VARCHAR(60)
  ,FVR_CODCTG VARCHAR(3) NOT NULL
  ,FVR_SENHA VARCHAR(10) 
  ,FVR_COMPLEMENTO VARCHAR(60)
  ,FVR_NUMERO VARCHAR(10) NOT NULL
  ,FVR_CODLGR VARCHAR(5) NOT NULL
  ,FVR_GFCP INTEGER NOT NULL
  ,FVR_GFCR INTEGER NOT NULL
  ,FVR_ATIVO VARCHAR(1) NOT NULL
  ,FVR_REG VARCHAR(1) NOT NULL
  ,FVR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_fvrCnpjCpf CHECK( FVR_CNPJCPF NOT LIKE '%[^0-9]%' )    
  ,CONSTRAINT chk_fvrCep CHECK( FVR_CEP LIKE('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))  
  ,CONSTRAINT chk_fvrFisJur CHECK( FVR_FISJUR IN('F','J'))  
  ,CONSTRAINT chk_fvrAtivo CHECK( FVR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_fvrReg CHECK( FVR_REG IN('A','P','S')));
GO  
CREATE VIEW VFAVORECIDO AS
  SELECT FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CEP
         ,FVR_CNPJCPF,FVR_CODCDD,FVR_DTCADASTRO,FVR_FISJUR,FVR_INSMUNIC
         ,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CTAATIVO,FVR_CTAPASSIVO
         ,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO
         ,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR
    FROM FAVORECIDO  
GO    
CREATE TABLE dbo.BKPFAVORECIDO(
  FVR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,FVR_ACAO VARCHAR(1) NOT NULL
  ,FVR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,FVR_CODIGO INTEGER NOT NULL
  ,FVR_NOME VARCHAR(60) NOT NULL  
  ,FVR_APELIDO VARCHAR(15) NOT NULL
  ,FVR_BAIRRO VARCHAR(15) NOT NULL
  ,FVR_CNPJCPF VARCHAR(14) NOT NULL
  ,FVR_CEP VARCHAR(8) NOT NULL  
  ,FVR_CODCDD VARCHAR(7) NOT NULL
  ,FVR_DTCADASTRO DATE DEFAULT GETDATE() NOT NULL
  ,FVR_FISJUR VARCHAR(1) NOT NULL
  ,FVR_INSMUNIC VARCHAR(20)
  ,FVR_CONTATO VARCHAR(40)
  ,FVR_ENDERECO VARCHAR(60)
  ,FVR_FONE VARCHAR(10)
  ,FVR_INS VARCHAR(19)
  ,FVR_CTAATIVO VARCHAR(15) NOT NULL
  ,FVR_CTAPASSIVO VARCHAR(15) NOT NULL
  ,FVR_CADMUNIC VARCHAR(20)
  ,FVR_EMAIL VARCHAR(60)
  ,FVR_CODCTG VARCHAR(3) NOT NULL
  ,FVR_SENHA VARCHAR(10)
  ,FVR_COMPLEMENTO VARCHAR(60)
  ,FVR_NUMERO VARCHAR(10) NOT NULL
  ,FVR_CODLGR VARCHAR(5) NOT NULL
  ,FVR_GFCP INTEGER NOT NULL
  ,FVR_GFCR INTEGER NOT NULL
  ,FVR_ATIVO VARCHAR(1) NOT NULL
  ,FVR_REG VARCHAR(1) NOT NULL
  ,FVR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpFvrAcao CHECK( FVR_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                 F A B R I C A N T E                             --
--tblfabricante
-------------------------------------------------------------------------------------
GO  
CREATE TABLE FABRICANTE(
  FBR_CODFVR INTEGER NOT NULL
  ,FBR_CODGP VARCHAR(3) NOT NULL
  ,FBR_ATIVO VARCHAR(1) NOT NULL
  ,FBR_REG VARCHAR(1) NOT NULL
  ,FBR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_fbrAtivo CHECK( FBR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_fbrReg CHECK( FBR_REG IN('A','P','S'))
  ,CONSTRAINT PKFABRICANTE PRIMARY KEY (FBR_CODFVR,FBR_CODGP));
GO
CREATE VIEW VFABRICANTE AS
  SELECT FBR_CODFVR,FBR_CODGP,FBR_ATIVO,FBR_REG,FBR_CODUSR FROM FABRICANTE
GO  
CREATE TABLE dbo.BKPFABRICANTE(
  FBR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,FBR_ACAO VARCHAR(1) NOT NULL
  ,FBR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,FBR_CODFVR INTEGER NOT NULL
  ,FBR_CODGP VARCHAR(3) NOT NULL
  ,FBR_ATIVO VARCHAR(1) NOT NULL
  ,FBR_REG VARCHAR(1) NOT NULL
  ,FBR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpFbrAcao CHECK( FBR_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                           F E C H A M E S S I M P L E S
--tblfechamessimples
-------------------------------------------------------------------------------------

CREATE TABLE FECHAMESSIMPLES(
  FMS_CODMES INTEGER NOT NULL,
  FMS_CODEMP INTEGER NOT NULL,
  FMS_VLRMES NUMERIC(15,2) NOT NULL,
  FMS_VLRACUMULADO NUMERIC(15,2) NOT NULL,
  FMS_ALIQUOTA NUMERIC(15,2) NOT NULL,
  FMS_MESINI INTEGER NOT NULL,
  FMS_MESFIN INTEGER NOT NULL,
  FMS_ATUALIZAR INTEGER NOT NULL,
  FMS_ANEXO INTEGER NOT NULL,
  FMS_ITEM INTEGER NOT NULL,
  FMS_REG VARCHAR(1) NOT NULL,
  FMS_CODUSR INTEGER NOT NULL,
CONSTRAINT PKTFECHAMESSIMPLES PRIMARY KEY (FMS_CODMES, FMS_CODEMP));
-------------------------------------------------------------------------------------
--                                 F E R I A D O                                   --
--tblferiado
-------------------------------------------------------------------------------------
GO
CREATE TABLE FERIADO(
  FRD_CODIGO DATE NOT NULL
  ,FRD_CODEMP INTEGER NOT NULL
  ,FRD_NOME VARCHAR(30) NOT NULL
  ,FRD_PAGAR INTEGER NOT NULL
  ,FRD_RECEBER INTEGER NOT NULL
  ,FRD_ATIVO VARCHAR(1) NOT NULL
  ,FRD_REG VARCHAR(1) NOT NULL
  ,FRD_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_frdAtivo CHECK( FRD_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_frdReg CHECK( FRD_REG IN('A','P','S'))
  ,CONSTRAINT PKPFERIADO PRIMARY KEY (FRD_CODIGO, FRD_CODEMP));
GO
CREATE VIEW VFERIADO AS
  SELECT FRD_CODIGO
         ,FRD_CODEMP
         ,FRD_NOME
         ,FRD_PAGAR
         ,FRD_RECEBER
         ,FRD_ATIVO
         ,FRD_REG
         ,FRD_CODUSR
    FROM FERIADO
GO
CREATE TABLE dbo.BKPFERIADO(
  FRD_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,FRD_ACAO VARCHAR(1) NOT NULL
  ,FRD_DATA DATE DEFAULT GETDATE() NOT NULL
  ,FRD_CODIGO DATE NOT NULL
  ,FRD_CODEMP INTEGER NOT NULL
  ,FRD_NOME VARCHAR(30) NOT NULL
  ,FRD_PAGAR INTEGER NOT NULL
  ,FRD_RECEBER INTEGER NOT NULL
  ,FRD_ATIVO VARCHAR(1) NOT NULL
  ,FRD_REG VARCHAR(1) NOT NULL
  ,FRD_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpFrdAcao CHECK( FRD_ACAO IN('I','A','E'))  
);
--
--    
-------------------------------------------------------------------------------------
--                               F I L I A L
--tblfilial
-------------------------------------------------------------------------------------
GO
CREATE TABLE FILIAL(
  FLL_CODIGO INTEGER PRIMARY KEY NOT NULL
  ,FLL_NOME VARCHAR(40) NOT NULL
  ,FLL_APELIDO VARCHAR(15) NOT NULL
  ,FLL_BAIRRO VARCHAR(15) NOT NULL
  ,FLL_CEP VARCHAR(8) NOT NULL
  ,FLL_CNPJ VARCHAR(14) NOT NULL
  ,FLL_CODCDD VARCHAR(7) NOT NULL
  ,FLL_CODLGR VARCHAR(5) NOT NULL
  ,FLL_ENDERECO VARCHAR(60) NOT NULL
  ,FLL_NUMERO VARCHAR(10) NOT NULL
  ,FLL_FONE VARCHAR(10)
  ,FLL_INSESTAD VARCHAR(19)
  ,FLL_INSMUNIC VARCHAR(20)
  ,FLL_CODEMP INTEGER NOT NULL
  ,FLL_ATIVO VARCHAR(1) NOT NULL
  ,FLL_REG VARCHAR(1) NOT NULL
  ,FLL_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_fllCep CHECK( FLL_CEP LIKE('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))      
  ,CONSTRAINT chk_fllCnpj CHECK( FLL_CNPJ NOT LIKE '%[^0-9]%' )          
  ,CONSTRAINT chk_fllAtivo CHECK( FLL_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_fllReg CHECK( FLL_REG IN('A','P','S')));
GO
CREATE VIEW VFILIAL AS
  SELECT FLL_CODIGO
         ,FLL_NOME
         ,FLL_APELIDO
         ,FLL_BAIRRO
         ,FLL_CEP
         ,FLL_CNPJ
         ,FLL_CODCDD
         ,FLL_CODLGR
         ,FLL_ENDERECO
         ,FLL_NUMERO
         ,FLL_FONE
         ,FLL_INSESTAD
         ,FLL_INSMUNIC
         ,FLL_CODEMP
         ,FLL_ATIVO
         ,FLL_REG
         ,FLL_CODUSR
  FROM FILIAL
GO
CREATE TABLE dbo.BKPFILIAL(
  FLL_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,FLL_ACAO VARCHAR(1) NOT NULL
  ,FLL_DATA DATE DEFAULT GETDATE() NOT NULL
  ,FLL_CODIGO INTEGER NOT NULL
  ,FLL_NOME VARCHAR(40) NOT NULL
  ,FLL_APELIDO VARCHAR(15) NOT NULL
  ,FLL_BAIRRO VARCHAR(15) NOT NULL
  ,FLL_CEP VARCHAR(8) NOT NULL
  ,FLL_CNPJ VARCHAR(14) NOT NULL
  ,FLL_CODCDD VARCHAR(7) NOT NULL
  ,FLL_CODLGR VARCHAR(5) NOT NULL
  ,FLL_ENDERECO VARCHAR(60) NOT NULL
  ,FLL_NUMERO VARCHAR(10) NOT NULL
  ,FLL_FONE VARCHAR(10)
  ,FLL_INSESTAD VARCHAR(19)
  ,FLL_INSMUNIC VARCHAR(20)
  ,FLL_CODEMP INTEGER NOT NULL
  ,FLL_ATIVO VARCHAR(1) NOT NULL
  ,FLL_REG VARCHAR(1) NOT NULL
  ,FLL_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpFllAcao CHECK( FLL_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                         F O R M A C O B R A N C A                               --
--tblformacobranca
-------------------------------------------------------------------------------------
CREATE TABLE FORMACOBRANCA(
  FC_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,FC_NOME VARCHAR(20) NOT NULL
  ,FC_ATIVO VARCHAR(1) NOT NULL
  ,FC_REG VARCHAR(1) NOT NULL
  ,FC_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_fcAtivo CHECK( FC_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_fcReg CHECK( FC_REG IN('A','P','S')));
GO
CREATE VIEW VFORMACOBRANCA AS
  SELECT FC_CODIGO,FC_NOME,FC_ATIVO,FC_REG,FC_CODUSR FROM FORMACOBRANCA
GO  
CREATE TABLE dbo.BKPFORMACOBRANCA(
  FC_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,FC_ACAO VARCHAR(1) NOT NULL
  ,FC_DATA DATE DEFAULT GETDATE() NOT NULL
  ,FC_CODIGO VARCHAR(3) NOT NULL
  ,FC_NOME VARCHAR(20) NOT NULL
  ,FC_ATIVO VARCHAR(1) NOT NULL
  ,FC_REG VARCHAR(1) NOT NULL
  ,FC_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpFcAcao CHECK( FC_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                               G E N E R A T O R
--tblgenerator
-------------------------------------------------------------------------------------
GO
CREATE TABLE GENERATOR(
  GNR_CODIGO VARCHAR(20) NOT NULL
  ,GNR_VALOR INTEGER NOT NULL  
  ,CONSTRAINT PKGENERATOR PRIMARY KEY (GNR_CODIGO)
);  
GO
-------------------------------------------------------------------------------------
--                         G R U P O F A V O R E C I D O                           --
--tblgrupofavorecido
-------------------------------------------------------------------------------------
GO
CREATE TABLE GRUPOFAVORECIDO(
  GF_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,GF_NOME VARCHAR(40) NOT NULL
  ,GF_ATIVO VARCHAR(1) NOT NULL
  ,GF_REG VARCHAR(1) NOT NULL
  ,GF_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_gfAtivo CHECK( GF_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_gfReg CHECK( GF_REG IN('A','P','S')));
GO
CREATE VIEW VGRUPOFAVORECIDO AS
  SELECT GF_CODIGO,GF_NOME,GF_ATIVO,GF_REG,GF_CODUSR FROM GRUPOFAVORECIDO
GO  
CREATE TABLE dbo.BKPGRUPOFAVORECIDO(
  GF_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,GF_ACAO VARCHAR(1) NOT NULL
  ,GF_DATA DATE DEFAULT GETDATE() NOT NULL
  ,GF_CODIGO INTEGER NOT NULL
  ,GF_NOME VARCHAR(40) NOT NULL
  ,GF_ATIVO VARCHAR(1) NOT NULL
  ,GF_REG VARCHAR(1) NOT NULL
  ,GF_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpGfAcao CHECK( GF_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                 O P E R A D O R A                               --
--tbloperadora
-------------------------------------------------------------------------------------
GO  
CREATE TABLE OPERADORA(
  OPE_CODFVR INTEGER NOT NULL
  ,OPE_ATIVO VARCHAR(1) NOT NULL
  ,OPE_REG VARCHAR(1) NOT NULL
  ,OPE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_opeAtivo CHECK( OPE_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_opeReg CHECK( OPE_REG IN('A','P','S'))
  ,CONSTRAINT PKOPERADORA PRIMARY KEY (OPE_CODFVR));
GO
CREATE VIEW VOPERADORA AS
  SELECT OPE_CODFVR,OPE_ATIVO,OPE_REG,OPE_CODUSR FROM OPERADORA
GO  
CREATE TABLE dbo.BKPOPERADORA(
  OPE_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,OPE_ACAO VARCHAR(1) NOT NULL
  ,OPE_DATA DATE DEFAULT GETDATE() NOT NULL
  ,OPE_CODFVR INTEGER NOT NULL
  ,OPE_ATIVO VARCHAR(1) NOT NULL
  ,OPE_REG VARCHAR(1) NOT NULL
  ,OPE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpOpeAcao CHECK( OPE_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                           D U P L I C I D A D E G M P
--tblduplicidadegmp ( checa a duplicidade de serie/sincard por fabricante )
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.DUPLICIDADEGMP(
  DUP_CODIGO VARCHAR(30) NOT NULL
  ,DUP_CODGMP INTEGER NOT NULL
  ,CONSTRAINT PKDUPLICIDADEGMP PRIMARY KEY (DUP_CODIGO)    
);
-------------------------------------------------------------------------------------
--                      G R U P O M O D E L O L O T E
--tblgrupomodelolote
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.GRUPOMODELOLOTE(
  GML_CODIGO INTEGER NOT NULL
  ,GML_CODGM INTEGER NOT NULL               -- GRUPOMODELO  
  ,GML_DATA DATE NOT NULL
  ,GML_ENTRADA INTEGER NOT NULL
  ,GML_CODGMPINI INTEGER NOT NULL
  ,GML_CODGMPFIM INTEGER NOT NULL
  ,GML_CODUSR INTEGER NOT NULL
  ,CONSTRAINT PKGRUPOMODELOLOTE PRIMARY KEY (GML_CODIGO)    
);
GO
CREATE VIEW VGRUPOMODELOLOTE AS
  SELECT GML_CODIGO
         ,GML_CODGM
         ,GML_DATA
         ,GML_ENTRADA
         ,GML_CODGMPINI
         ,GML_CODGMPFIM
         ,GML_CODUSR
    FROM GRUPOMODELOLOTE
-------------------------------------------------------------------------------------
--                              G R U P O M O D E L O
--tblgrupomodelo
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.GRUPOMODELO(
  GM_CODIGO INTEGER IDENTITY NOT NULL
  ,GM_CODFBR INTEGER NOT NULL
  ,GM_NOME VARCHAR(30) NOT NULL  
  ,GM_CODGP VARCHAR(3) NOT NULL
  ,GM_ESTOQUE INTEGER NOT NULL  
  ,GM_NUMSERIE VARCHAR(1) NOT NULL
  ,GM_SINCARD VARCHAR(1) NOT NULL
  ,GM_OPERADORA VARCHAR(1) NOT NULL
  ,GM_FONE VARCHAR(1) NOT NULL
  ,GM_CONTRATO VARCHAR(1) NOT NULL  
  ,GM_VENDA VARCHAR(1) NOT NULL
  ,GM_LOCACAO VARCHAR(1) NOT NULL  
  ,GM_GPOBRIGATORIO VARCHAR(40) NOT NULL  
  ,GM_GMOBRIGATORIO VARCHAR(70) NOT NULL  
  ,GM_GPACEITO VARCHAR(40) NOT NULL  
  ,GM_GMACEITO VARCHAR(70) NOT NULL  
  ,GM_VALORVISTA NUMERIC(15,2) NOT NULL
  ,GM_VALORPRAZO NUMERIC(15,2) NOT NULL  
  ,GM_VALORMINIMO NUMERIC(15,2) NOT NULL    
  ,GM_ATIVO VARCHAR(1) NOT NULL
  ,GM_REG VARCHAR(1) NOT NULL
  ,GM_CODUSR  INTEGER NOT NULL
  ,CONSTRAINT chk_gmEstoque CHECK( GM_ESTOQUE >= 0 )
  ,CONSTRAINT chk_gmNumSerie CHECK( GM_NUMSERIE IN('S','N'))  
  ,CONSTRAINT chk_gmSinCard CHECK( GM_SINCARD IN('S','N'))  
  ,CONSTRAINT chk_gmOperadora CHECK( GM_OPERADORA IN('S','N'))  
  ,CONSTRAINT chk_gmFone CHECK( GM_FONE IN('S','N'))  
  ,CONSTRAINT chk_gmVenda CHECK( GM_VENDA IN('S','N'))  
  ,CONSTRAINT chk_gmLocacao CHECK( GM_LOCACAO IN('S','N'))    
  ,CONSTRAINT chk_gmContrato CHECK( GM_CONTRATO IN('S','N'))  
  ,CONSTRAINT chk_gmValorVista CHECK( GM_VALORVISTA >= 0 )  
  ,CONSTRAINT chk_gmValorPrazo CHECK( GM_VALORPRAZO >= 0 )    
  ,CONSTRAINT chk_gmValorMinimo CHECK( GM_VALORMINIMO >= 0 )      
  ,CONSTRAINT chk_gmAtivo CHECK( GM_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_gmReg CHECK( GM_REG IN('A','P','S'))
  ,CONSTRAINT PKGRUPOMODELO PRIMARY KEY (GM_CODIGO)    
);
GO
CREATE VIEW VGRUPOMODELO AS
  SELECT GM_CODIGO
         ,GM_CODFBR
         ,GM_NOME
         ,GM_CODGP
         ,GM_ESTOQUE
         ,GM_NUMSERIE
         ,GM_SINCARD
         ,GM_OPERADORA
         ,GM_FONE
         ,GM_CONTRATO         
         ,GM_VENDA
         ,GM_LOCACAO         
         ,GM_GPOBRIGATORIO
         ,GM_GMOBRIGATORIO
         ,GM_GPACEITO
         ,GM_GMACEITO
         ,GM_VALORVISTA
         ,GM_VALORPRAZO
         ,GM_VALORMINIMO         
         ,GM_ATIVO
         ,GM_REG
         ,GM_CODUSR 
    FROM GRUPOMODELO
GO  
CREATE TABLE dbo.BKPGRUPOMODELO(
  GM_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,GM_ACAO VARCHAR(1) NOT NULL
  ,GM_DATA DATE DEFAULT GETDATE() NOT NULL
  ,GM_CODIGO INTEGER NOT NULL
  ,GM_CODFBR INTEGER NOT NULL
  ,GM_NOME VARCHAR(30) NOT NULL  
  ,GM_CODGP VARCHAR(3) NOT NULL
  ,GM_ESTOQUE INTEGER NOT NULL  
  ,GM_NUMSERIE VARCHAR(1) NOT NULL
  ,GM_SINCARD VARCHAR(1) NOT NULL
  ,GM_OPERADORA VARCHAR(1) NOT NULL
  ,GM_FONE VARCHAR(1) NOT NULL
  ,GM_CONTRATO VARCHAR(1) NOT NULL  
  ,GM_VENDA VARCHAR(1) NOT NULL
  ,GM_LOCACAO VARCHAR(1) NOT NULL  
  ,GM_GPOBRIGATORIO VARCHAR(40) NOT NULL  
  ,GM_GMOBRIGATORIO VARCHAR(70) NOT NULL  
  ,GM_GPACEITO VARCHAR(40) NOT NULL  
  ,GM_GMACEITO VARCHAR(70) NOT NULL  
  ,GM_VALORVISTA NUMERIC(15,2) NOT NULL
  ,GM_VALORPRAZO NUMERIC(15,2) NOT NULL 
  ,GM_VALORMINIMO NUMERIC(15,2) NOT NULL   
  ,GM_ATIVO VARCHAR(1) NOT NULL
  ,GM_REG VARCHAR(1) NOT NULL
  ,GM_CODUSR  INTEGER NOT NULL
  ,CONSTRAINT chk_bkpGmAcao CHECK( GM_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                           G R U P O M O D E L O P R O D U T O
--tblgrupomodeloproduto
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.GRUPOMODELOPRODUTO(
  GMP_CODIGO INTEGER NOT NULL
  ,GMP_CODCNTT INTEGER NOT NULL  
  ,GMP_CODGM INTEGER NOT NULL
  ,GMP_CODGP VARCHAR(3) NOT NULL
  ,GMP_CODPE VARCHAR(3) NOT NULL
  ,GMP_CODFVR INTEGER NOT NULL
  ,GMP_CODFBR INTEGER NOT NULL
  ,GMP_CODAUT INTEGER NOT NULL  
  ,GMP_NUMSERIE VARCHAR(20) NOT NULL
  ,GMP_SINCARD VARCHAR(20) NOT NULL
  ,GMP_OPERADORA VARCHAR(15) NOT NULL
  ,GMP_FONE VARCHAR(15) NOT NULL
  ,GMP_CONTRATO VARCHAR(10) NOT NULL
  ,GMP_CODGML INTEGER NOT NULL
  ,GMP_DTCONFIGURADO DATE
  ,GMP_DTEMPENHO DATE
  ,GMP_PLACACHASSI VARCHAR(20) NOT NULL
  ,GMP_COMPOSICAO INTEGER NOT NULL
  ,GMP_CODUSR INTEGER NOT NULL    
  ,CONSTRAINT PKGRUPOMODELOPRODUTO PRIMARY KEY (GMP_CODIGO)    
);
GO
CREATE VIEW VGRUPOMODELOPRODUTO AS
  SELECT GMP_CODIGO
         ,GMP_CODCNTT  
         ,GMP_CODGM
         ,GMP_CODGP
         ,GMP_CODPE
         ,GMP_CODFVR
         ,GMP_CODFBR
         ,GMP_CODAUT         
         ,GMP_NUMSERIE
         ,GMP_SINCARD
         ,GMP_OPERADORA
         ,GMP_FONE
         ,GMP_CONTRATO
         ,GMP_CODGML
         ,GMP_DTCONFIGURADO
         ,GMP_DTEMPENHO
         ,GMP_PLACACHASSI
         ,GMP_COMPOSICAO
         ,GMP_CODUSR
    FROM GRUPOMODELOPRODUTO
GO    
CREATE TABLE dbo.BKPGRUPOMODELOPRODUTO(
  GMP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,GMP_ACAO VARCHAR(1) NOT NULL
  ,GMP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,GMP_CODIGO INTEGER NOT NULL
  ,GMP_CODCNTT INTEGER NOT NULL  
  ,GMP_CODGM INTEGER NOT NULL
  ,GMP_CODGP VARCHAR(3) NOT NULL
  ,GMP_CODPE VARCHAR(3) NOT NULL
  ,GMP_CODFVR INTEGER NOT NULL
  ,GMP_CODFBR INTEGER NOT NULL
  ,GMP_CODAUT INTEGER NOT NULL  
  ,GMP_NUMSERIE VARCHAR(20) NOT NULL
  ,GMP_SINCARD VARCHAR(20) NOT NULL
  ,GMP_OPERADORA VARCHAR(15) NOT NULL
  ,GMP_FONE VARCHAR(15) NOT NULL
  ,GMP_CONTRATO VARCHAR(10) NOT NULL
  ,GMP_CODGML INTEGER NOT NULL
  ,GMP_DTCONFIGURADO DATE
  ,GMP_DTEMPENHO DATE  
  ,GMP_PLACACHASSI VARCHAR(20) NOT NULL
  ,GMP_COMPOSICAO INTEGER NOT NULL
  ,GMP_CODUSR INTEGER NOT NULL    
  ,CONSTRAINT chk_bkpGmpAcao CHECK( GMP_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                           G R U P O M O D E L O S E R V I C O
--tblgrupomodelo
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.GRUPOMODELOSERVICO(
  GMS_CODGM INTEGER NOT NULL
  ,GMS_CODSRV INTEGER NOT NULL
  ,GMS_VENDALOCACAO VARCHAR(1) NOT NULL  
  ,GMS_MENSAL VARCHAR(1) NOT NULL  
  ,GMS_OBRIGATORIO VARCHAR(1) NOT NULL    
  ,GMS_VALOR NUMERIC(15,2) NOT NULL
  ,GMS_ATIVO VARCHAR(1) NOT NULL
  ,GMS_REG VARCHAR(1) NOT NULL
  ,GMS_CODUSR  INTEGER NOT NULL
  ,CONSTRAINT chk_gmsVendaLocacao CHECK( GMS_VENDALOCACAO IN('V','L','D'))  
  ,CONSTRAINT chk_gmsMensal CHECK( GMS_MENSAL IN('S','N'))    
  ,CONSTRAINT chk_gmsObrigatorio CHECK( GMS_OBRIGATORIO IN('S','N'))      
  ,CONSTRAINT chk_gmsValor CHECK( GMS_VALOR > 0 )
  ,CONSTRAINT chk_gmsAtivo CHECK( GMS_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_gmsReg CHECK( GMS_REG IN('A','P','S'))
  ,CONSTRAINT PKGRUPOMODELOSERVICO PRIMARY KEY (GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO)    
);
GO
CREATE VIEW VGRUPOMODELOSERVICO AS
  SELECT GMS_CODGM
         ,GMS_CODSRV
         ,GMS_VENDALOCACAO
         ,GMS_MENSAL
         ,GMS_OBRIGATORIO
         ,GMS_VALOR
         ,GMS_ATIVO
         ,GMS_REG
         ,GMS_CODUSR
    FROM GRUPOMODELOSERVICO
GO  
CREATE TABLE dbo.BKPGRUPOMODELOSERVICO(
  GMS_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,GMS_ACAO VARCHAR(1) NOT NULL
  ,GMS_DATA DATE DEFAULT GETDATE() NOT NULL
  ,GMS_CODGM INTEGER NOT NULL
  ,GMS_CODSRV INTEGER NOT NULL
  ,GMS_VENDALOCACAO VARCHAR(1) NOT NULL  
  ,GMS_MENSAL VARCHAR(1) NOT NULL  
  ,GMS_OBRIGATORIO VARCHAR(1) NOT NULL    
  ,GMS_VALOR NUMERIC(15,2) NOT NULL
  ,GMS_ATIVO VARCHAR(1) NOT NULL
  ,GMS_REG VARCHAR(1) NOT NULL
  ,GMS_CODUSR  INTEGER NOT NULL
  ,CONSTRAINT chk_bkpGmsAcao CHECK( GMS_ACAO IN('I','A','E'))  
);
/*
SELECT 'INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES('
+''+CAST(GMS_CODGM AS VARCHAR(10))
+','''+CAST(GMS_CODSRV AS VARCHAR(20))
+''','''+CAST(GMS_VENDALOCACAO AS VARCHAR(10))
+''','''+CAST(GMS_MENSAL AS VARCHAR(10))
+''','''+CAST(GMS_OBRIGATORIO AS VARCHAR(10))
+''','''+CAST(GMS_VALOR AS VARCHAR(10))
+''','''+CAST(GMS_ATIVO AS VARCHAR(10))
+''','''+CAST(GMS_REG AS VARCHAR(10))
+''',1);'
FROM GRUPOMODELOSERVICO
*/
GO
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(16,'1','L','S','N','26.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(16,'1','V','S','N','27.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(16,'2','L','N','S','21.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(16,'2','V','N','S','22.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(16,'3','L','S','N','13.50','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(16,'3','V','S','N','14.50','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(17,'1','L','S','N','25.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(17,'1','V','S','N','25.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(17,'2','L','N','S','20.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(17,'2','V','N','S','20.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(17,'3','L','S','N','12.50','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(17,'3','V','S','N','12.50','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(18,'1','L','S','N','28.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(18,'1','V','S','N','29.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(18,'2','L','N','S','23.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(18,'2','V','N','S','25.00','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(18,'3','L','S','N','16.50','S','P',1);
INSERT INTO GRUPOMODELOSERVICO(GMS_CODGM,GMS_CODSRV,GMS_VENDALOCACAO,GMS_MENSAL,GMS_OBRIGATORIO,GMS_VALOR,GMS_ATIVO,GMS_REG,GMS_CODUSR) VALUES(18,'3','V','S','N','18.50','S','P',1);
-------------------------------------------------------------------------------------
--                           G R U P O P R O D U T O                               --
-------------------------------------------------------------------------------------
GO
CREATE TABLE GRUPOPRODUTO(
  GP_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,GP_NOME VARCHAR(20) NOT NULL
  ,GP_ATIVO VARCHAR(1) NOT NULL
  ,GP_REG VARCHAR(1) NOT NULL
  ,GP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_gpAtivo CHECK( GP_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_gpReg CHECK( GP_REG IN('A','P','S')));
GO
CREATE VIEW VGRUPOPRODUTO AS
  SELECT GP_CODIGO,GP_NOME,GP_ATIVO,GP_REG,GP_CODUSR FROM GRUPOPRODUTO
GO  
CREATE TABLE dbo.BKPGRUPOPRODUTO(
  GP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,GP_ACAO VARCHAR(1) NOT NULL
  ,GP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,GP_CODIGO VARCHAR(3) NOT NULL
  ,GP_NOME VARCHAR(20) NOT NULL
  ,GP_ATIVO VARCHAR(1) NOT NULL
  ,GP_REG VARCHAR(1) NOT NULL
  ,GP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPgrAcao CHECK( GP_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                I M P O S T O                                    --
-- Parametrizacao de impostos para NFP                                             -- 
--tblimposto
-------------------------------------------------------------------------------------
GO
CREATE TABLE IMPOSTO(
  IMP_UFDE VARCHAR(3) NOT NULL            --ESTADO
  ,IMP_UFPARA VARCHAR(3) NOT NULL         --ESTADO
  ,IMP_CODNCM VARCHAR(10) NOT NULL        --NCM
  ,IMP_CODCTG VARCHAR(3) NOT NULL         --CATEGORIA
  ,IMP_ENTSAI VARCHAR(1) NOT NULL
  ,IMP_CODNO VARCHAR(2) NOT NULL          --NATUREZAOPERACAO
  ,IMP_CFOP VARCHAR(5) NOT NULL           --CFOP
  ,IMP_CSTICMS VARCHAR(3) NOT NULL
  ,IMP_ALIQICMS NUMERIC(6,2) NOT NULL
  ,IMP_REDUCAOBC NUMERIC(15,4) NOT NULL
  ,IMP_CSTIPI VARCHAR(3) NOT NULL
  ,IMP_ALIQIPI NUMERIC(6,2) NOT NULL
  ,IMP_CSTPIS VARCHAR(3) NOT NULL
  ,IMP_ALIQPIS NUMERIC(6,2) NOT NULL
  ,IMP_CSTCOFINS VARCHAR(3) NOT NULL
  ,IMP_ALIQCOFINS NUMERIC(6,2) NOT NULL
  ,IMP_ALIQST NUMERIC(6,2) NOT NULL
  ,IMP_ALTERANFP VARCHAR(1) NOT NULL
  ,IMP_CODEMP INTEGER NOT NULL
  ,IMP_CODFLL INTEGER NOT NULL   
  ,IMP_ATIVO VARCHAR(1) NOT NULL
  ,IMP_REG VARCHAR(1) NOT NULL
  ,IMP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_impEntSai CHECK( IMP_ENTSAI IN('E','S'))  
  ,CONSTRAINT chk_impAlterarNfp CHECK( IMP_ALTERANFP IN('S','N'))  
  ,CONSTRAINT chk_impAtivo CHECK( IMP_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_impReg CHECK( IMP_REG IN('A','P','S'))
  ,CONSTRAINT PKIMPOSTO PRIMARY KEY (IMP_UFDE, IMP_UFPARA, IMP_CODNCM, IMP_CODCTG, IMP_ENTSAI, IMP_CODNO, IMP_CODEMP,IMP_CODFLL));
GO
CREATE VIEW VIMPOSTO AS
  SELECT IMP_UFDE
         ,IMP_UFPARA
         ,IMP_CODNCM
         ,IMP_CODCTG
         ,IMP_ENTSAI
         ,IMP_CODNO
         ,IMP_CFOP
         ,IMP_CSTICMS
         ,IMP_ALIQICMS
         ,IMP_REDUCAOBC
         ,IMP_CSTIPI
         ,IMP_ALIQIPI
         ,IMP_CSTPIS
         ,IMP_ALIQPIS
         ,IMP_CSTCOFINS
         ,IMP_ALIQCOFINS
         ,IMP_ALIQST
         ,IMP_ALTERANFP
         ,IMP_CODEMP
         ,IMP_CODFLL
         ,IMP_ATIVO
         ,IMP_REG
         ,IMP_CODUSR
    FROM IMPOSTO
GO
CREATE TABLE dbo.BKPIMPOSTO(
  IMP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,IMP_ACAO VARCHAR(1) NOT NULL
  ,IMP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,IMP_UFDE VARCHAR(3) NOT NULL
  ,IMP_UFPARA VARCHAR(3) NOT NULL
  ,IMP_CODNCM VARCHAR(10) NOT NULL
  ,IMP_CODCTG VARCHAR(3) NOT NULL
  ,IMP_ENTSAI VARCHAR(1) NOT NULL
  ,IMP_CODNO VARCHAR(2) NOT NULL
  ,IMP_CFOP VARCHAR(5) NOT NULL
  ,IMP_CSTICMS VARCHAR(3) NOT NULL
  ,IMP_ALIQICMS NUMERIC(6,2) NOT NULL
  ,IMP_REDUCAOBC NUMERIC(15,4) NOT NULL
  ,IMP_CSTIPI VARCHAR(3) NOT NULL
  ,IMP_ALIQIPI NUMERIC(6,2) NOT NULL
  ,IMP_CSTPIS VARCHAR(3) NOT NULL
  ,IMP_ALIQPIS NUMERIC(6,2) NOT NULL
  ,IMP_CSTCOFINS VARCHAR(3) NOT NULL
  ,IMP_ALIQCOFINS NUMERIC(6,2) NOT NULL
  ,IMP_ALIQST NUMERIC(6,2) NOT NULL
  ,IMP_ALTERANFP VARCHAR(1) NOT NULL
  ,IMP_CODEMP INTEGER NOT NULL
  ,IMP_CODFLL INTEGER NOT NULL   
  ,IMP_ATIVO VARCHAR(1) NOT NULL
  ,IMP_REG VARCHAR(1) NOT NULL
  ,IMP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpImpAcao CHECK( IMP_ACAO IN('I','A','E'))  
);
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- IMP_UFDE       | SEL |    |    | VC(03) NN          | Campo relacionado (ESTADO)   
   -- EST_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (ESTADO)         
   -- IMP_UFPARA     | SEL |    |    | VC(03) NN          | Campo relacionado (ESTADO)   
   -- EST_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (ESTADO)         
   -- IMP_CODNCM     | SEL |    |    | VC(10) NN          | Campo relacionado (NCM)   
   -- NCM_NOME       | SEL |    |    | VC(60) NN          | Campo relacionado (NCM)   
   -- IMP_CODCTG     | SEL |    |    | VC(3) NN           | Campo relacionado (CATEGORIA)   
   -- CTG_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (CATEGORIA) 
   -- IMP_ENTSAI     | CC  |    |    | VC(1) NN           |  
   -- IMP_CODNO      |     |    |    | VC(2) NN           | Campo relacionado (NATUREZAOPERACAO)
   -- NO_NOME        | SEL |    |    | VC(30) NN          | Campo relacionado (NATUREZAOPERACAO)    
   -- IMP_CFOP       | SEL |    |    | VC(5) NN           | Campo relacionado (CFOP)      
   -- CFO_NOME       | SEL |    |    | VC(30) NN          | Campo relacionado (CFOP)       
   -- IMP_CSTICMS    | SEL |    |    | VC(3) NN           | Campo relacionado (CSTICMS)       
   -- ICMS_NOME      | SEL |    |    | VC(60) NN          | Campo relacionado (CSTICMS)   
   -- IMP_ALIQICMS   |     |    |    | NUM(6,2) NN        |
   -- IMP_REDUCAOBC  |     |    |    | NUM(15,4) NN       |
   -- IMP_CSTIPI     | SEL |    |    | VC(3) NN           | Campo relacionado (CSTIPI)
   -- IPI_NOME       | SEL |    |    | VC(60) NN          | Campo relacionado (CSTIPI)   
   -- IMP_ALIQIPI    |     |    |    | NUM(6,2) NN        |
   -- IMP_CSTPIS     | SEL |    |    | VC(3) NN           | Campo relacionado (CSTPIS)
   -- PIS_NOME       | SEL |    |    | VC(60) NN          | Campo relacionado (CSTPIS)   
   -- IMP_ALIQPIS    |     |    |    | NUM(6,2) NN        |
   -- IMP_CSTCOFINS  | SEL |    |    | VC(3) NN           | Campo relacionado (CSTPIS)   
   -- PIS_NOME       | SEL |    |    | VC(60) NN          | Campo relacionado (CSTPIS)   
   -- IMP_ALIQCOFINS |     |    |    | NUM(6,2) NN        |
   -- IMP_ALIQST     |     |    |    | NUM(6,2) NN        |
   -- IMP_ALTERARNFP | CC  |    |    | VC(1) NN           |  
   -- IMP_CODFLL     | SEL |    |    | INT NN             | Campo relacionado (FILIAL)
   -- FLL_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (FILIAL)        
   -- IMP_CODEMP     | SEL |    |    | INT NN             | Campo relacionado (EMPRESA)  
   -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
   -- IMP_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- IMP_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- IMP_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D23         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
--
--
-------------------------------------------------------------------------------------
--                               L O G R A D O U R O
--tbllogradouro
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.LOGRADOURO(
  LGR_CODIGO VARCHAR(5) PRIMARY KEY NOT NULL
  ,LGR_NOME VARCHAR(20) NOT NULL
  ,LGR_ATIVO VARCHAR(1) NOT NULL
  ,LGR_REG VARCHAR(1) NOT NULL
  ,LGR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_lgrAtivo CHECK( LGR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_lgrReg CHECK( LGR_REG IN('A','P','S'))
);
GO
CREATE VIEW VLOGRADOURO AS
  SELECT LGR_CODIGO,LGR_NOME,LGR_ATIVO,LGR_REG,LGR_CODUSR FROM LOGRADOURO
GO
CREATE TABLE dbo.BKPLOGRADOURO(
  LGR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,LGR_ACAO VARCHAR(1) NOT NULL
  ,LGR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,LGR_CODIGO VARCHAR(5) NOT NULL
  ,LGR_NOME VARCHAR(20) NOT NULL
  ,LGR_ATIVO VARCHAR(1) NOT NULL
  ,LGR_REG VARCHAR(1) NOT NULL
  ,LGR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpLgrAcao CHECK( LGR_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                  M O E D A                                      --
--tblmoeda                                                                         --
-------------------------------------------------------------------------------------
CREATE TABLE MOEDA(
  MOE_CODIGO VARCHAR(4) PRIMARY KEY NOT NULL
  ,MOE_NOME VARCHAR(20) NOT NULL
  ,MOE_ATIVO VARCHAR(1) NOT NULL
  ,MOE_REG VARCHAR(1) NOT NULL
  ,MOE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_moeAtivo CHECK( MOE_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_moeReg CHECK( MOE_REG IN('A','P','S')));
GO
CREATE VIEW VMOEDA AS
  SELECT MOE_CODIGO,MOE_NOME,MOE_ATIVO,MOE_REG,MOE_CODUSR FROM MOEDA
GO  
CREATE TABLE dbo.BKPMOEDA(
  MOE_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,MOE_ACAO VARCHAR(1) NOT NULL
  ,MOE_DATA DATE DEFAULT GETDATE() NOT NULL
  ,MOE_CODIGO VARCHAR(4) NOT NULL
  ,MOE_NOME VARCHAR(20) NOT NULL
  ,MOE_ATIVO VARCHAR(1) NOT NULL
  ,MOE_REG VARCHAR(1) NOT NULL
  ,MOE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpMoeAcao CHECK( MOE_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                       N A T U R E Z A O P E R A C A O                           --
--tblnaturezaoperacao
-------------------------------------------------------------------------------------
CREATE TABLE NATUREZAOPERACAO(
  NO_CODIGO VARCHAR(2) PRIMARY KEY NOT NULL
  ,NO_NOME VARCHAR(30) NOT NULL
  ,NO_FINNFE VARCHAR(1) NOT NULL
  ,NO_ATIVO VARCHAR(1) NOT NULL
  ,NO_REG VARCHAR(1) NOT NULL
  ,NO_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_noFinNfe CHECK( NO_FINNFE IN('1','2','3','4'))    
  ,CONSTRAINT chk_noAtivo CHECK( NO_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_noReg CHECK( NO_REG IN('A','P','S')));
GO
CREATE VIEW VNATUREZAOPERACAO AS
  SELECT NO_CODIGO,NO_NOME,NO_FINNFE,NO_ATIVO,NO_REG,NO_CODUSR FROM NATUREZAOPERACAO
GO  
CREATE TABLE dbo.BKPNATUREZAOPERACAO(
  NO_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,NO_ACAO VARCHAR(1) NOT NULL
  ,NO_DATA DATE DEFAULT GETDATE() NOT NULL
  ,NO_CODIGO VARCHAR(2) NOT NULL
  ,NO_NOME VARCHAR(30) NOT NULL
  ,NO_FINNFE VARCHAR(1) NOT NULL
  ,NO_ATIVO VARCHAR(1) NOT NULL
  ,NO_REG VARCHAR(1) NOT NULL
  ,NO_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpNoAcao CHECK( NO_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                    N C M                                        --
--tblncm
-------------------------------------------------------------------------------------
GO
CREATE TABLE NCM(
  NCM_CODIGO VARCHAR(10) PRIMARY KEY NOT NULL
  ,NCM_NOME VARCHAR(60) NOT NULL
  ,NCM_ATIVO VARCHAR(1) NOT NULL
  ,NCM_REG VARCHAR(1) NOT NULL
  ,NCM_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_ncmCodigo CHECK( NCM_CODIGO LIKE('[0-9][0-9][0-9][0-9][.][0-9][0-9][.][0-9][0-9]'))  
  ,CONSTRAINT chk_ncmAtivo CHECK( NCM_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ncmReg CHECK( NCM_REG IN('A','P','S'))
);
GO
CREATE VIEW VNCM AS
  SELECT NCM_CODIGO,NCM_NOME,NCM_ATIVO,NCM_REG,NCM_CODUSR FROM NCM
GO  
CREATE TABLE dbo.BKPNCM(
  NCM_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,NCM_ACAO VARCHAR(1) NOT NULL
  ,NCM_DATA DATE DEFAULT GETDATE() NOT NULL
  ,NCM_CODIGO VARCHAR(10) NOT NULL
  ,NCM_NOME VARCHAR(60) NOT NULL
  ,NCM_ATIVO VARCHAR(1) NOT NULL
  ,NCM_REG VARCHAR(1) NOT NULL
  ,NCM_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpNcmAcao CHECK( NCM_ACAO IN('I','A','E'))  
);

-------------------------------------------------------------------------------------
--                               N F S E R V I C O                                 --
-- NFS_ENTSAI tem checar com SNF_ENTSAI                                            --
--tblnfservico
-------------------------------------------------------------------------------------
GO
CREATE TABLE NFSERVICO(
  NFS_NUMNF INTEGER NOT NULL
  ,NFS_CODSNF INTEGER NOT NULL              -- SERIENF
  ,NFS_LANCTO INTEGER NOT NULL
  ,NFS_VLRTOTAL NUMERIC(15,2) NOT NULL
  ,NFS_VLRRETENCAO NUMERIC(15,2) NOT NULL
  ,NFS_DTCANCELA DATE
  ,NFS_CODCMP INTEGER NOT NULL              -- COMPETENCIA
  ,NFS_CODVND INTEGER NOT NULL              -- VENDEDOR
  ,NFS_LOTENFE INTEGER NOT NULL
  ,NFS_CODVERIFICACAO VARCHAR(50)
  ,NFS_NUMORIGEM INTEGER NOT NULL
  ,NFS_DTORIGEM DATE
  ,NFS_CODCDD VARCHAR(7) NOT NULL           -- CIDADE
  ,NFS_STATUSWS VARCHAR(200)
  ,NFS_CONTRATO INTEGER NOT NULL
  ,NFS_ENTSAI VARCHAR(1) NOT NULL  
  ,NFS_REG VARCHAR(1) NOT NULL
  ,NFS_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_nfsEntSai CHECK( NFS_ENTSAI IN('E','S'))    
  ,CONSTRAINT chk_nfsReg CHECK( NFS_REG IN('A','P','S'))
  ,CONSTRAINT PKNFSERVICO PRIMARY KEY(NFS_NUMNF,NFS_CODSNF));      
GO
CREATE VIEW VNFSERVICO AS
  SELECT NFS_NUMNF
         ,NFS_CODSNF
         ,NFS_LANCTO
         ,NFS_VLRTOTAL
         ,NFS_VLRRETENCAO
         ,NFS_DTCANCELA
         ,NFS_CODCMP
         ,NFS_CODVND
         ,NFS_LOTENFE
         ,NFS_CODVERIFICACAO
         ,NFS_NUMORIGEM
         ,NFS_DTORIGEM
         ,NFS_CODCDD
         ,NFS_STATUSWS
         ,NFS_CONTRATO
         ,NFS_ENTSAI
         --,NFS_ATIVO
         ,NFS_REG
         ,NFS_CODUSR
    FROM NFSERVICO
   -- -------------------|------|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO              |INS   |UPD |DEL | TIPO               | Obs
   -- -------------------|------|----|----|--------------------|----------------------------------------------------------
   -- NFS_NUMNF          | PK   |    |    | INT NN             |  
   -- NFS_CODSNF         |SEL/PK|    |    | INT NN             | Campo relacionado (SERIENF)
   -- SNF_ENTSAI         | SEL  |    |    | VC(1) NN           | Campo relacionado (SERIENF)   
   -- NFS_LANCTO         |      |    |    | INT NN             |   
   -- NFS_VLRTOTAL       |      |    |    | NUM(15,2) NN       |
   -- NFS_VLRRETENCAO    |      |    |    | NUM(15,2) NN       |
   -- NFS_DTCANCELA      |      |    |    | DAT                |     
   -- NFS_CODCMP         | SEL  |    |    | INT NN             | Campo relacionado (COMPETENCIA)
   -- CMP_NOME           | SEL  |    |    | VC(6) NN           | Campo relacionado (COMPETENCIA)        
   -- NFS_CODVND         | SEL  |    |    | INT NN             | Campo relacionado (VENDEDOR)
   -- VND_NOME           | SEL  |    |    | VC(40) NN          | Campo relacionado (VENDEDOR)        
   -- NFS_LOTENFE        |      |    |    | INT NN             |
   -- NFS_CODVERIFICACAO |      |    |    | VC(50)             |
   -- NFS_NUMORIGEM      |      |    |    | INT NN             |
   -- NFS_DTORIGEM       |      |    |    | DAT                |
   -- NFS_CODCDD         | SEL  |    |    | VC(7) NN           | Campo relacionado (CIDADE)   
   -- CDD_NOME           | SEL  |    |    | VC(30) NN          | Campo relacionado (CIDADE)      
   -- NFS_STATUSWS       |      |    |    | VC(200)            |
   -- NFS_CONTRATO       |      |    |    | INT NN             |
   -- NFS_ENTSAI         | CC   |    |    | VC(1) NN           |  
   -- NFS_ATIVO          | CC   |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- NFS_REG            | FNC  |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- NFS_CODUSR         | OK   |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO        | SEL  |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB         | SEL  |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D27             | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31             | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- -------------------|------|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- --------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
--                            N F S E R V I C O I T E M                            --
--tblnfservicoitem
-------------------------------------------------------------------------------------
GO
CREATE TABLE NFSERVICOITEM(
  NFSI_LANCTO INTEGER NOT NULL
  ,NFSI_ITEM INTEGER NOT NULL
  ,NFSI_CODSRV INTEGER NOT NULL                --SERVICO
  ,NFSI_UNIDADES NUMERIC(15,4) NOT NULL
  ,NFSI_VLRUNITARIO NUMERIC(15,2) NOT NULL
  ,NFSI_VLRITEM NUMERIC(15,2) NOT NULL
  ,NFSI_VLRDESCONTO NUMERIC(15,2) NOT NULL
  ,NFSI_ALIQINSSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_BCINSSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_VLRINSSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_ALIQINSS NUMERIC(15,2) NOT NULL
  ,NFSI_BCINSS NUMERIC(15,2) NOT NULL
  ,NFSI_VLRINSS NUMERIC(15,2) NOT NULL
  ,NFSI_ALIQIRRFFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_BCIRRFFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_VLRIRRFFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_ALIQIRRF NUMERIC(15,2) NOT NULL
  ,NFSI_BCIRRF NUMERIC(15,2) NOT NULL
  ,NFSI_VLRIRRF NUMERIC(15,2) NOT NULL
  ,NFSI_ALIQPISFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_BCPISFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_VLRPISFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_ALIQPIS NUMERIC(15,2) NOT NULL
  ,NFSI_BCPIS NUMERIC(15,2) NOT NULL
  ,NFSI_VLRPIS NUMERIC(15,2) NOT NULL
  ,NFSI_ALIQCOFINSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_BCCOFINSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_VLRCOFINSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_ALIQCOFINS NUMERIC(15,2) NOT NULL
  ,NFSI_BCCOFINS NUMERIC(15,2) NOT NULL
  ,NFSI_VLRCOFINS NUMERIC(15,2) NOT NULL
  ,NFSI_ALIQCSLL NUMERIC(15,2) NOT NULL
  ,NFSI_BCCSLL NUMERIC(15,2) NOT NULL
  ,NFSI_VLRCSLL NUMERIC(15,2) NOT NULL
  ,NFSI_ALIQISSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_BCISSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_VLRISSFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_ALIQISS NUMERIC(15,2) NOT NULL
  ,NFSI_BCISS NUMERIC(15,2) NOT NULL
  ,NFSI_VLRISS NUMERIC(15,2) NOT NULL
  ,NFSI_ALIQCSLLFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_BCCSLLFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_VLRCSLLFAT NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,NFSI_CSTPIS VARCHAR(3) NOT NULL             --CSTPIS
  ,NFSI_CSTCOFINS VARCHAR(3) NOT NULL          --CSTPIS
  ,NFSI_ENTSAI VARCHAR(1) NOT NULL
  ,NFSI_ATIVO VARCHAR(1) NOT NULL
  ,NFSI_REG VARCHAR(1) NOT NULL
  ,NFSI_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_nfsiEntSai CHECK( NFSI_ENTSAI IN('E','S'))  
  ,CONSTRAINT chk_nfsiAtivo CHECK( NFSI_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_nfsiReg CHECK( NFSI_REG IN('A','P','S'))
  ,CONSTRAINT PKNFSERVICOITEM PRIMARY KEY (NFSI_LANCTO, NFSI_ITEM));
GO
CREATE VIEW VNFSERVICOITEM AS
  SELECT NFSI_LANCTO
         ,NFSI_ITEM
         ,NFSI_CODSRV
         ,NFSI_UNIDADES
         ,NFSI_VLRUNITARIO
         ,NFSI_VLRITEM
         ,NFSI_VLRDESCONTO
         ,NFSI_ALIQINSSFAT
         ,NFSI_BCINSSFAT
         ,NFSI_VLRINSSFAT
         ,NFSI_ALIQINSS
         ,NFSI_BCINSS
         ,NFSI_VLRINSS
         ,NFSI_ALIQIRRFFAT
         ,NFSI_BCIRRFFAT
         ,NFSI_VLRIRRFFAT
         ,NFSI_ALIQIRRF
         ,NFSI_BCIRRF
         ,NFSI_VLRIRRF
         ,NFSI_ALIQPISFAT
         ,NFSI_BCPISFAT
         ,NFSI_VLRPISFAT
         ,NFSI_ALIQPIS
         ,NFSI_BCPIS
         ,NFSI_VLRPIS
         ,NFSI_ALIQCOFINSFAT
         ,NFSI_BCCOFINSFAT
         ,NFSI_VLRCOFINSFAT
         ,NFSI_ALIQCOFINS
         ,NFSI_BCCOFINS
         ,NFSI_VLRCOFINS
         ,NFSI_ALIQCSLL
         ,NFSI_BCCSLL
         ,NFSI_VLRCSLL
         ,NFSI_ALIQISSFAT
         ,NFSI_BCISSFAT
         ,NFSI_VLRISSFAT
         ,NFSI_ALIQISS
         ,NFSI_BCISS
         ,NFSI_VLRISS
         ,NFSI_ALIQCSLLFAT
         ,NFSI_BCCSLLFAT
         ,NFSI_VLRCSLLFAT
         ,NFSI_CSTPIS
         ,NFSI_CSTCOFINS
         ,NFSI_ENTSAI
         ,NFSI_ATIVO
         ,NFSI_REG
         ,NFSI_CODUSR
    FROM NFSERVICOITEM
   -- -------------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO              |INS  |UPD |DEL | TIPO               | Obs
   -- -------------------|-----|----|----|--------------------|----------------------------------------------------------
   -- NFSI_LANCTO        | PK  |    |    | INT NN             |
   -- NFSI_ITEM          | PK  |    |    | INT NN             |
   -- NFSI_CODSRV        | SEL |    |    | INT NN             | Campo relacionado (SERVICO)   
   -- SRV_NOME           | SEL |    |    | VC(60) NN          | Campo relacionado (SERVICO)      
   -- NFSI_UNIDADES      |     |    |    | NUM(15,4) NN       |
   -- NFSI_VLRUNITARIO   |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRITEM       |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRDESCONTO   |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQINSSFAT   |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCINSSFAT     |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRINSSFAT    |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQINSS      |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCINSS        |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRINSS       |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQIRRFFAT   |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCIRRFFAT     |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRIRRFFAT    |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQIRRF      |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCIRRF        |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRIRRF       |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQPISFAT    |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCPISFAT      |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRPISFAT     |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQPIS       |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCPIS         |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRPIS        |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQCOFINSFAT |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCCOFINSFAT   |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRCOFINSFAT  |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQCOFINS    |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCCOFINS      |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRCOFINS     |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQCSLL      |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCCSLL        |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRCSLL       |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQISSFAT    |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCISSFAT      |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRISSFAT     |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQISS       |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCISS         |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRISS        |     |    |    | NUM(15,2) NN       |
   -- NFSI_ALIQCSLLFAT   |     |    |    | NUM(15,2) NN       |
   -- NFSI_BCCSLLFAT     |     |    |    | NUM(15,2) NN       |
   -- NFSI_VLRCSLLFAT    |     |    |    | NUM(15,2) NN       |
   -- NFSI_CSTPIS        | SEL |    |    | VC(3) NN           | Campo relacionado (CSTPIS)
   -- PIS_NOME           | SEL |    |    | VC(60) NN          | Campo relacionado (CSTPIS)   
   -- NFSI_CSTCOFINS     | SEL |    |    | VC(3) NN           | Campo relacionado (CSTPIS)  
   -- NFSI_ENTSAI        | CC  |    |    | VC(1) NN           |    
   -- NFSI_ATIVO         | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- NFSI_REG           | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- NFSI_CODUSR        | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO        | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB         | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D05             | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31             | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- -------------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ------------------------------------------------------------------------------------------------------------------      
-------------------------------------------------------------------------------------
--                                 P A D R A O                                     --
--tblpadrao
-------------------------------------------------------------------------------------
GO
CREATE TABLE PADRAO(
  PDR_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,PDR_NOME VARCHAR(40) NOT NULL
  ,PDR_CODPTT VARCHAR(1) NOT NULL
  ,PDR_ATIVO VARCHAR(1) NOT NULL
  ,PDR_REG VARCHAR(1) NOT NULL
  ,PDR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_pdrCodPtt CHECK( PDR_CODPTT IN('L','N','T'))  
  ,CONSTRAINT chk_pdrAtivo CHECK( PDR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_pdrReg CHECK( PDR_REG IN('A','P','S')));
GO
CREATE VIEW VPADRAO AS
  SELECT PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO,PDR_REG,PDR_CODUSR FROM PADRAO
GO  
CREATE TABLE dbo.BKPPADRAO(
  PDR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PDR_ACAO VARCHAR(1) NOT NULL
  ,PDR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PDR_CODIGO INTEGER NOT NULL
  ,PDR_NOME VARCHAR(40) NOT NULL
  ,PDR_CODPTT VARCHAR(1) NOT NULL  
  ,PDR_ATIVO VARCHAR(1) NOT NULL
  ,PDR_REG VARCHAR(1) NOT NULL
  ,PDR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPdrAcao CHECK( PDR_ACAO IN('I','A','E'))  
);
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- PDR_CODIGO     | PK  |    |    | INT                |  Auto incremento
   -- PDR_NOME       |     |    |    | VC(40) NN          |
   -- PDR_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- PDR_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- PDR_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D10         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
--
--
-------------------------------------------------------------------------------------
--                             P A D R A O G R U P O                               --
--tblpadraogrupo
-------------------------------------------------------------------------------------
GO
CREATE TABLE PADRAOGRUPO(
  PG_CODPDR INTEGER NOT NULL         --PADRAO
  ,PG_CODPTP VARCHAR(2) NOT NULL     --PAGARTIPO  
  ,PG_INDICE VARCHAR(5) NOT NULL     --ACELERADOR
  ,PG_ATIVO VARCHAR(1) NOT NULL
  ,PG_REG VARCHAR(1) NOT NULL
  ,PG_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_pgAtivo CHECK( PG_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_pgReg CHECK( PG_REG IN('A','P','S'))
  ,CONSTRAINT PKPADRAOGRUPO PRIMARY KEY(PG_CODPDR,PG_CODPTP));      
GO
CREATE VIEW VPADRAOGRUPO AS
  SELECT PG_CODPDR,PG_CODPTP,PG_ATIVO,PG_REG,PG_CODUSR FROM PADRAOGRUPO
GO  
CREATE TABLE dbo.BKPPADRAOGRUPO(
  PG_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PG_ACAO VARCHAR(1) NOT NULL
  ,PG_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PG_CODPDR INTEGER NOT NULL
  ,PG_CODPTP VARCHAR(2) NOT NULL
  ,PG_ATIVO VARCHAR(1) NOT NULL
  ,PG_REG VARCHAR(1) NOT NULL
  ,PG_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPgAcao CHECK( PG_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             P A D R A O T I T U L O                             --
--tblpadraotitulo
-------------------------------------------------------------------------------------
GO
CREATE TABLE PADRAOTITULO(
  PT_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,PT_NOME VARCHAR(60) NOT NULL
  ,PT_CODTD VARCHAR(3) NOT NULL        --TIPODOCUMENTO  
  ,PT_CODFC VARCHAR(3) NOT NULL        --FORMACOBRANCA
  ,PT_DEBCRE VARCHAR(1) NOT NULL
  ,PT_CODCC VARCHAR(15) NOT NULL       --CONTACONTABIL
  ,PT_CODPDR INTEGER NOT NULL          --PADRAO
  ,PT_ATIVO VARCHAR(1) NOT NULL
  ,PT_REG VARCHAR(1) NOT NULL
  ,PT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_ptDebCre CHECK( PT_DEBCRE IN('D','C'))  
  ,CONSTRAINT chk_ptAtivo CHECK( PT_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ptReg CHECK( PT_REG IN('A','P','S')));
GO
CREATE VIEW VPADRAOTITULO AS
  SELECT PT_CODIGO
         ,PT_NOME
         ,PT_CODTD
         ,PT_CODFC
         ,PT_DEBCRE
         ,PT_CODCC
         ,PT_CODPDR
         ,PT_ATIVO
         ,PT_REG
         ,PT_CODUSR
    FROM PADRAOTITULO
GO
CREATE TABLE dbo.BKPPADRAOTITULO(
  PT_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PT_ACAO VARCHAR(1) NOT NULL
  ,PT_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PT_CODIGO INTEGER NOT NULL
  ,PT_NOME VARCHAR(60) NOT NULL
  ,PT_CODTD VARCHAR(3) NOT NULL        --TIPODOCUMENTO  
  ,PT_CODFC VARCHAR(3) NOT NULL        --FORMACOBRANCA
  ,PT_DEBCRE VARCHAR(1) NOT NULL
  ,PT_CODCC VARCHAR(15) NOT NULL       --CONTACONTABIL
  ,PT_CODPDR INTEGER NOT NULL          --PADRAO
  ,PT_ATIVO VARCHAR(1) NOT NULL
  ,PT_REG VARCHAR(1) NOT NULL
  ,PT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPtAcao CHECK( PT_ACAO IN('I','A','E'))  
);
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- PT_CODIGO      | PK  |    |    | INT                |  Auto incremento
   -- PT_NOME        |     |    |    | VC(60) NN          |
   -- PT_CODTD       | SEL |    |    | VC(3) NN           | Campo relacionado (TIPODOCUMENTO)   
   -- TD_NOME        | SEL |    |    | VC(20) NN          | Campo relacionado (TIPODOCUMENTO)      
   -- PT_CODFC       | SEL |    |    | VC(3) NN           | Campo relacionado (FORMACOBRANCA)   
   -- FC_NOME        | SEL |    |    | VC(20) NN          | Campo relacionado (FORMACOBRANCA)      
   -- PT_DEBCRE      | CC  |    |    | VC(1) NN           |  
   -- PT_CODCC       | SEL |    |    | VC(15) NN          | Campo relacionado (CONTAGERENCIAL)
   -- CC_NOME        | SEL |    |    | VC(40) NN          | Campo relacionado (CONTAGERENCIAL)   
   -- PT_CODPDR      | SEL |    |    | VC(15) NN          | Campo relacionado (PADRAO)
   -- PDR_NOME       | SEL |    |    | VC(40) NN          | Campo relacionado (PADRAO)   
   -- PT_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- PT_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- PT_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D10         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
--
--
-------------------------------------------------------------------------------------
--                                   P A G A R
--tblpagar
-------------------------------------------------------------------------------------
CREATE TABLE PAGAR(
  PGR_LANCTO INTEGER NOT NULL 
  ,PGR_BLOQUEADO VARCHAR(1) NOT NULL
  ,PGR_CHEQUE VARCHAR(10) DEFAULT NULL
  ,PGR_CODBNC INTEGER NOT NULL
  ,PGR_CODFVR INTEGER NOT NULL
  ,PGR_CODFC VARCHAR(3) NOT NULL
  ,PGR_CODTD VARCHAR(3) NOT NULL
  ,PGR_VENCTO DATE NOT NULL  
  ,PGR_DATAPAGA DATE DEFAULT NULL
  ,PGR_DOCTO VARCHAR(12) NOT NULL
  ,PGR_DTDOCTO DATE NOT NULL
  ,PGR_CODPTT VARCHAR(1) NOT NULL
  ,PGR_MASTER INTEGER NOT NULL
  ,PGR_OBSERVACAO VARCHAR(120) NOT NULL
  ,PGR_PARCELA INTEGER NOT NULL
  ,PGR_CODPTP VARCHAR(2) NOT NULL
  ,PGR_INDICE INTEGER NOT NULL
  ,PGR_CODPT INTEGER NOT NULL
  ,PGR_VLREVENTO NUMERIC(15,2) NOT NULL  
  ,PGR_VLRPARCELA NUMERIC(15,2) NOT NULL  
  ,PGR_VLRDESCONTO NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,PGR_VLRMULTA NUMERIC(15,2) DEFAULT 0 NOT NULL  
  ,PGR_VLRLIQUIDO NUMERIC(15,2) NOT NULL
  ,PGR_VLRBAIXA NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,PGR_VLRRETENCAO NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,PGR_VLRPIS NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,PGR_VLRCOFINS NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,PGR_VLRCSLL NUMERIC(15,2) DEFAULT 0 NOT NULL
  ,PGR_CODCC VARCHAR(15) NOT NULL
  ,PGR_CODSNF INTEGER DEFAULT 0 NOT NULL
  ,PGR_DTMOVTO DATE DEFAULT GETDATE() NOT NULL
  ,PGR_APR VARCHAR(1) DEFAULT 'S' NOT NULL
  ,PGR_CODEMP INTEGER NOT NULL
  ,PGR_CODFLL INTEGER NOT NULL
  ,PGR_LOTECNAB INTEGER DEFAULT 0 NOT NULL
  ,PGR_VERDIREITO INTEGER NOT NULL
  ,PGR_CODCNTT INTEGER NOT NULL  
  ,PGR_CODCMP INTEGER NOT NULL
  ,PGR_CODALT INTEGER NOT NULL  
  ,PGR_REG VARCHAR(1) DEFAULT 'P' NOT NULL
  ,PGR_CODUSR INTEGER NOT NULL
  ,CONSTRAINT PKPAGAR PRIMARY KEY (PGR_LANCTO)    
  ,CONSTRAINT chk_pgrLancto CHECK( PGR_LANCTO >0 )        
  ,CONSTRAINT chk_pgrMaster CHECK( PGR_MASTER <= PGR_LANCTO )        
  ,CONSTRAINT chk_pgrBloqueado CHECK( PGR_BLOQUEADO IN('S','N'))      
  ,CONSTRAINT chk_pgrParcela CHECK( PGR_PARCELA > 0 )  
  ,CONSTRAINT chk_pgrVencto CHECK( PGR_VENCTO >= PGR_DTDOCTO )    
  ,CONSTRAINT chk_pgrIndice CHECK( PGR_INDICE IN(0,1,-1))    
  ,CONSTRAINT chk_pgrVlrDesconto CHECK( PGR_VLRDESCONTO >= 0 )
  ,CONSTRAINT chk_pgrVlrEvento CHECK( PGR_VLREVENTO > 0 )
  ,CONSTRAINT chk_pgrVlrParcela CHECK( PGR_VLRPARCELA > 0 )
  ,CONSTRAINT chk_pgrVlrLiquido CHECK( PGR_VLRLIQUIDO > 0 )
  ,CONSTRAINT chk_pgrVlrMulta CHECK( PGR_VLRMULTA >= 0 )
  ,CONSTRAINT chk_pgrVlrRetencao CHECK( PGR_VLRRETENCAO >= 0 )
  ,CONSTRAINT chk_pgrVlrPis CHECK( PGR_VLRPIS >= 0 )
  ,CONSTRAINT chk_pgrVlrCofins CHECK( PGR_VLRCOFINS >= 0 )
  ,CONSTRAINT chk_pgrVlrCsll CHECK( PGR_VLRCSLL >= 0 )
  ,CONSTRAINT chk_pgrVerDireito CHECK( PGR_VERDIREITO IN(26,27,28,34))
  ,CONSTRAINT chk_pgrCodAlt CHECK( PGR_CODALT IN(0,1,2,3,4,5,6,7))  
  ,CONSTRAINT chk_pgrApr CHECK( PGR_APR IN('S','N'))    
  ,CONSTRAINT chk_pgrReg CHECK( PGR_REG IN('A','P','S'))
);
GO
CREATE INDEX PGR_VENCTOX ON PAGAR(PGR_VENCTO);
GO
CREATE VIEW VPAGAR AS
  SELECT 
    PGR_LANCTO
    ,PGR_BLOQUEADO
    ,PGR_CHEQUE
    ,PGR_CODBNC
    ,PGR_CODFVR
    ,PGR_CODFC
    ,PGR_CODTD
    ,PGR_VENCTO
    ,PGR_DATAPAGA
    ,PGR_DOCTO
    ,PGR_DTDOCTO
    ,PGR_CODPTT
    ,PGR_MASTER
    ,PGR_OBSERVACAO
    ,PGR_PARCELA
    ,PGR_CODPTP
    ,PGR_INDICE
    ,PGR_CODPT
    ,PGR_VLREVENTO    
    ,PGR_VLRPARCELA    
    ,PGR_VLRDESCONTO
    ,PGR_VLRMULTA    
    ,PGR_VLRLIQUIDO
    ,PGR_VLRBAIXA    
    ,PGR_VLRRETENCAO
    ,PGR_VLRPIS
    ,PGR_VLRCOFINS
    ,PGR_VLRCSLL
    ,PGR_CODCC
    ,PGR_CODSNF
    ,PGR_DTMOVTO
    ,PGR_APR
    ,PGR_CODEMP
    ,PGR_CODFLL
    ,PGR_LOTECNAB
    ,PGR_CODCMP
    ,PGR_VERDIREITO
    ,PGR_CODCNTT
    ,PGR_CODALT
    ,PGR_REG
    ,PGR_CODUSR
  FROM PAGAR
-------------------------------------------------------------------------------------------
--                               P A G A R M A S T E R
--tblpagar
--Para controlar o numero de parcela(s) por PGR_MASTER e tb o ultimo PGR_LANCTO para filtro
-------------------------------------------------------------------------------------------
GO
CREATE TABLE PAGARMASTER(
  PM_MASTER INTEGER NOT NULL 
  ,PM_PARCELA INTEGER NOT NULL  
  ,PM_LANCTOINI INTEGER NOT NULL
  ,PM_LANCTOFIM INTEGER NOT NULL
  ,CONSTRAINT PKPAGARMASTER PRIMARY KEY (PM_MASTER)    
);
--------------------------------------------------------------------------------------
--                           P A G A R R A T E I O
--tblpagarrateio
--Para controlar o numero do lancamento principal do rateio na PGR_LANCTO
--------------------------------------------------------------------------------------
GO
CREATE TABLE PAGARRATEIO(
  PR_LANCTO INTEGER NOT NULL 
  ,PR_CODINI INTEGER NOT NULL  
  ,PR_CODFIM INTEGER NOT NULL
  ,PR_CODCC VARCHAR(15) NOT NULL
  ,PR_DEBCRE VARCHAR(1) NOT NULL
  ,CONSTRAINT PKPAGARRATEIO PRIMARY KEY (PR_LANCTO)    
  ,CONSTRAINT chk_prCodIni CHECK( PR_CODINI > 0 )    
  ,CONSTRAINT chk_prCodFim CHECK( PR_CODFIM >= PR_CODINI )    
  ,CONSTRAINT chk_prDebCre CHECK( PR_DEBCRE IN('C','D'))    
);
-------------------------------------------------------------------------------------
--                           P A G A R T I P O                                     --
--tblpagartipo
-------------------------------------------------------------------------------------
GO
CREATE TABLE PAGARTIPO(
  PTP_CODIGO VARCHAR(2) PRIMARY KEY NOT NULL
  ,PTP_NOME VARCHAR(25) NOT NULL
  ,PTP_VALOR INTEGER NOT NULL       -- 1 ou -1
  ,PTP_CNAB VARCHAR(1) NOT NULL     --Se aceita pagamento/recebimento por cnab
  ,PTP_CONTABIL VARCHAR(1) NOT NULL --Se entra no contabil->Campo RAT_SNGER 
  ,PTP_ATIVO VARCHAR(1) NOT NULL
  ,PTP_REG VARCHAR(1) NOT NULL
  ,PTP_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_ptpValor CHECK( PTP_VALOR IN(1,-1,0))  
  ,CONSTRAINT chk_ptpCnab CHECK( PTP_CNAB IN('S','N'))  
  ,CONSTRAINT chk_ptpContabil CHECK( PTP_CNAB IN('S','N'))  
  ,CONSTRAINT chk_ptpAtivo CHECK( PTP_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ptpReg CHECK( PTP_REG IN('A','P','S')));
GO
CREATE VIEW VPAGARTIPO AS
  SELECT PTP_CODIGO,PTP_NOME,PTP_VALOR,PTP_CNAB,PTP_CONTABIL,PTP_ATIVO,PTP_REG,PTP_CODUSR FROM PAGARTIPO
GO
CREATE TABLE dbo.BKPPAGARTIPO(
  PTP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PTP_ACAO VARCHAR(1) NOT NULL
  ,PTP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PTP_CODIGO VARCHAR(2) NOT NULL
  ,PTP_NOME VARCHAR(25) NOT NULL
  ,PTP_VALOR INTEGER NOT NULL
  ,PTP_CNAB VARCHAR(1) NOT NULL
  ,PTP_CONTABIL VARCHAR(1) NOT NULL
  ,PTP_ATIVO VARCHAR(1) NOT NULL
  ,PTP_REG VARCHAR(1) NOT NULL
  ,PTP_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpPtpAcao CHECK( PTP_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                           P A G A R T I T U L O                                 --
--tblpagartitulo
-------------------------------------------------------------------------------------
GO
CREATE TABLE PAGARTITULO(
  PTT_CODIGO VARCHAR(1) PRIMARY KEY NOT NULL
  ,PTT_NOME VARCHAR(25) NOT NULL
  ,PTT_ATIVO VARCHAR(1) NOT NULL
  ,PTT_REG VARCHAR(1) NOT NULL
  ,PTT_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_pttCodigo CHECK( PTT_CODIGO LIKE('[A-Z]'))  
  ,CONSTRAINT chk_pttAtivo CHECK( PTT_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_pttReg CHECK( PTT_REG IN('A','P','S')));
GO
CREATE VIEW VPAGARTITULO AS
  SELECT PTT_CODIGO,PTT_NOME,PTT_ATIVO,PTT_REG,PTT_CODUSR FROM PAGARTITULO
GO  
CREATE TABLE dbo.BKPPAGARTITULO(
  PTT_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PTT_ACAO VARCHAR(1) NOT NULL
  ,PTT_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PTT_CODIGO VARCHAR(1) NOT NULL
  ,PTT_NOME VARCHAR(25) NOT NULL
  ,PTT_ATIVO VARCHAR(1) NOT NULL
  ,PTT_REG VARCHAR(1) NOT NULL
  ,PTT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPttAcao CHECK( PTT_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                    P A I S                                      
--tblpais
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.PAIS(
  PAI_CODIGO INTEGER PRIMARY KEY NOT NULL
  ,PAI_NOME VARCHAR(30) NOT NULL
  ,PAI_DDI INTEGER DEFAULT 0 NOT NULL  
  ,PAI_ATIVO VARCHAR(1) NOT NULL
  ,PAI_REG VARCHAR(1) NOT NULL
  ,PAI_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_paiDdi CHECK( PAI_DDI>=0 )  
  ,CONSTRAINT chk_paiAtivo CHECK( PAI_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_paiReg CHECK( PAI_REG IN('A','P','S'))
);
GO
CREATE VIEW VPAIS AS
  SELECT PAI_CODIGO,PAI_NOME,PAI_DDI,PAI_ATIVO,PAI_REG,PAI_CODUSR FROM PAIS
GO
CREATE TABLE dbo.BKPPAIS(
  PAI_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,PAI_ACAO VARCHAR(1) NOT NULL
  ,PAI_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PAI_CODIGO INTEGER NOT NULL
  ,PAI_NOME VARCHAR(30) NOT NULL
  ,PAI_DDI INTEGER NOT NULL  
  ,PAI_ATIVO VARCHAR(1) NOT NULL
  ,PAI_REG VARCHAR(1) NOT NULL
  ,PAI_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPaiAcao CHECK( PAI_ACAO IN('I','A','E'))  
);

-------------------------------------------------------------------------------------
--                              P E D I D O
--tblpedido
-------------------------------------------------------------------------------------
GO
CREATE TABLE PEDIDO(
  PDD_CODIGO INTEGER PRIMARY KEY NOT NULL
  ,PDD_EMISSAO DATE NOT NULL
  ,PDD_CNPJCPF VARCHAR(14) NOT NULL  
  ,PDD_NOME VARCHAR(60) NOT NULL  
  ,PDD_CODVND INTEGER NOT NULL
  ,PDD_CODFVR INTEGER NOT NULL
  ,PDD_VALOR NUMERIC(15,2) NOT NULL
  ,PDD_QTDAUTO INTEGER NOT NULL  
  ,PDD_QTDPLACA INTEGER NOT NULL    
  ,PDD_FIDELIDADE VARCHAR(1) NOT NULL
  ,PDD_STATUS INTEGER NOT NULL
  ,PDD_MESES INTEGER NOT NULL
  ,PDD_DIA INTEGER NOT NULL
  ,PDD_ITEM VARCHAR(MAX) NOT NULL
  ,PDD_PARCELA VARCHAR(MAX) NOT NULL
  ,PDD_PLACA VARCHAR(MAX) NOT NULL
  ,PDD_CODIND INTEGER NOT NULL
  ,PDD_OBS VARCHAR(MAX)
  ,PDD_EMAIL VARCHAR(60) NOT NULL
  ,PDD_ATIVO VARCHAR(1) NOT NULL    
  ,PDD_REG VARCHAR(1) NOT NULL
  ,PDD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_pddValor CHECK( PDD_VALOR>0 )
  ,CONSTRAINT chk_pddMeses CHECK( PDD_MESES>0 )  
  ,CONSTRAINT chk_pddQtdAuto CHECK( PDD_QTDAUTO>=0 )    
  ,CONSTRAINT chk_pddQtdPlaca CHECK( PDD_QTDPLACA>=0 )      
  ,CONSTRAINT chk_pddDia CHECK( PDD_DIA>0 )  
  ,CONSTRAINT chk_pddFidelidade CHECK( PDD_FIDELIDADE IN('S','N'))  
  ,CONSTRAINT chk_pddStatus CHECK( PDD_STATUS >0 )  
  ,CONSTRAINT chk_pddReg CHECK( PDD_REG IN('A','P','S'))
);
GO
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- PDD_CODIGO     | PK  |    |    | INT NN             | Generator
   -- PDD_EMISSAO    | DEF |    |    | DATE NN            | Data do pedido ( Now )
   -- PDD_CNPJCPF    |     |    |    | VC(14) NN          | Cnpj/Cpf do cliente
   -- PDD_NOME       |     |    |    | VC(60) NN          | Nome do cliente 
   -- PDD_CODVND     | SEL |    |    | INT NN             | Campo relacionado (VENDEDOR)   
   -- PDD_CODFVR     | SEL |    |    | INT NN             | Campo relacionado (FAVORECIDO)   
   -- PDD_VALOR      | CC  |    |    | NUM(15,2) NN       | Total
   -- PDD_QTDAUTO    | CC  |    |    | INT NN             | Quantidade de autos no pedido
   -- PDD_QTDPLACA   | CC  |    |    | INT NN             | Quantidade de placas informadas
   -- PDD_FIDELIDADE | CC  |    |    | VC(1) NN           | S/N
   -- PDD_STATUS     | CC  |    |    | INT NN             | 0=TODOS
   --                                                     | 1=ORCAMENTO
   --                                                     | 2=APROVAR
   --                                                     | 3=REPROVADO   
   --                                                     | 4=APROVADO
   --                                                     | 5=ASSINAR
   --                                                     | 6=ASSINADO 
   --                                                     | 7=RECUSADO   
   -- PDD_MESES      | CC  |    |    | INT NN             | Numero de meses do contrato
   -- PDD_DIA        | CC  |    |    | INT NN             | Dia do vencto das parcelas
   -- PDD_ITEM       |     |    |    | VC(MAX) NN         | Json para guardar todas os itens informados
   -- PDD_PARCELA    |     |    |    | VC(MAX) NN         | Json para guardar todas as parcelas informadas
   -- PDD_PLACA      |     |    |    | VC(MAX) NN         | Json para guardar todas as placas digitadas
   -- PDD_CODFVR     | SEL |    |    | INT NN             | Quen indicou - Campo relacionado (FAVORECIDO)      
   -- PDD_EMAIL      |     |    |    | VC(60) NN          | Relaciona o vendedor ao usuario que se logou no sistema( vendedor ve apenas seus pedidos )
   -- PDD_OBS        |     |    |    | VC(MAX)            | Observacao para pedido
   -- PDD_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se pedido=S, se transformado em contrato='N'
   -- PDD_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- PDD_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D22         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------
   
-------------------------------------------------------------------------------------
--                                  C O N T R A T O
--tblcontrato
-------------------------------------------------------------------------------------
GO
CREATE TABLE CONTRATO(
  CNTT_CODIGO INTEGER PRIMARY KEY NOT NULL
  ,CNTT_EMISSAO DATE NOT NULL
  ,CNTT_ATIVO VARCHAR(1) NOT NULL  
  ,CNTT_DTINICIO DATE NOT NULL
  ,CNTT_DTFIM DATE NOT NULL
  ,CNTT_CODFVR INTEGER NOT NULL  
  ,CNTT_CODVND INTEGER NOT NULL  
  ,CNTT_CODIND INTEGER NOT NULL    
  ,CNTT_VLRMENSAL NUMERIC(15,2) NOT NULL  
  ,CNTT_VLRPONTUAL NUMERIC(15,2) NOT NULL  
  ,CNTT_QTDAUTO INTEGER NOT NULL  
  ,CNTT_QTDEMPENHO INTEGER NOT NULL        
  ,CNTT_QTDENDENTREGA INTEGER NOT NULL
  ,CNTT_QTDENDINSTALA INTEGER NOT NULL
  ,CNTT_QTDPLACA INTEGER NOT NULL    
  ,CNTT_QTDATIVADO INTEGER NOT NULL      
  ,CNTT_FIDELIDADE VARCHAR(1) NOT NULL
  ,CNTT_MESES INTEGER NOT NULL
  ,CNTT_DIA INTEGER NOT NULL
  ,CNTT_EMAIL VARCHAR(60) NOT NULL
  ,CNTT_LANCTOINI INTEGER NOT NULL  
  ,CNTT_LANCTOFIM INTEGER NOT NULL 
  ,CNTT_CODBNC INTEGER NOT NULL
  ,CNTT_CODFC VARCHAR(3) NOT NULL
  ,CNTT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_cnttAtivo CHECK( CNTT_ATIVO IN('S','N'))    
  ,CONSTRAINT chk_cnttVlrMensal CHECK( CNTT_VLRMENSAL>0 )      
  ,CONSTRAINT chk_cnttVlrPontual CHECK( CNTT_VLRPONTUAL>0 )   
  ,CONSTRAINT chk_cnttFidelidade CHECK( CNTT_FIDELIDADE IN('S','N'))      
  ,CONSTRAINT chk_cnttMeses CHECK( CNTT_MESES>0 )        
  ,CONSTRAINT chk_cnttDia CHECK( CNTT_DIA BETWEEN 1 AND 31 )  
);
GO
CREATE VIEW VCONTRATO AS
  SELECT CNTT_CODIGO
        ,CNTT_EMISSAO
        ,CNTT_ATIVO
        ,CNTT_DTINICIO
        ,CNTT_DTFIM
        ,CNTT_CODFVR
        ,CNTT_CODVND
        ,CNTT_CODIND
        ,CNTT_VLRMENSAL
        ,CNTT_VLRPONTUAL
        ,CNTT_QTDAUTO
        ,CNTT_QTDEMPENHO
        ,CNTT_QTDENDENTREGA
        ,CNTT_QTDENDINSTALA
        ,CNTT_QTDPLACA
        ,CNTT_QTDATIVADO
        ,CNTT_FIDELIDADE
        ,CNTT_MESES
        ,CNTT_DIA
        ,CNTT_EMAIL
        ,CNTT_LANCTOINI
        ,CNTT_LANCTOFIM
        ,CNTT_CODBNC
        ,CNTT_CODFC
        ,CNTT_CODUSR
    FROM CONTRATO;
-------------------------------------------------------------------------------------
--                                   C O N T R A T O
--trgcontrato
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCONTRATO_BI ON dbo.VCONTRATO
INSTEAD OF INSERT 
AS
BEGIN
  -- -------------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO              |INS  |UPD |DEL | TIPO               | Obs
  -- -------------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CNTT_CODIGO        | PK  |    |    | INT NN             | Generator
  -- CNTT_EMISSAO       | DEF |    |    | DATE NN            | Data do contrato ( Now )
  -- CNTT_ATIVO         | CC  |    |    | VC(1) NN           | S|N|
  -- CNTT_DTINICIO      |     |    |    | DATE NN            | Data do inicio da cobranca
  -- CNTT_DTFIM         |     |    |    | DATE NN            | Data do fim da cobranca
  -- CNTT_CODFVR        | SEL |    |    | INT NN             | Campo relacionado (FAVORECIDO)   
  -- CNTT_CODVND        | SEL |    |    | INT NN             | Campo relacionado (VENDEDOR)
  -- CNTT_CODIND        | SEL |    |    | INT NN             | Campo relacionado (FAVORECIDO)
  -- CNTT_VLRMENSAL     | CC  |    |    | NUM(15,2) NN       |
  -- CNTT_VLRPONTUAL    | CC  |    |    | NUM(15,2) NN       |
  -- CNTT_QTDAUTO       | CC  |    |    | INT NN             | Quantidade de autos no pedido
  -- CNTT_QTDEMPENHO    | CC  |    |    | INT NN             | Quantidade de autos empenhados
  -- CNTT_QTDENDENTREGA | CC  |    |    | INT NN             | Quantidade de autos com endereco de entrega
  -- CNTT_QTDENDINSTALA | CC  |    |    | INT NN             | Quantidade de autos com endereco de instalacao
  -- CNTT_QTDPLACA      | CC  |    |    | INT NN             | Quantidade de placas ativadas
  -- CNTT_FIDELIDADE    | CC  |    |    | VC(1) NN           | S/N
  -- CNTT_MESES         | CC  |    |    | INT NN             | Numero de meses do contrato
  -- CNTT_DIA           | CC  |    |    | INT NN             | Dia do vencto das parcelas
  -- CNTT_EMAIL         |     |    |    | VC(60) NN          | Relaciona o vendedor ao usuario que se logou no sistema( vendedor ve apenas seus pedidos )
  -- CNTT_LANCTOINI     |     |    |    | INT NN             | Primeiro lancto no financeiro ( facilitador select )
  -- CNTT_LANCTOFIM     |     |    |    | INT NN             | Ultimo lancto no financeiro ( facilitador select )
  -- CNTT_CODBNC        | SEL |    |    | INT NN             | Campo relacionado (BANCO)   
  -- CNTT_CODFC         | SEL |    |    | INT NN             | Campo relacionado (FORMACOBRANCA)
  -- CNTT_CODUSR        | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- -------------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cnttCodigoNew INTEGER;
  DECLARE @cnttEmissaoNew DATE;
  DECLARE @cnttAtivoNew VARCHAR(1);
  DECLARE @cnttDtInicioNew DATE;
  DECLARE @cnttDtFimNew DATE;
  DECLARE @cnttCodFvrNew INTEGER;
  DECLARE @cnttCodVndNew INTEGER;
  DECLARE @cnttCodIndNew INTEGER;
  DECLARE @cnttVlrMensalNew NUMERIC(15,2);
  DECLARE @cnttVlrPontualNew NUMERIC(15,2);
  DECLARE @cnttQtdAutoNew INTEGER;
  --DECLARE @cnttQtdPlacaNew INTEGER;
  DECLARE @cnttFidelidadeNew VARCHAR(1);
  DECLARE @cnttMesesNew INTEGER;
  DECLARE @cnttDiaNew INTEGER;
  DECLARE @cnttEmailNew VARCHAR(60);
  DECLARE @cnttLanctoIniNew INTEGER;
  DECLARE @cnttLanctoFimNew INTEGER;
  DECLARE @cnttCodBncNew INTEGER;
  DECLARE @cnttCodFcNew VARCHAR(3);
  DECLARE @cnttCodUsrNew INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cnttCodigoNew       = i.CNTT_CODIGO
         ,@cnttEmissaoNew     = i.CNTT_EMISSAO
         ,@cnttAtivoNew       = UPPER(i.CNTT_ATIVO)
         ,@cnttDtInicioNew    = i.CNTT_DTINICIO
         ,@cnttDtFimNew       = i.CNTT_DTFIM
         ,@cnttCodFvrNew      = i.CNTT_CODFVR
         ,@cnttCodVndNew      = i.CNTT_CODVND
         ,@cnttCodIndNew      = i.CNTT_CODIND
         ,@cnttVlrMensalNew   = i.CNTT_VLRMENSAL
         ,@cnttVlrPontualNew  = i.CNTT_VLRPONTUAL
         ,@cnttQtdAutoNew     = i.CNTT_QTDAUTO
         --,@cnttQtdPlacaNew    = i.CNTT_QTDPLACA
         ,@cnttFidelidadeNew  = UPPER(i.CNTT_FIDELIDADE)
         ,@cnttMesesNew       = i.CNTT_MESES
         ,@cnttDiaNew         = i.CNTT_DIA
         ,@cnttEmailNew       = LOWER(dbo.fncTranslate(i.CNTT_EMAIL,60))
         ,@cnttLanctoIniNew   = i.CNTT_LANCTOINI
         ,@cnttLanctoFimNew   = i.CNTT_LANCTOFIM
         ,@cnttCodBncNew      = i.CNTT_CODBNC
         ,@cnttCodFcNew       = dbo.fncTranslate(i.CNTT_CODFC,3)
         ,@cnttCodUsrNew      = i.CNTT_CODUSR
    FROM inserted i;
  BEGIN TRY    
    INSERT INTO dbo.CONTRATO(
      CNTT_CODIGO
      ,CNTT_EMISSAO
      ,CNTT_ATIVO
      ,CNTT_DTINICIO
      ,CNTT_DTFIM
      ,CNTT_CODFVR
      ,CNTT_CODVND
      ,CNTT_CODIND
      ,CNTT_VLRMENSAL
      ,CNTT_VLRPONTUAL
      ,CNTT_QTDAUTO
      ,CNTT_QTDEMPENHO
      ,CNTT_QTDENDENTREGA
      ,CNTT_QTDENDINSTALA
      ,CNTT_QTDPLACA
      ,CNTT_QTDATIVADO
      ,CNTT_FIDELIDADE
      ,CNTT_MESES
      ,CNTT_DIA
      ,CNTT_EMAIL
      ,CNTT_LANCTOINI
      ,CNTT_LANCTOFIM
      ,CNTT_CODBNC
      ,CNTT_CODFC
      ,CNTT_CODUSR) VALUES(
      @cnttCodigoNew          -- CNTT_CODIGO
      ,@cnttEmissaoNew        -- CNTT_EMISSAO
      ,@cnttAtivoNew          -- CNTT_ATIVO)
      ,@cnttDtInicioNew       -- CNTT_DTINICIO
      ,@cnttDtFimNew          -- CNTT_DTFIM
      ,@cnttCodFvrNew         -- CNTT_CODFVR
      ,@cnttCodVndNew         -- CNTT_CODVND
      ,@cnttCodIndNew         -- CNTT_CODIND
      ,@cnttVlrMensalNew      -- CNTT_VLRMENSAL
      ,@cnttVlrPontualNew     -- CNTT_VLRPONTUAL
      ,@cnttQtdAutoNew        -- CNTT_QTDAUTO
      ,0                      -- CNTT_QTDEMPENHO
      ,0                      -- CNTT_QTDENDENTREGA
      ,0                      -- CNTT_QTDENDINSTALA
      ,0                      -- CNTT_QTDPLACA
      ,0                      -- CNTT_QTDATIVADO
      ,@cnttFidelidadeNew     -- CNTT_FIDELIDADE)
      ,@cnttMesesNew          -- CNTT_MESES
      ,@cnttDiaNew            -- CNTT_DIA
      ,@cnttEmailNew          -- CNTT_EMAIL,60))
      ,@cnttLanctoIniNew      -- CNTT_LANCTOINI
      ,@cnttLanctoFimNew      -- CNTT_LANCTOFIM
      ,@cnttCodBncNew         -- CNTT_CODBNC
      ,@cnttCodFcNew          -- CNTT_CODFC
      ,@cnttCodUsrNew         -- CNTT_CODUSR
    );
    ----------------------------------------------
    -- Cadastrando o favorecido em PONTOESTOQUEIND
    ----------------------------------------------
    SELECT @uiCodigo=PEI_CODFVR FROM PONTOESTOQUEIND WHERE ((PEI_CODFVR=@cnttCodFvrNew) AND (PEI_CODPE='CLN'));
    IF( @@rowcount=0 ) BEGIN
      INSERT INTO VPONTOESTOQUEIND( 
        PEI_CODFVR
        ,PEI_CODPE
        ,PEI_ATIVO
        ,PEI_REG
        ,PEI_CODUSR) VALUES(
        @cnttCodFvrNew  -- PEI_CODFVR
        ,'CLN'          -- PEI_CODPE
        ,'S'            -- PEI_ATIVO
        ,'P'            -- PEI_REG
        ,2              -- PEI_CODUSR( 2= SISTEMA )
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
/*    
-------------------------------------------------------------------------------------
--                          C O N T R A T O D U P L I C A T A 
--tblcontratoduplicata
-------------------------------------------------------------------------------------
GO
CREATE TABLE CONTRATODUPLICATA(
  CNTD_CODCNTT INTEGER NOT NULL
  ,CNTD_VENCTO DATE NOT NULL   
  ,CNTD_MENSAL VARCHAR(1) NOT NULL       
  ,CNTD_CODCMP INTEGER NOT NULL 
  ,CNTD_DIAS INTEGER NOT NULL   
  ,CNTD_VALOR NUMERIC(15,2) NOT NULL  
  ,CNTD_LANCTO INTEGER NOT NULL     
  ,CNTD_CODUSR INTEGER NOT NULL       
  ,CONSTRAINT PKCONTRATODUPLICATA PRIMARY KEY (CNTD_CODCNTT,CNTD_VENCTO,CNTD_MENSAL));  
*/
-------------------------------------------------------------------------------------
--                          C O N T R A T O E N D E R E C O
--tblcontratoendereco
-------------------------------------------------------------------------------------
GO
CREATE TABLE CONTRATOENDERECO(
  CNTE_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,CNTE_CODFVR INTEGER NOT NULL    
  ,CNTE_BAIRRO VARCHAR(15) NOT NULL
  ,CNTE_CEP VARCHAR(8) NOT NULL  
  ,CNTE_CODCDD VARCHAR(7) NOT NULL
  ,CNTE_ENDERECO VARCHAR(60) NOT NULL
  ,CNTE_FONE VARCHAR(10) NOT NULL
  ,CNTE_EMAIL VARCHAR(60)
  ,CNTE_COMPLEMENTO VARCHAR(60)
  ,CNTE_NUMERO VARCHAR(10) NOT NULL
  ,CNTE_CODLGR VARCHAR(5) NOT NULL
  ,CNTE_ATIVO VARCHAR(1) NOT NULL
  ,CNTE_REG VARCHAR(1) NOT NULL
  ,CNTE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_cnteCep CHECK( CNTE_CEP LIKE('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'))  
  ,CONSTRAINT chk_cnteAtivo CHECK( CNTE_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_cnteReg CHECK( CNTE_REG IN('A','P','S')));
-------------------------------------------------------------------------------------
--                          C O N T R A T O P L A C A
--tblcontratoplaca
-------------------------------------------------------------------------------------
GO
CREATE TABLE CONTRATOPLACA(
  CNTP_CODCNTT INTEGER NOT NULL
  ,CNTP_PLACACHASSI VARCHAR(20) NOT NULL 
  ,CNTP_CODGMP INTEGER NOT NULL    
  ,CNTP_CODUSR INTEGER NOT NULL       
  ,CONSTRAINT PKCONTRATOPLACA PRIMARY KEY (CNTP_CODCNTT,CNTP_PLACACHASSI));  
GO
CREATE VIEW VCONTRATOPLACA AS
  SELECT CNTP_CODCNTT
         ,CNTP_PLACACHASSI
         ,CNTP_CODGMP
         ,CNTP_CODUSR
    FROM CONTRATOPLACA;
-------------------------------------------------------------------------------------
--                            C O N T R A T O P L A C A
--trgcontratoplaca
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCONTRATOPLACA_BI ON dbo.VCONTRATOPLACA
INSTEAD OF INSERT 
AS
BEGIN
   -- -------------- --|-----|----|----|------------------|----------------------------------------------------------   
   -- CAMPO            |INS  |UPD |DEL | TIPO             | Obs
   -- -----------------|-----|----|----|------------------|----------------------------------------------------------
   -- CNTP_CODCNTT     | SEL |    |    | INT NN           | Campo relacionado (CONTRATO)   
   -- CNTP_PLACACHASSI | SEL |    |    | VC(20) NN        |
   -- CNTP_CODGMP      | SEL |    |    | INT              | Campo relacionado (GRUPOMODELOPRODUTO)          
   -- CNTP_CODUSR      | OK  |    |    | INT NN           | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO      | SEL |    |    | VC(15) NN        | Campo relacionado (USUARIO)
   -- -----------------|-----|----|----|------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(20);            -- Para procurar unique index
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cntpCodCnttNew INTEGER;
  DECLARE @cntpPlacaChassiNew VARCHAR(20);
  DECLARE @cntpCodGmpNew INTEGER;
  DECLARE @cnttCodFvrNew INTEGER;
  DECLARE @cntpCodUsrNew INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cntpCodCnttNew      = i.CNTP_CODCNTT
         ,@cntpPlacaChassiNew = i.CNTP_PLACACHASSI
         ,@cntpCodGmpNew      = i.CNTP_CODGMP
         ,@cnttCodFvrNew      = CNTT.CNTT_CODFVR
         ,@cntpCodUsrNew      = i.CNTP_CODUSR
    FROM inserted i
    LEFT OUTER JOIN CONTRATO CNTT ON i.CNTP_CODCNTT=CNTT.CNTT_CODIGO;
  BEGIN TRY    
    INSERT INTO dbo.CONTRATOPLACA( 
      CNTP_CODCNTT
      ,CNTP_PLACACHASSI
      ,CNTP_CODGMP
      ,CNTP_CODUSR) VALUES(
      @cntpCodCnttNew       -- CNTP_CODCNTT
      ,@cntpPlacaChassiNew  -- CNTP_IDUNICO  
      ,@cntpCodGmpNew       -- CNTP_CODGMP
      ,@cntpCodUsrNew       -- CNTP_CODUSR
    );
    -------------------------------------------
    -- Cadastrando em veiculo se naum encontrar
    -------------------------------------------
    SELECT @uiCodigo=VCL_CODIGO FROM VEICULO WHERE VCL_CODIGO=@cntpPlacaChassiNew;
    IF( @@rowcount=0 ) BEGIN   
      INSERT INTO dbo.VVEICULO( 
        VCL_CODIGO
        ,VCL_CODFVR            
        ,VCL_CODVCR
        ,VCL_CODVTP
        ,VCL_CODVMD
        ,VCL_ANO      
        ,VCL_ATIVO
        ,VCL_REG
        ,VCL_CODUSR) VALUES(
        @cntpPlacaChassiNew   -- VCL_CODIGO
        ,@cnttCodFvrNew       -- VCL_CODFVR            
        ,1                    -- VCL_CODVCR
        ,'NSA'                -- VCL_CODVTP
        ,1                    -- VCL_CODVMD
        ,1900                 -- VCL_ANO
        ,'S'                  -- VCL_ATIVO
        ,'P'                  -- VCL_REG
        ,2                    -- VCL_CODUSR( 2=SISTEMA )         
      );     
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
-------------------------------------------------------------------------------------
--                          C O N T R A T O I T E M
--tblcontratoitem
-------------------------------------------------------------------------------------
GO
CREATE TABLE CONTRATOITEM(
  CNTI_CODCNTT INTEGER NOT NULL
  ,CNTI_IDUNICO INTEGER NOT NULL   
  ,CNTI_IDGRUPO INTEGER NOT NULL     
  ,CNTI_CODGM INTEGER NOT NULL 
  ,CNTI_CODSRV INTEGER NOT NULL   
  ,CNTI_CODGP VARCHAR(3) NOT NULL         
  ,CNTI_MENSAL VARCHAR(1) NOT NULL       
  ,CNTI_CODGMP INTEGER NOT NULL   
  ,CNTI_VALOR NUMERIC(15,2) NOT NULL  
  ,CNTI_CODENTREGA INTEGER NOT NULL
  ,CNTI_CODINSTALA INTEGER NOT NULL
  ,CNTI_ACAO INTEGER NOT NULL         
  ,CNTI_CODUSR INTEGER NOT NULL       
  ,CONSTRAINT PKCONTRATOITEM PRIMARY KEY (CNTI_CODCNTT,CNTI_IDUNICO)); 
GO  
CREATE VIEW VCONTRATOITEM AS
  SELECT CNTI_CODCNTT
         ,CNTI_IDUNICO
         ,CNTI_IDGRUPO
         ,CNTI_CODGM
         ,CNTI_CODSRV
         ,CNTI_CODGP
         ,CNTI_MENSAL
         ,CNTI_CODGMP
         ,CNTI_VALOR
         ,CNTI_CODENTREGA
         ,CNTI_CODINSTALA
         ,CNTI_ACAO
         ,CNTI_CODUSR
    FROM CONTRATOITEM;
-------------------------------------------------------------------------------------
--                            C O N T R A T O I T E M
--trgcontratoitem
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCONTRATOITEM_BI ON dbo.VCONTRATOITEM
INSTEAD OF INSERT 
AS
BEGIN
  -- ----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO           |INS  |UPD |DEL | TIPO               | Obs
  -- ----------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CNTI_CODCNTT    | SEL |    |    | INT NN             | Campo relacionado (CONTRATO)   
  -- CNTI_IDUNICO    |     |    |    | INT NN             | 
  -- CNTI_IDGRUPO    |     |    |    | INT NN             | 
  -- CNTI_CODGM      | SEL |    |    | INT                | Campo relacionado (GRUPOMODELO)       
  -- CNTI_CODSRV     | SEL |    |    | INT                | Campo relacionado (SERVICO)          
  -- CNTI_CODGP      | SEL |    |    | VC(3) NN           | Campo relacionado (GRUPOPRODUTO)
  -- CNTI_MENSAL     | CC  |    |    | VC(1)              | M/P = Mensal ou Pontual
  -- CNTI_CODGMP     | SEL |    |    | INT                | Campo relacionado (GRUPOMODELOPRODUTO) Nasce 0(zero)       
  -- CNTI_VALOR      | CC  |    |    | NUM(15,2) NN       | Valor
  -- CNTI_CODENTREGA |     |    |    | INT                | Codigo do endereco de entrega(CONTRATOENDERECO)
  -- CNTI_CODINSTALA |     |    |    | INT                | Codigo do endereco de instalacao(CONTRATOENDERECO)   
  -- CNTI_ACAO       | CC  |    |    | INT NN             | Nasce 0
  --                                                      | 1=Empenhar          -1=retirar empenho   
  --                                                      | 2=Endereco entrega  -2=retirar endereco entrega
  --                                                      | 3=Endereco entrega  -3=retirar endereco entrega  
  --                                                      | 4=Placa             -4=retirar placa
  -- CNTI_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO     | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- ----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cntiCodCnttNew INTEGER;      -- CNTI_CODCNTT   | SEL |    |    | INT NN             | Campo relacionado (CONTRATO)   
  DECLARE @cntiIdUnicoNew INTEGER;      -- CNTI_IDUNICO   |     |    |    | INT NN             | 
  DECLARE @cntiIdGrupoNew INTEGER;      -- CNTI_IDGRUPO   |     |    |    | INT NN             | 
  DECLARE @cntiCodGmNew INTEGER;        -- CNTI_CODGM     | SEL |    |    | INT                | Campo relacionado (GRUPOMODELO)       
  DECLARE @cntiCodSrvNew INTEGER;       -- CNTI_CODSRV    | SEL |    |    | INT                | Campo relacionado (SERVICO)          
  DECLARE @cntiCodGpNew VARCHAR(3);     -- CNTI_CODGP     | SEL |    |    | VC(3) NN           | Campo relacionado (GRUPOPRODUTO)
  DECLARE @cntiMensalNew VARCHAR(1);    -- CNTI_MENSAL    | CC  |    |    | VC(1)              | M/P = Mensal ou Pontual
  DECLARE @cntiCodGmpNew INTEGER;       -- CNTI_CODGMP    | SEL |    |    | INT                | Campo relacionado (GRUPOMODELOPRODUTO) Nasce 0(zero)       
  DECLARE @cntiValorNew NUMERIC(15,2);  -- CNTI_VALOR     | CC  |    |    | NUM(15,2) NN       | Valor
  DECLARE @cntiCodEntregaNew INTEGER;   -- CNTI_CODENTREGA    | SEL |    |    | INT                | Campo relacionado (GRUPOMODELOPRODUTO) Nasce 0(zero)         
  DECLARE @cntiCodInstalaNew INTEGER;   -- CNTI_CODINSTALA    | SEL |    |    | INT                | Campo relacionado (GRUPOMODELOPRODUTO) Nasce 0(zero)           
  DECLARE @cntiAcaoNew INTEGER;         -- CNTI_ACAO      | CC  |    |    | INT NN             | Nasce 0
  DECLARE @cntiCodUsrNew INTEGER;       -- CNTI_CODUSR    | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  /*
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @baCodigoNew   = i.BA_CODIGO
         ,@baNomeNew    = dbo.fncTranslate(i.BA_NOME,30)
         ,@baAtivoNew   = UPPER(i.BA_ATIVO)
         ,@baRegNew     = UPPER(i.BA_REG)
         ,@baCodUsrNew  = i.BA_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD46New      = UP.UP_D46
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.BA_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@baCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD46New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 46 PARA INCLUIR NA TABELA BAIXAALERTA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(BA_CODIGO,0) FROM BAIXAALERTA WHERE BA_NOME=@baNomeNew;
    IF( @uiCodigo <> 0 )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BAIXAALERTA COM CODIGO %i',15,1,@uiCodigo);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @baRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@baRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.BAIXAALERTA( 
      BA_NOME
      ,BA_ATIVO
      ,BA_REG
      ,BA_CODUSR) VALUES(
      @baNomeNew     -- BA_NOME
      ,@baAtivoNew   -- BA_ATIVO
      ,@baRegNew     -- BA_REG
      ,@baCodUsrNew  -- BA_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPBAIXAALERTA(
      BA_ACAO
      ,BA_CODIGO
      ,BA_NOME
      ,BA_ATIVO
      ,BA_REG
      ,BA_CODUSR) VALUES(
      'I'                           -- BA_ACAO
      ,IDENT_CURRENT('BAIXAALERTA') -- BA_CODIGO
      ,@baNomeNew                   -- BA_NOME
      ,@baAtivoNew                  -- BA_ATIVO
      ,@baRegNew                    -- BA_REG
      ,@baCodUsrNew                 -- BA_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
  */
END
GO
CREATE TRIGGER dbo.TRGViewCONTRATOITEM_BU ON dbo.VCONTRATOITEM
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @cntiCodCnttNew INTEGER;
  DECLARE @cntiIdUnicoNew INTEGER;
  DECLARE @cntiIdGrupoNew INTEGER;
  DECLARE @cntiCodGmNew INTEGER;
  DECLARE @cntiCodSrvNew INTEGER;
  DECLARE @cntiCodGpNew VARCHAR(3);
  DECLARE @cntiMensalNew VARCHAR(1);
  DECLARE @cntiCodGmpNew INTEGER;
  DECLARE @cntiValorNew NUMERIC(15,2);
  DECLARE @cntiAcaoNew INTEGER;
  DECLARE @cntiCodUsrNew INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @cntiCodCnttNew    = i.CNTI_CODCNTT
         ,@cntiIdUnicoNew   = i.CNTI_IDUNICO
         ,@cntiIdGrupoNew   = i.CNTI_IDGRUPO
         ,@cntiCodGmNew     = i.CNTI_CODGM
         ,@cntiCodSrvNew    = i.CNTI_CODSRV
         ,@cntiCodGpNew     = dbo.fncTranslate(i.CNTI_CODGP,3)
         ,@cntiMensalNew    = UPPER(i.CNTI_MENSAL)
         ,@cntiCodGmpNew    = i.CNTI_CODGMP
         ,@cntiValorNew     = i.CNTI_VALOR
         ,@cntiAcaoNew      = i.CNTI_ACAO
         ,@cntiCodUsrNew    = i.CNTI_CODUSR
    FROM inserted i
  BEGIN TRY    
    /*
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@baCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD46New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA BAIXAALERTA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    */
    DECLARE @cntiCodCnttOld INTEGER;
    DECLARE @cntiIdUnicoOld INTEGER;
    DECLARE @cntiIdGrupoOld INTEGER;
    DECLARE @cntiCodGmOld INTEGER;
    DECLARE @cntiCodSrvOld INTEGER;
    DECLARE @cntiCodGpOld VARCHAR(3);
    DECLARE @cntiMensalOld VARCHAR(1);
    DECLARE @cntiCodGmpOld INTEGER;
    DECLARE @cntiValorOld NUMERIC(15,2);
    DECLARE @cntiAcaoOld INTEGER;
    DECLARE @cntiCodUsrOld INTEGER;
    SELECT @cntiCodCnttOld    = d.CNTI_CODCNTT  -- Naum pode ser alterado
           ,@cntiIdUnicoOld   = d.CNTI_IDUNICO  -- Naum pode ser alterado
           ,@cntiIdGrupoOld   = d.CNTI_IDGRUPO  -- Naum pode ser alterado
           ,@cntiCodGmOld     = d.CNTI_CODGM    -- Naum pode ser alterado
           ,@cntiCodSrvOld    = d.CNTI_CODSRV   -- Naum pode ser alterado
           ,@cntiCodGpOld     = d.CNTI_CODGP    -- Naum pode ser alterado
           ,@cntiMensalOld    = d.CNTI_MENSAL   -- Naum pode ser alterado
           ,@cntiCodGmpOld    = d.CNTI_CODGMP
           ,@cntiValorOld     = d.CNTI_VALOR    -- Naum pode ser alterado
           ,@cntiAcaoOld      = d.CNTI_ACAO
           ,@cntiCodUsrOld    = d.CNTI_CODUSR
      FROM CONTRATOITEM d WHERE ((d.CNTI_CODCNTT=@cntiCodCnttNew) AND (d.CNTI_IDUNICO=@cntiIdUnicoNew));
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @cntiCodCnttOld<>@cntiCodCnttNew )
      RAISERROR('CAMPO CONTRATO NAO PODE SER ALTERADO',15,1);  
    IF( @cntiIdUnicoOld<>@cntiIdUnicoNew )
      RAISERROR('CAMPO IDUNICO NAO PODE SER ALTERADO',15,1);  
    IF( @cntiIdGrupoOld<>@cntiIdGrupoNew )
      RAISERROR('CAMPO IDGRUPO NAO PODE SER ALTERADO',15,1);  
    IF( @cntiCodGmOld<>@cntiCodGmNew )
      RAISERROR('CAMPO GRUPO MODELO NAO PODE SER ALTERADO',15,1);  
    IF( @cntiCodSrvOld<>@cntiCodSrvNew )
      RAISERROR('CAMPO SERVICO NAO PODE SER ALTERADO',15,1);  
    IF( @cntiCodGpOld<>@cntiCodGpNew )
      RAISERROR('CAMPO GRUPO PRODUTO NAO PODE SER ALTERADO',15,1);  
    IF( @cntiValorOld<>@cntiValorNew )
      RAISERROR('CAMPO VALOR NAO PODE SER ALTERADO',15,1);  
    IF( @cntiMensalOld<>@cntiMensalNew )
      RAISERROR('CAMPO MENSAL NAO PODE SER ALTERADO',15,1);  
    -------------------------  
    -- Atualizando o registro  
    -------------------------
    UPDATE dbo.CONTRATOITEM
       SET CNTI_CODGMP   = @cntiCodGmpNew
           ,CNTI_ACAO    = @cntiAcaoNew
           ,CNTI_CODUSR  = @cntiCodUsrNew
     WHERE ((CNTI_CODCNTT=@cntiCodCnttNew) AND (CNTI_IDUNICO=@cntiIdUnicoNew));
    ------------------------------------------------ 
    -- Olhando se existe alguma acao a ser executada
    --   1 = Empenhar
    --  -1 = Retirar empenho
    ------------------------------------------------
    IF( @cntiAcaoOld<>@cntiAcaoNew ) BEGIN
      IF( @cntiAcaoNew=1 ) BEGIN
        -------------------------------------------------------      
        -- Regras para empenhar um auto @ce=(cadastrar empenho)
        -------------------------------------------------------
        DECLARE @ceGmpCodPe VARCHAR(3);
        DECLARE @ceGmpCodAut INTEGER;
        DECLARE @ceGmpPlaca VARCHAR(20);
        DECLARE @ceGmpDtConfigurado DATE;
        DECLARE @ceGmpDtEmpenho DATE;
        DECLARE @ceGmpCodCntt INTEGER;
        SELECT @ceGmpCodPe=GMP_CODPE
               ,@ceGmpCodAut=GMP_CODAUT
               ,@ceGmpPlaca=GMP_PLACACHASSI
               ,@ceGmpDtConfigurado=GMP_DTCONFIGURADO
               ,@ceGmpDtEmpenho=GMP_DTEMPENHO
               ,@ceGmpCodCntt=GMP_CODCNTT
          FROM GRUPOMODELOPRODUTO WHERE GMP_CODIGO=@cntiCodGmpNew;
        IF( @@rowcount=0 )
          RAISERROR('NAO LOCALIZADO AUTO %i PARA EMPENHO',15,1,@cntiCodGmpNew);
        IF( @ceGmpCodPe<>'EST' )  
          RAISERROR('PARA EMPENHO AUTO %i DEVE ESTAR EM ESTOQUE E NAO EM %s',15,1,@cntiCodGmpNew,@ceGmpCodPe);
        IF( @ceGmpCodAut<>0 )  
          RAISERROR('PARA EMPENHO AUTO %i NAO PODE ESTAR INSTALADO',15,1,@cntiCodGmpNew);
        IF( @ceGmpPlaca<>'NSA' )  
          RAISERROR('PARA EMPENHO AUTO %i DEVE ESTAR SEM PLACA E ATUALMENTE ESTA LIGADO A %s',15,1,@cntiCodGmpNew,@ceGmpPlaca);
        IF( @ceGmpDtConfigurado IS NOT NULL )  
          RAISERROR('PARA EMPENHO AUTO %i DATA DE CONFIGURACAO DEVE SER BRANCO',15,1,@cntiCodGmpNew);
        IF( @ceGmpDtEmpenho IS NOT NULL )  
          RAISERROR('PARA EMPENHO AUTO %i DATA DE EMPENHO DEVE SER BRANCO',15,1,@cntiCodGmpNew);
        IF( @ceGmpCodCntt<>0 )  
          RAISERROR('PARA EMPENHO AUTO %i NAO PODE ESTAR EM CONTRATO E ATUALMENTE ESTA NO CONTRATO %i',15,1,@cntiCodGmpNew,@ceGmpCodCntt);
        ----------------------------------------------------------------
        -- Se passar pelas regras acima
        -- Buscando todos os itens do contrato menos o idunico de auto
        -- cursor CadEmp(cadastro de empenho) @ce_ (cadastro de empenho)
        ----------------------------------------------------------------
        DECLARE @ce_CntiIdUnico INTEGER;
        DECLARE crsrCadEmp CURSOR FOR SELECT CNTI_IDUNICO 
                                        FROM CONTRATOITEM
                                       WHERE ((CNTI_CODCNTT=@cntiCodCnttNew) AND (CNTI_IDGRUPO=@cntiIdGrupoNew) AND (CNTI_IDUNICO<>@cntiIdUnicoNew));
        OPEN crsrCadEmp;
        FETCH NEXT FROM crsrCadEmp into @ce_CntiIdUnico;
        WHILE @@FETCH_STATUS = 0 BEGIN
          UPDATE CONTRATOITEM SET CNTI_CODGMP=@cntiCodGmpNew,CNTI_CODUSR=@cntiCodUsrNew
           WHERE ((CNTI_CODCNTT=@cntiCodCnttNew) AND (CNTI_IDUNICO=@ce_CntiIdUnico));
          FETCH NEXT FROM crsrCadEmp into @ce_CntiIdUnico;
        END
        CLOSE crsrCadEmp
        DEALLOCATE crsrCadEmp
        UPDATE VGRUPOMODELOPRODUTO 
           SET GMP_CODAUT=@cntiCodGmpNew
               ,GMP_CODPE='EMP'
               ,GMP_CODCNTT=@cntiCodCnttNew
               ,GMP_DTEMPENHO=GETDATE()
               ,GMP_CODUSR=@cntiCodUsrNew 
          WHERE GMP_CODIGO=@cntiCodGmpNew;
        UPDATE CONTRATO SET CNTT_QTDEMPENHO=(CNTT_QTDEMPENHO+1) WHERE CNTT_CODIGO=@cntiCodCnttNew;  
      END
      --
      --
      IF( @cntiAcaoNew=-1 ) BEGIN
        -------------------------------------------------------      
        -- Regras para empenhar um auto @re=(retirar empenho)
        -------------------------------------------------------
        DECLARE @reGmpCodPe VARCHAR(3);
        DECLARE @reGmpCodAut INTEGER;
        DECLARE @reGmpPlaca VARCHAR(20);
        DECLARE @reGmpDtConfigurado DATE;
        DECLARE @reGmpDtEmpenho DATE;
        DECLARE @reGmpCodCntt INTEGER;
        SELECT @reGmpCodPe=GMP_CODPE
               ,@reGmpCodAut=GMP_CODAUT
               ,@reGmpPlaca=GMP_PLACACHASSI
               ,@reGmpDtConfigurado=GMP_DTCONFIGURADO
               ,@reGmpDtEmpenho=GMP_DTEMPENHO
               ,@reGmpCodCntt=GMP_CODCNTT
          FROM GRUPOMODELOPRODUTO WHERE GMP_CODIGO=@cntiCodGmpOld;
        IF( @@rowcount=0 )
          RAISERROR('NAO LOCALIZADO AUTO %i PARA RETIRAR EMPENHO',15,1,@cntiCodGmpOld);
        IF( @reGmpCodPe<>'EMP' )  
          RAISERROR('PARA RETIRAR EMPENHO AUTO %i DEVE ESTAR EM ESTOQUE E NAO EM %s',15,1,@cntiCodGmpOld,@reGmpCodPe);
        IF( @reGmpCodAut=0 )  
          RAISERROR('PARA RETIRAR EMPENHO AUTO %i DEVE ESTAR INSTALADO',15,1,@cntiCodGmpOld);
        IF( @reGmpPlaca<>'NSA' )  
          RAISERROR('PARA RETIRAR EMPENHO AUTO %i DEVE ESTAR SEM PLACA E ATUALMENTE ESTA LIGADO A %s',15,1,@cntiCodGmpOld,@reGmpPlaca);
        IF( @reGmpDtConfigurado IS NOT NULL )  
          RAISERROR('PARA RETIRAR EMPENHO AUTO %i DATA DE CONFIGURACAO DEVE SER BRANCO',15,1,@cntiCodGmpOld);
        IF( @reGmpDtEmpenho IS NULL )  
          RAISERROR('PARA RETIRAR EMPENHO AUTO %i DATA DE EMPENHO NAO PODE SER BRANCO',15,1,@cntiCodGmpOld);
        IF( @reGmpCodCntt=0 )  
          RAISERROR('PARA RETIRAR EMPENHO AUTO %i DEVE ESTAR EM CONTRATO E ATUALMENTE ESTA NO CONTRATO %i',15,1,@cntiCodGmpOld,@reGmpCodCntt);
        ----------------------------------------------------------------
        -- Se passar pelas regras acima
        -- Buscando todos os itens do contrato menos o idunico de auto
        -- cursor RetEmp(retirar empenho) @re_ (retirar empenho)
        ----------------------------------------------------------------
        DECLARE @re_CntiIdUnico INTEGER;
        DECLARE crsrRetEmp CURSOR FOR SELECT CNTI_IDUNICO 
                                        FROM CONTRATOITEM
                                       WHERE ((CNTI_CODCNTT=@cntiCodCnttOld) AND (CNTI_IDGRUPO=@cntiIdGrupoOld) AND (CNTI_IDUNICO<>@cntiIdUnicoOld));
        OPEN crsrRetEmp;
        FETCH NEXT FROM crsrRetEmp into @re_CntiIdUnico;
        WHILE @@FETCH_STATUS = 0 BEGIN
          UPDATE CONTRATOITEM SET CNTI_CODGMP=@cntiCodGmpNew,CNTI_CODUSR=@cntiCodUsrNew
           WHERE ((CNTI_CODCNTT=@cntiCodCnttOld) AND (CNTI_IDUNICO=@re_CntiIdUnico));
          FETCH NEXT FROM crsrRetEmp into @re_CntiIdUnico;
        END
        CLOSE crsrRetEmp
        DEALLOCATE crsrRetEmp
        UPDATE VGRUPOMODELOPRODUTO 
           SET GMP_CODAUT=@cntiCodGmpNew
               ,GMP_CODPE='EST'
               ,GMP_CODCNTT=@cntiCodCnttNew
               ,GMP_DTEMPENHO=NULL
               ,GMP_CODUSR=@cntiCodUsrNew 
          WHERE GMP_CODIGO=@cntiCodGmpOld;
        UPDATE CONTRATO SET CNTT_QTDEMPENHO=(CNTT_QTDEMPENHO-1) WHERE CNTT_CODIGO=@cntiCodCnttOld;  
      END
    END  
    /*  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @baNomeOld<>@baNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(BA_CODIGO,0) FROM BAIXAALERTA WHERE BA_NOME=@baNomeNew;
      IF( @uiCodigo <> 0 )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BAIXAALERTA COM CODIGO %i',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @baRegOld <> @baRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@baRegOld,@baRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.BAIXAALERTA
       SET BA_NOME   = @baNomeNew
          ,BA_ATIVO  = @baAtivoNew
          ,BA_REG    = @baRegNew
          ,BA_CODUSR = @baCodUsrNew
    WHERE BA_CODIGO  = @baCodigoNew;     
    -- Gravando LOG
    IF( (@baNomeOld<>@baNomeNew) OR (@baAtivoOld<>@baAtivoNew) OR (@baRegOld<>@baRegNew) ) BEGIN
      INSERT INTO dbo.BKPBAIXAALERTA(
        BA_ACAO
        ,BA_CODIGO
        ,BA_NOME
        ,BA_ATIVO
        ,BA_REG
        ,BA_CODUSR) VALUES(
        'A'             -- BA_ACAO
        ,@baCodigoNew  -- BA_CODIGO
        ,@baNomeNew    -- BA_NOME
        ,@baAtivoNew   -- BA_ATIVO
        ,@baRegNew     -- BA_REG
        ,@baCodUsrNew  -- BA_CODUSR
      );
    END
    */
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END    
    
    
-------------------------------------------------------------------------------------
--                           P O N T O E S T O Q U E
--tblpontoestoque
-------------------------------------------------------------------------------------
GO
CREATE TABLE PONTOESTOQUE(
  PE_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,PE_NOME VARCHAR(20) NOT NULL
  ,PE_ESTOQUE INTEGER NOT NULL
  ,PE_SUCATA VARCHAR(1) NOT NULL
  ,PE_ATIVO VARCHAR(1) NOT NULL
  ,PE_REG VARCHAR(1) NOT NULL
  ,PE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_peSucata CHECK( PE_SUCATA IN('S','N'))  
  ,CONSTRAINT chk_peAtivo CHECK( PE_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_peReg CHECK( PE_REG IN('A','P','S')));
GO
CREATE VIEW VPONTOESTOQUE AS
  SELECT PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO,PE_REG,PE_CODUSR FROM PONTOESTOQUE
GO  
CREATE TABLE dbo.BKPPONTOESTOQUE(
  PE_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PE_ACAO VARCHAR(1) NOT NULL
  ,PE_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PE_CODIGO VARCHAR(3) NOT NULL
  ,PE_NOME VARCHAR(20) NOT NULL
  ,PE_SUCATA VARCHAR(1) NOT NULL
  ,PE_ATIVO VARCHAR(1) NOT NULL
  ,PE_REG VARCHAR(1) NOT NULL
  ,PE_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPeAcao CHECK( PE_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                           P O N T O E S T O Q U E I N D
--tblpontoestoqueind ( abertura de cada grupo em favorecidos )
-------------------------------------------------------------------------------------
GO
CREATE TABLE PONTOESTOQUEIND(
  PEI_CODFVR INTEGER NOT NULL
  ,PEI_CODPE VARCHAR(3) NOT NULL
  ,PEI_ATIVO VARCHAR(1) NOT NULL
  ,PEI_REG VARCHAR(1) NOT NULL
  ,PEI_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_peiAtivo CHECK( PEI_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_peiReg CHECK( PEI_REG IN('A','P','S'))
  ,CONSTRAINT PKPONTOESTOQUEIND PRIMARY KEY (PEI_CODFVR,PEI_CODPE));
GO
CREATE VIEW VPONTOESTOQUEIND AS
  SELECT PEI_CODFVR,PEI_CODPE,PEI_ATIVO,PEI_REG,PEI_CODUSR FROM PONTOESTOQUEIND
GO  
CREATE TABLE dbo.BKPPONTOESTOQUEIND(
  PEI_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PEI_ACAO VARCHAR(1) NOT NULL
  ,PEI_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PEI_CODFVR INTEGER NOT NULL
  ,PEI_CODPE VARCHAR(3) NOT NULL
  ,PEI_ATIVO VARCHAR(1) NOT NULL
  ,PEI_REG VARCHAR(1) NOT NULL
  ,PEI_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPeiAcao CHECK( PEI_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             P R O D U T O
--tblproduto
-------------------------------------------------------------------------------------
GO
CREATE TABLE PRODUTO(
  PRD_CODIGO VARCHAR(15) NOT NULL
  ,PRD_CODEMP INTEGER NOT NULL
  ,PRD_NOME VARCHAR(60) NOT NULL
  ,PRD_CODNCM VARCHAR(10) NOT NULL
  ,PRD_ST VARCHAR(1) NOT NULL
  ,PRD_ALIQICMS NUMERIC(6,2) NOT NULL
  ,PRD_REDUCAOBC NUMERIC(6,2) NOT NULL
  ,PRD_IPI VARCHAR(1) NOT NULL
  ,PRD_ALIQIPI NUMERIC(6,2) NOT NULL
  ,PRD_CSTIPI VARCHAR(3) NOT NULL 
  ,PRD_CODEMB VARCHAR(3) NOT NULL
  ,PRD_VLRVENDA NUMERIC(15,2) NOT NULL
  ,PRD_CODPO VARCHAR(1) NOT NULL
  ,PRD_CODBARRAS VARCHAR(20)
  ,PRD_PESOBRUTO NUMERIC(15,4) NOT NULL
  ,PRD_PESOLIQUIDO NUMERIC(15,4) NOT NULL
  ,PRD_DTCADASTRO DATE DEFAULT GETDATE() NOT NULL
  ,PRD_ATIVO VARCHAR(1) NOT NULL
  ,PRD_REG VARCHAR(1) NOT NULL
  ,PRD_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_prdCodNcm CHECK( PRD_CODNCM LIKE('[0-9][0-9][0-9][0-9][.][0-9][0-9][.][0-9][0-9]'))  
  ,CONSTRAINT chk_prdSt CHECK( PRD_ST IN('S','N'))  
  ,CONSTRAINT chk_prdAliqIcms CHECK( PRD_ALIQICMS >=0 )  
  ,CONSTRAINT chk_prdReducaoBc CHECK( PRD_REDUCAOBC >=0 )    
  ,CONSTRAINT chk_prdVlrVenda CHECK( PRD_VLRVENDA >=0 )
  ,CONSTRAINT chk_prdPesoBruto CHECK( PRD_PESOBRUTO >=0 )  
  ,CONSTRAINT chk_prdPesoLiquido CHECK( PRD_PESOLIQUIDO >=0 )    
  ,CONSTRAINT chk_prdIpi CHECK( PRD_IPI IN('S','N'))  
  ,CONSTRAINT chk_prdAtivo CHECK( PRD_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_prdReg CHECK( PRD_REG IN('A','P','S'))
  ,CONSTRAINT PKPRODUTO PRIMARY KEY (PRD_CODIGO,PRD_CODEMP));  
GO
CREATE VIEW VPRODUTO AS
  SELECT PRD_CODIGO                                     
         ,PRD_CODEMP
         ,PRD_NOME
         ,PRD_CODNCM
         ,PRD_ST
         ,PRD_ALIQICMS
         ,PRD_REDUCAOBC
         ,PRD_IPI
         ,PRD_ALIQIPI
         ,PRD_CSTIPI
         ,PRD_CODEMB
         ,PRD_VLRVENDA
         ,PRD_CODPO
         ,PRD_CODBARRAS
         ,PRD_PESOBRUTO
         ,PRD_PESOLIQUIDO
         ,PRD_ATIVO
         ,PRD_REG
         ,PRD_CODUSR
   FROM PRODUTO;
GO   
CREATE TABLE dbo.BKPPRODUTO(
  PRD_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PRD_ACAO VARCHAR(1) NOT NULL
  ,PRD_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PRD_CODIGO VARCHAR(15) NOT NULL                                              
  ,PRD_CODEMP INTEGER NOT NULL
  ,PRD_NOME VARCHAR(60) NOT NULL
  ,PRD_CODNCM VARCHAR(10) NOT NULL
  ,PRD_ST VARCHAR(1) NOT NULL
  ,PRD_ALIQICMS NUMERIC(6,2) NOT NULL
  ,PRD_REDUCAOBC NUMERIC(6,2) NOT NULL
  ,PRD_IPI VARCHAR(1) NOT NULL
  ,PRD_ALIQIPI NUMERIC(6,2) NOT NULL
  ,PRD_CSTIPI VARCHAR(3) NOT NULL
  ,PRD_CODEMB VARCHAR(3) NOT NULL
  ,PRD_VLRVENDA NUMERIC(15,2) NOT NULL
  ,PRD_CODPO VARCHAR(1) NOT NULL 
  ,PRD_CODBARRAS VARCHAR(20)
  ,PRD_PESOBRUTO NUMERIC(15,4) NOT NULL
  ,PRD_PESOLIQUIDO NUMERIC(15,4) NOT NULL
  ,PRD_ATIVO VARCHAR(1) NOT NULL
  ,PRD_REG VARCHAR(1) NOT NULL
  ,PRD_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpPrdAcao CHECK( PRD_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                            P R O D U T O O R I G E M                            --
--tblprodutoorigem
-------------------------------------------------------------------------------------
GO
CREATE TABLE PRODUTOORIGEM(
  PO_CODIGO VARCHAR(1) PRIMARY KEY NOT NULL
  ,PO_NOME VARCHAR(30) NOT NULL
  ,PO_ATIVO VARCHAR(1) NOT NULL
  ,PO_REG VARCHAR(1) NOT NULL
  ,PO_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_poCodigo CHECK( PO_CODIGO LIKE('[0-9]'))  
  ,CONSTRAINT chk_poAtivo CHECK( PO_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_poReg CHECK( PO_REG IN('A','P','S')));
GO
CREATE VIEW VPRODUTOORIGEM AS
  SELECT PO_CODIGO,PO_NOME,PO_ATIVO,PO_REG,PO_CODUSR FROM PRODUTOORIGEM
GO
CREATE TABLE dbo.BKPPRODUTOORIGEM(
  PO_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,PO_ACAO VARCHAR(1) NOT NULL
  ,PO_DATA DATE DEFAULT GETDATE() NOT NULL
  ,PO_CODIGO VARCHAR(1) NOT NULL
  ,PO_NOME VARCHAR(30) NOT NULL
  ,PO_ATIVO VARCHAR(1) NOT NULL
  ,PO_REG VARCHAR(1) NOT NULL
  ,PO_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpPoAcao CHECK( PO_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                         Q U A L I F I C A C A O C O N T                         --
--tblqualificacaocont
-------------------------------------------------------------------------------------
GO
CREATE TABLE QUALIFICACAOCONT(
  QC_CODIGO VARCHAR(4) PRIMARY KEY NOT NULL
  ,QC_NOME VARCHAR(70) NOT NULL
  ,QC_ATIVO VARCHAR(1) NOT NULL
  ,QC_REG VARCHAR(1) NOT NULL
  ,QC_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_qcAtivo CHECK( QC_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_qcReg CHECK( QC_REG IN('A','P','S')));
GO
CREATE VIEW VQUALIFICACAOCONT AS
  SELECT QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR FROM QUALIFICACAOCONT
GO
CREATE TABLE dbo.BKPQUALIFICACAOCONT(
  QC_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,QC_ACAO VARCHAR(1) NOT NULL
  ,QC_DATA DATE DEFAULT GETDATE() NOT NULL
  ,QC_CODIGO VARCHAR(4) NOT NULL
  ,QC_NOME VARCHAR(70) NOT NULL
  ,QC_ATIVO VARCHAR(1) NOT NULL
  ,QC_REG VARCHAR(1) NOT NULL
  ,QC_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpQcAcao CHECK( QC_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                   R A T E I O                                   --
--tblrateio
-------------------------------------------------------------------------------------
GO
CREATE TABLE RATEIO(
  RAT_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,RAT_CODCC VARCHAR(15) NOT NULL             --CONTACONTABIL
  ,RAT_LANCTO INTEGER NOT NULL
  ,RAT_DEBITO NUMERIC(15,2)  DEFAULT 0 NOT NULL
  ,RAT_CREDITO NUMERIC(15,2)  DEFAULT 0 NOT NULL
  ,RAT_DATA DATE DEFAULT GETDATE() NOT NULL
  ,RAT_CODEMP INTEGER NOT NULL
  ,RAT_CODCMP INTEGER NOT NULL                --COMPETENCIA
  ,RAT_CONTABIL VARCHAR(1) NOT NULL
  ,RAT_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_ratContabil CHECK( RAT_CONTABIL IN('S','N'))
);  
GO
CREATE VIEW VRATEIO AS
  SELECT RAT_CODIGO
         ,RAT_CODCC
         ,RAT_LANCTO
         ,RAT_DEBITO
         ,RAT_CREDITO
         ,RAT_DATA
         ,RAT_CODEMP
         ,RAT_CODCMP
         ,RAT_CONTABIL
         ,RAT_CODUSR
    FROM RATEIO
-------------------------------------------------------------------------------------
--                                      R E G I A O
--tblregiao
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.REGIAO(
  REG_CODIGO VARCHAR(5) PRIMARY KEY NOT NULL
  ,REG_NOME VARCHAR(20) NOT NULL
  ,REG_CODPAI INTEGER NOT NULL  
  ,REG_ATIVO VARCHAR(1) NOT NULL
  ,REG_REG VARCHAR(1) NOT NULL
  ,REG_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_regAtivo CHECK( REG_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_regReg CHECK( REG_REG IN('A','P','S'))
);
GO
CREATE VIEW VREGIAO AS
  SELECT REG_CODIGO,REG_NOME,REG_CODPAI,REG_ATIVO,REG_REG,REG_CODUSR
   FROM REGIAO
GO
CREATE TABLE dbo.BKPREGIAO(
  REG_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,REG_ACAO VARCHAR(1) NOT NULL
  ,REG_DATA DATE DEFAULT GETDATE() NOT NULL
  ,REG_CODIGO VARCHAR(5) NOT NULL
  ,REG_NOME VARCHAR(20) NOT NULL
  ,REG_CODPAI INTEGER NOT NULL  
  ,REG_ATIVO VARCHAR(1) NOT NULL
  ,REG_REG VARCHAR(1) NOT NULL
  ,REG_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpRegAcao CHECK( REG_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                 S E R I E N F                                   --
-- Tabela multi-empresa                                                            --
--tblserienf
-------------------------------------------------------------------------------------
GO
CREATE TABLE SERIENF(
  SNF_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,SNF_SERIE VARCHAR(4) NOT NULL
  ,SNF_ENTSAI VARCHAR(1) NOT NULL
  ,SNF_CODTD VARCHAR(3) NOT NULL
  ,SNF_INFORMARNF VARCHAR(1) NOT NULL
  ,SNF_NFINICIO INTEGER NOT NULL
  ,SNF_NFFIM INTEGER NOT NULL
  ,SNF_IDF VARCHAR(20) NOT NULL
  ,SNF_MODELO VARCHAR(5) NOT NULL -- Faltou tabela relacionada
  ,SNF_INDICE VARCHAR(12) NOT NULL
  ,SNF_LIVRO VARCHAR(1) NOT NULL
  ,SNF_ENVIO VARCHAR(1) NOT NULL
  ,SNF_CODFLL INTEGER NOT NULL    
  ,SNF_CODEMP INTEGER NOT NULL  
  ,SNF_ATIVO VARCHAR(1) NOT NULL
  ,SNF_REG VARCHAR(1) NOT NULL
  ,SNF_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_snfEntSai CHECK( SNF_ENTSAI IN('E','S'))    
  ,CONSTRAINT chk_snfInformarNf CHECK( SNF_INFORMARNF IN('S','N'))
  ,CONSTRAINT chk_snfLivro CHECK( SNF_LIVRO IN('S','N'))
  ,CONSTRAINT chk_snfEnvio CHECK( SNF_ENVIO IN('P','S','N'))  
  ,CONSTRAINT chk_snfAtivo CHECK( SNF_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_snfReg CHECK( SNF_REG IN('A','P','S'))
);
GO
CREATE VIEW VSERIENF AS
  SELECT SNF_CODIGO,SNF_SERIE,SNF_ENTSAI,SNF_CODTD,SNF_INFORMARNF,SNF_NFINICIO,SNF_NFFIM
         ,SNF_IDF,SNF_MODELO,SNF_INDICE
         ,SNF_LIVRO
         ,SNF_ENVIO
         ,SNF_CODFLL,SNF_CODEMP,SNF_ATIVO,SNF_REG,SNF_CODUSR FROM SERIENF
GO         
CREATE TABLE dbo.BKPSERIENF(
  SNF_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,SNF_ACAO VARCHAR(1) NOT NULL
  ,SNF_DATA DATE DEFAULT GETDATE() NOT NULL
  ,SNF_CODIGO INTEGER NOT NULL
  ,SNF_SERIE VARCHAR(4) NOT NULL
  ,SNF_ENTSAI VARCHAR(1) NOT NULL
  ,SNF_CODTD VARCHAR(3) NOT NULL
  ,SNF_INFORMARNF VARCHAR(1) NOT NULL
  ,SNF_NFINICIO INTEGER NOT NULL
  ,SNF_NFFIM INTEGER NOT NULL
  ,SNF_IDF VARCHAR(20) NOT NULL
  ,SNF_MODELO VARCHAR(5) NOT NULL -- Faltou tabela relacionada
  ,SNF_INDICE VARCHAR(12) NOT NULL
  ,SNF_LIVRO VARCHAR(1) NOT NULL
  ,SNF_ENVIO VARCHAR(1) NOT NULL
  ,SNF_CODFLL INTEGER NOT NULL      
  ,SNF_CODEMP INTEGER NOT NULL  
  ,SNF_ATIVO VARCHAR(1) NOT NULL
  ,SNF_REG VARCHAR(1) NOT NULL
  ,SNF_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpSnfAcao CHECK( SNF_ACAO IN('I','A','E'))  
);
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- SNF_CODIGO     | PK  |    |    | INT                | Auto incremento
   -- SNF_SERIE      |     |    |    | VC(4) NN           | 
   -- SNF_ENTSAI     | CC  |    |    | VC(1) NN           |    
   -- SNF_CODTD      | SEL |    |    | VC(3) NN           | Campo relacionado (TIPODOCUMENTO)   
   -- TD_NOME        | SEL |    |    | VC(20) NN          | Campo relacionado (TIPODOCUMENTO)      
   -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
   -- SNF_INFORMARNF | CC  |    |    | VC(1) NN           |    
   -- SNF_NFINICIO   |     |    |    | INT NN             |
   -- SNF_NFFIM      |     |    |    | INT NN             |   
   -- SNF_IDF        |     |    |    | VC(20) NN          |   
   -- SNF_MODELO     |     |    |    | VC(5) NN           | 
   -- SNF_CODEMP     | SEL |    |    | INT NN             | Campo relacionado (EMPRESA)  
   -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
   -- SNF_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- SNF_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- SNF_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D22         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
--                                 S E R V I C O                                   --
-- Tabela multi-empresa                                                            --
--tblservico
-------------------------------------------------------------------------------------
GO
CREATE TABLE SERVICO(
  SRV_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,SRV_NOME VARCHAR(60) NOT NULL
  ,SRV_ENTSAI VARCHAR(1) NOT NULL
  ,SRV_INSS VARCHAR(1) NOT NULL
  ,SRV_INSSALIQ NUMERIC(6,2) NOT NULL
  ,SRV_INSSBASECALC NUMERIC(6,2) NOT NULL
  ,SRV_IRRF VARCHAR(1) NOT NULL
  ,SRV_IRRFALIQ NUMERIC(6,2) NOT NULL
  ,SRV_PIS VARCHAR(1) NOT NULL
  ,SRV_PISALIQ NUMERIC(6,2) NOT NULL
  ,SRV_COFINS VARCHAR(1) NOT NULL
  ,SRV_COFINSALIQ NUMERIC(6,2) NOT NULL
  ,SRV_CSLL VARCHAR(1) NOT NULL
  ,SRV_CSLLALIQ NUMERIC(6,2) NOT NULL
  ,SRV_ISS VARCHAR(1) NOT NULL
  ,SRV_CODCC VARCHAR(15) NOT NULL
  ,SRV_CODSPR VARCHAR(10) NOT NULL
  ,SRV_CODPRD VARCHAR(15) NOT NULL
  ,SRV_CODEMP INTEGER NOT NULL
  ,SRV_PODEVENDA VARCHAR(1) NOT NULL
  ,SRV_PODELOCACAO VARCHAR(1) NOT NULL
  ,SRV_ATIVO VARCHAR(1) NOT NULL
  ,SRV_REG VARCHAR(1) NOT NULL
  ,SRV_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_srvEntSai CHECK( SRV_ENTSAI IN('E','S'))  
  ,CONSTRAINT chk_srvInss CHECK( SRV_INSS IN('S','N'))  
  ,CONSTRAINT chk_srvPodeVenda CHECK( SRV_PODEVENDA IN('S','N'))  
  ,CONSTRAINT chk_srvPodeLocacao CHECK( SRV_PODELOCACAO IN('S','N'))  
  ,CONSTRAINT chk_srvInssAliq CHECK( (((SRV_INSS='S') AND (SRV_INSSALIQ >0)) OR ((SRV_INSS='N') AND (SRV_INSSALIQ =0)))  )  
  ,CONSTRAINT chk_srvIrrf CHECK( SRV_IRRF IN('S','N'))   
  ,CONSTRAINT chk_srvIrrfAliq CHECK( (((SRV_IRRF='S') AND (SRV_IRRFALIQ >0)) OR ((SRV_IRRF='N') AND (SRV_IRRFALIQ =0)))  )  
  ,CONSTRAINT chk_srvPis CHECK( SRV_PIS IN('S','N'))      
  ,CONSTRAINT chk_srvPisAliq CHECK( (((SRV_PIS='S') AND (SRV_PISALIQ >0)) OR ((SRV_PIS='N') AND (SRV_PISALIQ =0)))  )    
  ,CONSTRAINT chk_srvCofins CHECK( SRV_COFINS IN('S','N'))      
  ,CONSTRAINT chk_srvCofinsAliq CHECK( (((SRV_COFINS='S') AND (SRV_COFINSALIQ >0)) OR ((SRV_COFINS='N') AND (SRV_COFINSALIQ =0)))  )      
  ,CONSTRAINT chk_srvCsll CHECK( SRV_CSLL IN('S','N'))      
  ,CONSTRAINT chk_srvCsllAliq CHECK( (((SRV_CSLL='S') AND (SRV_CSLLALIQ >0)) OR ((SRV_CSLL='N') AND (SRV_CSLLALIQ =0)))  )        
  ,CONSTRAINT chk_srvIss CHECK( SRV_ISS IN('S','N'))      
  ,CONSTRAINT chk_srvAtivo CHECK( SRV_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_srvReg CHECK( SRV_REG IN('A','P','S')));
GO
CREATE VIEW VSERVICO AS
  SELECT SRV_CODIGO
         ,SRV_NOME
         ,SRV_ENTSAI
         ,SRV_INSS
         ,SRV_INSSALIQ
         ,SRV_INSSBASECALC
         ,SRV_IRRF
         ,SRV_IRRFALIQ
         ,SRV_PIS
         ,SRV_PISALIQ
         ,SRV_COFINS
         ,SRV_COFINSALIQ
         ,SRV_CSLL
         ,SRV_CSLLALIQ
         ,SRV_ISS
         ,SRV_CODCC
         ,SRV_CODSPR
         ,SRV_CODPRD
         ,SRV_CODEMP
         ,SRV_PODEVENDA
         ,SRV_PODELOCACAO
         ,SRV_ATIVO
         ,SRV_REG
         ,SRV_CODUSR
    FROM SERVICO
GO
CREATE TABLE dbo.BKPSERVICO(
  SRV_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,SRV_ACAO VARCHAR(1) NOT NULL
  ,SRV_DATA DATE DEFAULT GETDATE() NOT NULL
  ,SRV_CODIGO INTEGER NOT NULL 
  ,SRV_NOME VARCHAR(60) NOT NULL
  ,SRV_ENTSAI VARCHAR(1) NOT NULL
  ,SRV_INSS VARCHAR(1) NOT NULL
  ,SRV_INSSALIQ NUMERIC(6,2) NOT NULL
  ,SRV_INSSBASECALC NUMERIC(6,2) NOT NULL
  ,SRV_IRRF VARCHAR(1) NOT NULL
  ,SRV_IRRFALIQ NUMERIC(6,2) NOT NULL
  ,SRV_PIS VARCHAR(1) NOT NULL
  ,SRV_PISALIQ NUMERIC(6,2) NOT NULL
  ,SRV_COFINS VARCHAR(1) NOT NULL
  ,SRV_COFINSALIQ NUMERIC(6,2) NOT NULL
  ,SRV_CSLL VARCHAR(1) NOT NULL
  ,SRV_CSLLALIQ NUMERIC(6,2) NOT NULL
  ,SRV_ISS VARCHAR(1) NOT NULL
  ,SRV_CODCC VARCHAR(15) NOT NULL
  ,SRV_CODSPR VARCHAR(10) NOT NULL
  ,SRV_CODPRD VARCHAR(15) NOT NULL
  ,SRV_CODEMP INTEGER NOT NULL
  ,SRV_PODEVENDA VARCHAR(1) NOT NULL
  ,SRV_PODELOCACAO VARCHAR(1) NOT NULL
  ,SRV_ATIVO VARCHAR(1) NOT NULL
  ,SRV_REG VARCHAR(1) NOT NULL
  ,SRV_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpSrvAcao CHECK( SRV_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                       S E R V I C O P R E F E I T U R A                         --
--tblservicoprefeitura
-------------------------------------------------------------------------------------
GO
CREATE TABLE SERVICOPREFEITURA(
  SPR_CODIGO VARCHAR(10) NOT NULL
  ,SPR_CODCDD VARCHAR(7) NOT NULL
  ,SPR_NOME VARCHAR(60) NOT NULL
  ,SPR_CODFEDERAL VARCHAR(10) NOT NULL
  ,SPR_ALIQUOTA NUMERIC(6,2) NOT NULL
  ,SPR_RETIDO VARCHAR(1) NOT NULL
  ,SPR_ATIVO VARCHAR(1) NOT NULL
  ,SPR_REG VARCHAR(1) NOT NULL
  ,SPR_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_sprRetido CHECK( SPR_RETIDO IN('S','N'))  
  ,CONSTRAINT chk_sprAtivo CHECK( SPR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_sprReg CHECK( SPR_REG IN('A','P','S'))
  ,CONSTRAINT PKTSERVICOPREFEITURA PRIMARY KEY (SPR_CODIGO, SPR_CODCDD));
GO
CREATE VIEW VSERVICOPREFEITURA AS
  SELECT SPR_CODIGO
         ,SPR_CODCDD
         ,SPR_NOME
         ,SPR_CODFEDERAL
         ,SPR_ALIQUOTA
         ,SPR_RETIDO
         ,SPR_ATIVO
         ,SPR_REG
         ,SPR_CODUSR
  FROM SERVICOPREFEITURA
GO
CREATE TABLE dbo.BKPSERVICOPREFEITURA(
  SPR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,SPR_ACAO VARCHAR(1) NOT NULL
  ,SPR_DATA DATE DEFAULT GETDATE() NOT NULL  
  ,SPR_CODIGO VARCHAR(10) NOT NULL
  ,SPR_CODCDD VARCHAR(7) NOT NULL
  ,SPR_NOME VARCHAR(60) NOT NULL
  ,SPR_CODFEDERAL VARCHAR(10) NOT NULL
  ,SPR_ALIQUOTA NUMERIC(6,2) NOT NULL
  ,SPR_RETIDO VARCHAR(1) NOT NULL
  ,SPR_ATIVO VARCHAR(1) NOT NULL
  ,SPR_REG VARCHAR(1) NOT NULL
  ,SPR_CODUSR INTEGER NOT NULL
  ,CONSTRAINT chk_bkpSprAcao CHECK( SPR_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                  S P E D                                        --
-- Classificacao da natureza do sped                                               --
--tblsped
-------------------------------------------------------------------------------------
GO
CREATE TABLE SPED(
  SPD_CODIGO VARCHAR(2) PRIMARY KEY NOT NULL
  ,SPD_NOME VARCHAR(20) NOT NULL
  ,SPD_ATIVO VARCHAR(1) NOT NULL
  ,SPD_REG VARCHAR(1) NOT NULL
  ,SPD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_spdAtivo CHECK( SPD_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_spdReg CHECK( SPD_REG IN('A','P','S')));
GO
CREATE VIEW VSPED AS
  SELECT SPD_CODIGO,SPD_NOME,SPD_ATIVO,SPD_REG,SPD_CODUSR FROM SPED
GO  
CREATE TABLE dbo.BKPSPED(
  SPD_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,SPD_ACAO VARCHAR(1) NOT NULL
  ,SPD_DATA DATE DEFAULT GETDATE() NOT NULL
  ,SPD_CODIGO VARCHAR(2) NOT NULL
  ,SPD_NOME VARCHAR(20) NOT NULL
  ,SPD_ATIVO VARCHAR(1) NOT NULL
  ,SPD_REG VARCHAR(1) NOT NULL
  ,SPD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpSpdAcao CHECK( SPD_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                         T I P O D O C U M E N T O                               --
--tbltipodocumento
-------------------------------------------------------------------------------------
GO
CREATE TABLE TIPODOCUMENTO(
  TD_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,TD_NOME VARCHAR(20) NOT NULL
  ,TD_SERIENF VARCHAR(1) NOT NULL
  ,TD_ATIVO VARCHAR(1) NOT NULL
  ,TD_REG VARCHAR(1) NOT NULL
  ,TD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_tdSerieNf CHECK( TD_SERIENF IN('P','S','N'))  
  ,CONSTRAINT chk_tdAtivo CHECK( TD_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_tdReg CHECK( TD_REG IN('A','P','S')));
GO
CREATE VIEW VTIPODOCUMENTO AS
  SELECT TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO,TD_REG,TD_CODUSR FROM TIPODOCUMENTO
GO  
CREATE TABLE dbo.BKPTIPODOCUMENTO(
  TD_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,TD_ACAO VARCHAR(1) NOT NULL
  ,TD_DATA DATE DEFAULT GETDATE() NOT NULL
  ,TD_CODIGO VARCHAR(3) NOT NULL
  ,TD_NOME VARCHAR(20) NOT NULL
  ,TD_SERIENF VARCHAR(1) NOT NULL  
  ,TD_ATIVO VARCHAR(1) NOT NULL
  ,TD_REG VARCHAR(1) NOT NULL
  ,TD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpTdAcao CHECK( TD_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                         T R A N S P O R T A D O R A                             --
--tbltransportadora
-------------------------------------------------------------------------------------
GO  
CREATE TABLE TRANSPORTADORA(
  TRN_CODFVR INTEGER NOT NULL
  ,TRN_CODEMP INTEGER NOT NULL    
  ,TRN_ATIVO VARCHAR(1) NOT NULL
  ,TRN_REG VARCHAR(1) NOT NULL
  ,TRN_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_trnAtivo CHECK( TRN_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_trnReg CHECK( TRN_REG IN('A','P','S'))
  ,CONSTRAINT PKTRANSPORTADORA PRIMARY KEY (TRN_CODFVR,TRN_CODEMP));
GO
CREATE VIEW VTRANSPORTADORA AS
  SELECT TRN_CODFVR,TRN_CODEMP,TRN_ATIVO,TRN_REG,TRN_CODUSR FROM TRANSPORTADORA
GO  
CREATE TABLE dbo.BKPTRANSPORTADORA(
  TRN_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,TRN_ACAO VARCHAR(1) NOT NULL
  ,TRN_DATA DATE DEFAULT GETDATE() NOT NULL
  ,TRN_CODFVR INTEGER NOT NULL
  ,TRN_CODEMP INTEGER NOT NULL  
  ,TRN_ATIVO VARCHAR(1) NOT NULL
  ,TRN_REG VARCHAR(1) NOT NULL
  ,TRN_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpTrnAcao CHECK( TRN_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             U S U A R I O                                       
--tblusuario
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.USUARIO(
  USR_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,USR_CPF VARCHAR(11) NOT NULL
  ,USR_APELIDO VARCHAR(15) NOT NULL
  ,USR_CODUP INTEGER NOT NULL  
  ,USR_CODCRG VARCHAR(3) NOT NULL
  ,USR_EMAIL VARCHAR(60) NOT NULL
  ,USR_SENHA VARCHAR(15) NOT NULL
  ,USR_ATIVO VARCHAR(1) NOT NULL
  ,USR_REG VARCHAR(1) NOT NULL
  ,USR_ADMPUB VARCHAR(1) NOT NULL
  ,USR_VENCTO DATE DEFAULT GETDATE() NOT NULL
  ,USR_PRIMEIROACESSO VARCHAR(1) DEFAULT 'S' NOT NULL
  ,USR_FECHAMENTO VARCHAR(1) NOT NULL
  ,USR_CODUSR  INTEGER NOT NULL
  ,CONSTRAINT chk_usrCpf CHECK( USR_CPF NOT LIKE '%[^0-9]%' )  
  ,CONSTRAINT chk_usrAtivo CHECK( USR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_usrReg CHECK( USR_REG IN('A','P','S'))
  ,CONSTRAINT chk_usrAdmPub CHECK( USR_ADMPUB IN('A','P'))
  ,CONSTRAINT chk_usrPrimeiroAcesso CHECK( USR_PRIMEIROACESSO IN('S','N'))
  ,CONSTRAINT chk_usrFechamento CHECK( USR_FECHAMENTO IN('S','N'))
);
GO
CREATE VIEW VUSUARIO AS
  SELECT USR_CODIGO,USR_CPF,USR_APELIDO,USR_CODUP,USR_CODCRG,USR_EMAIL,USR_SENHA,USR_ATIVO,USR_REG
         ,USR_ADMPUB,USR_VENCTO,USR_PRIMEIROACESSO,USR_FECHAMENTO,USR_CODUSR
    FROM USUARIO;
GO
CREATE TABLE dbo.BKPUSUARIO(
  USR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,USR_ACAO VARCHAR(1) NOT NULL
  ,USR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,USR_CODIGO INTEGER NOT NULL
  ,USR_CPF VARCHAR(11) NOT NULL
  ,USR_APELIDO VARCHAR(15) NOT NULL
  ,USR_CODUP INTEGER NOT NULL  
  ,USR_CODCRG VARCHAR(3) NOT NULL
  ,USR_EMAIL VARCHAR(60) NOT NULL
  ,USR_SENHA VARCHAR(15) NOT NULL
  ,USR_ATIVO VARCHAR(1) NOT NULL
  ,USR_REG VARCHAR(1) NOT NULL
  ,USR_ADMPUB VARCHAR(1) NOT NULL
  ,USR_VENCTO DATE NOT NULL
  ,USR_FECHAMENTO VARCHAR(1) NOT NULL  
  ,USR_CODUSR  INTEGER NOT NULL
  ,CONSTRAINT chk_bkpUsrAcao CHECK( USR_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             U S U A R I O E M P R E S A                         --
--                          Relacionamento entre usuario/empresa                   --
--tblusuarioempresa
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.USUARIOEMPRESA(
  UE_CODUSR INTEGER NOT NULL
  ,UE_CODEMP INTEGER NOT NULL
  ,UE_ATIVO VARCHAR(1) NOT NULL
  ,UE_REG VARCHAR(1) NOT NULL 
  ,SIS_CODUSR  INTEGER NOT NULL  
  ,CONSTRAINT chk_ueAtivo CHECK( UE_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_ueReg CHECK( UE_REG IN('A','P','S'))
,CONSTRAINT PKUSUARIOEMPRESA PRIMARY KEY (UE_CODUSR,UE_CODEMP));
GO
CREATE VIEW VUSUARIOEMPRESA AS
  SELECT UE_CODUSR
         ,UE_CODEMP
         ,UE_ATIVO
         ,UE_REG
         ,SIS_CODUSR
    FROM USUARIOEMPRESA
GO
CREATE TABLE dbo.BKPUSUARIOEMPRESA(
  UE_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,UE_ACAO VARCHAR(1) NOT NULL
  ,UE_DATA DATE DEFAULT GETDATE() NOT NULL
  ,UE_CODUSR INTEGER NOT NULL
  ,UE_CODEMP INTEGER NOT NULL
  ,UE_ATIVO VARCHAR(1) NOT NULL
  ,UE_REG VARCHAR(1) NOT NULL 
  ,SIS_CODUSR  INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpUeAcao CHECK( UE_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             U S U A R I O P E R F I L                           --
--                       A tabela nasce com um perfil de ADMIN                     --
--tblusuarioperfil
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.USUARIOPERFIL(
  UP_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,UP_NOME VARCHAR(15) NOT NULL
  ,UP_D01 INTEGER NOT NULL
  ,UP_D02 INTEGER NOT NULL
  ,UP_D03 INTEGER NOT NULL
  ,UP_D04 INTEGER NOT NULL
  ,UP_D05 INTEGER NOT NULL
  ,UP_D06 INTEGER NOT NULL
  ,UP_D07 INTEGER NOT NULL
  ,UP_D08 INTEGER NOT NULL
  ,UP_D09 INTEGER NOT NULL
  ,UP_D10 INTEGER NOT NULL
  ,UP_D11 INTEGER NOT NULL
  ,UP_D12 INTEGER NOT NULL
  ,UP_D13 INTEGER NOT NULL
  ,UP_D14 INTEGER NOT NULL
  ,UP_D15 INTEGER NOT NULL
  ,UP_D16 INTEGER NOT NULL
  ,UP_D17 INTEGER NOT NULL
  ,UP_D18 INTEGER NOT NULL
  ,UP_D19 INTEGER NOT NULL
  ,UP_D20 INTEGER NOT NULL
  ,UP_D21 INTEGER NOT NULL
  ,UP_D22 INTEGER NOT NULL
  ,UP_D23 INTEGER NOT NULL
  ,UP_D24 INTEGER NOT NULL
  ,UP_D25 INTEGER NOT NULL
  ,UP_D26 INTEGER NOT NULL
  ,UP_D27 INTEGER NOT NULL
  ,UP_D28 INTEGER NOT NULL
  ,UP_D29 INTEGER NOT NULL
  ,UP_D30 INTEGER NOT NULL
  ,UP_D31 INTEGER NOT NULL
  ,UP_D32 INTEGER NOT NULL
  ,UP_D33 INTEGER NOT NULL
  ,UP_D34 INTEGER NOT NULL
  ,UP_D35 INTEGER NOT NULL
  ,UP_D36 INTEGER NOT NULL
  ,UP_D37 INTEGER NOT NULL
  ,UP_D38 INTEGER NOT NULL
  ,UP_D39 INTEGER NOT NULL
  ,UP_D40 INTEGER NOT NULL
  ,UP_D41 INTEGER NOT NULL
  ,UP_D42 INTEGER NOT NULL
  ,UP_D43 INTEGER NOT NULL
  ,UP_D44 INTEGER NOT NULL
  ,UP_D45 INTEGER NOT NULL
  ,UP_D46 INTEGER NOT NULL
  ,UP_D47 INTEGER NOT NULL
  ,UP_D48 INTEGER NOT NULL
  ,UP_D49 INTEGER NOT NULL
  ,UP_D50 INTEGER NOT NULL
  ,UP_ATIVO VARCHAR(1) NOT NULL
  ,UP_REG VARCHAR(1) NOT NULL
  ,UP_CODUSR  INTEGER NOT NULL  
  ,CONSTRAINT chk_upAtivo CHECK( UP_ATIVO IN('S','N'))
  ,CONSTRAINT chk_upReg CHECK( UP_REG IN('A','P','S'))
  ,CONSTRAINT chk_upD01 CHECK( UP_D01 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD02 CHECK( UP_D02 BETWEEN 0 AND 4 )  
  ,CONSTRAINT chk_upD03 CHECK( UP_D03 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD04 CHECK( UP_D04 BETWEEN 0 AND 4 )  
  ,CONSTRAINT chk_upD05 CHECK( UP_D05 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD06 CHECK( UP_D06 BETWEEN 0 AND 4 )  
  ,CONSTRAINT chk_upD07 CHECK( UP_D07 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD08 CHECK( UP_D08 BETWEEN 0 AND 4 )  
  ,CONSTRAINT chk_upD09 CHECK( UP_D09 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD10 CHECK( UP_D10 BETWEEN 0 AND 4 )  
  ,CONSTRAINT chk_upD11 CHECK( UP_D11 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD12 CHECK( UP_D12 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD13 CHECK( UP_D13 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD14 CHECK( UP_D14 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD15 CHECK( UP_D15 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD16 CHECK( UP_D16 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD17 CHECK( UP_D17 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD18 CHECK( UP_D18 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD19 CHECK( UP_D19 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD20 CHECK( UP_D20 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD21 CHECK( UP_D21 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD22 CHECK( UP_D22 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD23 CHECK( UP_D23 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD24 CHECK( UP_D24 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD25 CHECK( UP_D25 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD26 CHECK( UP_D26 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD27 CHECK( UP_D27 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD28 CHECK( UP_D28 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD29 CHECK( UP_D29 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD30 CHECK( UP_D30 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD31 CHECK( UP_D31 IN(0,4) )
  ,CONSTRAINT chk_upD32 CHECK( UP_D32 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD33 CHECK( UP_D33 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD34 CHECK( UP_D34 IN(0,4) )
  ,CONSTRAINT chk_upD35 CHECK( UP_D35 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD36 CHECK( UP_D36 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD37 CHECK( UP_D37 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD38 CHECK( UP_D38 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD39 CHECK( UP_D39 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD40 CHECK( UP_D40 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD41 CHECK( UP_D41 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD42 CHECK( UP_D42 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD43 CHECK( UP_D43 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD44 CHECK( UP_D44 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD45 CHECK( UP_D45 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD46 CHECK( UP_D46 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD47 CHECK( UP_D47 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD48 CHECK( UP_D48 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD49 CHECK( UP_D49 BETWEEN 0 AND 4 )
  ,CONSTRAINT chk_upD50 CHECK( UP_D50 BETWEEN 0 AND 4 )
);
GO
CREATE VIEW VUSUARIOPERFIL AS
  SELECT UP_CODIGO,UP_NOME
         ,UP_D01,UP_D02,UP_D03,UP_D04,UP_D05,UP_D06,UP_D07,UP_D08,UP_D09,UP_D10
         ,UP_D11,UP_D12,UP_D13,UP_D14,UP_D15,UP_D16,UP_D17,UP_D18,UP_D19,UP_D20
         ,UP_D21,UP_D22,UP_D23,UP_D24,UP_D25,UP_D26,UP_D27,UP_D28,UP_D29,UP_D30
         ,UP_D31,UP_D32,UP_D33,UP_D34,UP_D35,UP_D36,UP_D37,UP_D38,UP_D39,UP_D40
         ,UP_D41,UP_D42,UP_D43,UP_D44,UP_D45,UP_D46,UP_D47,UP_D48,UP_D49,UP_D50         
         ,UP_ATIVO,UP_REG,UP_CODUSR FROM USUARIOPERFIL
GO
CREATE TABLE dbo.BKPUSUARIOPERFIL(
  UP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,UP_ACAO VARCHAR(1) NOT NULL
  ,UP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,UP_CODIGO INTEGER NOT NULL
  ,UP_NOME VARCHAR(15) NOT NULL
  ,UP_D01 INTEGER NOT NULL
  ,UP_D02 INTEGER NOT NULL
  ,UP_D03 INTEGER NOT NULL
  ,UP_D04 INTEGER NOT NULL
  ,UP_D05 INTEGER NOT NULL
  ,UP_D06 INTEGER NOT NULL
  ,UP_D07 INTEGER NOT NULL
  ,UP_D08 INTEGER NOT NULL
  ,UP_D09 INTEGER NOT NULL
  ,UP_D10 INTEGER NOT NULL
  ,UP_D11 INTEGER NOT NULL
  ,UP_D12 INTEGER NOT NULL
  ,UP_D13 INTEGER NOT NULL
  ,UP_D14 INTEGER NOT NULL
  ,UP_D15 INTEGER NOT NULL
  ,UP_D16 INTEGER NOT NULL
  ,UP_D17 INTEGER NOT NULL
  ,UP_D18 INTEGER NOT NULL
  ,UP_D19 INTEGER NOT NULL
  ,UP_D20 INTEGER NOT NULL
  ,UP_D21 INTEGER NOT NULL
  ,UP_D22 INTEGER NOT NULL
  ,UP_D23 INTEGER NOT NULL
  ,UP_D24 INTEGER NOT NULL
  ,UP_D25 INTEGER NOT NULL
  ,UP_D26 INTEGER NOT NULL
  ,UP_D27 INTEGER NOT NULL
  ,UP_D28 INTEGER NOT NULL
  ,UP_D29 INTEGER NOT NULL
  ,UP_D30 INTEGER NOT NULL
  ,UP_D31 INTEGER NOT NULL
  ,UP_D32 INTEGER NOT NULL
  ,UP_D33 INTEGER NOT NULL
  ,UP_D34 INTEGER NOT NULL
  ,UP_D35 INTEGER NOT NULL
  ,UP_D36 INTEGER NOT NULL
  ,UP_D37 INTEGER NOT NULL
  ,UP_D38 INTEGER NOT NULL
  ,UP_D39 INTEGER NOT NULL
  ,UP_D40 INTEGER NOT NULL
  ,UP_D41 INTEGER NOT NULL
  ,UP_D42 INTEGER NOT NULL
  ,UP_D43 INTEGER NOT NULL
  ,UP_D44 INTEGER NOT NULL
  ,UP_D45 INTEGER NOT NULL
  ,UP_D46 INTEGER NOT NULL
  ,UP_D47 INTEGER NOT NULL
  ,UP_D48 INTEGER NOT NULL
  ,UP_D49 INTEGER NOT NULL
  ,UP_D50 INTEGER NOT NULL
  ,UP_ATIVO VARCHAR(1) NOT NULL
  ,UP_REG VARCHAR(1) NOT NULL
  ,UP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpUpAcao CHECK( UP_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                             U S U A R I O S I S T E M A                         --
-- A tabela USUARIOSISTEMA guarda todos usuarios ja cadastrados seja os ativos ou  --
--      excluidos, ela eh a referência para todo passo-a-passo do sistema          -- 
--tblusuariosistema
-------------------------------------------------------------------------------------
GO
CREATE TABLE dbo.USUARIOSISTEMA(
  US_CODIGO INTEGER PRIMARY KEY NOT NULL
  ,US_CPF VARCHAR(11) NOT NULL
  ,US_APELIDO VARCHAR(15) NOT NULL
  ,US_DTINCLUSAO  DATE DEFAULT GETDATE() NOT NULL
  ,US_DTEXCLUSAO DATE
);
-------------------------------------------------------------------------------------
--                                 V E I C U L O                                   --
--tblveiculo
-------------------------------------------------------------------------------------
GO  
CREATE TABLE VEICULO(
  VCL_CODIGO VARCHAR(20) NOT NULL
  ,VCL_CODFVR INTEGER NOT NULL
  ,VCL_CODVCR INTEGER NOT NULL
  ,VCL_CODVTP VARCHAR(3) NOT NULL
  ,VCL_CODVMD INTEGER NOT NULL
  ,VCL_ANO INTEGER NOT NULL  
  ,VCL_ATIVO VARCHAR(1) NOT NULL
  ,VCL_REG VARCHAR(1) NOT NULL
  ,VCL_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_vclAtivo CHECK( VCL_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_vclReg CHECK( VCL_REG IN('A','P','S'))
  ,CONSTRAINT PKVEICULO PRIMARY KEY (VCL_CODIGO));
GO
CREATE VIEW VVEICULO AS
  SELECT VCL_CODIGO,VCL_CODFVR,VCL_CODVCR,VCL_CODVTP,VCL_CODVMD,VCL_ANO,VCL_ATIVO,VCL_REG,VCL_CODUSR
  FROM VEICULO
GO  
CREATE TABLE dbo.BKPVEICULO(
  VCL_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,VCL_ACAO VARCHAR(1) NOT NULL
  ,VCL_DATA DATE DEFAULT GETDATE() NOT NULL
  ,VCL_CODIGO VARCHAR(20) NOT NULL  
  ,VCL_CODFVR INTEGER NOT NULL  
  ,VCL_CODVCR INTEGER NOT NULL
  ,VCL_CODVTP VARCHAR(3) NOT NULL
  ,VCL_CODVMD INTEGER NOT NULL
  ,VCL_ANO INTEGER NOT NULL  
  ,VCL_ATIVO VARCHAR(1) NOT NULL
  ,VCL_REG VARCHAR(1) NOT NULL
  ,VCL_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpVclAcao CHECK( VCL_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                V E I C U L O C O R
--tblveiculocor
-------------------------------------------------------------------------------------
GO
CREATE TABLE VEICULOCOR(
  VCR_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,VCR_NOME VARCHAR(30) NOT NULL
  ,VCR_ATIVO VARCHAR(1) NOT NULL
  ,VCR_REG VARCHAR(1) NOT NULL
  ,VCR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_vcrAtivo CHECK( VCR_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_vcrReg CHECK( VCR_REG IN('A','P','S')));
GO
CREATE VIEW VVEICULOCOR AS
  SELECT VCR_CODIGO,VCR_NOME,VCR_ATIVO,VCR_REG,VCR_CODUSR FROM VEICULOCOR
GO  
CREATE TABLE dbo.BKPVEICULOCOR(
  VCR_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,VCR_ACAO VARCHAR(1) NOT NULL
  ,VCR_DATA DATE DEFAULT GETDATE() NOT NULL
  ,VCR_CODIGO INTEGER NOT NULL
  ,VCR_NOME VARCHAR(30) NOT NULL
  ,VCR_ATIVO VARCHAR(1) NOT NULL
  ,VCR_REG VARCHAR(1) NOT NULL
  ,VCR_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpVcrAcao CHECK( VCR_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                        V E I C U L O F A B R I C A N T E
--tblveiculofabricante
-------------------------------------------------------------------------------------
GO
CREATE TABLE VEICULOFABRICANTE(
  VFB_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,VFB_NOME VARCHAR(20) NOT NULL
  ,VFB_ATIVO VARCHAR(1) NOT NULL
  ,VFB_REG VARCHAR(1) NOT NULL
  ,VFB_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_vfbAtivo CHECK( VFB_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_vfbReg CHECK( VFB_REG IN('A','P','S')));
GO
CREATE VIEW VVEICULOFABRICANTE AS
  SELECT VFB_CODIGO,VFB_NOME,VFB_ATIVO,VFB_REG,VFB_CODUSR FROM VEICULOFABRICANTE
GO  
CREATE TABLE dbo.BKPVEICULOFABRICANTE(
  VFB_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,VFB_ACAO VARCHAR(1) NOT NULL
  ,VFB_DATA DATE DEFAULT GETDATE() NOT NULL
  ,VFB_CODIGO VARCHAR(3) NOT NULL
  ,VFB_NOME VARCHAR(20) NOT NULL
  ,VFB_ATIVO VARCHAR(1) NOT NULL
  ,VFB_REG VARCHAR(1) NOT NULL
  ,VFB_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpVfbAcao CHECK( VFB_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                            V E I C U L O M O D E L O
--tblveiculomodelo
-------------------------------------------------------------------------------------
GO
CREATE TABLE VEICULOMODELO(
  VMD_CODIGO INTEGER IDENTITY PRIMARY KEY NOT NULL
  ,VMD_NOME VARCHAR(20) NOT NULL
  ,VMD_CODVFB VARCHAR(3) NOT NULL
  ,VMD_ATIVO VARCHAR(1) NOT NULL
  ,VMD_REG VARCHAR(1) NOT NULL
  ,VMD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_vmdAtivo CHECK( VMD_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_vmdReg CHECK( VMD_REG IN('A','P','S')));
GO
CREATE VIEW VVEICULOMODELO AS
  SELECT VMD_CODIGO,VMD_NOME,VMD_CODVFB,VMD_ATIVO,VMD_REG,VMD_CODUSR FROM VEICULOMODELO
GO  
CREATE TABLE dbo.BKPVEICULOMODELO(
  VMD_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,VMD_ACAO VARCHAR(1) NOT NULL
  ,VMD_DATA DATE DEFAULT GETDATE() NOT NULL
  ,VMD_CODIGO INTEGER NOT NULL
  ,VMD_NOME VARCHAR(20) NOT NULL
  ,VMD_CODVFB VARCHAR(3) NOT NULL
  ,VMD_ATIVO VARCHAR(1) NOT NULL
  ,VMD_REG VARCHAR(1) NOT NULL
  ,VMD_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpVmdAcao CHECK( VMD_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                               V E I C U L O T I P O
--tblveiculotipo
-------------------------------------------------------------------------------------
GO
CREATE TABLE VEICULOTIPO(
  VTP_CODIGO VARCHAR(3) PRIMARY KEY NOT NULL
  ,VTP_NOME VARCHAR(20) NOT NULL
  ,VTP_ATIVO VARCHAR(1) NOT NULL
  ,VTP_REG VARCHAR(1) NOT NULL
  ,VTP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_vtpAtivo CHECK( VTP_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_vtpReg CHECK( VTP_REG IN('A','P','S')));
GO
CREATE VIEW VVEICULOTIPO AS
  SELECT VTP_CODIGO,VTP_NOME,VTP_ATIVO,VTP_REG,VTP_CODUSR FROM VEICULOTIPO
GO  
CREATE TABLE dbo.BKPVEICULOTIPO(
  VTP_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,VTP_ACAO VARCHAR(1) NOT NULL
  ,VTP_DATA DATE DEFAULT GETDATE() NOT NULL
  ,VTP_CODIGO VARCHAR(3) NOT NULL
  ,VTP_NOME VARCHAR(20) NOT NULL
  ,VTP_ATIVO VARCHAR(1) NOT NULL
  ,VTP_REG VARCHAR(1) NOT NULL
  ,VTP_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpVtpAcao CHECK( VTP_ACAO IN('I','A','E'))  
);
-------------------------------------------------------------------------------------
--                                 V E N D E D O R                                 --
--tblvendedor
-------------------------------------------------------------------------------------
GO  
CREATE TABLE VENDEDOR(
  VND_CODFVR INTEGER NOT NULL
  ,VND_CODEMP INTEGER NOT NULL    
  ,VND_ATIVO VARCHAR(1) NOT NULL
  ,VND_REG VARCHAR(1) NOT NULL
  ,VND_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_vndAtivo CHECK( VND_ATIVO IN('S','N'))  
  ,CONSTRAINT chk_vndReg CHECK( VND_REG IN('A','P','S'))
  ,CONSTRAINT PKVENDEDOR PRIMARY KEY (VND_CODFVR,VND_CODEMP));
GO
CREATE VIEW VVENDEDOR AS
  SELECT VND_CODFVR,VND_CODEMP,VND_ATIVO,VND_REG,VND_CODUSR FROM VENDEDOR
GO  
CREATE TABLE dbo.BKPVENDEDOR(
  VND_ID INTEGER IDENTITY PRIMARY KEY NOT NULL 
  ,VND_ACAO VARCHAR(1) NOT NULL
  ,VND_DATA DATE DEFAULT GETDATE() NOT NULL
  ,VND_CODFVR INTEGER NOT NULL
  ,VND_CODEMP INTEGER NOT NULL  
  ,VND_ATIVO VARCHAR(1) NOT NULL
  ,VND_REG VARCHAR(1) NOT NULL
  ,VND_CODUSR INTEGER NOT NULL  
  ,CONSTRAINT chk_bkpVndAcao CHECK( VND_ACAO IN('I','A','E'))  
);
--***********************************************************************************
--                              T R I G G E R S                                    **
--***********************************************************************************
---------------------------------------------------------------
--                    A G E N D A 
--trgagenda
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewAGENDA_BI ON dbo.VAGENDA
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- AGE_CODIGO     | PK  |    |    | INT                | Auto incremento
  -- AGE_CODAT      |     |    |    | INT NN             | Campo relacionado (AGENDATAREFA)
  -- AT_NOME        |     |    |    | VC(40) NN          | Campo relacionado (AGENDATAREFA)   
  -- AGE_RESPONSAVEL|     |    |    | VC(15) NN          | Nome do usuario responsavel soh ele/quem cadastrou pode alterar 
  -- AGE_VENCTO     |     |    |    | DAT NN             |
  -- AGE_DTCADASTRO | DEF |    |    | DAT NN             | Campo automatico
  -- AGE_CADASTROU  |     |    |    | VC(15) NN          | Nome do usuario que cadastrou
  -- AGE_DTBAIXA    |     |    |    | DAT                |
  -- AGE_CODEMP     | REL |    |    | INT NN             | Campo relacionado (EMPRESA)            
  -- EMP_APELIDO    | REL |    |    | VC(15)             | Campo relacionado (EMPRESA)               
  -- AGE_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- AGE_CODUSR     | REL |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D32         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ageCodigoNew INTEGER;  
  DECLARE @ageCodAtNew INTEGER;
  DECLARE @atNomeNew VARCHAR(40);
  DECLARE @ageResponsavelNew VARCHAR(15);
  DECLARE @ageVenctoNew DATE;
  DECLARE @ageCadastrouNew VARCHAR(15);
  DECLARE @ageDtBaixaNew DATE;
  DECLARE @ageCodEmpNew  INTEGER;
  DECLARE @empApelidoNew  VARCHAR(15);
  DECLARE @ageRegNew VARCHAR(1);
  DECLARE @ageCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD32New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ageCodigoNew        = i.AGE_CODIGO
         ,@ageCodAtNew        = i.AGE_CODAT
         ,@atNomeNew          = COALESCE(AT.AT_NOME,'ERRO')
         ,@ageResponsavelNew  = dbo.fncTranslate(i.AGE_RESPONSAVEL,15)
         ,@ageVenctoNew       = i.AGE_VENCTO
         ,@ageCadastrouNew    = dbo.fncTranslate(i.AGE_CADASTROU,15)
         ,@ageDtBaixaNew      = i.AGE_DTBAIXA
         ,@ageCodEmpNew       = i.AGE_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@ageRegNew          = UPPER(i.AGE_REG)
         ,@ageCodUsrNew       = i.AGE_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD32New           = UP.UP_D32
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN AGENDATAREFA AT ON i.AGE_CODAT=AT.AT_CODIGO AND AT.AT_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.AGE_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.AGE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @AtNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TAREFA %i PARA ESTE REGISTRO',15,1,@ageCodAtNew);
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@ageCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ageCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD32New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 32 PARA INCLUIR NA TABELA AGENDA',15,1,@usrApelidoNew);
    IF( @ageRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ageRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.AGENDA( 
      AGE_CODAT
      ,AGE_RESPONSAVEL
      ,AGE_VENCTO
      ,AGE_CADASTROU
      ,AGE_DTBAIXA
      ,AGE_CODEMP
      ,AGE_REG
      ,AGE_CODUSR) VALUES(
      @ageCodAtNew        -- AGE_CODAT
      ,@ageResponsavelNew -- AGE_RESPONSAVEL
      ,@ageVenctoNew      -- AGE_VENCTO
      ,@ageCadastrouNew   -- AGE_CADASTROU
      ,@ageDtBaixaNew     -- AGE_DTBAIXA
      ,@ageCodEmpNew      -- AGE_CODEMP
      ,@ageRegNew         -- AGE_REG
      ,@ageCodUsrNew      -- AGE_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPAGENDA(
      AGE_ACAO
      ,AGE_CODIGO
      ,AGE_CODAT
      ,AGE_RESPONSAVEL
      ,AGE_VENCTO
      ,AGE_CADASTROU
      ,AGE_DTBAIXA
      ,AGE_CODEMP
      ,AGE_REG
      ,AGE_CODUSR) VALUES(
      'I'                       -- AGE_ACAO
      ,IDENT_CURRENT('AGENDA')  -- AGE_CODIGO      
      ,@ageCodAtNew             -- AGE_CODAT
      ,@ageResponsavelNew       -- AGE_RESPONSAVEL
      ,@ageVenctoNew            -- AGE_VENCTO
      ,@ageCadastrouNew         -- AGE_CADASTROU
      ,@ageDtBaixaNew           -- AGE_DTBAIXA
      ,@ageCodEmpNew            -- AGE_CODEMP
      ,@ageRegNew               -- AGE_REG
      ,@ageCodUsrNew            -- AGE_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewAGENDA_BU ON dbo.VAGENDA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ageCodigoNew INTEGER;  
  DECLARE @ageCodAtNew INTEGER;
  DECLARE @atNomeNew VARCHAR(40);
  DECLARE @ageResponsavelNew VARCHAR(15);
  DECLARE @ageVenctoNew DATE;
  DECLARE @ageCadastrouNew VARCHAR(15);
  DECLARE @ageDtBaixaNew DATE;
  DECLARE @ageCodEmpNew  INTEGER;
  DECLARE @empApelidoNew  VARCHAR(15);
  DECLARE @ageRegNew VARCHAR(1);
  DECLARE @ageCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD32New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ageCodigoNew        = i.AGE_CODIGO
         ,@ageCodAtNew        = i.AGE_CODAT
         ,@atNomeNew          = COALESCE(AT.AT_NOME,'ERRO')
         ,@ageResponsavelNew  = dbo.fncTranslate(i.AGE_RESPONSAVEL,15)
         ,@ageVenctoNew       = i.AGE_VENCTO
         ,@ageCadastrouNew    = dbo.fncTranslate(i.AGE_CADASTROU,15)
         ,@ageDtBaixaNew      = i.AGE_DTBAIXA
         ,@ageCodEmpNew       = i.AGE_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@ageRegNew          = UPPER(i.AGE_REG)
         ,@ageCodUsrNew       = i.AGE_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD32New           = UP.UP_D32
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN AGENDATAREFA AT ON i.AGE_CODAT=AT.AT_CODIGO AND AT.AT_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.AGE_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.AGE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @AtNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TAREFA %i PARA ESTE REGISTRO',15,1,@ageCodAtNew);
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@ageCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ageCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD32New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 32 PARA ALTERAR NA TABELA AGENDA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ageCodigoOld INTEGER;  
    DECLARE @ageCodAtOld INTEGER;
    DECLARE @ageResponsavelOld VARCHAR(15);
    DECLARE @ageVenctoOld DATE;
    DECLARE @ageCadastrouOld VARCHAR(15);
    DECLARE @ageDtBaixaOld DATE;
    DECLARE @ageCodEmpOld  INTEGER;
    DECLARE @ageRegOld VARCHAR(1);
    DECLARE @ageCodUsrOld INTEGER;
    
    SELECT @ageCodigoOld        = d.AGE_CODIGO
           ,@ageCodAtOld        = d.AGE_CODAT
           ,@ageResponsavelOld  = d.AGE_RESPONSAVEL
           ,@ageVenctoOld       = d.AGE_VENCTO
           ,@ageCadastrouOld    = d.AGE_CADASTROU
           ,@ageDtBaixaOld      = d.AGE_DTBAIXA
           ,@ageCodEmpOld       = d.AGE_CODEMP
           ,@ageRegOld          = d.AGE_REG
           ,@ageCodUsrOld       = d.AGE_CODUSR         
      FROM AGENDA d WHERE d.AGE_CODIGO=@ageCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ageCodigoOld<>@ageCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @ageCodEmpOld<>@ageCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    IF( @ageCodAtOld<>@ageCodAtNew )
      RAISERROR('CAMPO TAREFA NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ageRegOld <> @ageRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ageRegOld,@ageRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.AGENDA
       SET AGE_RESPONSAVEL  = @ageResponsavelOld
           ,AGE_VENCTO      = @ageVenctoOld     
           ,AGE_CADASTROU   = @ageCadastrouOld  
           ,AGE_DTBAIXA     = @ageDtBaixaOld    
           ,AGE_REG         = @ageRegOld        
           ,AGE_CODUSR      = @ageCodUsrOld     
    WHERE AGE_CODIGO  = @ageCodigoNew;     
    -- Gravando LOG
    IF( (@ageResponsavelOld<>@ageResponsavelNew) OR (@ageVenctoOld<>@ageVenctoNew) OR (@ageCadastrouOld<>@ageCadastrouNew) 
     OR (@ageDtBaixaOld<>@ageDtBaixaNew) OR (@ageRegOld<>@ageRegNew) OR (@ageCodUsrOld<>@ageCodUsrNew) ) BEGIN    
      INSERT INTO dbo.BKPAGENDA(
        AGE_ACAO
        ,AGE_CODIGO
        ,AGE_CODAT
        ,AGE_RESPONSAVEL
        ,AGE_VENCTO
        ,AGE_CADASTROU
        ,AGE_DTBAIXA
        ,AGE_CODEMP
        ,AGE_REG
        ,AGE_CODUSR) VALUES(
        'A'                       -- AGE_ACAO
        ,@ageCodigoNew            -- AGE_CODIGO      
        ,@ageCodAtNew             -- AGE_CODAT
        ,@ageResponsavelNew       -- AGE_RESPONSAVEL
        ,@ageVenctoNew            -- AGE_VENCTO
        ,@ageCadastrouNew         -- AGE_CADASTROU
        ,@ageDtBaixaNew           -- AGE_DTBAIXA
        ,@ageCodEmpNew            -- AGE_CODEMP
        ,@ageRegNew               -- AGE_REG
        ,@ageCodUsrNew            -- AGE_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewAGENDA_BD ON dbo.VAGENDA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkStrEst VARCHAR(3) = 'OK'; -- Para procurar campo foreign key str (ESTADO)
  DECLARE @erroOld VARCHAR(70);        -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ageCodigoOld INTEGER;  
  DECLARE @ageCodAtOld INTEGER;
  DECLARE @ageResponsavelOld VARCHAR(15);
  DECLARE @ageVenctoOld DATE;
  DECLARE @ageCadastrouOld VARCHAR(15);
  DECLARE @ageDtBaixaOld DATE;
  DECLARE @ageCodEmpOld  INTEGER;
  DECLARE @ageRegOld VARCHAR(1);
  DECLARE @ageCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD32Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ageCodigoOld        = d.AGE_CODIGO
         ,@ageCodAtOld        = d.AGE_CODAT
         ,@ageResponsavelOld  = d.AGE_RESPONSAVEL
         ,@ageVenctoOld       = d.AGE_VENCTO
         ,@ageCadastrouOld    = d.AGE_CADASTROU
         ,@ageDtBaixaOld      = d.AGE_DTBAIXA
         ,@ageCodEmpOld       = d.AGE_CODEMP
         ,@ageRegOld          = d.AGE_REG
         ,@ageCodUsrOld       = d.AGE_CODUSR         
         ,@usrApelidoOld      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD32Old           = UP.UP_D32
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.AGE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ageCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD32Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 32 PARA EXCLUIR NA TABELA AGENDA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ageRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK EST_CODREG(ESTADO)
      ------------------------------------------
    --SELECT TOP 1 @fkStrEst=COALESCE(EST_CODIGO,'OK') FROM ESTADO WHERE EST_CODREG=@ageCodBcdOld;
    --IF( @fkStrEst <> 'OK' )
    --  RAISERROR('AGENDA UTILIZADA NO ESTADO %s',15,1,@fkStrEst);
    --
    DELETE FROM dbo.AGENDA WHERE AGE_CODIGO=@ageCodigoOld;
    -- Gravando LOG
      INSERT INTO dbo.BKPAGENDA(
        AGE_ACAO
        ,AGE_CODIGO
        ,AGE_CODAT
        ,AGE_RESPONSAVEL
        ,AGE_VENCTO
        ,AGE_CADASTROU
        ,AGE_DTBAIXA
        ,AGE_CODEMP
        ,AGE_REG
        ,AGE_CODUSR) VALUES(
        'E'                       -- AGE_ACAO
        ,@ageCodigoOld            -- AGE_CODIGO      
        ,@ageCodAtOld             -- AGE_CODAT
        ,@ageResponsavelOld       -- AGE_RESPONSAVEL
        ,@ageVenctoOld            -- AGE_VENCTO
        ,@ageCadastrouOld         -- AGE_CADASTROU
        ,@ageDtBaixaOld           -- AGE_DTBAIXA
        ,@ageCodEmpOld            -- AGE_CODEMP
        ,@ageRegOld               -- AGE_REG
        ,@ageCodUsrOld            -- AGE_CODUSR
      );  
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPAGENDA_BUD ON dbo.BKPAGENDA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                              A G E N D A T A R E F A                            --
--trgagendatarefa
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewAGENDATAREFA_BI ON dbo.VAGENDATAREFA
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- AT_CODIGO      | PK  |    |    | INT                |  Auto incremento
  -- AT_NOME        |     |    |    | VC(40) NN          |
  -- AT_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- AT_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- AT_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D18         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @uiNome VARCHAR(40) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @atCodigoNew INTEGER;
  DECLARE @atNomeNew VARCHAR(40);
  DECLARE @atAtivoNew VARCHAR(1);
  DECLARE @atRegNew VARCHAR(1);
  DECLARE @atCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD18New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @atCodigoNew   = i.AT_CODIGO
         ,@atNomeNew    = dbo.fncTranslate(i.AT_NOME,40)
         ,@atAtivoNew   = UPPER(i.AT_ATIVO)
         ,@atRegNew     = UPPER(i.AT_REG)
         ,@atCodUsrNew  = i.AT_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD18New      = UP.UP_D18
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.AT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@atCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD18New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 18 PARA INCLUIR NA TABELA AGENDATAREFA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(AT_CODIGO,0) FROM AGENDATAREFA WHERE AT_NOME=@atNomeNew;
    IF( @uiCodigo <> 0 )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA AGENDATAREFA COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(AT_NOME,'OK') FROM AGENDATAREFA WHERE AT_CODIGO=@atCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA AGENDATAREFA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @atRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@atRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.AGENDATAREFA( 
      AT_NOME
      ,AT_ATIVO
      ,AT_REG
      ,AT_CODUSR) VALUES(
      @atNomeNew     -- AT_NOME
      ,@atAtivoNew   -- AT_ATIVO
      ,@atRegNew     -- AT_REG
      ,@atCodUsrNew  -- AT_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPAGENDATAREFA(
      AT_ACAO
      ,AT_CODIGO
      ,AT_NOME
      ,AT_ATIVO
      ,AT_REG
      ,AT_CODUSR) VALUES(
      'I'                             -- AT_ACAO
      ,IDENT_CURRENT('AGENDATAREFA')  -- AT_CODIGO
      ,@atNomeNew                     -- AT_NOME
      ,@atAtivoNew                    -- AT_ATIVO
      ,@atRegNew                      -- AT_REG
      ,@atCodUsrNew                   -- AT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewAGENDATAREFA_BU ON dbo.VAGENDATAREFA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @atCodigoNew INTEGER;
  DECLARE @atNomeNew VARCHAR(40);
  DECLARE @atAtivoNew VARCHAR(1);
  DECLARE @atRegNew VARCHAR(1);
  DECLARE @atCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD18New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @atCodigoNew   = i.AT_CODIGO
         ,@atNomeNew    = dbo.fncTranslate(i.AT_NOME,40)
         ,@atAtivoNew   = UPPER(i.AT_ATIVO)
         ,@atRegNew     = UPPER(i.AT_REG)
         ,@atCodUsrNew  = i.AT_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD18New      = UP.UP_D18
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.AT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@atCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD18New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 18 PARA ALTERAR NA TABELA AGENDATAREFA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @atCodigoOld INTEGER;
    DECLARE @atNomeOld VARCHAR(40);
    DECLARE @atAtivoOld VARCHAR(1);
    DECLARE @atRegOld VARCHAR(1);
    DECLARE @atCodUsrOld INTEGER;
    SELECT @atCodigoOld   = d.AT_CODIGO
           ,@atNomeOld    = d.AT_NOME
           ,@atAtivoOld   = d.AT_ATIVO
           ,@atRegOld     = d.AT_REG
           ,@atCodUsrOld  = d.AT_CODUSR         
      FROM AGENDATAREFA d WHERE d.AT_CODIGO=@atCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @atCodigoOld<>@atCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @atNomeOld<>@atNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(AT_CODIGO,0) FROM AGENDATAREFA WHERE AT_NOME=@atNomeNew;
      IF( @uiCodigo <> 0 )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA AGENDATAREFA COM CODIGO %i',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @atRegOld <> @atRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@atRegOld,@atRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.AGENDATAREFA
       SET AT_NOME   = @atNomeNew
          ,AT_ATIVO  = @atAtivoNew
          ,AT_REG    = @atRegNew
          ,AT_CODUSR = @atCodUsrNew
    WHERE AT_CODIGO  = @atCodigoNew;     
    -- Gravando LOG
    IF( (@atNomeOld<>@atNomeNew) OR (@atAtivoOld<>@atAtivoNew) OR (@atRegOld<>@atRegNew) ) BEGIN
      INSERT INTO dbo.BKPAGENDATAREFA(
        AT_ACAO
        ,AT_CODIGO
        ,AT_NOME
        ,AT_ATIVO
        ,AT_REG
        ,AT_CODUSR) VALUES(
        'A'            -- AT_ACAO
        ,@atCodigoNew  -- AT_CODIGO
        ,@atNomeNew    -- AT_NOME
        ,@atAtivoNew   -- AT_ATIVO
        ,@atRegNew     -- AT_REG
        ,@atCodUsrNew  -- AT_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewAGENDATAREFA_BD ON dbo.VAGENDATAREFA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @atCodigoOld INTEGER;
  DECLARE @atNomeOld VARCHAR(40);
  DECLARE @atAtivoOld VARCHAR(1);
  DECLARE @atRegOld VARCHAR(1);
  DECLARE @atCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD18Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @atCodigoOld   = d.AT_CODIGO
         ,@atNomeOld    = d.AT_NOME
         ,@atAtivoOld   = d.AT_ATIVO
         ,@atRegOld     = d.AT_REG
         ,@atCodUsrOld  = d.AT_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD18Old      = UP.UP_D18
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.AT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@atCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD18Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 18 PARA EXCLUIR NA TABELA AGENDATAREFA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@atRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@atCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('AGENDATAREFA UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@atCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('AGENDATAREFA UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.AGENDATAREFA WHERE AT_CODIGO=@atCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPAGENDATAREFA(
      AT_ACAO
      ,AT_CODIGO
      ,AT_NOME
      ,AT_ATIVO
      ,AT_REG
      ,AT_CODUSR) VALUES(
      'E'              -- AT_ACAO
      ,@atCodigoOld    -- AT_CODIGO
      ,@atNomeOld      -- AT_NOME
      ,@atAtivoOld     -- AT_ATIVO
      ,@atRegOld       -- AT_REG
      ,@atCodUsrOld    -- AT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPAGENDATAREFA_BUD ON dbo.BKPAGENDATAREFA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                 A L I Q U O T A S I M P L E S
--trgaliquotasimpels
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewALIQUOTASIMPLES_BI ON dbo.VALIQUOTASIMPLES
INSTEAD OF INSERT 
AS
BEGIN
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- AS_ANEXO       | PK  |    |    | INT                | 
   -- AS_ITEM        | PK  |    |    | INT                |    
   -- AS_CODEMP      | PK  |    |    | INT NN             | Campo relacionado (EMPRESA)  
   -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
   -- AS_VLRINI      |     |    |    | NUM(15,2) NN       |
   -- AS_VLRFIM      |     |    |    | NUM(15,2) NN       |
   -- AS_ALIQUOTA    |     |    |    | NUM(15,2) NN       |
   -- AS_IRPJ        |     |    |    | NUM(15,2) NN       |
   -- AS_CSLL        |     |    |    | NUM(15,2) NN       |
   -- AS_COFINS      |     |    |    | NUM(15,2) NN       |
   -- AS_PIS         |     |    |    | NUM(15,2) NN       |
   -- AS_CPP         |     |    |    | NUM(15,2) NN       |
   -- AS_ICMS        |     |    |    | NUM(15,2) NN       |
   -- AS_IPI         |     |    |    | NUM(15,2) NN       |
   -- AS_ISS         |     |    |    | NUM(15,2) NN       |
   -- AS_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- AS_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D17         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @asAnexoNew INTEGER;  
  DECLARE @asItemNew INTEGER;
  DECLARE @asCodEmpNew  INTEGER;
  DECLARE @empApelidoNew  VARCHAR(15);
  DECLARE @asVlrIniNew NUMERIC(15,2);
  DECLARE @asVlrFimNew NUMERIC(15,2);
  DECLARE @asAliquotaNew NUMERIC(15,2);
  DECLARE @asIrpjNew NUMERIC(15,2);
  DECLARE @asCsllNew NUMERIC(15,2);
  DECLARE @asCofinsNew NUMERIC(15,2);
  DECLARE @asPisNew NUMERIC(15,2);
  DECLARE @asCppNew NUMERIC(15,2);
  DECLARE @asIcmsNew NUMERIC(15,2);
  DECLARE @asIpiNew NUMERIC(15,2);
  DECLARE @asIssNew NUMERIC(15,2);
  DECLARE @asRegNew VARCHAR(1);
  DECLARE @asCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD32New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @asAnexoNew      = i.AS_ANEXO
         ,@asItemNew      = i.AS_ITEM
         ,@asCodEmpNew    = i.AS_CODEMP
         ,@empApelidoNew  = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@asVlrIniNew    = i.AS_VLRINI
         ,@asVlrFimNew    = i.AS_VLRFIM
         ,@asAliquotaNew  = i.AS_ALIQUOTA
         ,@asIrpjNew      = i.AS_IRPJ
         ,@asCsllNew      = i.AS_CSLL
         ,@asCofinsNew    = i.AS_COFINS
         ,@asPisNew       = i.AS_PIS
         ,@asCppNew       = i.AS_CPP
         ,@asIcmsNew      = i.AS_ICMS
         ,@asIpiNew       = i.AS_IPI
         ,@asIssNew       = i.AS_ISS
         ,@asRegNew       = UPPER(i.AS_REG)
         ,@asCodUsrNew    = i.AS_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD32New       = UP.UP_D32
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.AS_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.AS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@asCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@asCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD32New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 32 PARA INCLUIR NA TABELA ALIQUOTASIMPLES',15,1,@usrApelidoNew);
    IF( @asRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@asRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.ALIQUOTASIMPLES( 
      AS_ANEXO
      ,AS_ITEM
      ,AS_CODEMP
      ,AS_VLRINI
      ,AS_VLRFIM
      ,AS_ALIQUOTA
      ,AS_IRPJ
      ,AS_CSLL
      ,AS_COFINS
      ,AS_PIS
      ,AS_CPP
      ,AS_ICMS
      ,AS_IPI
      ,AS_ISS
      ,AS_REG
      ,AS_CODUSR) VALUES(
      @asAnexoNew       -- AS_ANEXO    
      ,@asItemNew       -- AS_ITEM    
      ,@asCodEmpNew     -- AS_CODEMP    
      ,@asVlrIniNew     -- AS_VLRINI    
      ,@asVlrFimNew     -- AS_VLRFIM    
      ,@asAliquotaNew   -- AS_ALIQUOTA    
      ,@asIrpjNew       -- AS_IRPJ    
      ,@asCsllNew       -- AS_CSLL    
      ,@asCofinsNew     -- AS_COFINS    
      ,@asPisNew        -- AS_PIS    
      ,@asCppNew        -- AS_CPP    
      ,@asIcmsNew       -- AS_ICMS    
      ,@asIpiNew        -- AS_IPI    
      ,@asIssNew        -- AS_ISS    
      ,@asRegNew        -- AS_REG)    
      ,@asCodUsrNew     -- AS_CODUSR
    );   
    -- Gravando LOG
    INSERT INTO dbo.BKPALIQUOTASIMPLES( 
      AS_ACAO
      ,AS_ANEXO
      ,AS_ITEM
      ,AS_CODEMP
      ,AS_VLRINI
      ,AS_VLRFIM
      ,AS_ALIQUOTA
      ,AS_IRPJ
      ,AS_CSLL
      ,AS_COFINS
      ,AS_PIS
      ,AS_CPP
      ,AS_ICMS
      ,AS_IPI
      ,AS_ISS
      ,AS_REG
      ,AS_CODUSR) VALUES(
      'I'
      ,@asAnexoNew      -- AS_ANEXO    
      ,@asItemNew       -- AS_ITEM    
      ,@asCodEmpNew     -- AS_CODEMP    
      ,@asVlrIniNew     -- AS_VLRINI    
      ,@asVlrFimNew     -- AS_VLRFIM    
      ,@asAliquotaNew   -- AS_ALIQUOTA    
      ,@asIrpjNew       -- AS_IRPJ    
      ,@asCsllNew       -- AS_CSLL    
      ,@asCofinsNew     -- AS_COFINS    
      ,@asPisNew        -- AS_PIS    
      ,@asCppNew        -- AS_CPP    
      ,@asIcmsNew       -- AS_ICMS    
      ,@asIpiNew        -- AS_IPI    
      ,@asIssNew        -- AS_ISS    
      ,@asRegNew        -- AS_REG)    
      ,@asCodUsrNew     -- AS_CODUSR
    );   
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewALIQUOTASIMPLES_BU ON dbo.VALIQUOTASIMPLES
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @asAnexoNew INTEGER;  
  DECLARE @asItemNew INTEGER;
  DECLARE @asCodEmpNew  INTEGER;
  DECLARE @empApelidoNew  VARCHAR(15);
  DECLARE @asVlrIniNew NUMERIC(15,2);
  DECLARE @asVlrFimNew NUMERIC(15,2);
  DECLARE @asAliquotaNew NUMERIC(15,2);
  DECLARE @asIrpjNew NUMERIC(15,2);
  DECLARE @asCsllNew NUMERIC(15,2);
  DECLARE @asCofinsNew NUMERIC(15,2);
  DECLARE @asPisNew NUMERIC(15,2);
  DECLARE @asCppNew NUMERIC(15,2);
  DECLARE @asIcmsNew NUMERIC(15,2);
  DECLARE @asIpiNew NUMERIC(15,2);
  DECLARE @asIssNew NUMERIC(15,2);
  DECLARE @asRegNew VARCHAR(1);
  DECLARE @asCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD32New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @asAnexoNew      = i.AS_ANEXO
         ,@asItemNew      = i.AS_ITEM
         ,@asCodEmpNew    = i.AS_CODEMP
         ,@empApelidoNew  = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@asVlrIniNew    = i.AS_VLRINI
         ,@asVlrFimNew    = i.AS_VLRFIM
         ,@asAliquotaNew  = i.AS_ALIQUOTA
         ,@asIrpjNew      = i.AS_IRPJ
         ,@asCsllNew      = i.AS_CSLL
         ,@asCofinsNew    = i.AS_COFINS
         ,@asPisNew       = i.AS_PIS
         ,@asCppNew       = i.AS_CPP
         ,@asIcmsNew      = i.AS_ICMS
         ,@asIpiNew       = i.AS_IPI
         ,@asIssNew       = i.AS_ISS
         ,@asRegNew       = UPPER(i.AS_REG)
         ,@asCodUsrNew    = i.AS_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD32New       = UP.UP_D32
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.AS_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.AS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@asCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@asCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD32New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 32 PARA ALTERAR NA TABELA ALIQUOTASIMPLES',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @asAnexoOld INTEGER;  
    DECLARE @asItemOld INTEGER;
    DECLARE @asCodEmpOld  INTEGER;
    DECLARE @asVlrIniOld NUMERIC(15,2);
    DECLARE @asVlrFimOld NUMERIC(15,2);
    DECLARE @asAliquotaOld NUMERIC(15,2);
    DECLARE @asIrpjOld NUMERIC(15,2);
    DECLARE @asCsllOld NUMERIC(15,2);
    DECLARE @asCofinsOld NUMERIC(15,2);
    DECLARE @asPisOld NUMERIC(15,2);
    DECLARE @asCppOld NUMERIC(15,2);
    DECLARE @asIcmsOld NUMERIC(15,2);
    DECLARE @asIpiOld NUMERIC(15,2);
    DECLARE @asIssOld NUMERIC(15,2);
    DECLARE @asRegOld VARCHAR(1);
    DECLARE @asCodUsrOld INTEGER;
    SELECT @asAnexoOld      = d.AS_ANEXO
           ,@asItemOld      = d.AS_ITEM
           ,@asCodEmpOld    = d.AS_CODEMP
           ,@asVlrIniOld    = d.AS_VLRINI
           ,@asVlrFimOld    = d.AS_VLRFIM
           ,@asAliquotaOld  = d.AS_ALIQUOTA
           ,@asIrpjOld      = d.AS_IRPJ
           ,@asCsllOld      = d.AS_CSLL
           ,@asCofinsOld    = d.AS_COFINS
           ,@asPisOld       = d.AS_PIS
           ,@asCppOld       = d.AS_CPP
           ,@asIcmsOld      = d.AS_ICMS
           ,@asIpiOld       = d.AS_IPI
           ,@asIssOld       = d.AS_ISS
           ,@asRegOld       = d.AS_REG
           ,@asCodUsrOld    = d.AS_CODUSR         
      FROM ALIQUOTASIMPLES d WHERE (d.AS_ANEXO=@asAnexoNew) AND (d.AS_ITEM=@asItemNew) AND (d.AS_CODEMP=@asCodEmpNew);  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @asAnexoOld<>@asAnexoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @asCodEmpOld<>@asCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    IF( @asItemOld<>@asItemNew )
      RAISERROR('CAMPO ITEM NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @asRegOld <> @asRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@asRegOld,@asRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.ALIQUOTASIMPLES
       SET AS_VLRINI    = @asVlrIniNew  
           ,AS_VLRFIM   = @asVlrFimNew  
           ,AS_ALIQUOTA = @asAliquotaNew
           ,AS_IRPJ     = @asIrpjNew    
           ,AS_CSLL     = @asCsllNew    
           ,AS_COFINS   = @asCofinsNew  
           ,AS_PIS      = @asPisNew     
           ,AS_CPP      = @asCppNew     
           ,AS_ICMS     = @asIcmsNew    
           ,AS_IPI      = @asIpiNew     
           ,AS_ISS      = @asIssNew     
           ,AS_REG      = @asRegNew     
           ,AS_CODUSR   = @asCodUsrNew  
    WHERE (AS_ANEXO=@asAnexoNew) AND (AS_ITEM=@asItemNew) AND (AS_CODEMP=@asCodEmpNew);  
    
    IF( (@asVlrIniOld<>@asVlrIniNew) OR (@asVlrFimOld<>@asVlrFimNew) OR (@asAliquotaOld<>@asAliquotaNew) OR  (@asIrpjOld<>@asIrpjNew) OR (@asCsllOld<>@asCsllNew) 
     OR (@asCofinsOld<>@asCofinsNew) OR (@asPisOld<>@asPisNew) OR (@asCppOld<>@asCppNew) OR (@asIcmsOld<>@asIcmsNew) OR (@asIpiOld<>@asIpiNew) 
     OR (@asIssOld<>@asIssNew) OR (@asRegOld<>@asRegNew) OR (@asCodUsrOld<>@asCodUsrNew) ) BEGIN
      INSERT INTO dbo.BKPALIQUOTASIMPLES( 
        AS_ACAO
        ,AS_ANEXO
        ,AS_ITEM
        ,AS_CODEMP
        ,AS_VLRINI
        ,AS_VLRFIM
        ,AS_ALIQUOTA
        ,AS_IRPJ
        ,AS_CSLL
        ,AS_COFINS
        ,AS_PIS
        ,AS_CPP
        ,AS_ICMS
        ,AS_IPI
        ,AS_ISS
        ,AS_REG
        ,AS_CODUSR) VALUES(
        'A'
        ,@asAnexoNew      -- AS_ANEXO    
        ,@asItemNew       -- AS_ITEM    
        ,@asCodEmpNew     -- AS_CODEMP    
        ,@asVlrIniNew     -- AS_VLRINI    
        ,@asVlrFimNew     -- AS_VLRFIM    
        ,@asAliquotaNew   -- AS_ALIQUOTA    
        ,@asIrpjNew       -- AS_IRPJ    
        ,@asCsllNew       -- AS_CSLL    
        ,@asCofinsNew     -- AS_COFINS    
        ,@asPisNew        -- AS_PIS    
        ,@asCppNew        -- AS_CPP    
        ,@asIcmsNew       -- AS_ICMS    
        ,@asIpiNew        -- AS_IPI    
        ,@asIssNew        -- AS_ISS    
        ,@asRegNew        -- AS_REG)    
        ,@asCodUsrNew     -- AS_CODUSR
      );   
    END
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewALIQUOTASIMPLES_BD ON dbo.VALIQUOTASIMPLES
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroOld VARCHAR(70);        -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @asAnexoOld INTEGER;  
  DECLARE @asItemOld INTEGER;
  DECLARE @asCodEmpOld  INTEGER;
  DECLARE @asVlrIniOld NUMERIC(15,2);
  DECLARE @asVlrFimOld NUMERIC(15,2);
  DECLARE @asAliquotaOld NUMERIC(15,2);
  DECLARE @asIrpjOld NUMERIC(15,2);
  DECLARE @asCsllOld NUMERIC(15,2);
  DECLARE @asCofinsOld NUMERIC(15,2);
  DECLARE @asPisOld NUMERIC(15,2);
  DECLARE @asCppOld NUMERIC(15,2);
  DECLARE @asIcmsOld NUMERIC(15,2);
  DECLARE @asIpiOld NUMERIC(15,2);
  DECLARE @asIssOld NUMERIC(15,2);
  DECLARE @asRegOld VARCHAR(1);
  DECLARE @asCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD32Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @asAnexoOld      = d.AS_ANEXO
         ,@asItemOld      = d.AS_ITEM
         ,@asCodEmpOld    = d.AS_CODEMP
         ,@asVlrIniOld    = d.AS_VLRINI
         ,@asVlrFimOld    = d.AS_VLRFIM
         ,@asAliquotaOld  = d.AS_ALIQUOTA
         ,@asIrpjOld      = d.AS_IRPJ
         ,@asCsllOld      = d.AS_CSLL
         ,@asCofinsOld    = d.AS_COFINS
         ,@asPisOld       = d.AS_PIS
         ,@asCppOld       = d.AS_CPP
         ,@asIcmsOld      = d.AS_ICMS
         ,@asIpiOld       = d.AS_IPI
         ,@asIssOld       = d.AS_ISS
         ,@asRegOld       = d.AS_REG
         ,@asCodUsrOld    = d.AS_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD32Old       = UP.UP_D32
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.AS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@asCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD32Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 32 PARA EXCLUIR NA TABELA ALIQUOTASIMPLES',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@asRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK EST_CODREG(ESTADO)
      ------------------------------------------
    --SELECT TOP 1 @fkStrEst=COALESCE(EST_CODIGO,'OK') FROM ESTADO WHERE EST_CODREG=@asCodBcdOld;
    --IF( @fkStrEst <> 'OK' )
    --  RAISERROR('ALIQUOTASIMPLES UTILIZADA NO ESTADO %s',15,1,@fkStrEst);
    --
    DELETE FROM dbo.ALIQUOTASIMPLES WHERE (AS_ANEXO=@asAnexoOld) AND (AS_ITEM=@asItemOld) AND (AS_CODEMP=@asCodEmpOld);  
    -- Gravando LOG
    INSERT INTO dbo.BKPALIQUOTASIMPLES( 
      AS_ACAO
      ,AS_ANEXO
      ,AS_ITEM
      ,AS_CODEMP
      ,AS_VLRINI
      ,AS_VLRFIM
      ,AS_ALIQUOTA
      ,AS_IRPJ
      ,AS_CSLL
      ,AS_COFINS
      ,AS_PIS
      ,AS_CPP
      ,AS_ICMS
      ,AS_IPI
      ,AS_ISS
      ,AS_REG
      ,AS_CODUSR) VALUES(
      'E'
      ,@asAnexoOld      -- AS_ANEXO    
      ,@asItemOld       -- AS_ITEM    
      ,@asCodEmpOld     -- AS_CODEMP    
      ,@asVlrIniOld     -- AS_VLRINI    
      ,@asVlrFimOld     -- AS_VLRFIM    
      ,@asAliquotaOld   -- AS_ALIQUOTA    
      ,@asIrpjOld       -- AS_IRPJ    
      ,@asCsllOld       -- AS_CSLL    
      ,@asCofinsOld     -- AS_COFINS    
      ,@asPisOld        -- AS_PIS    
      ,@asCppOld        -- AS_CPP    
      ,@asIcmsOld       -- AS_ICMS    
      ,@asIpiOld        -- AS_IPI    
      ,@asIssOld        -- AS_ISS    
      ,@asRegOld        -- AS_REG)    
      ,@asCodUsrOld     -- AS_CODUSR
    );   
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPALIQUOTASIMPLES_BUD ON dbo.BKPALIQUOTASIMPLES
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                           A U T O C O M P O S I C A O
--trgautocomposicao
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewAUTOCOMPOSICAO_BI ON dbo.VAUTOCOMPOSICAO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS      |UPD |DEL | TIPO               | Obs
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------
  -- AC_CODAMP      | SEL/PK  |    |    | INT                | Campo relacionado (AUTOMODELOPRODUTO)
  -- AMP_CODAM      | SEL     |    |    | INT                | Campo relacionado (AUTOMODELOPRODUTO)  
  -- AC_CODGMP      | SEL/PK  |    |    | INT                | Campo relacionado (GRUPOMODELOPRODUTO)
  -- GMP_CODGM      | SEL     |    |    | INT                | Campo relacionado (GRUPOMODELOPRODUTO)    
  -- AC_STATUS      | CC      |    |    | VC(3) NN           | ATV|EXC Se o registro esta ativo ou excluido
  -- AC_CODUSR      | OK      |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL     |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL     |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D36         | SEL     |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL     |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @pkCodigo INTEGER = 0;        -- Para procurar primary key
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @acCodAmpNew INTEGER;
  DECLARE @ampCodAmNew INTEGER;  
  DECLARE @acCodGmpNew INTEGER;
  DECLARE @gmpCodGmNew INTEGER;  
  DECLARE @gmpCodPeNew VARCHAR(3);    
  DECLARE @gmpCodFvrNew INTEGER;    
  DECLARE @gmpCodAutNew INTEGER;      
  DECLARE @acStatusNew VARCHAR(3);  
  DECLARE @acCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD36New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @acCodAmpNew     = i.AC_CODAMP
         ,@ampCodAmNew    = COALESCE(AMP.GMP_CODGM,0)
         ,@acCodGmpNew    = i.AC_CODGMP
         ,@gmpCodGmNew    = COALESCE(GMP.GMP_CODGM,0)
         ,@gmpCodPeNew    = COALESCE(GMP.GMP_CODPE,'ERRO')         
         ,@gmpCodFvrNew   = COALESCE(GMP.GMP_CODFVR,0)         
         ,@gmpCodAutNew   = COALESCE(GMP.GMP_CODAUT,0)                  
         ,@acStatusNew    = UPPER(i.AC_STATUS)
         ,@acCodUsrNew    = i.AC_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD36New       = UP.UP_D36
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN GRUPOMODELOPRODUTO AMP ON i.AC_CODAMP=AMP.GMP_CODIGO
    LEFT OUTER JOIN GRUPOMODELOPRODUTO GMP ON i.AC_CODGMP=GMP.GMP_CODIGO    
    LEFT OUTER JOIN USUARIO USR ON i.AC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @ampCodAmNew=0 )
      RAISERROR('NAO LOCALIZADO PRODUTO/MODELO %i PARA ESTE REGISTRO',15,1,@acCodAmpNew);
    IF( @gmpCodGmNew=0 )
      RAISERROR('NAO LOCALIZADO PRODUTO/MODELO %i PARA ESTE REGISTRO',15,1,@acCodGmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@acCodUsrNew);
    ------------------------------------------------  
    -- Checagem do status do produto antes de gravar  
    ------------------------------------------------
    If( @gmpCodPeNew <> 'EST' )
      RAISERROR('PRODUTO %i DEVE ESTA NO ESTOQUE INTERNO!',15,1,@acCodGmpNew);
    If( @gmpCodFvrNew <> 0 )
      RAISERROR('PRODUTO %i JA ALOCADO PARA CLIENTE/COLABORADOR!',15,1,@acCodGmpNew);
    If( @gmpCodAutNew <> 0 )
      RAISERROR('PRODUTO %i JA ALOCADO EM UM AUTO!',15,1,@acCodGmpNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD36New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 36 PARA INCLUIR NA TABELA AUTOCOMPOSICAO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @pkCodigo=COALESCE(AC_CODAMP,0) FROM AUTOCOMPOSICAO WHERE ((AC_CODAMP=@acCodAmpNew) AND (AC_CODGMP=@acCodGmpNew));
    IF( @pkCodigo <> 0 )
      RAISERROR('AUTO/PRODUTO JA CADASTRADO NA TABELA AUTOCOMPOSICAO %i',15,1,@pkCodigo);
    --  
    INSERT INTO dbo.AUTOCOMPOSICAO( 
      AC_CODAMP
      ,AC_CODGMP
      ,AC_STATUS
      ,AC_CODUSR) VALUES(
      @acCodAmpNew   -- AC_CODAMP
      ,@acCodGmpNew  -- AC_CODGMP
      ,@acStatusNew  -- AC_STATUS
      ,@acCodUsrNew  -- AC_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPAUTOCOMPOSICAO(
      AC_ACAO
      ,AC_CODAMP
      ,AC_CODGMP
      ,AC_STATUS
      ,AC_CODUSR) VALUES(
      'I'               -- AC_ACAO
      ,@acCodAmpNew     -- AC_CODAMP
      ,@acCodGmpNew     -- AC_CODGMP
      ,@acStatusNew     -- AC_STATUS
      ,@acCodUsrNew     -- AC_CODUSR
    );  
    ---------------------------------
    -- Atualizando o produto com auto
    ---------------------------------
    UPDATE GRUPOMODELOPRODUTO SET GMP_CODAUT=@acCodAmpNew,GMP_CODPE='AUT' WHERE GMP_CODIGO=@acCodGmpNew;
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
-------------------------------------------------------------------------------------
--                              B A L A N C O                                      --
--trgbalanco
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewBALANCO_BI ON dbo.VBALANCO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- BLN_CODIGO     | PK  |    |    | VC(15) NN          |
  -- BLN_NOME       |     |    |    | VC(40) NN          |
  -- BLN_CODSPD     | SEL |    |    | VC(2) NN           | Campo relacionado (SPED)  
  -- SPD_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (SPED)  
  -- BLN_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- BLN_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- BLN_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D13         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo VARCHAR(15) = 'OK'; -- Para procurar unique index
  DECLARE @uiNome VARCHAR(40) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @blnCodigoNew VARCHAR(15);
  DECLARE @blnNomeNew VARCHAR(40);
  DECLARE @blnCodSpdNew VARCHAR(2);
  DECLARE @spdNomeNew VARCHAR(20);  
  DECLARE @blnAtivoNew VARCHAR(1);
  DECLARE @blnRegNew VARCHAR(1);
  DECLARE @blnCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD13New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @blnCodigoNew   = i.BLN_CODIGO
         ,@blnNomeNew    = dbo.fncTranslate(i.BLN_NOME,40)
         ,@blnCodSpdNew  = COALESCE(dbo.fncTranslate(i.BLN_CODSPD,2),'**')
         ,@spdNomeNew    = COALESCE(SPD.SPD_NOME,'ERRO')
         ,@blnAtivoNew   = UPPER(i.BLN_ATIVO)
         ,@blnRegNew     = UPPER(i.BLN_REG)
         ,@blnCodUsrNew  = i.BLN_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13New      = UP.UP_D13
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN SPED SPD ON i.BLN_CODSPD=SPD.SPD_CODIGO AND SPD.SPD_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.BLN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@blnCodUsrNew);
    IF( @spdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CODDIGO SPED %s PARA ESTE REGISTRO',15,1,@blnCodSpdNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD13New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA INCLUIR NA TABELA BALANCO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(BLN_CODIGO,'OK') FROM BALANCO WHERE BLN_NOME=@blnNomeNew;
    --IF( @uiCodigo <> 'OK' )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BALANCO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(BLN_NOME,'OK') FROM BALANCO WHERE BLN_CODIGO=@blnCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA BALANCO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @blnRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@blnRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.BALANCO( 
      BLN_CODIGO
      ,BLN_NOME
      ,BLN_CODSPD
      ,BLN_ATIVO
      ,BLN_REG
      ,BLN_CODUSR) VALUES(
      @blnCodigoNew   -- BLN_CODIGO
      ,@blnNomeNew    -- BLN_NOME
      ,@blnCodSpdNew  -- BLN_CODSPD      
      ,@blnAtivoNew   -- BLN_ATIVO
      ,@blnRegNew     -- BLN_REG
      ,@blnCodUsrNew  -- BLN_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPBALANCO(
      BLN_ACAO
      ,BLN_CODIGO
      ,BLN_NOME
      ,BLN_CODSPD      
      ,BLN_ATIVO
      ,BLN_REG
      ,BLN_CODUSR) VALUES(
      'I'                       -- BLN_ACAO
      ,@blnCodigoNew            -- BLN_CODIGO
      ,@blnNomeNew              -- BLN_NOME
      ,@blnCodSpdNew            -- BLN_CODSPD      
      ,@blnAtivoNew             -- BLN_ATIVO
      ,@blnRegNew               -- BLN_REG
      ,@blnCodUsrNew            -- BLN_CODUSR
    );  
    
    IF( @blnCodSpdNew='00' ) BEGIN
      INSERT INTO VCONTACONTABIL(
        CC_CODIGO
        ,CC_NOME
        ,CC_LANCTO
        ,CC_CODCTR
        ,CC_F10
        ,CC_ATIVO
        ,CC_REG
        ,CC_CODUSR) VALUES(
        @blnCodigoNew
        ,@blnNomeNew
        ,'S'
        ,'0.00.0000'
        ,'S'        
        ,'S'
        ,'S'
        ,1
      );    
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewBALANCO_BU ON dbo.VBALANCO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo VARCHAR(15) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @blnCodigoNew VARCHAR(15);
  DECLARE @blnNomeNew VARCHAR(40);
  DECLARE @blnCodSpdNew VARCHAR(2);
  DECLARE @spdNomeNew VARCHAR(20);  
  DECLARE @blnAtivoNew VARCHAR(1);
  DECLARE @blnRegNew VARCHAR(1);
  DECLARE @blnCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD13New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @blnCodigoNew   = i.BLN_CODIGO
         ,@blnNomeNew    = dbo.fncTranslate(i.BLN_NOME,40)
         ,@blnCodSpdNew  = COALESCE(dbo.fncTranslate(i.BLN_CODSPD,2),'**')
         ,@spdNomeNew    = COALESCE(SPD.SPD_NOME,'ERRO')
         ,@blnAtivoNew   = UPPER(i.BLN_ATIVO)
         ,@blnRegNew     = UPPER(i.BLN_REG)
         ,@blnCodUsrNew  = i.BLN_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13New      = UP.UP_D13
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN SPED SPD ON i.BLN_CODSPD=SPD.SPD_CODIGO AND SPD.SPD_ATIVO='S'        
    LEFT OUTER JOIN USUARIO USR ON i.BLN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@blnCodUsrNew);
    IF( @spdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CODDIGO SPED %s PARA ESTE REGISTRO',15,1,@blnCodSpdNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD13New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA ALTERAR NA TABELA BALANCO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @blnCodigoOld VARCHAR(15);
    DECLARE @blnNomeOld VARCHAR(40);
    DECLARE @blnCodSpdOld VARCHAR(2);    
    DECLARE @blnAtivoOld VARCHAR(1);
    DECLARE @blnRegOld VARCHAR(1);
    DECLARE @blnCodUsrOld INTEGER;
    SELECT @blnCodigoOld   = d.BLN_CODIGO
           ,@blnNomeOld    = d.BLN_NOME
           ,@blnCodSpdOld  = d.BLN_CODSPD
           ,@blnAtivoOld   = d.BLN_ATIVO
           ,@blnRegOld     = d.BLN_REG
           ,@blnCodUsrOld  = d.BLN_CODUSR         
      FROM BALANCO d WHERE d.BLN_CODIGO=@blnCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @blnCodigoOld<>@blnCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @blnNomeOld<>@blnNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(BLN_CODIGO,'OK') FROM BALANCO WHERE BLN_NOME=@blnNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BALANCO COM CODIGO %s',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @blnRegOld <> @blnRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@blnRegOld,@blnRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.BALANCO
       SET BLN_NOME   = @blnNomeNew
          ,BLN_CODSPD = @blnCodSpdNew
          ,BLN_ATIVO  = @blnAtivoNew
          ,BLN_REG    = @blnRegNew
          ,BLN_CODUSR = @blnCodUsrNew
    WHERE BLN_CODIGO  = @blnCodigoNew;     
    -- Gravando LOG
    IF( (@blnNomeOld<>@blnNomeNew) OR (@blnCodSpdold<>@blnCodSpdNew)  OR (@blnAtivoOld<>@blnAtivoNew) OR (@blnRegOld<>@blnRegNew) ) BEGIN
      INSERT INTO dbo.BKPBALANCO(
        BLN_ACAO
        ,BLN_CODIGO
        ,BLN_NOME
        ,BLN_CODSPD        
        ,BLN_ATIVO
        ,BLN_REG
        ,BLN_CODUSR) VALUES(
        'A'             -- BLN_ACAO
        ,@blnCodigoNew  -- BLN_CODIGO
        ,@blnNomeNew    -- BLN_NOME
        ,@blnCodSpdNew  -- BLN_CODSPD        
        ,@blnAtivoNew   -- BLN_ATIVO
        ,@blnRegNew     -- BLN_REG
        ,@blnCodUsrNew  -- BLN_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewBALANCO_BD ON dbo.VBALANCO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @blnCodigoOld VARCHAR(15);
  DECLARE @blnNomeOld VARCHAR(40);
  DECLARE @blnCodSpdOld VARCHAR(2);
  DECLARE @blnAtivoOld VARCHAR(1);
  DECLARE @blnRegOld VARCHAR(1);
  DECLARE @blnCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD13Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @blnCodigoOld   = d.BLN_CODIGO
         ,@blnNomeOld    = d.BLN_NOME
         ,@blnCodSpdOld  = d.BLN_CODSPD
         ,@blnAtivoOld   = d.BLN_ATIVO
         ,@blnRegOld     = d.BLN_REG
         ,@blnCodUsrOld  = d.BLN_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13Old      = UP.UP_D13
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.BLN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@blnCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD13Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA EXCLUIR NA TABELA BALANCO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@blnRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@blnCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('BALANCO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@blnCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('BALANCO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.BALANCO WHERE BLN_CODIGO=@blnCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPBALANCO(
      BLN_ACAO
      ,BLN_CODIGO
      ,BLN_NOME
      ,BLN_CODSPD      
      ,BLN_ATIVO
      ,BLN_REG
      ,BLN_CODUSR) VALUES(
      'E'               -- BLN_ACAO
      ,@blnCodigoOld    -- BLN_CODIGO
      ,@blnNomeOld      -- BLN_NOME
      ,@blnCodSpdOld    -- BLN_CODSPD      
      ,@blnAtivoOld     -- BLN_ATIVO
      ,@blnRegOld       -- BLN_REG
      ,@blnCodUsrOld    -- BLN_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPBALANCO_BUD ON dbo.BKPBALANCO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                              B A N C O
--trgbanco
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewBANCO_BI ON dbo.VBANCO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- BNC_CODIGO     | PK  |    |    | INT                |  Auto incremento
  -- BNC_NOME       |     |    |    | VC(40) NN          |
  -- BNC_CODFVR     | SEL |    |    | INT NN             | Campo relacionado (FAVORECIDO)
  -- FVR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (FAVORECIDO)   
  -- BNC_CODCC      | SEL |    |    | VC(15) NN          | Campo relacionado (CONTAGERENCIAL)
  -- CC_NOME        | SEL |    |    | VC(40) NN          | Campo relacionado (CONTAGERENCIAL)   
  -- BNC_ENTRAFLUXO | CC  |    |    | VC(1) NN           |
  -- BNC_CODBST     | SEL |    |    | VC(3) NN           | Campo relacionado (BANCOSTATUS)   
  -- BST_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (BANCOSTATUS)      
  -- BNC_PADRAOFLUXO| CC  |    |    | VC(1) NN           | Soh pode existir um por empresa 
  -- BNC_CODBCD     | SEL |    |    | VC(3) NN           | Campo relacionado (BANCOCODIGO)      
  -- BCD_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (BANCOCODIGO)         
  -- BNC_AGENCIA    |     |    |    | VC(8)              |
  -- BNC_AGENCIADV  |     |    |    | VC(1)              |
  -- BNC_CONTA      |     |    |    | VC(20)             |
  -- BNC_CONTADV    |     |    |    | VC(1)              |
  -- BNC_SALDO      |     |    |    | NUM(15,2) NN       |  
  -- BNC_CODEMP     | SEL |    |    | INT NN             | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- BNC_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- BNC_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- BNC_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D06         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiPadraoFluxo INTEGER;       -- Soh pode um por empresa
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  --DECLARE @bncCodigoNew INTEGER;
  DECLARE @bncNomeNew VARCHAR(40);
  DECLARE @bncCodFvrNew INTEGER;
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @bncCodCcNew VARCHAR(15);
  DECLARE @ccNomeNew VARCHAR(40);
  DECLARE @bncEntraFluxoNew VARCHAR(1);
  DECLARE @bncCodBstNew VARCHAR(3);
  DECLARE @bsNomeNew VARCHAR(20);
  DECLARE @bncPadraoFluxoNew VARCHAR(1);
  DECLARE @bncCodBcdNew VARCHAR(3);
  DECLARE @bcdNomeNew VARCHAR(20);
  DECLARE @bncAgenciaNew VARCHAR(8);
  DECLARE @bncAgenciaDvNew VARCHAR(1);
  DECLARE @bncContaNew VARCHAR(20);
  DECLARE @bncContaDvNew VARCHAR(1);
  DECLARE @bncCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @bncAtivoNew VARCHAR(1);
  DECLARE @bncRegNew VARCHAR(1);
  DECLARE @bncCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD06New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT --@bncCodigoNew        = i.BNC_CODIGO
         @bncNomeNew         = dbo.fncTranslate(i.BNC_NOME,40)
         ,@bncCodFvrNew       = i.BNC_CODFVR
         ,@fvrApelidoNew      = COALESCE(FVR.FVR_APELIDO,'ERRO')
         --,@bncCodCcNew        = dbo.fncTranslate(i.BNC_CODCC,15)
         --,@ccNomeNew          = COALESCE(CC.CC_NOME,'ERRO')
         ,@bncEntraFluxoNew   = UPPER(i.BNC_ENTRAFLUXO)
         ,@bncCodBstNew       = dbo.fncTranslate(i.BNC_CODBST,3)
         ,@bsNomeNew          = COALESCE(BST.BST_NOME,'ERRO')
         ,@bncPadraoFluxoNew  = UPPER(i.BNC_PADRAOFLUXO)
         ,@bncCodBcdNew       = dbo.fncTranslate(i.BNC_CODBCD,3)
         ,@bcdNomeNew         = COALESCE(BCD.BCD_NOME,'ERRO')
         ,@bncAgenciaNew      = dbo.fncTranslate(i.BNC_AGENCIA,8)
         ,@bncAgenciaDvNew    = dbo.fncTranslate(i.BNC_AGENCIADV,1)
         ,@bncContaNew        = dbo.fncTranslate(i.BNC_CONTA,20)
         ,@bncContaDvNew      = dbo.fncTranslate(i.BNC_CONTADV,1)
         ,@bncCodEmpNew       = i.BNC_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@bncAtivoNew        = UPPER(i.BNC_ATIVO)
         ,@bncRegNew          = UPPER(i.BNC_REG)
         ,@bncCodUsrNew       = i.BNC_CODUSR
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06New           = UP.UP_D06
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.BNC_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN CONTACONTABIL CC ON i.BNC_CODCC=CC.CC_CODIGO AND CC.CC_ATIVO='S'
    LEFT OUTER JOIN BANCOSTATUS BST ON i.BNC_CODBST=BST.BST_CODIGO AND BST.BST_ATIVO='S'
    LEFT OUTER JOIN BANCOCODIGO BCD ON i.BNC_CODBCD=BCD.BCD_CODIGO AND BCD.BCD_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.BNC_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.BNC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @fvrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@bncCodFvrNew);
    IF( @ccNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CONTA CONTABIL %s PARA ESTE REGISTRO',15,1,@bncCodCcNew);    
    IF( @bsNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO STATUS %s PARA ESTE REGISTRO',15,1,@bncCodBstNew);    
    IF( @bcdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CODIGO BANCO %s PARA ESTE REGISTRO',15,1,@bncCodBcdNew);    
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@bncCodEmpNew);        
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bncCodUsrNew);    
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD06New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA INCLUIR NA TABELA BANCO',15,1,@usrApelidoNew);
    ----------------------------------------------------------------
    -- Soh pode existir um banco padrao para fluxo para cada empresa
    ----------------------------------------------------------------
    IF( @bncPadraoFluxoNew='S' ) BEGIN
      SELECT @uiPadraoFluxo=BNC_CODIGO FROM BANCO WHERE ((BNC_PADRAOFLUXO='S') AND (BNC_CODEMP=@bncCodEmpNew));
      IF( @uiPadraoFluxo IS NOT NULL )
        RAISERROR('BANCO %i JA PARAMETRIZADO COM PADRÃO',15,1,@uiPadraoFluxo);
    END    
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(BNC_CODIGO,'OK') FROM BANCO WHERE BNC_NOME=@bncNomeNew;
    --IF( @uiCodigo <> 'OK' )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BANCO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(BNC_NOME,'OK') FROM BANCO WHERE BNC_CODIGO=@bncCodigoNew;
    --IF( @uiNome <> 'OK' )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA BANCO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @bncRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@bncRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END
    -----------------------------------------------------------------
    --  Aqui vou cadastrar a conta contabil para banco
    -----------------------------------------------------------------
    DECLARE @seekConta VARCHAR(15)= NULL;
    DECLARE @intConta INTEGER     = 2;
    WHILE( @intConta<9999 ) BEGIN
      SET @bncCodCcNew = CONCAT('1.01.01.02.',RIGHT('0000' + CAST(@intConta AS VARCHAR(4)),4));
      SET @seekConta   = NULL;
      SELECT @seekConta=COALESCE(CC_CODIGO,NULL) FROM CONTACONTABIL WHERE CC_CODIGO=@bncCodCcNew;
      IF( @seekConta IS NULL ) BEGIN
        SET @ccNomeNew=SUBSTRING(CONCAT(@bcdNomeNew,' ',@bncContaNew),1,40);
        INSERT INTO CONTACONTABIL(
          CC_CODIGO
          ,CC_NOME
          ,CC_LANCTO
          ,CC_CODCTR
          ,CC_F10          
          ,CC_ATIVO
          ,CC_REG
          ,CC_CODUSR) VALUES(
          @bncCodCcNew          -- CC_CODIGO
          ,@ccNomeNew           -- CC_NOME
          ,'S'                  -- CC_LANCTO
          ,'1.01.0002'          -- CC_CODCTR
          ,'N'                  -- CC_F10
          ,'S'                  -- CC_ATIVO
          ,'P'                  -- CC_REG
          ,@bncCodUsrNew        -- CC_CODUSR
        );
        -- Gravando LOG
        INSERT INTO dbo.BKPCONTACONTABIL(
          CC_ACAO
          ,CC_CODIGO
          ,CC_NOME
          ,CC_LANCTO
          ,CC_CODCTR
          ,CC_F10
          ,CC_ATIVO
          ,CC_REG
          ,CC_CODUSR) VALUES(
          'I'                      -- CC_ACAO
          ,@bncCodCcNew            -- CC_CODIGO
          ,@ccNomeNew              -- CC_NOME
          ,'S'                     -- CC_LANCTO
          ,'1.01.0002'             -- CC_CODCTR
          ,'N'                     -- CC_F10          
          ,'S'                     -- CC_ATIVO
          ,'P'                     -- CC_REG
          ,@bncCodUsrNew           -- CC_CODUSR
        );  
        --
        --
        INSERT INTO BALANCO(
          BLN_CODIGO
          ,BLN_NOME
          ,BLN_CODSPD
          ,BLN_ATIVO
          ,BLN_REG
          ,BLN_CODUSR) VALUES(
          @bncCodCcNew      -- BLN_CODIGO        
          ,@ccNomeNew       -- BLN_NOME
          ,'**'             -- BLN_CODSPD
          ,'S'              -- BLN_ATIVO
          ,'P'              -- BLN_REG
          ,@bncCodUsrNew    -- BLN_CODUSR
        );
        -- Gravando LOG
        INSERT INTO dbo.BKPBALANCO(
          BLN_ACAO
          ,BLN_CODIGO
          ,BLN_NOME
          ,BLN_CODSPD      
          ,BLN_ATIVO
          ,BLN_REG
          ,BLN_CODUSR) VALUES(
          'I'                       -- BLN_ACAO
          ,@bncCodCcNew             -- BLN_CODIGO
          ,@ccNomeNew               -- BLN_NOME
          ,'**'                     -- BLN_CODSPD      
          ,'S'                      -- BLN_ATIVO
          ,'P'                      -- BLN_REG
          ,@bncCodUsrNew            -- BLN_CODUSR
        );  
        BREAK;
      END
      SET @intConta=(@intConta+1);  
    END
    --  
    --
    INSERT INTO dbo.BANCO(
      BNC_NOME
      ,BNC_CODFVR
      ,BNC_CODCC
      ,BNC_ENTRAFLUXO
      ,BNC_CODBST
      ,BNC_PADRAOFLUXO
      ,BNC_CODBCD
      ,BNC_AGENCIA
      ,BNC_AGENCIADV
      ,BNC_CONTA
      ,BNC_CONTADV
      ,BNC_SALDO
      ,BNC_CODEMP
      ,BNC_ATIVO
      ,BNC_REG
      ,BNC_CODUSR) VALUES(
      @bncNomeNew               -- BNC_NOME
      ,@bncCodFvrNew            -- BNC_CODFVR
      ,@bncCodCcNew             -- BNC_CODCC
      ,@bncEntraFluxoNew        -- BNC_ENTRAFLUXO
      ,@bncCodBstNew            -- BNC_CODBST
      ,@bncPadraoFluxoNew       -- BNC_PADRAOFLUXO
      ,@bncCodBcdNew            -- BNC_CODBCD
      ,@bncAgenciaNew           -- BNC_AGENCIA
      ,@bncAgenciaDvNew         -- BNC_AGENCIADV
      ,@bncContaNew             -- BNC_CONTA
      ,@bncContaDvNew           -- BNC_CONTADV
      ,0                        -- BNC_CONTADV
      ,@bncCodEmpNew            -- BNC_CODEMP
      ,@bncAtivoNew             -- BNC_ATIVO
      ,@bncRegNew               -- BNC_REG
      ,@bncCodUsrNew            -- BNC_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPBANCO(
      BNC_ACAO
      ,BNC_CODIGO
      ,BNC_NOME
      ,BNC_CODFVR
      ,BNC_CODCC
      ,BNC_ENTRAFLUXO
      ,BNC_CODBST
      ,BNC_PADRAOFLUXO
      ,BNC_CODBCD
      ,BNC_AGENCIA
      ,BNC_AGENCIADV
      ,BNC_CONTA
      ,BNC_CONTADV
      ,BNC_CODEMP
      ,BNC_ATIVO
      ,BNC_REG
      ,BNC_CODUSR) VALUES(
      'I'
      ,IDENT_CURRENT('BANCO')         -- BNC_CODIGO
      ,@bncNomeNew                    -- BNC_NOME
      ,@bncCodFvrNew                  -- BNC_CODFVR
      ,@bncCodCcNew                   -- BNC_CODCC
      ,@bncEntraFluxoNew              -- BNC_ENTRAFLUXO
      ,@bncCodBstNew                  -- BNC_CODBST
      ,@bncPadraoFluxoNew             -- BNC_PADRAOFLUXO
      ,@bncCodBcdNew                  -- BNC_CODBCD
      ,@bncAgenciaNew                 -- BNC_AGENCIA
      ,@bncAgenciaDvNew               -- BNC_AGENCIADV
      ,@bncContaNew                   -- BNC_CONTA
      ,@bncContaDvNew                 -- BNC_CONTADV
      ,@bncCodEmpNew                  -- BNC_CODEMP
      ,@bncAtivoNew                   -- BNC_ATIVO
      ,@bncRegNew                     -- BNC_REG
      ,@bncCodUsrNew                  -- BNC_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewBANCO_BU ON dbo.VBANCO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiPadraoFluxo INTEGER; -- Soh pode um por empresa
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @bncCodigoNew INTEGER;
  DECLARE @bncNomeNew VARCHAR(40);
  DECLARE @bncCodFvrNew INTEGER;
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @bncCodCcNew VARCHAR(15);
  DECLARE @ccNomeNew VARCHAR(40);
  DECLARE @bncEntraFluxoNew VARCHAR(1);
  DECLARE @bncCodBstNew VARCHAR(3);
  DECLARE @bsNomeNew VARCHAR(20);
  DECLARE @bncPadraoFluxoNew VARCHAR(1);
  DECLARE @bncCodBcdNew VARCHAR(3);
  DECLARE @bcdNomeNew VARCHAR(20);
  DECLARE @bncAgenciaNew VARCHAR(8);
  DECLARE @bncAgenciaDvNew VARCHAR(1);
  DECLARE @bncContaNew VARCHAR(20);
  DECLARE @bncContaDvNew VARCHAR(1);
  DECLARE @bncCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @bncAtivoNew VARCHAR(1);
  DECLARE @bncRegNew VARCHAR(1);
  DECLARE @bncCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD06New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @bncCodigoNew        = i.BNC_CODIGO
         ,@bncNomeNew         = dbo.fncTranslate(i.BNC_NOME,40)
         ,@bncCodFvrNew       = i.BNC_CODFVR
         ,@fvrApelidoNew      = COALESCE(FVR.FVR_APELIDO,'ERRO')
         ,@bncCodCcNew        = dbo.fncTranslate(i.BNC_CODCC,15)
         ,@ccNomeNew          = COALESCE(CC.CC_NOME,'ERRO')
         ,@bncEntraFluxoNew   = UPPER(i.BNC_ENTRAFLUXO)
         ,@bncCodBstNew       = dbo.fncTranslate(i.BNC_CODBST,3)
         ,@bsNomeNew          = COALESCE(BST.BST_NOME,'ERRO')
         ,@bncPadraoFluxoNew  = UPPER(i.BNC_PADRAOFLUXO)
         ,@bncCodBcdNew       = dbo.fncTranslate(i.BNC_CODBCD,3)
         ,@bcdNomeNew         = COALESCE(BCD.BCD_NOME,'ERRO')
         ,@bncAgenciaNew      = dbo.fncTranslate(i.BNC_AGENCIA,8)
         ,@bncAgenciaDvNew    = dbo.fncTranslate(i.BNC_AGENCIADV,1)
         ,@bncContaNew        = dbo.fncTranslate(i.BNC_CONTA,20)
         ,@bncContaDvNew      = dbo.fncTranslate(i.BNC_CONTADV,1)
         ,@bncCodEmpNew       = i.BNC_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@bncAtivoNew        = UPPER(i.BNC_ATIVO)
         ,@bncRegNew          = UPPER(i.BNC_REG)
         ,@bncCodUsrNew       = i.BNC_CODUSR
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06New           = UP.UP_D06
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.BNC_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN CONTACONTABIL CC ON i.BNC_CODCC=CC.CC_CODIGO AND CC.CC_ATIVO='S'
    LEFT OUTER JOIN BANCOSTATUS BST ON i.BNC_CODBST=BST.BST_CODIGO AND BST.BST_ATIVO='S'
    LEFT OUTER JOIN BANCOCODIGO BCD ON i.BNC_CODBCD=BCD.BCD_CODIGO AND BCD.BCD_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.BNC_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.BNC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @fvrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@bncCodFvrNew);
    IF( @ccNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CONTA CONTABIL %s PARA ESTE REGISTRO',15,1,@bncCodCcNew);    
    IF( @bsNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO STATUS %s PARA ESTE REGISTRO',15,1,@bncCodBstNew);    
    IF( @bcdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CODIGO BANCO %s PARA ESTE REGISTRO',15,1,@bncCodBcdNew);    
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@bncCodEmpNew);        
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bncCodUsrNew);    
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD06New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA ALTERAR NA TABELA BANCO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @bncCodigoOld INTEGER;
    DECLARE @bncNomeOld VARCHAR(40);
    DECLARE @bncCodFvrOld INTEGER;
    DECLARE @bncCodCcOld VARCHAR(15);
    DECLARE @bncEntraFluxoOld VARCHAR(1);
    DECLARE @bncCodBstOld VARCHAR(3);
    DECLARE @bncPadraoFluxoOld VARCHAR(1);
    DECLARE @bncCodBcdOld VARCHAR(3);
    DECLARE @bcdNomeOld VARCHAR(20);
    DECLARE @bncAgenciaOld VARCHAR(8);
    DECLARE @bncAgenciaDvOld VARCHAR(1);
    DECLARE @bncContaOld VARCHAR(20);
    DECLARE @bncContaDvOld VARCHAR(1);
    DECLARE @bncCodEmpOld INTEGER;
    DECLARE @bncAtivoOld VARCHAR(1);
    DECLARE @bncRegOld VARCHAR(1);
    DECLARE @bncCodUsrOld INTEGER;
    
    SELECT @bncCodigoOld        = d.BNC_CODIGO
           ,@bncNomeOld         = d.BNC_NOME
           ,@bncCodFvrOld       = d.BNC_CODFVR
           ,@bncCodCcOld        = d.BNC_CODCC
           ,@bncEntraFluxoOld   = d.BNC_ENTRAFLUXO
           ,@bncCodBstOld       = d.BNC_CODBST
           ,@bncPadraoFluxoOld  = d.BNC_PADRAOFLUXO
           ,@bncCodBcdOld       = d.BNC_CODBCD
           ,@bncAgenciaOld      = d.BNC_AGENCIA
           ,@bncAgenciaDvOld    = d.BNC_AGENCIADV
           ,@bncContaOld        = d.BNC_CONTA
           ,@bncContaDvOld      = d.BNC_CONTADV
           ,@bncCodEmpOld       = d.BNC_CODEMP
           ,@bncAtivoOld        = d.BNC_ATIVO
           ,@bncRegOld          = d.BNC_REG
           ,@bncCodUsrOld       = d.BNC_CODUSR         
      FROM BANCO d WHERE d.BNC_CODIGO=@bncCodigoNew;
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @bncCodigoOld<>@bncCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @bncCodCcOld<>@bncCodCcNew )
      RAISERROR('CAMPO CONTA GERENCIAL NAO PODE SER ALTERADO',15,1);  
    IF( @bncCodEmpOld<>@bncCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    ----------------------------------------------------------------
    -- Soh pode existir um banco padrao para fluxo para cada empresa
    ----------------------------------------------------------------
    IF( (@bncPadraoFluxoOld='N') AND (@bncPadraoFluxoNew='S') ) BEGIN
      SELECT @uiPadraoFluxo=BNC_CODIGO FROM BANCO WHERE ((BNC_PADRAOFLUXO='S') AND (BNC_CODEMP=@bncCodEmpNew));
      IF( @uiPadraoFluxo IS NOT NULL )
        RAISERROR('BANCO %i JA PARAMETRIZADO COM PADRÃO',15,1,@uiPadraoFluxo);
    END    
      
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @bncNomeOld<>@bncNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(BNC_CODIGO,'OK') FROM BANCO WHERE BNC_NOME=@bncNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BANCO COM CODIGO %s',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @bncRegOld <> @bncRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@bncRegOld,@bncRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    --  
    UPDATE dbo.BANCO
       SET BNC_NOME         = @bncNomeNew
           ,BNC_CODFVR      = @bncCodFvrNew
           ,BNC_ENTRAFLUXO  = @bncEntraFluxoNew
           ,BNC_CODBST      = @bncCodBstNew
           ,BNC_PADRAOFLUXO = @bncPadraoFluxoNew
           ,BNC_CODBCD      = @bncCodBcdNew
           ,BNC_AGENCIA     = @bncAgenciaNew
           ,BNC_AGENCIADV   = @bncAgenciaDvNew
           ,BNC_CONTA       = @bncContaNew
           ,BNC_CONTADV     = @bncContaDvNew
           ,BNC_CODEMP      = @bncCodEmpNew
           ,BNC_ATIVO       = @bncAtivoNew
           ,BNC_REG         = @bncRegNew
           ,BNC_CODUSR      = @bncCodUsrNew
    WHERE BNC_CODIGO=@bncCodigoNew;
    -- Gravando LOG
    
    IF( (@bncNomeOld<>@bncNomeNew) OR (@bncCodFvrOld<>@bncCodFvrNew) OR (@bncEntraFluxoOld<>@bncEntraFluxoNew) OR (@bncCodBstOld<>@bncCodBstNew) 
     OR (@bncPadraoFluxoOld<>@bncPadraoFluxoNew) OR (@bncCodBcdOld<>@bncCodBcdNew) OR (@bncAgenciaOld<>@bncAgenciaNew) OR (@bncAgenciaDvOld<>@bncAgenciaDvNew) 
     OR (@bncContaOld<>@bncContaNew) OR (@bncContaDvOld<>@bncContaDvNew) OR (@bncCodEmpOld<>@bncCodEmpNew) OR (@bncAtivoOld<>@bncAtivoNew) 
     OR (@bncRegOld<>@bncRegNew) OR (@bncCodUsrOld<>@bncCodUsrNew) ) BEGIN     
     
      INSERT INTO dbo.BKPBANCO(
        BNC_ACAO
        ,BNC_CODIGO
        ,BNC_NOME
        ,BNC_CODFVR
        ,BNC_CODCC
        ,BNC_ENTRAFLUXO
        ,BNC_CODBST
        ,BNC_PADRAOFLUXO
        ,BNC_CODBCD
        ,BNC_AGENCIA
        ,BNC_AGENCIADV
        ,BNC_CONTA
        ,BNC_CONTADV
        ,BNC_CODEMP
        ,BNC_ATIVO
        ,BNC_REG
        ,BNC_CODUSR) VALUES(
        'A'
        ,@bncCodigoNew                  -- BNC_CODIGO
        ,@bncNomeNew                    -- BNC_NOME
        ,@bncCodFvrNew                  -- BNC_CODFVR
        ,@bncCodCcNew                   -- BNC_CODCC
        ,@bncEntraFluxoNew              -- BNC_ENTRAFLUXO
        ,@bncCodBstNew                  -- BNC_CODBST
        ,@bncPadraoFluxoNew             -- BNC_PADRAOFLUXO
        ,@bncCodBcdNew                  -- BNC_CODBCD
        ,@bncAgenciaNew                 -- BNC_AGENCIA
        ,@bncAgenciaDvNew               -- BNC_AGENCIADV
        ,@bncContaNew                   -- BNC_CONTA
        ,@bncContaDvNew                 -- BNC_CONTADV
        ,@bncCodEmpNew                  -- BNC_CODEMP
        ,@bncAtivoNew                   -- BNC_ATIVO
        ,@bncRegNew                     -- BNC_REG
        ,@bncCodUsrNew                  -- BNC_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO

CREATE TRIGGER dbo.TRGViewBANCO_BD ON dbo.VBANCO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @bncCodigoOld INTEGER;
  DECLARE @bncNomeOld VARCHAR(40);
  DECLARE @bncCodFvrOld INTEGER;
  DECLARE @bncCodCcOld VARCHAR(15);
  DECLARE @bncEntraFluxoOld VARCHAR(1);
  DECLARE @bncCodBstOld VARCHAR(3);
  DECLARE @bncPadraoFluxoOld VARCHAR(1);
  DECLARE @bncCodBcdOld VARCHAR(3);
  DECLARE @bcdNomeOld VARCHAR(20);
  DECLARE @bncAgenciaOld VARCHAR(8);
  DECLARE @bncAgenciaDvOld VARCHAR(1);
  DECLARE @bncContaOld VARCHAR(20);
  DECLARE @bncContaDvOld VARCHAR(1);
  DECLARE @bncCodEmpOld INTEGER;
  DECLARE @bncAtivoOld VARCHAR(1);
  DECLARE @bncRegOld VARCHAR(1);
  DECLARE @bncCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD06Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @bncCodigoOld        = d.BNC_CODIGO
         ,@bncNomeOld         = d.BNC_NOME
         ,@bncCodFvrOld       = d.BNC_CODFVR
         ,@bncCodCcOld        = d.BNC_CODCC
         ,@bncEntraFluxoOld   = d.BNC_ENTRAFLUXO
         ,@bncCodBstOld       = d.BNC_CODBST
         ,@bncPadraoFluxoOld  = d.BNC_PADRAOFLUXO
         ,@bncCodBcdOld       = d.BNC_CODBCD
         ,@bncAgenciaOld      = d.BNC_AGENCIA
         ,@bncAgenciaDvOld    = d.BNC_AGENCIADV
         ,@bncContaOld        = d.BNC_CONTA
         ,@bncContaDvOld      = d.BNC_CONTADV
         ,@bncCodEmpOld       = d.BNC_CODEMP
         ,@bncAtivoOld        = d.BNC_ATIVO
         ,@bncRegOld          = d.BNC_REG
         ,@bncCodUsrOld       = d.BNC_CODUSR         
         ,@usrApelidoOld      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06Old           = UP.UP_D06
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.BNC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bncCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD06Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA EXCLUIR NA TABELA BANCO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@bncRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@bncCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('BANCO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@bncCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('BANCO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.BANCO WHERE BNC_CODIGO=@bncCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPBANCO(
      BNC_ACAO
      ,BNC_CODIGO
      ,BNC_NOME
      ,BNC_CODFVR
      ,BNC_CODCC
      ,BNC_ENTRAFLUXO
      ,BNC_CODBST
      ,BNC_PADRAOFLUXO
      ,BNC_CODBCD
      ,BNC_AGENCIA
      ,BNC_AGENCIADV
      ,BNC_CONTA
      ,BNC_CONTADV
      ,BNC_CODEMP
      ,BNC_ATIVO
      ,BNC_REG
      ,BNC_CODUSR) VALUES(
      'E'
      ,@bncCodigoOld                  -- BNC_CODIGO
      ,@bncNomeOld                    -- BNC_NOME
      ,@bncCodFvrOld                  -- BNC_CODFVR
      ,@bncCodCcOld                   -- BNC_CODCC
      ,@bncEntraFluxoOld              -- BNC_ENTRAFLUXO
      ,@bncCodBstOld                  -- BNC_CODBST
      ,@bncPadraoFluxoOld             -- BNC_PADRAOFLUXO
      ,@bncCodBcdOld                  -- BNC_CODBCD
      ,@bncAgenciaOld                 -- BNC_AGENCIA
      ,@bncAgenciaDvOld               -- BNC_AGENCIADV
      ,@bncContaOld                   -- BNC_CONTA
      ,@bncContaDvOld                 -- BNC_CONTADV
      ,@bncCodEmpOld                  -- BNC_CODEMP
      ,@bncAtivoOld                   -- BNC_ATIVO
      ,@bncRegOld                     -- BNC_REG
      ,@bncCodUsrOld                  -- BNC_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPBANCO_BUD ON dbo.BKPBANCO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                     B A N C O C O D I G O
-- trgbancocodigo
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewBANCOCODIGO_BI ON dbo.VBANCOCODIGO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- BCD_CODIGO     | OK  |    |    | VC(6) NN PK        | Codigo informado pelo usuario
  -- BCD_NOME       | OK  |    |    | VC(30) NN          | 
  -- BCD_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- BCD_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- BCD_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D06      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema   
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(30) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @bcdCodigoNew VARCHAR(6);
  DECLARE @bcdNomeNew VARCHAR(30);
  DECLARE @bcdAtivoNew VARCHAR(1);
  DECLARE @bcdRegNew VARCHAR(1);
  DECLARE @bcdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD06New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @bcdCodigoNew   = i.BCD_CODIGO
         ,@bcdNomeNew    = dbo.fncTranslate(i.BCD_NOME,30)
         ,@bcdAtivoNew   = UPPER(i.BCD_ATIVO)
         ,@bcdRegNew     = UPPER(i.BCD_REG)
         ,@bcdCodUsrNew  = i.BCD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06New      = UP.UP_D06
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.BCD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bcdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD06New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA INCLUIR NA TABELA BANCOCODIGO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(BCD_CODIGO,'OK') FROM BANCOCODIGO WHERE BCD_NOME=@bcdNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BANCOCODIGO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(BCD_NOME,'OK') FROM BANCOCODIGO WHERE BCD_CODIGO=@bcdCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA BANCOCODIGO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @bcdRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@bcdRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.BANCOCODIGO( 
      BCD_CODIGO
      ,BCD_NOME
      ,BCD_ATIVO
      ,BCD_REG
      ,BCD_CODUSR) VALUES(
      @bcdCodigoNew   -- BCD_CODIGO
      ,@bcdNomeNew    -- BCD_NOME
      ,@bcdAtivoNew   -- BCD_ATIVO
      ,@bcdRegNew     -- BCD_REG
      ,@bcdCodUsrNew  -- BCD_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPBANCOCODIGO(
      BCD_ACAO
      ,BCD_CODIGO
      ,BCD_NOME
      ,BCD_ATIVO
      ,BCD_REG
      ,BCD_CODUSR) VALUES(
      'I'                       -- BCD_ACAO
      ,@bcdCodigoNew            -- BCD_CODIGO
      ,@bcdNomeNew              -- BCD_NOME
      ,@bcdAtivoNew             -- BCD_ATIVO
      ,@bcdRegNew               -- BCD_REG
      ,@bcdCodUsrNew            -- BCD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewBANCOCODIGO_BU ON dbo.VBANCOCODIGO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @bcdCodigoNew VARCHAR(6);
  DECLARE @bcdNomeNew VARCHAR(30);
  DECLARE @bcdAtivoNew VARCHAR(1);
  DECLARE @bcdRegNew VARCHAR(1);
  DECLARE @bcdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD06New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @bcdCodigoNew   = i.BCD_CODIGO
         ,@bcdNomeNew    = dbo.fncTranslate(i.BCD_NOME,30)
         ,@bcdAtivoNew   = UPPER(i.BCD_ATIVO)
         ,@bcdRegNew     = UPPER(i.BCD_REG)
         ,@bcdCodUsrNew  = i.BCD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06New      = UP.UP_D06
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.BCD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bcdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD06New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA ALTERAR NA TABELA BANCOCODIGO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @bcdCodigoOld VARCHAR(6);
    DECLARE @bcdNomeOld VARCHAR(30);
    DECLARE @bcdAtivoOld VARCHAR(1);
    DECLARE @bcdRegOld VARCHAR(1);
    DECLARE @bcdCodUsrOld INTEGER;
    SELECT @bcdCodigoOld   = d.BCD_CODIGO
           ,@bcdNomeOld    = d.BCD_NOME
           ,@bcdAtivoOld   = d.BCD_ATIVO
           ,@bcdRegOld     = d.BCD_REG
           ,@bcdCodUsrOld  = d.BCD_CODUSR         
      FROM BANCOCODIGO d WHERE d.BCD_CODIGO=@bcdCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @bcdCodigoOld<>@bcdCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @bcdNomeOld<>@bcdNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(BCD_CODIGO,'OK') FROM BANCOCODIGO WHERE BCD_NOME=@bcdNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BANCOCODIGO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @bcdRegOld <> @bcdRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@bcdRegOld,@bcdRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.BANCOCODIGO
       SET BCD_NOME   = @bcdNomeNew
          ,BCD_ATIVO  = @bcdAtivoNew
          ,BCD_REG    = @bcdRegNew
          ,BCD_CODUSR = @bcdCodUsrNew
    WHERE BCD_CODIGO  = @bcdCodigoNew;     
    -- Gravando LOG
    IF( (@bcdNomeOld<>@bcdNomeNew) OR (@bcdAtivoOld<>@bcdAtivoNew) OR (@bcdRegOld<>@bcdRegNew) ) BEGIN
      INSERT INTO dbo.BKPBANCOCODIGO(
        BCD_ACAO
        ,BCD_CODIGO
        ,BCD_NOME
        ,BCD_ATIVO
        ,BCD_REG
        ,BCD_CODUSR) VALUES(
        'A'             -- BCD_ACAO
        ,@bcdCodigoNew  -- BCD_CODIGO
        ,@bcdNomeNew    -- BCD_NOME
        ,@bcdAtivoNew   -- BCD_ATIVO
        ,@bcdRegNew     -- BCD_REG
        ,@bcdCodUsrNew  -- BCD_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewBANCOCODIGO_BD ON dbo.VBANCOCODIGO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @bcdCodigoOld VARCHAR(6);
  DECLARE @bcdNomeOld VARCHAR(30);
  DECLARE @bcdAtivoOld VARCHAR(1);
  DECLARE @bcdRegOld VARCHAR(1);
  DECLARE @bcdCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD06Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @bcdCodigoOld   = d.BCD_CODIGO
         ,@bcdNomeOld    = d.BCD_NOME
         ,@bcdAtivoOld   = d.BCD_ATIVO
         ,@bcdRegOld     = d.BCD_REG
         ,@bcdCodUsrOld  = d.BCD_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06Old      = UP.UP_D06
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.BCD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bcdCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD06Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA EXCLUIR NA TABELA BANCOCODIGO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@bcdRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@bcdCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('BANCOCODIGO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@bcdCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('BANCOCODIGO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.BANCOCODIGO WHERE BCD_CODIGO=@bcdCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPBANCOCODIGO(
      BCD_ACAO
      ,BCD_CODIGO
      ,BCD_NOME
      ,BCD_ATIVO
      ,BCD_REG
      ,BCD_CODUSR) VALUES(
      'E'               -- BCD_ACAO
      ,@bcdCodigoOld    -- BCD_CODIGO
      ,@bcdNomeOld      -- BCD_NOME
      ,@bcdAtivoOld     -- BCD_ATIVO
      ,@bcdRegOld       -- BCD_REG
      ,@bcdCodUsrOld    -- BCD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPBANCOCODIGO_BUD ON dbo.BKPBANCOCODIGO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                     B A N C O S T A T U S
-- trgbancostatus
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewBANCOSTATUS_BI ON dbo.VBANCOSTATUS
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- BST_CODIGO     | OK  |    |    | VC(3) NN PK        | Codigo informado pelo usuario
  -- BST_NOME       | OK  |    |    | VC(20) NN          | 
  -- BST_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- BST_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- BST_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D06      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema   
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @bstCodigoNew VARCHAR(3);
  DECLARE @bstNomeNew VARCHAR(20);
  DECLARE @bstAtivoNew VARCHAR(1);
  DECLARE @bstRegNew VARCHAR(1);
  DECLARE @bstCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD06New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @bstCodigoNew   = dbo.fncTranslate(i.BST_CODIGO,3)
         ,@bstNomeNew    = dbo.fncTranslate(i.BST_NOME,20)
         ,@bstAtivoNew   = UPPER(i.BST_ATIVO)
         ,@bstRegNew     = UPPER(i.BST_REG)
         ,@bstCodUsrNew  = i.BST_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06New      = UP.UP_D06
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.BST_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bstCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD06New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA INCLUIR NA TABELA BANCOSTATUS',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(BST_CODIGO,'OK') FROM BANCOSTATUS WHERE BST_NOME=@bstNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BANCOSTATUS COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(BST_NOME,'OK') FROM BANCOSTATUS WHERE BST_CODIGO=@bstCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA BANCOSTATUS %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @bstRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@bstRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.BANCOSTATUS( 
      BST_CODIGO
      ,BST_NOME
      ,BST_ATIVO
      ,BST_REG
      ,BST_CODUSR) VALUES(
      @bstCodigoNew   -- BST_CODIGO
      ,@bstNomeNew    -- BST_NOME
      ,@bstAtivoNew   -- BST_ATIVO
      ,@bstRegNew     -- BST_REG
      ,@bstCodUsrNew  -- BST_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPBANCOSTATUS(
      BST_ACAO
      ,BST_CODIGO
      ,BST_NOME
      ,BST_ATIVO
      ,BST_REG
      ,BST_CODUSR) VALUES(
      'I'                       -- BST_ACAO
      ,@bstCodigoNew            -- BST_CODIGO
      ,@bstNomeNew              -- BST_NOME
      ,@bstAtivoNew             -- BST_ATIVO
      ,@bstRegNew               -- BST_REG
      ,@bstCodUsrNew            -- BST_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewBANCOSTATUS_BU ON dbo.VBANCOSTATUS
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @bstCodigoNew VARCHAR(3);
  DECLARE @bstNomeNew VARCHAR(20);
  DECLARE @bstAtivoNew VARCHAR(1);
  DECLARE @bstRegNew VARCHAR(1);
  DECLARE @bstCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD06New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @bstCodigoNew   = i.BST_CODIGO
         ,@bstNomeNew    = dbo.fncTranslate(i.BST_NOME,20)
         ,@bstAtivoNew   = UPPER(i.BST_ATIVO)
         ,@bstRegNew     = UPPER(i.BST_REG)
         ,@bstCodUsrNew  = i.BST_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06New      = UP.UP_D06
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.BST_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bstCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD06New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA ALTERAR NA TABELA BANCOSTATUS',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @bstCodigoOld VARCHAR(3);
    DECLARE @bstNomeOld VARCHAR(20);
    DECLARE @bstAtivoOld VARCHAR(1);
    DECLARE @bstRegOld VARCHAR(1);
    DECLARE @bstCodUsrOld INTEGER;
    SELECT @bstCodigoOld   = d.BST_CODIGO
           ,@bstNomeOld    = d.BST_NOME
           ,@bstAtivoOld   = d.BST_ATIVO
           ,@bstRegOld     = d.BST_REG
           ,@bstCodUsrOld  = d.BST_CODUSR         
      FROM BANCOSTATUS d WHERE d.BST_CODIGO=@bstCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @bstCodigoOld<>@bstCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @bstNomeOld<>@bstNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(BST_CODIGO,'OK') FROM BANCOSTATUS WHERE BST_NOME=@bstNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA BANCOSTATUS COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @bstRegOld <> @bstRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@bstRegOld,@bstRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.BANCOSTATUS
       SET BST_NOME   = @bstNomeNew
          ,BST_ATIVO  = @bstAtivoNew
          ,BST_REG    = @bstRegNew
          ,BST_CODUSR = @bstCodUsrNew
    WHERE BST_CODIGO  = @bstCodigoNew;     
    -- Gravando LOG
    IF( (@bstNomeOld<>@bstNomeNew) OR (@bstAtivoOld<>@bstAtivoNew) OR (@bstRegOld<>@bstRegNew) ) BEGIN
      INSERT INTO dbo.BKPBANCOSTATUS(
        BST_ACAO
        ,BST_CODIGO
        ,BST_NOME
        ,BST_ATIVO
        ,BST_REG
        ,BST_CODUSR) VALUES(
        'A'             -- BST_ACAO
        ,@bstCodigoNew  -- BST_CODIGO
        ,@bstNomeNew    -- BST_NOME
        ,@bstAtivoNew   -- BST_ATIVO
        ,@bstRegNew     -- BST_REG
        ,@bstCodUsrNew  -- BST_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewBANCOSTATUS_BD ON dbo.VBANCOSTATUS
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @bstCodigoOld VARCHAR(3);
  DECLARE @bstNomeOld VARCHAR(20);
  DECLARE @bstAtivoOld VARCHAR(1);
  DECLARE @bstRegOld VARCHAR(1);
  DECLARE @bstCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD06Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @bstCodigoOld   = d.BST_CODIGO
         ,@bstNomeOld    = d.BST_NOME
         ,@bstAtivoOld   = d.BST_ATIVO
         ,@bstRegOld     = d.BST_REG
         ,@bstCodUsrOld  = d.BST_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD06Old      = UP.UP_D06
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.BST_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@bstCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD06Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 06 PARA EXCLUIR NA TABELA BANCOSTATUS',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@bstRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@bstCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('BANCOSTATUS UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@bstCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('BANCOSTATUS UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.BANCOSTATUS WHERE BST_CODIGO=@bstCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPBANCOSTATUS(
      BST_ACAO
      ,BST_CODIGO
      ,BST_NOME
      ,BST_ATIVO
      ,BST_REG
      ,BST_CODUSR) VALUES(
      'E'               -- BST_ACAO
      ,@bstCodigoOld    -- BST_CODIGO
      ,@bstNomeOld      -- BST_NOME
      ,@bstAtivoOld     -- BST_ATIVO
      ,@bstRegOld       -- BST_REG
      ,@bstCodUsrOld    -- BST_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPBANCOSTATUS_BUD ON dbo.BKPBANCOSTATUS
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END

---------------------------------------------------------------
--                        C A R G O
--rgcargo
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCARGO_BI ON dbo.VCARGO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CRG_CODIGO     | OK  |    |    | VC(3) NN PK        | Codigo informado pelo usuario
  -- CRG_NOME       | OK  |    |    | VC(20) NN          | 
  -- CRG_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CRG_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- CRG_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D01      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema   
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @crgCodigoNew VARCHAR(3);
  DECLARE @crgNomeNew VARCHAR(20);
  DECLARE @crgAtivoNew VARCHAR(1);
  DECLARE @crgRegNew VARCHAR(1);
  DECLARE @crgCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD01New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @crgCodigoNew   = dbo.fncTranslate(i.CRG_CODIGO,3)
         ,@crgNomeNew    = dbo.fncTranslate(i.CRG_NOME,20)
         ,@crgAtivoNew   = UPPER(i.CRG_ATIVO)
         ,@crgRegNew     = UPPER(i.CRG_REG)
         ,@crgCodUsrNew  = i.CRG_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD01New      = UP.UP_D01
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.CRG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@crgCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD01New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 01 PARA INCLUIR NA TABELA CARGO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(CRG_CODIGO,'OK') FROM CARGO WHERE CRG_NOME=@crgNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CARGO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(CRG_NOME,'OK') FROM CARGO WHERE CRG_CODIGO=@crgCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA CARGO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @crgRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@crgRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.CARGO( 
      CRG_CODIGO
      ,CRG_NOME
      ,CRG_ATIVO
      ,CRG_REG
      ,CRG_CODUSR) VALUES(
      @crgCodigoNew   -- CRG_CODIGO
      ,@crgNomeNew    -- CRG_NOME
      ,@crgAtivoNew   -- CRG_ATIVO
      ,@crgRegNew     -- CRG_REG
      ,@crgCodUsrNew  -- CRG_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCARGO(
      CRG_ACAO
      ,CRG_CODIGO
      ,CRG_NOME
      ,CRG_ATIVO
      ,CRG_REG
      ,CRG_CODUSR) VALUES(
      'I'                       -- CRG_ACAO
      ,@crgCodigoNew            -- CRG_CODIGO
      ,@crgNomeNew              -- CRG_NOME
      ,@crgAtivoNew             -- CRG_ATIVO
      ,@crgRegNew               -- CRG_REG
      ,@crgCodUsrNew            -- CRG_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCARGO_BU ON dbo.VCARGO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @crgCodigoNew VARCHAR(3);
  DECLARE @crgNomeNew VARCHAR(20);
  DECLARE @crgAtivoNew VARCHAR(1);
  DECLARE @crgRegNew VARCHAR(1);
  DECLARE @crgCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD01New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @crgCodigoNew   = dbo.fncTranslate(i.CRG_CODIGO,3)
         ,@crgNomeNew    = dbo.fncTranslate(i.CRG_NOME,20)
         ,@crgAtivoNew   = UPPER(i.CRG_ATIVO)
         ,@crgRegNew     = UPPER(i.CRG_REG)
         ,@crgCodUsrNew  = i.CRG_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD01New      = UP.UP_D01
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.CRG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@crgCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD01New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 01 PARA ALTERAR NA TABELA CARGO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @crgCodigoOld VARCHAR(3);
    DECLARE @crgNomeOld VARCHAR(20);
    DECLARE @crgAtivoOld VARCHAR(1);
    DECLARE @crgRegOld VARCHAR(1);
    DECLARE @crgCodUsrOld INTEGER;
    SELECT @crgCodigoOld   = d.CRG_CODIGO
           ,@crgNomeOld    = d.CRG_NOME
           ,@crgAtivoOld   = d.CRG_ATIVO
           ,@crgRegOld     = d.CRG_REG
           ,@crgCodUsrOld  = d.CRG_CODUSR         
      FROM CARGO d WHERE d.CRG_CODIGO=@crgCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @crgCodigoOld<>@crgCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @crgNomeOld<>@crgNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(CRG_CODIGO,'OK') FROM CARGO WHERE CRG_NOME=@crgNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CARGO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @crgRegOld <> @crgRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@crgRegOld,@crgRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CARGO
       SET CRG_NOME   = @crgNomeNew
          ,CRG_ATIVO  = @crgAtivoNew
          ,CRG_REG    = @crgRegNew
          ,CRG_CODUSR = @crgCodUsrNew
    WHERE CRG_CODIGO  = @crgCodigoNew;     
    -- Gravando LOG
    IF( (@crgNomeOld<>@crgNomeNew) OR (@crgAtivoOld<>@crgAtivoNew) OR (@crgRegOld<>@crgRegNew) ) BEGIN
      INSERT INTO dbo.BKPCARGO(
        CRG_ACAO
        ,CRG_CODIGO
        ,CRG_NOME
        ,CRG_ATIVO
        ,CRG_REG
        ,CRG_CODUSR) VALUES(
        'A'             -- CRG_ACAO
        ,@crgCodigoNew  -- CRG_CODIGO
        ,@crgNomeNew    -- CRG_NOME
        ,@crgAtivoNew   -- CRG_ATIVO
        ,@crgRegNew     -- CRG_REG
        ,@crgCodUsrNew  -- CRG_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCARGO_BD ON dbo.VCARGO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @crgCodigoOld VARCHAR(3);
  DECLARE @crgNomeOld VARCHAR(20);
  DECLARE @crgAtivoOld VARCHAR(1);
  DECLARE @crgRegOld VARCHAR(1);
  DECLARE @crgCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD01Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @crgCodigoOld   = d.CRG_CODIGO
         ,@crgNomeOld    = d.CRG_NOME
         ,@crgAtivoOld   = d.CRG_ATIVO
         ,@crgRegOld     = d.CRG_REG
         ,@crgCodUsrOld  = d.CRG_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD01Old      = UP.UP_D01
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CRG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@crgCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD01Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 01 PARA EXCLUIR NA TABELA CARGO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@crgRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@crgCodigoOld;
    IF( @fkIntUsr > 0 )
      RAISERROR('CARGO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@crgCodigoOld;
    IF( @fkIntCnt > 0 )
      RAISERROR('CARGO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.CARGO WHERE CRG_CODIGO=@crgCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPCARGO(
      CRG_ACAO
      ,CRG_CODIGO
      ,CRG_NOME
      ,CRG_ATIVO
      ,CRG_REG
      ,CRG_CODUSR) VALUES(
      'E'               -- CRG_ACAO
      ,@crgCodigoOld    -- CRG_CODIGO
      ,@crgNomeOld      -- CRG_NOME
      ,@crgAtivoOld     -- CRG_ATIVO
      ,@crgRegOld       -- CRG_REG
      ,@crgCodUsrOld    -- CRG_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCARGO_BUD ON dbo.BKPCARGO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                      C A T E G O R I A
--trgcategoria                  
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCATEGORIA_BI ON dbo.VCATEGORIA
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CTG_CODIGO     | OK  |    |    | VC(3) NN PK        | Codigo informado pelo usuario
  -- CTG_NOME       | OK  |    |    | VC(20) NN          | 
  -- CTG_FISJUR     | CC  |    |    | VC(2) NN           | F|J|FJ  Se eh fisica ou juridica ou FJ    
  -- CTG_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CTG_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- CTG_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D12      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema   
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ctgCodigoNew VARCHAR(3);
  DECLARE @ctgNomeNew VARCHAR(20);
  DECLARE @ctgFisJurNew VARCHAR(2);
  DECLARE @ctgAtivoNew VARCHAR(1);
  DECLARE @ctgRegNew VARCHAR(1);
  DECLARE @ctgCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD12New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ctgCodigoNew   = dbo.fncTranslate(i.CTG_CODIGO,3)
         ,@ctgNomeNew    = dbo.fncTranslate(i.CTG_NOME,20)
         ,@ctgFisJurNew  = UPPER(i.CTG_FISJUR)
         ,@ctgAtivoNew   = UPPER(i.CTG_ATIVO)
         ,@ctgRegNew     = UPPER(i.CTG_REG)
         ,@ctgCodUsrNew  = i.CTG_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD12New      = UP.UP_D12
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.CTG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ctgCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD12New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 12 PARA INCLUIR NA TABELA CATEGORIA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(CTG_CODIGO,'OK') FROM CATEGORIA WHERE CTG_NOME=@ctgNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CATEGORIA COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(CTG_NOME,'OK') FROM CATEGORIA WHERE CTG_CODIGO=@ctgCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA CATEGORIA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ctgRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ctgRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.CATEGORIA( 
      CTG_CODIGO
      ,CTG_NOME
      ,CTG_FISJUR
      ,CTG_ATIVO
      ,CTG_REG
      ,CTG_CODUSR) VALUES(
      @ctgCodigoNew   -- CTG_CODIGO
      ,@ctgNomeNew    -- CTG_NOME
      ,@ctgFisJurNew  -- CTG_FISJUR
      ,@ctgAtivoNew   -- CTG_ATIVO
      ,@ctgRegNew     -- CTG_REG
      ,@ctgCodUsrNew  -- CTG_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCATEGORIA(
      CTG_ACAO
      ,CTG_CODIGO
      ,CTG_NOME
      ,CTG_FISJUR      
      ,CTG_ATIVO
      ,CTG_REG
      ,CTG_CODUSR) VALUES(
      'I'                       -- CTG_ACAO
      ,@ctgCodigoNew            -- CTG_CODIGO
      ,@ctgNomeNew              -- CTG_NOME
      ,@ctgFisJurNew            -- CTG_FISJUR      
      ,@ctgAtivoNew             -- CTG_ATIVO
      ,@ctgRegNew               -- CTG_REG
      ,@ctgCodUsrNew            -- CTG_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCATEGORIA_BU ON dbo.VCATEGORIA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ctgCodigoNew VARCHAR(3);
  DECLARE @ctgNomeNew VARCHAR(20);
  DECLARE @ctgFisJurNew VARCHAR(2);
  DECLARE @ctgAtivoNew VARCHAR(1);
  DECLARE @ctgRegNew VARCHAR(1);
  DECLARE @ctgCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD12New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ctgCodigoNew   = dbo.fncTranslate(i.CTG_CODIGO,3)
         ,@ctgNomeNew    = dbo.fncTranslate(i.CTG_NOME,20)
         ,@ctgFisJurNew  = UPPER(i.CTG_FISJUR)         
         ,@ctgAtivoNew   = UPPER(i.CTG_ATIVO)
         ,@ctgRegNew     = UPPER(i.CTG_REG)
         ,@ctgCodUsrNew  = i.CTG_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD12New      = UP.UP_D12
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.CTG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ctgCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD12New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 12 PARA ALTERAR NA TABELA CATEGORIA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ctgCodigoOld VARCHAR(3);
    DECLARE @ctgNomeOld VARCHAR(20);
    DECLARE @ctgFisJurOld VARCHAR(2);    
    DECLARE @ctgAtivoOld VARCHAR(1);
    DECLARE @ctgRegOld VARCHAR(1);
    DECLARE @ctgCodUsrOld INTEGER;
    SELECT @ctgCodigoOld   = d.CTG_CODIGO
           ,@ctgNomeOld    = d.CTG_NOME
           ,@ctgFisJurOld  = d.CTG_FISJUR
           ,@ctgAtivoOld   = d.CTG_ATIVO
           ,@ctgRegOld     = d.CTG_REG
           ,@ctgCodUsrOld  = d.CTG_CODUSR         
      FROM CATEGORIA d WHERE d.CTG_CODIGO=@ctgCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ctgCodigoOld<>@ctgCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @ctgNomeOld<>@ctgNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(CTG_CODIGO,'OK') FROM CATEGORIA WHERE CTG_NOME=@ctgNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CATEGORIA COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ctgRegOld <> @ctgRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ctgRegOld,@ctgRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CATEGORIA
       SET CTG_NOME   = @ctgNomeNew
          ,CTG_FISJUR = @ctgFisJurNew
          ,CTG_ATIVO  = @ctgAtivoNew
          ,CTG_REG    = @ctgRegNew
          ,CTG_CODUSR = @ctgCodUsrNew
    WHERE CTG_CODIGO  = @ctgCodigoNew;     
    -- Gravando LOG
    IF( (@ctgNomeOld<>@ctgNomeNew) OR (@ctgFisJurOld<>@ctgFisJurNew) OR (@ctgAtivoOld<>@ctgAtivoNew) OR (@ctgRegOld<>@ctgRegNew) ) BEGIN
      INSERT INTO dbo.BKPCATEGORIA(
        CTG_ACAO
        ,CTG_CODIGO
        ,CTG_NOME
        ,CTG_FISJUR
        ,CTG_ATIVO
        ,CTG_REG
        ,CTG_CODUSR) VALUES(
        'A'             -- CTG_ACAO
        ,@ctgCodigoNew  -- CTG_CODIGO
        ,@ctgNomeNew    -- CTG_NOME
        ,@ctgFisJurNew  -- CTG_FISJUR
        ,@ctgAtivoNew   -- CTG_ATIVO
        ,@ctgRegNew     -- CTG_REG
        ,@ctgCodUsrNew  -- CTG_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCATEGORIA_BD ON dbo.VCATEGORIA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntFvr INTEGER = 0;  -- Para procurar campo foreign key int (FAVORECIDO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ctgCodigoOld VARCHAR(3);
  DECLARE @ctgNomeOld VARCHAR(20);
  DECLARE @ctgFisJurOld VARCHAR(2);  
  DECLARE @ctgAtivoOld VARCHAR(1);
  DECLARE @ctgRegOld VARCHAR(1);
  DECLARE @ctgCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD12Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ctgCodigoOld   = d.CTG_CODIGO
         ,@ctgNomeOld    = d.CTG_NOME
         ,@ctgFisJurOld  = d.CTG_FISJUR         
         ,@ctgAtivoOld   = d.CTG_ATIVO
         ,@ctgRegOld     = d.CTG_REG
         ,@ctgCodUsrOld  = d.CTG_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD12Old = UP.UP_D12
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CTG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ctgCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD12Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 12 PARA EXCLUIR NA TABELA CATEGORIA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ctgRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK FVR_CODCTG(FAVORECIDO)
    --------------------------------------
    SELECT TOP 1 @fkIntFvr=COALESCE(FVR_CODIGO,0) FROM FAVORECIDO WHERE FVR_CODCTG=@ctgCodigoOld;
    IF( @fkIntFvr > 0 )
      RAISERROR('CATEGORIA UTILIZADO NO FAVORECIDO %i',15,1,@fkIntFvr);
    --
    --
    DELETE FROM dbo.CATEGORIA WHERE CTG_CODIGO=@ctgCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPCATEGORIA(
      CTG_ACAO
      ,CTG_CODIGO
      ,CTG_NOME
      ,CTG_FISJUR      
      ,CTG_ATIVO
      ,CTG_REG
      ,CTG_CODUSR) VALUES(
      'E'               -- CTG_ACAO
      ,@ctgCodigoOld    -- CTG_CODIGO
      ,@ctgNomeOld      -- CTG_NOME
      ,@ctgFisJurOld    -- CTG_FISJUR      
      ,@ctgAtivoOld     -- CTG_ATIVO
      ,@ctgRegOld       -- CTG_REG
      ,@ctgCodUsrOld    -- CTG_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCATEGORIA_BUD ON dbo.BKPCATEGORIA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                          C F O P
--trgcfop
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCFOP_BI ON dbo.VCFOP
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CFO_CODIGO     | OK  |    |    | VC(5) NN PK        | Codigo informado pelo usuario
  -- CFO_NOME       | OK  |    |    | VC(60) NN          | 
  -- CFO_ENTSAI     | CC  |    |    | VC(01) NN          |  
  -- CFO_RELCOMPRA  | CC  |    |    | VC(01) NN          |   
  -- CFO_RELVENDA   | CC  |    |    | VC(01) NN          |      
  -- CFO_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CFO_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- CFO_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D14      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(5) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(60)  = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  DECLARE @digito VARCHAR(1);           -- Primeiro digito do CFOP
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cfoCodigoNew VARCHAR(5);
  DECLARE @cfoNomeNew VARCHAR(60);
  DECLARE @cfoEntSaiNew VARCHAR(1);  
  DECLARE @cfoRelCompraNew VARCHAR(1);  
  DECLARE @cfoRelVendaNew VARCHAR(1);    
  DECLARE @cfoAtivoNew VARCHAR(1);
  DECLARE @cfoRegNew VARCHAR(1);
  DECLARE @cfoCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cfoCodigoNew      = dbo.fncTranslate(i.CFO_CODIGO,5)
         ,@cfoNomeNew       = dbo.fncTranslate(i.CFO_NOME,60)
         ,@cfoEntSaiNew     = UPPER(i.CFO_ENTSAI)
         ,@cfoRelCompraNew  = UPPER(i.CFO_RELCOMPRA)
         ,@cfoRelVendaNew   = UPPER(i.CFO_RELVENDA)
         ,@cfoAtivoNew      = UPPER(i.CFO_ATIVO)
         ,@cfoRegNew        = UPPER(i.CFO_REG)
         ,@cfoCodUsrNew     = i.CFO_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New         = UP.UP_D14
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.CFO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cfoCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA INCLUIR NA TABELA CFOP',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(CFO_CODIGO,'OK') FROM CFOP WHERE CFO_NOME=@cfoNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CFOP COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(CFO_NOME,'OK') FROM CFOP WHERE CFO_CODIGO=@cfoCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA CFOP %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @cfoRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@cfoRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    SET @digito=SUBSTRING(@cfoCodigoNew,1,1);
    IF( (@digito='0') OR (@digito='4') OR (@digito='8') OR (@digito='9') )
      RAISERROR('CFOP ACEITA INICIO APENAS DE 1,2,3,5,6,7',15,1);
    IF( ((@digito='1') OR (@digito='2') OR (@digito='3')) AND (@cfoEntSaiNew<>'E') )
      RAISERROR('PARA CFOP 1,2,3 FLAG DEVE SER ENTRADA',15,1);
    IF( ((@digito='5') OR (@digito='6') OR (@digito='7')) AND (@cfoEntSaiNew<>'S') )
      RAISERROR('PARA CFOP 5,6,7 FLAG DEVE SER SAIDA',15,1);
    --
    INSERT INTO dbo.CFOP( 
      CFO_CODIGO
      ,CFO_NOME
      ,CFO_ENTSAI
      ,CFO_RELCOMPRA
      ,CFO_RELVENDA
      ,CFO_ATIVO
      ,CFO_REG
      ,CFO_CODUSR) VALUES(
      @cfoCodigoNew     -- CFO_CODIGO
      ,@cfoNomeNew      -- CFO_NOME
      ,@cfoEntSaiNew    -- CFO_ENTSAI
      ,@cfoRelCompraNew -- CFO_RELCOMPRA
      ,@cfoRelVendaNew  -- CFO_RELVENDA
      ,@cfoAtivoNew     -- CFO_ATIVO
      ,@cfoRegNew       -- CFO_REG
      ,@cfoCodUsrNew    -- CFO_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCFOP(
      CFO_ACAO
      ,CFO_CODIGO
      ,CFO_NOME
      ,CFO_ENTSAI
      ,CFO_RELCOMPRA
      ,CFO_RELVENDA
      ,CFO_ATIVO
      ,CFO_REG
      ,CFO_CODUSR) VALUES(
      'I'                 -- CFO_ACAO
      ,@cfoCodigoNew      -- CFO_CODIGO
      ,@cfoNomeNew        -- CFO_NOME
      ,@cfoEntSaiNew      -- CFO_ENTSAI
      ,@cfoRelCompraNew   -- CFO_RELCOMPRA
      ,@cfoRelVendaNew    -- CFO_RELVENDA
      ,@cfoAtivoNew       -- CFO_ATIVO
      ,@cfoRegNew         -- CFO_REG
      ,@cfoCodUsrNew      -- CFO_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCFOP_BU ON dbo.VCFOP
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(5) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @cfoCodigoNew VARCHAR(5);
  DECLARE @cfoNomeNew VARCHAR(60);
  DECLARE @cfoEntSaiNew VARCHAR(1);  
  DECLARE @cfoRelCompraNew VARCHAR(1);  
  DECLARE @cfoRelVendaNew VARCHAR(1);    
  DECLARE @cfoAtivoNew VARCHAR(1);
  DECLARE @cfoRegNew VARCHAR(1);
  DECLARE @cfoCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @cfoCodigoNew      = dbo.fncTranslate(i.CFO_CODIGO,5)
         ,@cfoNomeNew       = dbo.fncTranslate(i.CFO_NOME,60)
         ,@cfoEntSaiNew     = UPPER(i.CFO_ENTSAI)
         ,@cfoRelCompraNew  = UPPER(i.CFO_RELCOMPRA)
         ,@cfoRelVendaNew   = UPPER(i.CFO_RELVENDA)
         ,@cfoAtivoNew      = UPPER(i.CFO_ATIVO)
         ,@cfoRegNew        = UPPER(i.CFO_REG)
         ,@cfoCodUsrNew     = i.CFO_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New         = UP.UP_D14
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.CFO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cfoCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA ALTERAR NA TABELA CFOP',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @cfoCodigoOld VARCHAR(5);
    DECLARE @cfoNomeOld VARCHAR(60);
    DECLARE @cfoEntSaiOld VARCHAR(1);  
    DECLARE @cfoRelCompraOld VARCHAR(1);  
    DECLARE @cfoRelVendaOld VARCHAR(1);    
    DECLARE @cfoAtivoOld VARCHAR(1);
    DECLARE @cfoRegOld VARCHAR(1);
    DECLARE @cfoCodUsrOld INTEGER;
    SELECT @cfoCodigoOld      = d.CFO_CODIGO
           ,@cfoNomeOld       = d.CFO_NOME
           ,@cfoEntSaiOld     = d.CFO_ENTSAI
           ,@cfoRelCompraOld  = d.CFO_RELCOMPRA
           ,@cfoRelVendaOld   = d.CFO_RELVENDA
           ,@cfoAtivoOld      = d.CFO_ATIVO
           ,@cfoRegOld        = d.CFO_REG
           ,@cfoCodUsrOld     = d.CFO_CODUSR         
      FROM CFOP d WHERE d.CFO_CODIGO=@cfoCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @cfoCodigoOld<>@cfoCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @cfoEntSaiOld<>@cfoEntSaiNew )
      RAISERROR('CAMPO ENTRADA/SAIDA NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @cfoNomeOld<>@cfoNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(CFO_CODIGO,'OK') FROM CFOP WHERE CFO_NOME=@cfoNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EVENTO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @cfoRegOld <> @cfoRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@cfoRegOld,@cfoRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CFOP
       SET CFO_NOME       = @cfoNomeNew
           ,CFO_ENTSAI    = @cfoEntSaiNew   
           ,CFO_RELCOMPRA = @cfoRelCompraNew
           ,CFO_RELVENDA  = @cfoRelVendaNew 
           ,CFO_ATIVO     = @cfoAtivoNew
           ,CFO_REG       = @cfoRegNew
           ,CFO_CODUSR    = @cfoCodUsrNew
    WHERE CFO_CODIGO  = @cfoCodigoNew;     
    -- Gravando LOG
    IF( (@cfoNomeOld<>@cfoNomeNew) OR (@cfoEntSaiOld<>@cfoEntSaiNew) OR (@cfoRelCompraOld<>@cfoRelCompraNew) OR (@cfoRelVendaOld<>@cfoRelVendaNew)
     OR (@cfoAtivoOld<>@cfoAtivoNew) OR (@cfoRegOld<>@cfoRegNew) ) BEGIN
      INSERT INTO dbo.BKPCFOP(
        CFO_ACAO
        ,CFO_CODIGO
        ,CFO_NOME
        ,CFO_ENTSAI
        ,CFO_RELCOMPRA
        ,CFO_RELVENDA
        ,CFO_ATIVO
        ,CFO_REG
        ,CFO_CODUSR) VALUES(
        'A'               -- CFO_ACAO
        ,@cfoCodigoNew    -- CFO_CODIGO
        ,@cfoNomeNew      -- CFO_NOME
        ,@cfoEntSaiNew    -- CFO_ENTSAI
        ,@cfoRelCompraNew -- CFO_RELCOMPRA
        ,@cfoRelVendaNew  -- CFO_RELVENDA
        ,@cfoAtivoNew     -- CFO_ATIVO
        ,@cfoRegNew       -- CFO_REG
        ,@cfoCodUsrNew    -- CFO_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCFOP_BD ON dbo.VCFOP
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntCnt INTEGER = 0; -- Para procurar campo foreign key int (CONTADOR)
  --DECLARE @fkIntEmp INTEGER = 0; -- Para procurar campo foreign key int (EMPRESA)
  --DECLARE @fkIntFll INTEGER = 0; -- Para procurar campo foreign key int (FILIAL)
  --DECLARE @fkIntFvr INTEGER = 0; -- Para procurar campo foreign key int (FAVORECIDO)
  --DECLARE @fkIntTrn INTEGER = 0; -- Para procurar campo foreign key int (TRANSPORTADORA)
  DECLARE @erroOld VARCHAR(70);  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cfoCodigoOld VARCHAR(5);
  DECLARE @cfoNomeOld VARCHAR(60);
  DECLARE @cfoEntSaiOld VARCHAR(1);  
  DECLARE @cfoRelCompraOld VARCHAR(1);  
  DECLARE @cfoRelVendaOld VARCHAR(1);    
  DECLARE @cfoAtivoOld VARCHAR(1);
  DECLARE @cfoRegOld VARCHAR(1);
  DECLARE @cfoCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD14Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cfoCodigoOld      = d.CFO_CODIGO
         ,@cfoNomeOld       = d.CFO_NOME
         ,@cfoEntSaiOld     = d.CFO_ENTSAI
         ,@cfoRelCompraOld  = d.CFO_RELCOMPRA
         ,@cfoRelVendaOld   = d.CFO_RELVENDA
         ,@cfoAtivoOld      = d.CFO_ATIVO
         ,@cfoRegOld        = d.CFO_REG
         ,@cfoCodUsrOld     = d.CFO_CODUSR         
         ,@usrApelidoOld    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14Old         = UP.UP_D14
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CFO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cfoCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD14Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA EXCLUIR NA TABELA CFOP',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@cfoRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK CNT_CODLGR(CONTADOR)
      --                EMP_CODLGR(EMPRESA)
      --                FLL_CODLGR(FILIAL)
      --                FVR_CODLGR(FAVORECIDO)
      --                TRN_CODLGR(TRANSPORTADORA)      
      ------------------------------------------
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTADOR WHERE CNT_CODLGR=@cfoCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('CFOP UTILIZADO NO CONTADOR %i',15,1,@fkIntCnt);
    --SELECT TOP 1 @fkIntEmp=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CODLGR=@cfoCodigoOld;
    --IF( @fkIntEmp > 0 )
    --  RAISERROR('CFOP UTILIZADO NA EMPRESA %i',15,1,@fkIntEmp);
    --SELECT TOP 1 @fkIntFll=COALESCE(FLL_CODIGO,0) FROM FILIAL WHERE FLL_CODLGR=@cfoCodigoOld;
    --IF( @fkIntFll > 0 )
    --  RAISERROR('CFOP UTILIZADO NA FILIAL %i',15,1,@fkIntFll);
    --SELECT TOP 1 @fkIntFvr=COALESCE(FRV_CODIGO,0) FROM FAVORECIDO WHERE FVR_CODLGR=@cfoCodigoOld;
    --IF( @fkIntFvr > 0 )
    --  RAISERROR('CFOP UTILIZADO NO FAVORECIDO %i',15,1,@fkIntFvr);
    --SELECT TOP 1 @fkIntTrn=COALESCE(TRB_CODIGO,0) FROM TRANSPORTADORA WHERE TRN_CODLGR=@cfoCodigoOld;
    --IF( @fkIntTrn > 0 )
    --  RAISERROR('CFOP UTILIZADO NA TRANSPORTADORA %i',15,1,@fkIntTrn);
    --
    DELETE FROM dbo.CFOP WHERE CFO_CODIGO=@cfoCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPCFOP(
      CFO_ACAO
      ,CFO_CODIGO
      ,CFO_NOME
      ,CFO_ENTSAI
      ,CFO_RELCOMPRA
      ,CFO_RELVENDA
      ,CFO_ATIVO
      ,CFO_REG
      ,CFO_CODUSR) VALUES(
      'E'               -- CFO_ACAO
      ,@cfoCodigoOld    -- CFO_CODIGO
      ,@cfoNomeOld      -- CFO_NOME
      ,@cfoEntSaiOld    -- CFO_ENTSAI
      ,@cfoRelCompraOld -- CFO_RELCOMPRA
      ,@cfoRelVendaOld  -- CFO_RELVENDA
      ,@cfoAtivoOld     -- CFO_ATIVO
      ,@cfoRegOld       -- CFO_REG
      ,@cfoCodUsrOld    -- CFO_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCFOP_BUD ON dbo.BKPCFOP
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                       C I D A D E
--trgcidade
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCIDADE_BI ON dbo.VCIDADE
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CDD_CODIGO     | OK  |    |    | VC(7) NN PK        | Codigo informado pelo usuario
  -- CDD_NOME       | OK  |    |    | VC(30) NN          | 
  -- CDD_CODEST     | SEL |    |    | VC(3) NN           | Campo relacionado (ESTADO)
  -- EST_NOME       | SEL |    |    | VC(30) NN          | Campo relacionado (ESTADO)     
  -- CDD_DDD        |     |    |    | INT NN             |      
  -- CDD_LATITUDE   |     |    |    | N(15,8) NN         | Latitude para comparar com rota partida/chegada
  -- CDD_LONGITUDE  |     |    |    | N(15,8) NN         | Longitude para comparar com rota partida/chegada
  -- CDD_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CDD_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- CDD_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D08      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(7) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(30)  = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cddCodigoNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @cddAtivoNew VARCHAR(1);
  DECLARE @cddCodEstNew VARCHAR(3);
  DECLARE @estNomeNew VARCHAR(30);
  DECLARE @cddDDDNew INTEGER;  
  DECLARE @cddLatitudeNew NUMERIC(15,8);
  DECLARE @cddLongitudeNew NUMERIC(15,8);
  DECLARE @cddRegNew VARCHAR(1);
  DECLARE @cddCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cddCodigoNew      = dbo.fncTranslate(i.CDD_CODIGO,7)
         ,@cddNomeNew       = dbo.fncTranslate(i.CDD_NOME,30)
         ,@cddCodEstNew     = i.CDD_CODEST
         ,@estNomeNew       = COALESCE(EST.EST_NOME,'ERRO')
         ,@cddDDDNew        = i.CDD_DDD         
         ,@cddLatitudeNew   = i.CDD_LATITUDE
         ,@cddLongitudeNew  = i.CDD_LONGITUDE
         ,@cddAtivoNew      = UPPER(i.CDD_ATIVO)
         ,@cddRegNew        = UPPER(i.CDD_REG)
         ,@cddCodUsrNew     = i.CDD_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New         = UP.UP_D08
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN ESTADO EST ON i.CDD_CODEST=EST.EST_CODIGO AND EST.EST_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.CDD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @estNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO REGIAO %s PARA ESTE REGISTRO',15,1,@cddCodEstNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cddCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA INCLUIR NA TABELA CIDADE',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(CDD_CODIGO,'OK') FROM CIDADE WHERE CDD_NOME=@cddNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CIDADE COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(CDD_NOME,'OK') FROM CIDADE WHERE CDD_CODIGO=@cddCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA CIDADE %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @cddRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@cddRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.CIDADE( 
      CDD_CODIGO
      ,CDD_NOME
      ,CDD_CODEST
      ,CDD_DDD      
      ,CDD_LATITUDE
      ,CDD_LONGITUDE
      ,CDD_ATIVO
      ,CDD_REG
      ,CDD_CODUSR) VALUES(
      @cddCodigoNew     -- CDD_CODIGO
      ,@cddNomeNew      -- CDD_NOME
      ,@cddCodEstNew    -- CDD_CODEST
      ,@cddDDDNew       -- CDD_DDD      
      ,@cddLatitudeNew  -- CDD_LATITUDE
      ,@cddLongitudeNew -- CDD_LONGITUDE
      ,@cddAtivoNew     -- CDD_ATIVO
      ,@cddRegNew       -- CDD_REG
      ,@cddCodUsrNew    -- CDD_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCIDADE(
      CDD_ACAO
      ,CDD_CODIGO
      ,CDD_NOME
      ,CDD_CODEST      
      ,CDD_DDD      
      ,CDD_LATITUDE
      ,CDD_LONGITUDE
      ,CDD_ATIVO
      ,CDD_REG
      ,CDD_CODUSR) VALUES(
      'I'                 -- CDD_ACAO
      ,@cddCodigoNew      -- CDD_CODIGO
      ,@cddNomeNew        -- CDD_NOME
      ,@cddCodEstNew      -- CDD_CODEST      
      ,@cddDDDNew         -- CDD_DDD      
      ,@cddLatitudeNew    -- CDD_LATITUDE
      ,@cddLongitudeNew   -- CDD_LONGITUDE
      ,@cddAtivoNew       -- CDD_ATIVO
      ,@cddRegNew         -- CDD_REG
      ,@cddCodUsrNew      -- CDD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCIDADE_BU ON dbo.VCIDADE
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(7) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @cddCodigoNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @cddCodEstNew VARCHAR(3);
  DECLARE @estNomeNew VARCHAR(30);
  DECLARE @cddDDDNew INTEGER;   
  DECLARE @cddLatitudeNew NUMERIC(15,8);
  DECLARE @cddLongitudeNew NUMERIC(15,8);
  DECLARE @cddAtivoNew VARCHAR(1);
  DECLARE @cddRegNew VARCHAR(1);
  DECLARE @cddCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @cddCodigoNew      = dbo.fncTranslate(i.CDD_CODIGO,7)
         ,@cddNomeNew       = dbo.fncTranslate(i.CDD_NOME,30)
         ,@cddCodEstNew     = i.CDD_CODEST
         ,@estNomeNew       = COALESCE(EST.EST_NOME,'ERRO')
         ,@cddDDDNew        = i.CDD_DDD         
         ,@cddLatitudeNew   = i.CDD_LATITUDE
         ,@cddLongitudeNew  = i.CDD_LONGITUDE
         ,@cddAtivoNew      = UPPER(i.CDD_ATIVO)
         ,@cddRegNew        = UPPER(i.CDD_REG)
         ,@cddCodUsrNew     = i.CDD_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New         = UP.UP_D08
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN ESTADO EST ON i.CDD_CODEST=EST.EST_CODIGO AND EST.EST_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.CDD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @estNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO REGIAO %s PARA ESTE REGISTRO',15,1,@cddCodEstNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cddCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA ALTERAR NA TABELA CIDADE',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @cddCodigoOld VARCHAR(7);
    DECLARE @cddNomeOld VARCHAR(30);
    DECLARE @cddCodEstOld VARCHAR(3);    
    DECLARE @cddDDDOld INTEGER;    
    DECLARE @cddLatitudeOld NUMERIC(15,8);
    DECLARE @cddLongitudeOld NUMERIC(15,8);
    DECLARE @cddAtivoOld VARCHAR(1);
    DECLARE @cddRegOld VARCHAR(1);
    DECLARE @cddCodUsrOld INTEGER;
    SELECT @cddCodigoOld      = d.CDD_CODIGO
           ,@cddNomeOld       = d.CDD_NOME
           ,@cddCodEstOld     = d.CDD_CODEST
           ,@cddDDDOld        = d.CDD_DDD           
           ,@cddLatitudeOld   = d.CDD_LATITUDE
           ,@cddLongitudeOld  = d.CDD_LONGITUDE
           ,@cddAtivoOld      = d.CDD_ATIVO
           ,@cddRegOld        = d.CDD_REG
           ,@cddCodUsrOld     = d.CDD_CODUSR         
      FROM CIDADE d WHERE d.CDD_CODIGO=@cddCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @cddCodigoOld<>@cddCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @cddNomeOld<>@cddNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(CDD_CODIGO,'OK') FROM CIDADE WHERE CDD_NOME=@cddNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EVENTO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @cddRegOld <> @cddRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@cddRegOld,@cddRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CIDADE
       SET CDD_NOME       = @cddNomeNew
          ,CDD_CODEST     = @cddCodEstNew
          ,CDD_LATITUDE   = @cddLatitudeNew
          ,CDD_LONGITUDE  = @cddLongitudeNew          
          ,CDD_ATIVO      = @cddAtivoNew
          ,CDD_REG        = @cddRegNew
          ,CDD_CODUSR     = @cddCodUsrNew
    WHERE CDD_CODIGO  = @cddCodigoNew;     
    -- Gravando LOG
    IF( (@cddNomeOld<>@cddNomeNew) OR (@cddDDDOld<>@cddDDDNew) OR (@cddCodEstOld<>@cddCodEstNew)
     OR (@cddLatitudeOld<>@cddLatitudeNew) OR (@cddLongitudeOld<>@cddLongitudeNew)    
     OR (@cddAtivoOld<>@cddAtivoNew) OR (@cddRegOld<>@cddRegNew) ) BEGIN
      INSERT INTO dbo.BKPCIDADE(
        CDD_ACAO
        ,CDD_CODIGO
        ,CDD_NOME
        ,CDD_CODEST        
        ,CDD_DDD                
        ,CDD_LATITUDE
        ,CDD_LONGITUDE
        ,CDD_ATIVO
        ,CDD_REG
        ,CDD_CODUSR) VALUES(
        'A'               -- CDD_ACAO
        ,@cddCodigoNew    -- CDD_CODIGO
        ,@cddNomeNew      -- CDD_NOME
        ,@cddCodEstNew    -- CDD_CODEST        
        ,@cddDDDNew       -- CDD_DDD        
        ,@cddLatitudeNew  -- CDD_LATITUDE
        ,@cddLongitudeNew -- CDD_LONGITUDE
        ,@cddAtivoNew     -- CDD_ATIVO
        ,@cddRegNew       -- CDD_REG
        ,@cddCodUsrNew    -- CDD_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCIDADE_BD ON dbo.VCIDADE
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntCnt INTEGER = 0;        -- Para procurar campo foreign key int (CONTADOR)
  DECLARE @fkIntEmp INTEGER = 0;        -- Para procurar campo foreign key int (EMPRESA)
  DECLARE @fkIntFll INTEGER = 0;        -- Para procurar campo foreign key int (FILIAL)
  DECLARE @fkIntFvr INTEGER = 0;        -- Para procurar campo foreign key int (FAVORECIDO)
  DECLARE @fkIntNfs INTEGER = 0;        -- Para procurar campo foreign key int (NFSERVICO)
  DECLARE @fkStrSpr VARCHAR(10) = 'OK'; -- Para procurar campo foreign key str (SERVICOPREFEITURA)
  --DECLARE @fkIntTrn INTEGER = 0;        -- Para procurar campo foreign key int (TRANSPORTADORA)
  DECLARE @erroOld VARCHAR(70);         -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cddCodigoOld VARCHAR(7);
  DECLARE @cddNomeOld VARCHAR(30);
  DECLARE @cddCodEstOld VARCHAR(3);      
  DECLARE @cddDDDOld INTEGER;  
  DECLARE @cddLatitudeOld NUMERIC(15,8);
  DECLARE @cddLongitudeOld NUMERIC(15,8);
  DECLARE @cddAtivoOld VARCHAR(1);
  DECLARE @cddRegOld VARCHAR(1);
  DECLARE @cddCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD08Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cddCodigoOld      = d.CDD_CODIGO
         ,@cddNomeOld       = d.CDD_NOME
         ,@cddCodEstOld     = d.CDD_CODEST                    
         ,@cddDDDOld        = d.CDD_DDD         
         ,@cddLatitudeOld   = d.CDD_LATITUDE
         ,@cddLongitudeOld  = d.CDD_LONGITUDE
         ,@cddAtivoOld      = d.CDD_ATIVO
         ,@cddRegOld        = d.CDD_REG
         ,@cddCodUsrOld     = d.CDD_CODUSR         
         ,@usrApelidoOld    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08Old         = UP.UP_D08
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CDD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cddCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD08Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA EXCLUIR NA TABELA CIDADE',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@cddRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK CNT_CODCDD(CONTADOR)
      --                EMP_CODCDD(EMPRESA)
      --                FLL_CODCDD(FILIAL)
      --                FVR_CODCDD(FAVORECIDO)
      --                NFS_CODCDD(NFSERVICO)      
      --                SPR_CODCDD(SERVICOPREFEITURA)      
      ------------------------------------------
    SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTADOR WHERE CNT_CODCDD=@cddCodigoOld;
    IF( @fkIntCnt > 0 )
      RAISERROR('CIDADE UTILIZADO NO CONTADOR %i',15,1,@fkIntCnt);
    SELECT TOP 1 @fkIntEmp=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CODCDD=@cddCodigoOld;
    IF( @fkIntEmp > 0 )
      RAISERROR('CIDADE UTILIZADO NA EMPRESA %i',15,1,@fkIntEmp);
    SELECT TOP 1 @fkIntFll=COALESCE(FLL_CODIGO,0) FROM FILIAL WHERE FLL_CODCDD=@cddCodigoOld;
    IF( @fkIntFll > 0 )
      RAISERROR('CIDADE UTILIZADO NA FILIAL %i',15,1,@fkIntFll);
    SELECT TOP 1 @fkIntFvr=COALESCE(FVR_CODIGO,0) FROM FAVORECIDO WHERE FVR_CODCDD=@cddCodigoOld;
    IF( @fkIntFvr > 0 )
      RAISERROR('CIDADE UTILIZADO NO FAVORECIDO %i',15,1,@fkIntFvr);
    SELECT TOP 1 @fkIntNfs=COALESCE(NFS_LANCTO,0) FROM NFSERVICO WHERE NFS_CODCDD=@cddCodigoOld;
    IF( @fkIntNfs > 0 )
      RAISERROR('CIDADE UTILIZADO NO LANCTO %i',15,1,@fkIntNfs);
    SELECT TOP 1 @fkStrSpr=COALESCE(SPR_CODIGO,'OK') FROM SERVICOPREFEITURA WHERE SPR_CODCDD=@cddCodigoOld;
    IF( @fkStrSpr <> 'OK' )
      RAISERROR('CIDADE UTILIZADA NO SERVICOPREFEITURA %s',15,1,@fkStrSpr);
    --SELECT TOP 1 @fkIntTrn=COALESCE(TRN_CODIGO,0) FROM TRANSPORTADORA WHERE TRN_CODCDD=@cddCodigoOld;
    --IF( @fkIntTrn > 0 )
    --  RAISERROR('CIDADE UTILIZADO NA TRANSPORTADORA %i',15,1,@fkIntTrn);
    --
    DELETE FROM dbo.CIDADE WHERE CDD_CODIGO=@cddCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPCIDADE(
      CDD_ACAO
      ,CDD_CODIGO
      ,CDD_NOME
      ,CDD_CODEST
      ,CDD_DDD            
      ,CDD_LATITUDE
      ,CDD_LONGITUDE
      ,CDD_ATIVO
      ,CDD_REG
      ,CDD_CODUSR) VALUES(
      'E'               -- CDD_ACAO
      ,@cddCodigoOld    -- CDD_CODIGO
      ,@cddNomeOld      -- CDD_NOME
      ,@cddCodEstOld    -- CDD_CODEST
      ,@cddDDDOld       -- CDD_DDD      
      ,@cddLatitudeOld  -- CDD_LATITUDE
      ,@cddLongitudeOld -- CDD_LONGITUDE
      ,@cddAtivoOld     -- CDD_ATIVO
      ,@cddRegOld       -- CDD_REG
      ,@cddCodUsrOld    -- CDD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCIDADE_BUD ON dbo.BKPCIDADE
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                            C O M P E T E N C I A
--trgcompetencia
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCOMPETENCIA_BI ON dbo.VCOMPETENCIA
INSTEAD OF INSERT 
AS
BEGIN
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO            |INS  |UPD |DEL | TIPO               | Obs
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CMP_CODIGO       | PK  |    |    | INT                | Campo informado 
  -- CMP_CODEMP       | PK  |    |    | INT NN             | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO      | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- CMP_NOME         |     |    |    | VC(6) NN           | Campo gerado pelo trigger JAN/18,FEV/18
  -- CMP_FECHAMENTO   | CC  |    |    | VC(1) NN           |  
  -- CMP_ATIVO        | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CMP_REG          | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- CMP_CODUSR       | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO      | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB       | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D07           | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31           | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiNome VARCHAR(6)    = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70)  = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cmpCodigoNew INTEGER;
  DECLARE @cmpCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @cmpNomeNew VARCHAR(6);
  DECLARE @cmpFechamentoNew VARCHAR(1);
  DECLARE @cmpAtivoNew VARCHAR(1);
  DECLARE @cmpRegNew VARCHAR(1);
  DECLARE @cmpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD07New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cmpCodigoNew        = i.CMP_CODIGO
         ,@cmpCodEmpNew       = i.CMP_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@cmpFechamentoNew   = UPPER(i.CMP_FECHAMENTO)
         ,@cmpAtivoNew        = UPPER(i.CMP_ATIVO)
         ,@cmpRegNew          = UPPER(i.CMP_REG)
         ,@cmpCodUsrNew       = i.CMP_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD07New           = UP.UP_D07
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.CMP_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.CMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@cmpCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cmpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD07New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 07 PARA INCLUIR NA TABELA COMPETENCIA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Se o campo ativo for "N" obrigado fechamento="N"
    ---------------------------------------------------------------------
    IF( (@cmpAtivoNew='N') AND (@cmpFechamentoNew='S') ) 
      RAISERROR('PARA REGISTRO INATIVO EM FECHAMENTO DEVE SER "N"',15,1);  
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(CMP_NOME,'OK') FROM COMPETENCIA WHERE ((CMP_CODIGO=@cmpCodigoNew) AND (CMP_CODEMP=@cmpCodEmpNew));
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA COMPETENCIA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @cmpRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@cmpRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --
    DECLARE @ano VARCHAR(2)=NULL;
    DECLARE @mes VARCHAR(3)=NULL;
    
    SET @ano=SUBSTRING(CAST(@cmpCodigoNew AS VARCHAR(6)),3,2);
    SET @mes=SUBSTRING(CAST(@cmpCodigoNew AS VARCHAR(6)),5,2);
    SET @cmpNomeNew=NULL;
    IF( @mes='01' ) SET @cmpNomeNew=CONCAT('JAN/',@ano);
    IF( @mes='02' ) SET @cmpNomeNew=CONCAT('FEV/',@ano);
    IF( @mes='03' ) SET @cmpNomeNew=CONCAT('MAR/',@ano);
    IF( @mes='04' ) SET @cmpNomeNew=CONCAT('ABR/',@ano);
    IF( @mes='05' ) SET @cmpNomeNew=CONCAT('MAI/',@ano);
    IF( @mes='06' ) SET @cmpNomeNew=CONCAT('JUN/',@ano);
    IF( @mes='07' ) SET @cmpNomeNew=CONCAT('JUL/',@ano);
    IF( @mes='08' ) SET @cmpNomeNew=CONCAT('AGO/',@ano);
    IF( @mes='09' ) SET @cmpNomeNew=CONCAT('SET/',@ano);
    IF( @mes='10' ) SET @cmpNomeNew=CONCAT('OUT/',@ano);
    IF( @mes='11' ) SET @cmpNomeNew=CONCAT('NOV/',@ano);
    IF( @mes='12' ) SET @cmpNomeNew=CONCAT('DEZ/',@ano);
    IF(@cmpNomeNew IS NULL )
      RAISERROR('COMPETENCIA INVALIDA',15,1);
    --  
    INSERT INTO dbo.COMPETENCIA( 
      CMP_CODIGO
      ,CMP_CODEMP
      ,CMP_NOME
      ,CMP_FECHAMENTO
      ,CMP_ATIVO
      ,CMP_REG
      ,CMP_CODUSR) VALUES(
      @cmpCodigoNew         -- CMP_CODIGO
      ,@cmpCodEmpNew        -- CMP_CODEMP
      ,@cmpNomeNew          -- CMP_NOME
      ,@cmpFechamentoNew    -- CMP_FECHAMENTO
      ,@cmpAtivoNew         -- CMP_ATIVO
      ,@cmpRegNew           -- CMP_REG
      ,@cmpCodUsrNew        -- CMP_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCOMPETENCIA(
      CMP_ACAO
      ,CMP_CODIGO
      ,CMP_CODEMP
      ,CMP_NOME
      ,CMP_FECHAMENTO
      ,CMP_ATIVO
      ,CMP_REG
      ,CMP_CODUSR) VALUES(
      'I'                       -- CMP_ACAO
      ,@cmpCodigoNew            -- CMP_CODIGO
      ,@cmpCodEmpNew            -- CMP_CODEMP
      ,@cmpNomeNew              -- CMP_NOME
      ,@cmpFechamentoNew        -- CMP_FECHAMENTO
      ,@cmpAtivoNew             -- CMP_ATIVO
      ,@cmpRegNew               -- CMP_REG
      ,@cmpCodUsrNew            -- CMP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCOMPETENCIA_BU ON dbo.VCOMPETENCIA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @cmpCodigoNew INTEGER;
  DECLARE @cmpCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @cmpNomeNew VARCHAR(6);
  DECLARE @cmpFechamentoNew VARCHAR(1);
  DECLARE @cmpAtivoNew VARCHAR(1);
  DECLARE @cmpRegNew VARCHAR(1);
  DECLARE @cmpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD07New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @cmpCodigoNew        = i.CMP_CODIGO
         ,@cmpCodEmpNew       = i.CMP_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@cmpNomeNew         = dbo.fncTranslate(i.CMP_NOME,6)
         ,@cmpFechamentoNew   = UPPER(i.CMP_FECHAMENTO)
         ,@cmpAtivoNew        = UPPER(i.CMP_ATIVO)
         ,@cmpRegNew          = UPPER(i.CMP_REG)
         ,@cmpCodUsrNew       = i.CMP_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD07New           = UP.UP_D07
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.CMP_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.CMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@cmpCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cmpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD07New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 07 PARA ALTERAR NA TABELA COMPETENCIA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @cmpCodigoOld INTEGER;
    DECLARE @cmpCodEmpOld INTEGER;
    DECLARE @cmpNomeOld VARCHAR(6);
    DECLARE @cmpFechamentoOld VARCHAR(1);
    DECLARE @cmpAtivoOld VARCHAR(1);
    DECLARE @cmpRegOld VARCHAR(1);
    DECLARE @cmpCodUsrOld INTEGER;
    SELECT @cmpCodigoOld        = d.CMP_CODIGO
           ,@cmpCodEmpOld       = d.CMP_CODEMP
           ,@cmpNomeOld         = d.CMP_NOME
           ,@cmpFechamentoOld   = d.CMP_FECHAMENTO
           ,@cmpAtivoOld        = d.CMP_ATIVO
           ,@cmpRegOld          = d.CMP_REG
           ,@cmpCodUsrOld       = d.CMP_CODUSR         
      FROM COMPETENCIA d WHERE ((d.CMP_CODIGO=@cmpCodigoNew) AND (d.CMP_CODEMP=@cmpCodEmpNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @cmpCodigoOld<>@cmpCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @cmpCodEmpOld<>@cmpCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    IF( @cmpNomeOld<>@cmpNomeNew )
      RAISERROR('CAMPO COMPETENCIA NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Se o campo ativo for "N" obrigado fechamento="N"
    ---------------------------------------------------------------------
    IF( (@cmpAtivoOld<>@cmpAtivoNew) OR (@cmpFechamentoOld<>@cmpFechamentoNew) ) BEGIN
      IF( (@cmpAtivoNew='N') AND (@cmpFechamentoNew='S') ) 
        RAISERROR('PARA REGISTRO INATIVO EM FECHAMENTO DEVE SER "N"',15,1);  
    END  
    --  
    UPDATE dbo.COMPETENCIA
       SET CMP_FECHAMENTO   = @cmpFechamentoNew
          ,CMP_ATIVO        = @cmpAtivoNew
          ,CMP_REG          = @cmpRegNew
          ,CMP_CODUSR       = @cmpCodUsrNew
    WHERE ((CMP_CODIGO=@cmpCodigoNew) AND (CMP_CODEMP=@cmpCodEmpNew));
    -- Gravando LOG
    IF( (@cmpFechamentoOld<>@cmpFechamentoNew) OR (@cmpAtivoOld<>@cmpAtivoNew) OR (@cmpRegOld<>@cmpRegNew) ) BEGIN
      INSERT INTO dbo.BKPCOMPETENCIA(
        CMP_ACAO
        ,CMP_CODIGO
        ,CMP_CODEMP
        ,CMP_NOME
        ,CMP_FECHAMENTO
        ,CMP_ATIVO
        ,CMP_REG
        ,CMP_CODUSR) VALUES(
        'A'                   -- CMP_ACAO
        ,@cmpCodigoNew        -- CMP_CODIGO
        ,@cmpCodEmpNew        -- CMP_CODEMP
        ,@cmpNomeNew          -- CMP_NOME
        ,@cmpFechamentoNew    -- CMP_FECHAMENTO
        ,@cmpAtivoNew         -- CMP_ATIVO
        ,@cmpRegNew           -- CMP_REG
        ,@cmpCodUsrNew        -- CMP_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCOMPETENCIA_BD ON dbo.VCOMPETENCIA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cmpCodigoOld INTEGER;
  DECLARE @cmpCodEmpOld INTEGER;
  DECLARE @cmpNomeOld VARCHAR(6);
  DECLARE @cmpFechamentoOld VARCHAR(1);
  DECLARE @cmpAtivoOld VARCHAR(1);
  DECLARE @cmpRegOld VARCHAR(1);
  DECLARE @cmpCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD07Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cmpCodigoOld        = d.CMP_CODIGO
         ,@cmpCodEmpOld       = d.CMP_CODEMP
         ,@cmpNomeOld         = d.CMP_NOME
         ,@cmpFechamentoOld   = d.CMP_FECHAMENTO
         ,@cmpAtivoOld        = d.CMP_ATIVO
         ,@cmpRegOld          = d.CMP_REG
         ,@cmpCodUsrOld       = d.CMP_CODUSR         
         ,@usrApelidoOld      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD07Old           = UP.UP_D07
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cmpCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD07Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 07 PARA EXCLUIR NA TABELA COMPETENCIA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@cmpRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@cmpCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('COMPETENCIA UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@cmpCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('COMPETENCIA UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.COMPETENCIA WHERE ((CMP_CODIGO=@cmpCodigoOld) AND (CMP_CODEMP=@cmpCodEmpOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPCOMPETENCIA(
      CMP_ACAO
      ,CMP_CODIGO
      ,CMP_CODEMP
      ,CMP_NOME
      ,CMP_FECHAMENTO
      ,CMP_ATIVO
      ,CMP_REG
      ,CMP_CODUSR) VALUES(
      'E'                   -- CMP_ACAO
      ,@cmpCodigoOld        -- CMP_CODIGO
      ,@cmpCodEmpOld        -- CMP_CODEMP
      ,@cmpNomeOld          -- CMP_NOME
      ,@cmpFechamentoOld    -- CMP_FECHAMENTO
      ,@cmpAtivoOld         -- CMP_ATIVO
      ,@cmpRegOld           -- CMP_REG
      ,@cmpCodUsrOld        -- CMP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCOMPETENCIA_BUD ON dbo.BKPCOMPETENCIA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                   C O N T A C O N T A B I L
-- trgcontacontabil
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCONTACONTABIL_BI ON dbo.VCONTACONTABIL
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CC_CODIGO      | PK  |    |    | VC(15) NN          |
  -- CC_NOME        |     |    |    | VC(40) NN          |
  -- CC_LANCTO      | CC  |    |    | VC(1) NN           |  
  -- CC_CODCTR      | SEL |    |    | VC(09) NN          | Campo relacionado (CONTARESUMO)     
  -- CTR_NOME       | SEL |    |    | VC(40) NN          | Campo relacionado (CONTARESUMO)        
  -- CC_F10         | CC  |    |    | VC(1) NN           | S|N     Se vai aparecer na rotina de ajuda(F10)
  -- CC_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CC_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- CC_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D13         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(15) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20)   = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70)  = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ccCodigoNew VARCHAR(15);
  DECLARE @ccNomeNew VARCHAR(40);
  DECLARE @ccAtivoNew VARCHAR(1);
  DECLARE @ccLanctoNew VARCHAR(1);  
  DECLARE @ccCodCtrNew VARCHAR(9);    
  DECLARE @ctrNomeNew VARCHAR(40);    
  DECLARE @ccF10New VARCHAR(1);
  DECLARE @ccRegNew VARCHAR(1);
  DECLARE @ccCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD13New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ccCodigoNew   = i.CC_CODIGO
         ,@ccNomeNew    = dbo.fncTranslate(i.CC_NOME,40)
         ,@ccLanctoNew  = UPPER(i.CC_LANCTO)
         ,@ccCodCtrNew  = i.CC_CODCTR
         ,@ctrNomeNew   = COALESCE(CTR.CTR_NOME,'ERRO')
         ,@ccF10New     = UPPER(i.CC_F10)
         ,@ccAtivoNew   = UPPER(i.CC_ATIVO)
         ,@ccRegNew     = UPPER(i.CC_REG)
         ,@ccCodUsrNew  = i.CC_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13New      = UP.UP_D13
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN CONTARESUMO CTR ON i.CC_CODCTR=CTR.CTR_CODIGO AND CTR.CTR_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.CC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ccCodUsrNew);
    IF( @ctrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CONTARESUMO %s PARA ESTE REGISTRO',15,1,@ccCodCtrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD13New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA INCLUIR NA TABELA CONTACONTABIL',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(CC_CODIGO,'OK') FROM CONTACONTABIL WHERE CC_NOME=@ccNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CONTACONTABIL COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(CC_NOME,'OK') FROM CONTACONTABIL WHERE CC_CODIGO=@ccCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA CONTACONTABIL %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ccRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ccRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.CONTACONTABIL( 
      CC_CODIGO
      ,CC_NOME
      ,CC_LANCTO
      ,CC_CODCTR
      ,CC_F10
      ,CC_ATIVO
      ,CC_REG
      ,CC_CODUSR) VALUES(
      @ccCodigoNew   -- CC_CODIGO
      ,@ccNomeNew    -- CC_NOME
      ,@ccLanctoNew  -- CC_LANCTO
      ,@ccCodCtrNew  -- CC_CODCTR
      ,@ccF10New     -- CC_F10
      ,@ccAtivoNew   -- CC_ATIVO
      ,@ccRegNew     -- CC_REG
      ,@ccCodUsrNew  -- CC_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCONTACONTABIL(
      CC_ACAO
      ,CC_CODIGO
      ,CC_NOME
      ,CC_LANCTO
      ,CC_CODCTR
      ,CC_F10      
      ,CC_ATIVO
      ,CC_REG
      ,CC_CODUSR) VALUES(
      'I'                      -- CC_ACAO
      ,@ccCodigoNew            -- CC_CODIGO
      ,@ccNomeNew              -- CC_NOME
      ,@ccLanctoNew            -- CC_LANCTO
      ,@ccCodCtrNew            -- CC_CODCTR
      ,@ccF10New               -- CC_F10
      ,@ccAtivoNew             -- CC_ATIVO
      ,@ccRegNew               -- CC_REG
      ,@ccCodUsrNew            -- CC_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCONTACONTABIL_BU ON dbo.VCONTACONTABIL
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(15) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ccCodigoNew VARCHAR(15);
  DECLARE @ccNomeNew VARCHAR(40);
  DECLARE @ccLanctoNew VARCHAR(1);  
  DECLARE @ccCodCtrNew VARCHAR(9);    
  DECLARE @ctrNomeNew VARCHAR(40);    
  DECLARE @ccF10New VARCHAR(1);  
  DECLARE @ccAtivoNew VARCHAR(1);
  DECLARE @ccRegNew VARCHAR(1);
  DECLARE @ccCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD13New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ccCodigoNew    = i.CC_CODIGO
         ,@ccNomeNew     = dbo.fncTranslate(i.CC_NOME,40)
         ,@ccLanctoNew   = UPPER(i.CC_LANCTO)
         ,@ccCodCtrNew   = i.CC_CODCTR
         ,@ctrNomeNew    = COALESCE(CTR.CTR_NOME,'ERRO')
         ,@ccF10New      = UPPER(i.CC_F10)         
         ,@ccAtivoNew    = UPPER(i.CC_ATIVO)
         ,@ccRegNew      = UPPER(i.CC_REG)
         ,@ccCodUsrNew   = i.CC_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13New      = UP.UP_D13
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN CONTARESUMO CTR ON i.CC_CODCTR=CTR.CTR_CODIGO AND CTR.CTR_ATIVO='S'        
    LEFT OUTER JOIN USUARIO USR ON i.CC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ccCodUsrNew);
    IF( @ctrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CONTARESUMO %s PARA ESTE REGISTRO',15,1,@ccCodCtrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD13New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA ALTERAR NA TABELA CONTACONTABIL',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ccCodigoOld VARCHAR(15);
    DECLARE @ccNomeOld VARCHAR(40);
    DECLARE @ccLanctoOld VARCHAR(1);  
    DECLARE @ccCodCtrOld VARCHAR(9);    
    DECLARE @ccF10Old VARCHAR(1);
    DECLARE @ccAtivoOld VARCHAR(1);
    DECLARE @ccRegOld VARCHAR(1);
    DECLARE @ccCodUsrOld INTEGER;
    SELECT @ccCodigoOld   = d.CC_CODIGO
           ,@ccNomeOld    = d.CC_NOME
           ,@ccLanctoNew  = d.CC_LANCTO
           ,@ccCodCtrNew  = d.CC_CODCTR
           ,@ccF10Old     = d.CC_F10           
           ,@ccAtivoOld   = d.CC_ATIVO
           ,@ccRegOld     = d.CC_REG
           ,@ccCodUsrOld  = d.CC_CODUSR         
      FROM CONTACONTABIL d WHERE d.CC_CODIGO=@ccCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ccCodigoOld<>@ccCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @ccNomeOld<>@ccNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(CC_CODIGO,'OK') FROM CONTACONTABIL WHERE CC_NOME=@ccNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CONTACONTABIL COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ccRegOld <> @ccRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ccRegOld,@ccRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CONTACONTABIL
       SET CC_NOME   = @ccNomeNew
          ,CC_LANCTO = @ccLanctoNew
          ,CC_CODCTR = @ccCodCtrNew
          ,CC_F10    = @ccF10New
          ,CC_ATIVO  = @ccAtivoNew
          ,CC_REG    = @ccRegNew
          ,CC_CODUSR = @ccCodUsrNew
    WHERE CC_CODIGO  = @ccCodigoNew;     
    -- Gravando LOG
    IF( (@ccNomeOld<>@ccNomeNew) OR (@ccLanctoOld<>@ccLanctoNew) OR (@ccCodCtrOld<>@ccCodCtrNew) 
     OR (@ccF10Old<>@ccF10New) OR (@ccAtivoOld<>@ccAtivoNew) OR (@ccRegOld<>@ccRegNew) ) BEGIN
      INSERT INTO dbo.BKPCONTACONTABIL(
        CC_ACAO
        ,CC_CODIGO
        ,CC_NOME
        ,CC_LANCTO
        ,CC_CODCTR        
        ,CC_F10
        ,CC_ATIVO
        ,CC_REG
        ,CC_CODUSR) VALUES(
        'A'            -- CC_ACAO
        ,@ccCodigoNew  -- CC_CODIGO
        ,@ccNomeNew    -- CC_NOME
        ,@ccLanctoNew  -- CC_LANCTO
        ,@ccCodCtrNew  -- CC_CODCTR
        ,@ccF10New     -- CC_F10
        ,@ccAtivoNew   -- CC_ATIVO
        ,@ccRegNew     -- CC_REG
        ,@ccCodUsrNew  -- CC_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCONTACONTABIL_BD ON dbo.VCONTACONTABIL
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ccCodigoOld VARCHAR(15);
  DECLARE @ccNomeOld VARCHAR(40);
  DECLARE @ccLanctoOld VARCHAR(1);  
  DECLARE @ccCodCtrOld VARCHAR(9);    
  DECLARE @ccF10Old VARCHAR(1);  
  DECLARE @ccAtivoOld VARCHAR(1);
  DECLARE @ccRegOld VARCHAR(1);
  DECLARE @ccCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD13Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ccCodigoOld   = d.CC_CODIGO
         ,@ccNomeOld    = d.CC_NOME
         ,@ccLanctoOld  = d.CC_LANCTO
         ,@ccCodCtrOld  = d.CC_CODCTR
         ,@ccF10Old     = d.CC_F10
         ,@ccAtivoOld   = d.CC_ATIVO
         ,@ccRegOld     = d.CC_REG
         ,@ccCodUsrOld  = d.CC_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13Old      = UP.UP_D13
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ccCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD13Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA EXCLUIR NA TABELA CONTACONTABIL',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ccRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@ccCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('CONTACONTABIL UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@ccCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('CONTACONTABIL UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.CONTACONTABIL WHERE CC_CODIGO=@ccCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPCONTACONTABIL(
      CC_ACAO
      ,CC_CODIGO
      ,CC_NOME
      ,CC_LANCTO
      ,CC_CODCTR
      ,CC_F10      
      ,CC_ATIVO
      ,CC_REG
      ,CC_CODUSR) VALUES(
      'E'              -- CC_ACAO
      ,@ccCodigoOld    -- CC_CODIGO
      ,@ccNomeOld      -- CC_NOME
      ,@ccLanctoOld    -- CC_LANCTO
      ,@ccCodCtrOld    -- CC_CODCTR
      ,@ccF10Old       -- CC_F10
      ,@ccAtivoOld     -- CC_ATIVO
      ,@ccRegOld       -- CC_REG
      ,@ccCodUsrOld    -- CC_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCONTACONTABIL_BUD ON dbo.BKPCONTACONTABIL
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                             C O N T A D O R
--trgcontador
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCONTADOR_BI ON dbo.VCONTADOR
INSTEAD OF INSERT 
AS
BEGIN
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO            |INS  |UPD |DEL | TIPO               | Obs
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CNT_CODIGO       | PK  |    |    | INT                |  Auto incremento
  -- CNT_NOME         |     |    |    | VC(60) NN          |  
  -- CNT_CRC          |     |    |    | VC(15) NN          |   
  -- CNT_CPF          |     |    |    | VC(14) NN          |      
  -- CNT_CODQC        | SEL |    |    | VC(4) NN           | Campo relacionado (QUALIFICACAOCONT)   
  -- QC_NOME          | SEL |    |    | VC(70) NN          | Campo relacionado (QUALIFICACAOCONT)      
  -- CNT_CODCDD       | SEL |    |    | VC(7) NN           | Campo relacionado (CIDADE)   
  -- CDD_NOME         | SEL |    |    | VC(30) NN          | Campo relacionado (CIDADE)      
  -- CNT_CNPJ         |     |    |    | VC(14) NN          |      
  -- CNT_CODLGR       | SEL |    |    | VC(5) NN           | Campo relacionado (LOGRADOURO)   
  -- LGR_NOME         | SEL |    |    | VC(20) NN          | Campo relacionado (LOGRADOURO)      
  -- CNT_ENDERECO     |     |    |    | VC(60) NN          |
  -- CNT_NUMERO       |     |    |    | VC(10) NN          |   
  -- CNT_CEP          |     |    |    | VC(8) NN           |
  -- CNT_BAIRRO       |     |    |    | VC(15) NN          |   
  -- CNT_FONE         |     |    |    | VC(10) NN          |
  -- CNT_EMAIL        |     |    |    | VC(60)             |
  -- CNT_SUFRAMA      |     |    |    | VC(9)              |
  -- CNT_CODINCTRIB   |     |    |    | VC(1) NN           | SPEDCONTRIBUICAO-Codigo indicador da incidencia tributária no período
  --                                                       |  1-Escrituracao operacoes com incidencia exclusivamente no regime não-cumulativo
  --                                                       |  2-Escrituracao operacoes com incidencia exclusivamente no regime cumulativo
  --                                                       |  3-Escrituracao operacoes com incidencia nos regimes nao-cumulativo e cumulativo
  -- CNT_INDAPROCRED  |     |    |    | VC(1) NN           | SPEDCONTRIBUICAO-Codigo indicador de método de apropriacao de créditos
  --                                                       |  1-Metodo de Apropriacao Direta
  --                                                       |  2-Metodo de Rateio Proporcional (Receita Bruta)
  -- CNT_CODTIPOCONT  |     |    |    | VC(1) NN           | SPEDCONTRIBUICAO-Codigo indicador do Tipo de Contribuicao Apurada
  --                                                       |  1-Apuracao Contribuicao Exclusivamente a Alíquota Básica
  --                                                       |  2-Apuracao Contribuicao e Alíqu Específicas (Diferenciadas e/ou por Unidade de Medida de Produto)
  -- CNT_INDREGCUM    |     |    |    | VC(1) NN           | SPEDCONTRIBUICAO-Codigo indicador do critério de escrituracao e apuracao
  --                                                       |  1-Regime de Caixa Escrituracao consolidada(Registro F500)
  --                                                       |  2-Regime de Compet - Escrituracao consolidada(Registro F550)
  --                                                       |  9-Regime de Compet - Escrituracao detalhada,com base nos registros dos Blocos A,C,D,F
  --                                                       |  *-Registro em branco
  -- CNT_CODRECPIS    |     |    |    | VC(6)              |
  -- CNT_CODRECCOFINS |     |    |    | VC(6)              |
  -- CNT_INDNATPJ     |     |    |    | VC(2)              | SPEDCONTRIBUICAO-Indicador da natureza da pessoa jurídica
  --                                                       |   00-Pessoa jurídica em geral   01–Sociedade cooperativa  02–Entidade sujeita ao PIS/Pasep
  -- CNT_INDATIV      |     |    |    | VC(1)              | SPEDCONTRIBUICAO-Indicador de tipo de atividade preponderante
  --                                                       |  0-Ind ou equiparado industria  1-Prestador serviços  2-Atividade comércio
  --                                                       |  3-Pessoas jurídicas referidas nos §§ 6º, 8º e 9º do art. 3º da Lei nº 9.718, de 1998
  --                                                       |  4-Atividade imobiliária  9-Outros
  -- CNT_CODEMP       | SEL |    |    | INT NN             | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO      | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- CNT_ATIVO        | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CNT_REG          | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- CNT_CODUSR       | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO      | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB       | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D03           | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31           | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  --DECLARE @uiNome VARCHAR(60) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cntCodigoNew INTEGER;
  DECLARE @cntNomeNew VARCHAR(60);
  DECLARE @cntCrcNew VARCHAR(15);
  DECLARE @cntCpfNew VARCHAR(14);
  DECLARE @cntCodQcNew VARCHAR(4);
  DECLARE @qcNomeNew VARCHAR(70);
  DECLARE @cntCodCddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @cntCnpjNew VARCHAR(14);
  DECLARE @cntCodLgrNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @cntEnderecoNew VARCHAR(60);
  DECLARE @cntNumeroNew VARCHAR(10);
  DECLARE @cntCepNew VARCHAR(8);
  DECLARE @cntBairroNew VARCHAR(15);
  DECLARE @cntFoneNew VARCHAR(10);
  DECLARE @cntEmailNew VARCHAR(60);
  DECLARE @cntSulframaNew VARCHAR(9);
  DECLARE @cntCodIncTribNew VARCHAR(1);
  DECLARE @cntIndAproCredNew VARCHAR(1);
  DECLARE @cntCodTipoContNew VARCHAR(1);
  DECLARE @cntIndRegNumNew VARCHAR(1);
  DECLARE @cntCodRecPisNew VARCHAR(6);
  DECLARE @cntCodRecCofinsNew VARCHAR(6);
  DECLARE @cntIndNatPjNew VARCHAR(2);
  DECLARE @cntIndAtivNew VARCHAR(1);
  DECLARE @cntCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @cntAtivoNew VARCHAR(1);
  DECLARE @cntRegNew VARCHAR(1);
  DECLARE @cntCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD03New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cntCodigoNew        = i.CNT_CODIGO
         ,@cntNomeNew         = dbo.fncTranslate(i.CNT_NOME,60)
         ,@cntCrcNew          = dbo.fncTranslate(i.CNT_CRC,15)
         ,@cntCpfNew          = dbo.fncTranslate(i.CNT_CPF,14)
         ,@cntCodQcNew        = dbo.fncTranslate(i.CNT_CODQC,4)
         ,@qcNomeNew          = COALESCE(QC.QC_NOME,'ERRO')
         ,@cntCodCddNew       = dbo.fncTranslate(i.CNT_CODCDD,7)
         ,@cddNomeNew         = COALESCE(CDD.CDD_NOME,'ERRO')
         ,@cntCnpjNew         = dbo.fncTranslate(i.CNT_CNPJ,14)
         ,@cntCodLgrNew       = dbo.fncTranslate(i.CNT_CODLGR,5)
         ,@lgrNomeNew         = COALESCE(LGR.LGR_NOME,'ERRO')
         ,@cntEnderecoNew     = dbo.fncTranslate(i.CNT_ENDERECO,60)
         ,@cntNumeroNew       = dbo.fncTranslate(i.CNT_NUMERO,10)
         ,@cntCepNew          = dbo.fncTranslate(i.CNT_CEP,8)
         ,@cntBairroNew       = dbo.fncTranslate(i.CNT_BAIRRO,15)
         ,@cntFoneNew         = dbo.fncTranslate(i.CNT_FONE,10)
         ,@cntEmailNew        = LOWER(dbo.fncTranslate(i.CNT_EMAIL,60))
         ,@cntSulframaNew     = dbo.fncTranslate(i.CNT_SUFRAMA,9)
         ,@cntCodIncTribNew   = UPPER(i.CNT_CODINCTRIB)
         ,@cntIndAproCredNew  = UPPER(i.CNT_INDAPROCRED)
         ,@cntCodTipoContNew  = UPPER(i.CNT_CODTIPOCONT)
         ,@cntIndRegNumNew    = UPPER(i.CNT_INDREGCUM)
         ,@cntCodRecPisNew    = dbo.fncTranslate(i.CNT_CODRECPIS,6)
         ,@cntCodRecCofinsNew = dbo.fncTranslate(i.CNT_CODRECCOFINS,6)
         ,@cntIndNatPjNew     = dbo.fncTranslate(i.CNT_INDNATPJ,2)
         ,@cntIndAtivNew      = UPPER(i.CNT_INDATIV)
         ,@cntCodEmpNew       = i.CNT_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@cntAtivoNew        = UPPER(i.CNT_ATIVO)
         ,@cntRegNew          = UPPER(i.CNT_REG)
         ,@cntCodUsrNew       = i.CNT_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03New           = UP.UP_D03
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN QUALIFICACAOCONT QC ON i.CNT_CODQC=QC.QC_CODIGO AND QC.QC_ATIVO='S'    
    LEFT OUTER JOIN CIDADE CDD ON i.CNT_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'
    LEFT OUTER JOIN LOGRADOURO LGR ON i.CNT_CODLGR=LGR.LGR_CODIGO AND LGR.LGR_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.CNT_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.CNT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cntCodUsrNew);
    IF( @qcNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO QUALIFICACAO %s PARA ESTE REGISTRO',15,1,@cntCodQcNew);    
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@cntCodCddNew);    
    IF( @lgrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LOGRADOURO %s PARA ESTE REGISTRO',15,1,@cntCodLgrNew);    
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@cntCodEmpNew);      
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD03New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA INCLUIR NA TABELA CONTADOR',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(CNT_CODIGO,0) FROM CONTADOR WHERE CNT_NOME=@cntNomeNew;
    --IF( @uiCodigo <> 0 )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CONTADOR COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(CNT_NOME,'OK') FROM CONTADOR WHERE CNT_CODIGO=@cntCodigoNew;
    --IF( @uiNome IS NOT NULL ) BEGIN
    --  IF( @uiNome <> 'OK' )
    --    RAISERROR('CODIGO JA CADASTRADO NA TABELA CONTADOR %s',15,1,@uiNome);
    --END  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @cntRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@cntRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.CONTADOR( 
      CNT_NOME
      ,CNT_CRC
      ,CNT_CPF
      ,CNT_CODQC
      ,CNT_CODCDD
      ,CNT_CNPJ
      ,CNT_CODLGR
      ,CNT_ENDERECO
      ,CNT_NUMERO
      ,CNT_CEP
      ,CNT_BAIRRO
      ,CNT_FONE
      ,CNT_EMAIL
      ,CNT_SUFRAMA
      ,CNT_CODINCTRIB
      ,CNT_INDAPROCRED
      ,CNT_CODTIPOCONT
      ,CNT_INDREGCUM
      ,CNT_CODRECPIS
      ,CNT_CODRECCOFINS
      ,CNT_INDNATPJ
      ,CNT_INDATIV
      ,CNT_CODEMP
      ,CNT_ATIVO
      ,CNT_REG
      ,CNT_CODUSR) VALUES(
      @cntNomeNew           -- CNT_NOME
      ,@cntCrcNew           -- CNT_CRC
      ,@cntCpfNew           -- CNT_CPF
      ,@cntCodQcNew         -- CNT_CODQC
      ,@cntCodCddNew        -- CNT_CODCDD
      ,@cntCnpjNew          -- CNT_CNPJ
      ,@cntCodLgrNew        -- CNT_CODLGR
      ,@cntEnderecoNew      -- CNT_ENDERECO
      ,@cntNumeroNew        -- CNT_NUMERO
      ,@cntCepNew           -- CNT_CEP
      ,@cntBairroNew        -- CNT_BAIRRO
      ,@cntFoneNew          -- CNT_FONE
      ,@cntEmailNew         -- CNT_EMAIL
      ,@cntSulframaNew      -- CNT_SUFRAMA
      ,@cntCodIncTribNew    -- CNT_CODINCTRIB
      ,@cntIndAproCredNew   -- CNT_INDAPROCRED
      ,@cntCodTipoContNew   -- CNT_CODTIPOCONT
      ,@cntIndRegNumNew     -- CNT_INDREGCUM
      ,@cntCodRecPisNew     -- CNT_CODRECPIS
      ,@cntCodRecCofinsNew  -- CNT_CODRECCOFINS
      ,@cntIndNatPjNew      -- CNT_INDNATPJ
      ,@cntIndAtivNew       -- CNT_INDATIV
      ,@cntCodEmpNew        -- CNT_CODEMP
      ,@cntAtivoNew         -- CNT_ATIVO
      ,@cntRegNew           -- CNT_REG
      ,@cntCodUsrNew        -- CNT_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCONTADOR(
      CNT_ACAO
      ,CNT_CODIGO
      ,CNT_NOME
      ,CNT_CRC
      ,CNT_CPF
      ,CNT_CODQC
      ,CNT_CODCDD
      ,CNT_CNPJ
      ,CNT_CODLGR
      ,CNT_ENDERECO
      ,CNT_NUMERO
      ,CNT_CEP
      ,CNT_BAIRRO
      ,CNT_FONE
      ,CNT_EMAIL
      ,CNT_SUFRAMA
      ,CNT_CODINCTRIB
      ,CNT_INDAPROCRED
      ,CNT_CODTIPOCONT
      ,CNT_INDREGCUM
      ,CNT_CODRECPIS
      ,CNT_CODRECCOFINS
      ,CNT_INDNATPJ
      ,CNT_INDATIV
      ,CNT_CODEMP
      ,CNT_ATIVO
      ,CNT_REG
      ,CNT_CODUSR) VALUES(
      'I'                         -- CNT_ACAO
      ,IDENT_CURRENT('CONTADOR')  -- CNT_CODIGO
      ,@cntNomeNew                -- CNT_NOME
      ,@cntCrcNew                 -- CNT_CRC
      ,@cntCpfNew                 -- CNT_CPF
      ,@cntCodQcNew               -- CNT_CODQC
      ,@cntCodCddNew              -- CNT_CODCDD
      ,@cntCnpjNew                -- CNT_CNPJ
      ,@cntCodLgrNew              -- CNT_CODLGR
      ,@cntEnderecoNew            -- CNT_ENDERECO
      ,@cntNumeroNew              -- CNT_NUMERO
      ,@cntCepNew                 -- CNT_CEP
      ,@cntBairroNew              -- CNT_BAIRRO
      ,@cntFoneNew                -- CNT_FONE
      ,@cntEmailNew               -- CNT_EMAIL
      ,@cntSulframaNew            -- CNT_SUFRAMA
      ,@cntCodIncTribNew          -- CNT_CODINCTRIB
      ,@cntIndAproCredNew         -- CNT_INDAPROCRED
      ,@cntCodTipoContNew         -- CNT_CODTIPOCONT
      ,@cntIndRegNumNew           -- CNT_INDREGCUM
      ,@cntCodRecPisNew           -- CNT_CODRECPIS
      ,@cntCodRecCofinsNew        -- CNT_CODRECCOFINS
      ,@cntIndNatPjNew            -- CNT_INDNATPJ
      ,@cntIndAtivNew             -- CNT_INDATIV
      ,@cntCodEmpNew              -- CNT_CODEMP
      ,@cntAtivoNew               -- CNT_ATIVO
      ,@cntRegNew                 -- CNT_REG
      ,@cntCodUsrNew              -- CNT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCONTADOR_BU ON dbo.VCONTADOR
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @cntCodigoNew INTEGER;
  DECLARE @cntNomeNew VARCHAR(60);
  DECLARE @cntCrcNew VARCHAR(15);
  DECLARE @cntCpfNew VARCHAR(14);
  DECLARE @cntCodQcNew VARCHAR(4);
  DECLARE @qcNomeNew VARCHAR(70);
  DECLARE @cntCodCddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @cntCnpjNew VARCHAR(14);
  DECLARE @cntCodLgrNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @cntEnderecoNew VARCHAR(60);
  DECLARE @cntNumeroNew VARCHAR(10);
  DECLARE @cntCepNew VARCHAR(8);
  DECLARE @cntBairroNew VARCHAR(15);
  DECLARE @cntFoneNew VARCHAR(10);
  DECLARE @cntEmailNew VARCHAR(60);
  DECLARE @cntSulframaNew VARCHAR(9);
  DECLARE @cntCodIncTribNew VARCHAR(1);
  DECLARE @cntIndAproCredNew VARCHAR(1);
  DECLARE @cntCodTipoContNew VARCHAR(1);
  DECLARE @cntIndRegNumNew VARCHAR(1);
  DECLARE @cntCodRecPisNew VARCHAR(6);
  DECLARE @cntCodRecCofinsNew VARCHAR(6);
  DECLARE @cntIndNatPjNew VARCHAR(2);
  DECLARE @cntIndAtivNew VARCHAR(1);
  DECLARE @cntCodEmpNew INTEGER
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @cntAtivoNew VARCHAR(1);
  DECLARE @cntRegNew VARCHAR(1);
  DECLARE @cntCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD03New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @cntCodigoNew        = i.CNT_CODIGO
         ,@cntNomeNew         = dbo.fncTranslate(i.CNT_NOME,60)
         ,@cntCrcNew          = dbo.fncTranslate(i.CNT_CRC,15)
         ,@cntCpfNew          = dbo.fncTranslate(i.CNT_CPF,14)
         ,@cntCodQcNew        = dbo.fncTranslate(i.CNT_CODQC,4)
         ,@qcNomeNew          = COALESCE(QC.QC_NOME,'ERRO')
         ,@cntCodCddNew       = dbo.fncTranslate(i.CNT_CODCDD,7)
         ,@cddNomeNew         = COALESCE(CDD.CDD_NOME,'ERRO')
         ,@cntCnpjNew         = dbo.fncTranslate(i.CNT_CNPJ,14)
         ,@cntCodLgrNew       = dbo.fncTranslate(i.CNT_CODLGR,5)
         ,@lgrNomeNew         = COALESCE(LGR.LGR_NOME,'ERRO')
         ,@cntEnderecoNew     = dbo.fncTranslate(i.CNT_ENDERECO,60)
         ,@cntNumeroNew       = dbo.fncTranslate(i.CNT_NUMERO,10)
         ,@cntCepNew          = dbo.fncTranslate(i.CNT_CEP,8)
         ,@cntBairroNew       = dbo.fncTranslate(i.CNT_BAIRRO,15)
         ,@cntFoneNew         = dbo.fncTranslate(i.CNT_FONE,10)
         ,@cntEmailNew        = dbo.fncTranslate(i.CNT_EMAIL,60)
         ,@cntSulframaNew     = dbo.fncTranslate(i.CNT_SUFRAMA,9)
         ,@cntCodIncTribNew   = UPPER(i.CNT_CODINCTRIB)
         ,@cntIndAproCredNew  = UPPER(i.CNT_INDAPROCRED)
         ,@cntCodTipoContNew  = UPPER(i.CNT_CODTIPOCONT)
         ,@cntIndRegNumNew    = UPPER(i.CNT_INDREGCUM)
         ,@cntCodRecPisNew    = dbo.fncTranslate(i.CNT_CODRECPIS,6)
         ,@cntCodRecCofinsNew = dbo.fncTranslate(i.CNT_CODRECCOFINS,6)
         ,@cntIndNatPjNew     = dbo.fncTranslate(i.CNT_INDNATPJ,2)
         ,@cntIndAtivNew      = UPPER(i.CNT_INDATIV)
         ,@cntCodEmpNew       = i.CNT_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@cntAtivoNew        = UPPER(i.CNT_ATIVO)
         ,@cntRegNew          = UPPER(i.CNT_REG)
         ,@cntCodUsrNew       = i.CNT_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03New           = UP.UP_D03
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN QUALIFICACAOCONT QC ON i.CNT_CODQC=QC.QC_CODIGO AND QC.QC_ATIVO='S'    
    LEFT OUTER JOIN CIDADE CDD ON i.CNT_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'
    LEFT OUTER JOIN LOGRADOURO LGR ON i.CNT_CODLGR=LGR.LGR_CODIGO AND LGR.LGR_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.CNT_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.CNT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cntCodUsrNew);
    IF( @qcNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO QUALIFICACAO %s PARA ESTE REGISTRO',15,1,@cntCodQcNew);    
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@cntCodCddNew);    
    IF( @lgrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LOGRADOURO %s PARA ESTE REGISTRO',15,1,@cntCodLgrNew);    
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@cntCodEmpNew);      
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD03New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA CONTADOR',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @cntCodigoOld INTEGER;
    DECLARE @cntNomeOld VARCHAR(60);
    DECLARE @cntCrcOld VARCHAR(15);
    DECLARE @cntCpfOld VARCHAR(14);
    DECLARE @cntCodQcOld VARCHAR(4);
    DECLARE @cntCodCddOld VARCHAR(7);
    DECLARE @cntCnpjOld VARCHAR(14);
    DECLARE @cntCodLgrOld VARCHAR(5);
    DECLARE @cntEnderecoOld VARCHAR(60);
    DECLARE @cntNumeroOld VARCHAR(10);
    DECLARE @cntCepOld VARCHAR(8);
    DECLARE @cntBairroOld VARCHAR(15);
    DECLARE @cntFoneOld VARCHAR(10);
    DECLARE @cntEmailOld VARCHAR(60);
    DECLARE @cntSulframaOld VARCHAR(9);
    DECLARE @cntCodIncTribOld VARCHAR(1);
    DECLARE @cntIndAproCredOld VARCHAR(1);
    DECLARE @cntCodTipoContOld VARCHAR(1);
    DECLARE @cntIndRegNumOld VARCHAR(1);
    DECLARE @cntCodRecPisOld VARCHAR(6);
    DECLARE @cntCodRecCofinsOld VARCHAR(6);
    DECLARE @cntIndNatPjOld VARCHAR(2);
    DECLARE @cntIndAtivOld VARCHAR(1);
    DECLARE @cntCodEmpOld INTEGER
    DECLARE @cntAtivoOld VARCHAR(1);
    DECLARE @cntRegOld VARCHAR(1);
    DECLARE @cntCodUsrOld INTEGER;
    --
    SELECT @cntCodigoOld        = d.CNT_CODIGO
           ,@cntNomeOld         = d.CNT_NOME
           ,@cntCrcOld          = d.CNT_CRC
           ,@cntCpfOld          = d.CNT_CPF
           ,@cntCodQcOld        = d.CNT_CODQC
           ,@cntCodCddOld       = d.CNT_CODCDD
           ,@cntCnpjOld         = d.CNT_CNPJ
           ,@cntCodLgrOld       = d.CNT_CODLGR
           ,@cntEnderecoOld     = d.CNT_ENDERECO
           ,@cntNumeroOld       = d.CNT_NUMERO
           ,@cntCepOld          = d.CNT_CEP
           ,@cntBairroOld       = d.CNT_BAIRRO
           ,@cntFoneOld         = d.CNT_FONE
           ,@cntEmailOld        = d.CNT_EMAIL
           ,@cntSulframaOld     = d.CNT_SUFRAMA
           ,@cntCodIncTribOld   = d.CNT_CODINCTRIB
           ,@cntIndAproCredOld  = d.CNT_INDAPROCRED
           ,@cntCodTipoContOld  = d.CNT_CODTIPOCONT
           ,@cntIndRegNumOld    = d.CNT_INDREGCUM
           ,@cntCodRecPisOld    = d.CNT_CODRECPIS
           ,@cntCodRecCofinsOld = d.CNT_CODRECCOFINS
           ,@cntIndNatPjOld     = d.CNT_INDNATPJ
           ,@cntIndAtivOld      = d.CNT_INDATIV
           ,@cntCodEmpOld       = d.CNT_CODEMP
           ,@cntAtivoOld        = d.CNT_ATIVO
           ,@cntRegOld          = d.CNT_REG
           ,@cntCodUsrOld       = d.CNT_CODUSR         
      FROM CONTADOR d WHERE d.CNT_CODIGO=@cntCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @cntCodigoOld<>@cntCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @cntCodEmpOld<>@cntCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
      
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @cntNomeOld<>@cntNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(CNT_CODIGO,0) FROM CONTADOR WHERE CNT_NOME=@cntNomeNew;
    --  IF( @uiCodigo <> 0 )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CONTADOR COM CODIGO %i',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @cntRegOld <> @cntRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@cntRegOld,@cntRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CONTADOR
       SET CNT_NOME         = @cntNomeNew
          ,CNT_CRC          = @cntCrcNew
          ,CNT_CPF          = @cntCpfNew
          ,CNT_CODQC        = @cntCodQcNew
          ,CNT_CODCDD       = @cntCodCddNew
          ,CNT_CNPJ         = @cntCnpjNew
          ,CNT_CODLGR       = @cntCodLgrNew
          ,CNT_ENDERECO     = @cntEnderecoNew
          ,CNT_NUMERO       = @cntNumeroNew
          ,CNT_CEP          = @cntCepNew
          ,CNT_BAIRRO       = @cntBairroNew
          ,CNT_FONE         = @cntFoneNew
          ,CNT_EMAIL        = @cntEmailNew
          ,CNT_SUFRAMA      = @cntSulframaNew
          ,CNT_CODINCTRIB   = @cntCodIncTribNew
          ,CNT_INDAPROCRED  = @cntIndAproCredNew
          ,CNT_CODTIPOCONT  = @cntCodTipoContNew
          ,CNT_INDREGCUM    = @cntIndRegNumNew
          ,CNT_CODRECPIS    = @cntCodRecPisNew
          ,CNT_CODRECCOFINS = @cntCodRecCofinsNew
          ,CNT_INDNATPJ     = @cntIndNatPjNew
          ,CNT_INDATIV      = @cntIndAtivNew
          ,CNT_CODEMP       = @cntCodEmpNew
          ,CNT_ATIVO        = @cntAtivoNew
          ,CNT_REG          = @cntRegNew
          ,CNT_CODUSR       = @cntCodUsrNew
    WHERE CNT_CODIGO        = @cntCodigoNew;     
    -- Gravando LOG
    IF( (@cntNomeOld<>@cntNomeNew) OR (@cntCrcOld<>@cntCrcNew) OR (@cntCpfOld<>@cntCpfNew) OR (@cntCodQcOld<>@cntCodQcNew) OR (@cntCodCddOld<>@cntCodCddNew) 
     OR (@cntCnpjOld<>@cntCnpjNew) OR (@cntCodLgrOld<>@cntCodLgrNew) OR (@cntEnderecoOld<>@cntEnderecoNew) OR (@cntNumeroOld<>@cntNumeroNew) 
     OR (@cntCepOld<>@cntCepNew) OR (@cntBairroOld<>@cntBairroNew) OR (@cntFoneOld<>@cntFoneNew) OR (@cntEmailOld<>@cntEmailNew) 
     OR (@cntSulframaOld<>@cntSulframaNew) OR (@cntCodIncTribOld<>@cntCodIncTribNew) OR (@cntIndAproCredOld<>@cntIndAproCredNew) 
     OR (@cntCodTipoContOld<>@cntCodTipoContNew) OR (@cntIndRegNumOld<>@cntIndRegNumNew) OR (@cntCodRecPisOld<>@cntCodRecPisNew) 
     OR (@cntCodRecCofinsOld<>@cntCodRecCofinsNew) OR (@cntIndNatPjOld<>@cntIndNatPjNew) OR (@cntIndAtivOld<>@cntIndAtivNew) 
     OR (@cntCodEmpOld<>@cntCodEmpNew) OR (@cntAtivoOld<>@cntAtivoNew) OR (@cntRegOld<>@cntRegNew) ) BEGIN
      INSERT INTO dbo.BKPCONTADOR(
        CNT_ACAO
        ,CNT_CODIGO
        ,CNT_NOME
        ,CNT_CRC
        ,CNT_CPF
        ,CNT_CODQC
        ,CNT_CODCDD
        ,CNT_CNPJ
        ,CNT_CODLGR
        ,CNT_ENDERECO
        ,CNT_NUMERO
        ,CNT_CEP
        ,CNT_BAIRRO
        ,CNT_FONE
        ,CNT_EMAIL
        ,CNT_SUFRAMA
        ,CNT_CODINCTRIB
        ,CNT_INDAPROCRED
        ,CNT_CODTIPOCONT
        ,CNT_INDREGCUM
        ,CNT_CODRECPIS
        ,CNT_CODRECCOFINS
        ,CNT_INDNATPJ
        ,CNT_INDATIV
        ,CNT_CODEMP
        ,CNT_ATIVO
        ,CNT_REG
        ,CNT_CODUSR) VALUES(
        'A'                         -- CNT_ACAO
        ,@cntCodigoNew              -- CNT_CODIGO
        ,@cntNomeNew                -- CNT_NOME
        ,@cntCrcNew                 -- CNT_CRC
        ,@cntCpfNew                 -- CNT_CPF
        ,@cntCodQcNew               -- CNT_CODQC
        ,@cntCodCddNew              -- CNT_CODCDD
        ,@cntCnpjNew                -- CNT_CNPJ
        ,@cntCodLgrNew              -- CNT_CODLGR
        ,@cntEnderecoNew            -- CNT_ENDERECO
        ,@cntNumeroNew              -- CNT_NUMERO
        ,@cntCepNew                 -- CNT_CEP
        ,@cntBairroNew              -- CNT_BAIRRO
        ,@cntFoneNew                -- CNT_FONE
        ,@cntEmailNew               -- CNT_EMAIL
        ,@cntSulframaNew            -- CNT_SUFRAMA
        ,@cntCodIncTribNew          -- CNT_CODINCTRIB
        ,@cntIndAproCredNew         -- CNT_INDAPROCRED
        ,@cntCodTipoContNew         -- CNT_CODTIPOCONT
        ,@cntIndRegNumNew           -- CNT_INDREGCUM
        ,@cntCodRecPisNew           -- CNT_CODRECPIS
        ,@cntCodRecCofinsNew        -- CNT_CODRECCOFINS
        ,@cntIndNatPjNew            -- CNT_INDNATPJ
        ,@cntIndAtivNew             -- CNT_INDATIV
        ,@cntCodEmpNew              -- CNT_CODEMP
        ,@cntAtivoNew               -- CNT_ATIVO
        ,@cntRegNew                 -- CNT_REG
        ,@cntCodUsrNew              -- CNT_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCONTADOR_BD ON dbo.VCONTADOR
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @cntCodigoOld INTEGER;
  DECLARE @cntNomeOld VARCHAR(60);
  DECLARE @cntCrcOld VARCHAR(15);
  DECLARE @cntCpfOld VARCHAR(14);
  DECLARE @cntCodQcOld VARCHAR(4);
  DECLARE @cntCodCddOld VARCHAR(7);
  DECLARE @cntCnpjOld VARCHAR(14);
  DECLARE @cntCodLgrOld VARCHAR(5);
  DECLARE @cntEnderecoOld VARCHAR(60);
  DECLARE @cntNumeroOld VARCHAR(10);
  DECLARE @cntCepOld VARCHAR(8);
  DECLARE @cntBairroOld VARCHAR(15);
  DECLARE @cntFoneOld VARCHAR(10);
  DECLARE @cntEmailOld VARCHAR(60);
  DECLARE @cntSulframaOld VARCHAR(9);
  DECLARE @cntCodIncTribOld VARCHAR(1);
  DECLARE @cntIndAproCredOld VARCHAR(1);
  DECLARE @cntCodTipoContOld VARCHAR(1);
  DECLARE @cntIndRegNumOld VARCHAR(1);
  DECLARE @cntCodRecPisOld VARCHAR(6);
  DECLARE @cntCodRecCofinsOld VARCHAR(6);
  DECLARE @cntIndNatPjOld VARCHAR(2);
  DECLARE @cntIndAtivOld VARCHAR(1);
  DECLARE @cntCodEmpOld INTEGER
  DECLARE @cntAtivoOld VARCHAR(1);
  DECLARE @cntRegOld VARCHAR(1);
  DECLARE @cntCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD03Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @cntCodigoOld        = d.CNT_CODIGO
         ,@cntNomeOld         = d.CNT_NOME
         ,@cntCrcOld          = d.CNT_CRC
         ,@cntCpfOld          = d.CNT_CPF
         ,@cntCodQcOld        = d.CNT_CODQC
         ,@cntCodCddOld       = d.CNT_CODCDD
         ,@cntCnpjOld         = d.CNT_CNPJ
         ,@cntCodLgrOld       = d.CNT_CODLGR
         ,@cntEnderecoOld     = d.CNT_ENDERECO
         ,@cntNumeroOld       = d.CNT_NUMERO
         ,@cntCepOld          = d.CNT_CEP
         ,@cntBairroOld       = d.CNT_BAIRRO
         ,@cntFoneOld         = d.CNT_FONE
         ,@cntEmailOld        = d.CNT_EMAIL
         ,@cntSulframaOld     = d.CNT_SUFRAMA
         ,@cntCodIncTribOld   = d.CNT_CODINCTRIB
         ,@cntIndAproCredOld  = d.CNT_INDAPROCRED
         ,@cntCodTipoContOld  = d.CNT_CODTIPOCONT
         ,@cntIndRegNumOld    = d.CNT_INDREGCUM
         ,@cntCodRecPisOld    = d.CNT_CODRECPIS
         ,@cntCodRecCofinsOld = d.CNT_CODRECCOFINS
         ,@cntIndNatPjOld     = d.CNT_INDNATPJ
         ,@cntIndAtivOld      = d.CNT_INDATIV
         ,@cntCodEmpOld       = d.CNT_CODEMP
         ,@cntAtivoOld        = d.CNT_ATIVO
         ,@cntRegOld          = d.CNT_REG
         ,@cntCodUsrOld       = d.CNT_CODUSR         
         ,@usrApelidoOld      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03Old           = UP.UP_D03
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CNT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@cntCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD03Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA EXCLUIR NA TABELA CONTADOR',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@cntRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@cntCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('CONTADOR UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@cntCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('CONTADOR UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.CONTADOR WHERE CNT_CODIGO=@cntCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPCONTADOR(
      CNT_ACAO
      ,CNT_CODIGO
      ,CNT_NOME
      ,CNT_CRC
      ,CNT_CPF
      ,CNT_CODQC
      ,CNT_CODCDD
      ,CNT_CNPJ
      ,CNT_CODLGR
      ,CNT_ENDERECO
      ,CNT_NUMERO
      ,CNT_CEP
      ,CNT_BAIRRO
      ,CNT_FONE
      ,CNT_EMAIL
      ,CNT_SUFRAMA
      ,CNT_CODINCTRIB
      ,CNT_INDAPROCRED
      ,CNT_CODTIPOCONT
      ,CNT_INDREGCUM
      ,CNT_CODRECPIS
      ,CNT_CODRECCOFINS
      ,CNT_INDNATPJ
      ,CNT_INDATIV
      ,CNT_CODEMP
      ,CNT_ATIVO
      ,CNT_REG
      ,CNT_CODUSR) VALUES(
      'E'                         -- CNT_ACAO
      ,@cntCodigoOld              -- CNT_CODIGO
      ,@cntNomeOld                -- CNT_NOME
      ,@cntCrcOld                 -- CNT_CRC
      ,@cntCpfOld                 -- CNT_CPF
      ,@cntCodQcOld               -- CNT_CODQC
      ,@cntCodCddOld              -- CNT_CODCDD
      ,@cntCnpjOld                -- CNT_CNPJ
      ,@cntCodLgrOld              -- CNT_CODLGR
      ,@cntEnderecoOld            -- CNT_ENDERECO
      ,@cntNumeroOld              -- CNT_NUMERO
      ,@cntCepOld                 -- CNT_CEP
      ,@cntBairroOld              -- CNT_BAIRRO
      ,@cntFoneOld                -- CNT_FONE
      ,@cntEmailOld               -- CNT_EMAIL
      ,@cntSulframaOld            -- CNT_SUFRAMA
      ,@cntCodIncTribOld          -- CNT_CODINCTRIB
      ,@cntIndAproCredOld         -- CNT_INDAPROCRED
      ,@cntCodTipoContOld         -- CNT_CODTIPOCONT
      ,@cntIndRegNumOld           -- CNT_INDREGCUM
      ,@cntCodRecPisOld           -- CNT_CODRECPIS
      ,@cntCodRecCofinsOld        -- CNT_CODRECCOFINS
      ,@cntIndNatPjOld            -- CNT_INDNATPJ
      ,@cntIndAtivOld             -- CNT_INDATIV
      ,@cntCodEmpOld              -- CNT_CODEMP
      ,@cntAtivoOld               -- CNT_ATIVO
      ,@cntRegOld                 -- CNT_REG
      ,@cntCodUsrOld              -- CNT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCONTADOR_BUD ON dbo.BKPCONTADOR
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                        C O N T A R E S U M O
-- trgcontaresumo
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCONTARESUMO_BI ON dbo.VCONTARESUMO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CTR_CODIGO     | PK  |    |    | VC(9) NN           |
  -- CTR_NOME       |     |    |    | VC(40) NN          |
  -- CTR_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CTR_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- CTR_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D13         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ctrCodigoNew VARCHAR(9);
  DECLARE @ctrNomeNew VARCHAR(40);
  DECLARE @ctrAtivoNew VARCHAR(1);
  DECLARE @ctrRegNew VARCHAR(1);
  DECLARE @ctrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD13New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ctrCodigoNew   = i.CTR_CODIGO
         ,@ctrNomeNew    = dbo.fncTranslate(i.CTR_NOME,40)
         ,@ctrAtivoNew   = UPPER(i.CTR_ATIVO)
         ,@ctrRegNew     = UPPER(i.CTR_REG)
         ,@ctrCodUsrNew  = i.CTR_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13New      = UP.UP_D13
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.CTR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ctrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD13New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA INCLUIR NA TABELA CONTARESUMO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(CTR_CODIGO,'OK') FROM CONTARESUMO WHERE CTR_NOME=@ctrNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CONTARESUMO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(CTR_NOME,'OK') FROM CONTARESUMO WHERE CTR_CODIGO=@ctrCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA CONTARESUMO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ctrRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ctrRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.CONTARESUMO( 
      CTR_CODIGO
      ,CTR_NOME
      ,CTR_ATIVO
      ,CTR_REG
      ,CTR_CODUSR) VALUES(
      @ctrCodigoNew   -- CTR_CODIGO
      ,@ctrNomeNew    -- CTR_NOME
      ,@ctrAtivoNew   -- CTR_ATIVO
      ,@ctrRegNew     -- CTR_REG
      ,@ctrCodUsrNew  -- CTR_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCONTARESUMO(
      CTR_ACAO
      ,CTR_CODIGO
      ,CTR_NOME
      ,CTR_ATIVO
      ,CTR_REG
      ,CTR_CODUSR) VALUES(
      'I'                       -- CTR_ACAO
      ,@ctrCodigoNew            -- CTR_CODIGO
      ,@ctrNomeNew              -- CTR_NOME
      ,@ctrAtivoNew             -- CTR_ATIVO
      ,@ctrRegNew               -- CTR_REG
      ,@ctrCodUsrNew            -- CTR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCONTARESUMO_BU ON dbo.VCONTARESUMO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ctrCodigoNew VARCHAR(9);
  DECLARE @ctrNomeNew VARCHAR(40);
  DECLARE @ctrAtivoNew VARCHAR(1);
  DECLARE @ctrRegNew VARCHAR(1);
  DECLARE @ctrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD13New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ctrCodigoNew   = i.CTR_CODIGO
         ,@ctrNomeNew    = dbo.fncTranslate(i.CTR_NOME,40)
         ,@ctrAtivoNew   = UPPER(i.CTR_ATIVO)
         ,@ctrRegNew     = UPPER(i.CTR_REG)
         ,@ctrCodUsrNew  = i.CTR_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13New      = UP.UP_D13
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.CTR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ctrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD13New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA ALTERAR NA TABELA CONTARESUMO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ctrCodigoOld VARCHAR(9);
    DECLARE @ctrNomeOld VARCHAR(40);
    DECLARE @ctrAtivoOld VARCHAR(1);
    DECLARE @ctrRegOld VARCHAR(1);
    DECLARE @ctrCodUsrOld INTEGER;
    SELECT @ctrCodigoOld   = d.CTR_CODIGO
           ,@ctrNomeOld    = d.CTR_NOME
           ,@ctrAtivoOld   = d.CTR_ATIVO
           ,@ctrRegOld     = d.CTR_REG
           ,@ctrCodUsrOld  = d.CTR_CODUSR         
      FROM CONTARESUMO d WHERE d.CTR_CODIGO=@ctrCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ctrCodigoOld<>@ctrCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @ctrNomeOld<>@ctrNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(CTR_CODIGO,'OK') FROM CONTARESUMO WHERE CTR_NOME=@ctrNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CONTARESUMO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ctrRegOld <> @ctrRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ctrRegOld,@ctrRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CONTARESUMO
       SET CTR_NOME   = @ctrNomeNew
          ,CTR_ATIVO  = @ctrAtivoNew
          ,CTR_REG    = @ctrRegNew
          ,CTR_CODUSR = @ctrCodUsrNew
    WHERE CTR_CODIGO  = @ctrCodigoNew;     
    -- Gravando LOG
    IF( (@ctrNomeOld<>@ctrNomeNew) OR (@ctrAtivoOld<>@ctrAtivoNew) OR (@ctrRegOld<>@ctrRegNew) ) BEGIN
      INSERT INTO dbo.BKPCONTARESUMO(
        CTR_ACAO
        ,CTR_CODIGO
        ,CTR_NOME
        ,CTR_ATIVO
        ,CTR_REG
        ,CTR_CODUSR) VALUES(
        'A'             -- CTR_ACAO
        ,@ctrCodigoNew  -- CTR_CODIGO
        ,@ctrNomeNew    -- CTR_NOME
        ,@ctrAtivoNew   -- CTR_ATIVO
        ,@ctrRegNew     -- CTR_REG
        ,@ctrCodUsrNew  -- CTR_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCONTARESUMO_BD ON dbo.VCONTARESUMO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkStrCc VARCHAR(15) = 'OK';  -- Para procurar campo foreign key str (CONTACONTABIL)
  DECLARE @erroOld VARCHAR(70);         -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ctrCodigoOld VARCHAR(9);
  DECLARE @ctrNomeOld VARCHAR(40);
  DECLARE @ctrAtivoOld VARCHAR(1);
  DECLARE @ctrRegOld VARCHAR(1);
  DECLARE @ctrCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD13Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ctrCodigoOld   = d.CTR_CODIGO
         ,@ctrNomeOld    = d.CTR_NOME
         ,@ctrAtivoOld   = d.CTR_ATIVO
         ,@ctrRegOld     = d.CTR_REG
         ,@ctrCodUsrOld  = d.CTR_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD13Old      = UP.UP_D13
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CTR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ctrCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD13Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 13 PARA EXCLUIR NA TABELA CONTARESUMO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ctrRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    -------------------------------------------
    --   Checando a FK CC_CODCTR(CONTACONTABIL)
    -------------------------------------------
    SELECT TOP 1 @fkStrCc=COALESCE(CC_CODIGO,'OK') FROM CONTACONTABIL WHERE CC_CODCTR=@ctrCodigoOld;
    IF( @fkStrCc <> 'OK' )
      RAISERROR('CONTARESUMO UTILIZADO NA CONTA CONTABIL %s',15,1,@fkStrCc);
    --  
    DELETE FROM dbo.CONTARESUMO WHERE CTR_CODIGO=@ctrCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPCONTARESUMO(
      CTR_ACAO
      ,CTR_CODIGO
      ,CTR_NOME
      ,CTR_ATIVO
      ,CTR_REG
      ,CTR_CODUSR) VALUES(
      'E'               -- CTR_ACAO
      ,@ctrCodigoOld    -- CTR_CODIGO
      ,@ctrNomeOld      -- CTR_NOME
      ,@ctrAtivoOld     -- CTR_ATIVO
      ,@ctrRegOld       -- CTR_REG
      ,@ctrCodUsrOld    -- CTR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCONTARESUMO_BUD ON dbo.BKPCONTARESUMO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                    C N A B E R R O
--trgcnaberro
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCNABERRO_BI ON dbo.VCNABERRO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- ERR_CODBCD     | OK  |    |    | VC(6) NN PK        | Campo relacionado (BANCOCODIGO)
  -- BCD_NOME       | SEL |    |    | VC(30) NN          | Campo relacionado (BANCOCODIGO)
  -- ERR_CODPTP     | SEL |    |    | VC(2) NN PK        | Campo relacionado (PAGARTIPO)
  -- PTP_NOME       | SEL |    |    | VC(25) NN          | Campo relacionado (PAGARTIPO)     
  -- ERR_CODIGO     |     |    |    | VC(10) NN PK       |   
  -- ERR_NOME       |     |    |    | VC(100) NN         | 
  -- ERR_EXECUTA    |     |    |    | VC(1) NN           | [BAIXA][REJEITA][PROTESTO][ACEITO]    
  -- ERR_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- ERR_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- ERR_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D30      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @errCodBcdNew VARCHAR(6);
  DECLARE @bcdNomeNew VARCHAR(30);
  DECLARE @errCodPtpNew VARCHAR(2);
  DECLARE @ptpNomeNew VARCHAR(25);
  DECLARE @errCodigoNew VARCHAR(10);  
  DECLARE @errNomeNew VARCHAR(100);
  DECLARE @errExecutaNew VARCHAR(1);
  DECLARE @errAtivoNew VARCHAR(1);
  DECLARE @errRegNew VARCHAR(1);
  DECLARE @errCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD30New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @errCodBcdNew      = i.ERR_CODBCD
         ,@bcdNomeNew       = COALESCE(BCD.BCD_NOME,'ERRO')
         ,@errCodPtpNew     = i.ERR_CODPTP
         ,@ptpNomeNew       = COALESCE(PTP.PTP_NOME,'ERRO')
         ,@errCodigoNew     = dbo.fncTranslate(i.ERR_CODIGO,10)         
         ,@errNomeNew       = dbo.fncTranslate(i.ERR_NOME,100)         
         ,@errExecutaNew    = dbo.fncTranslate(i.ERR_EXECUTA,1)         
         ,@errAtivoNew      = UPPER(i.ERR_ATIVO)
         ,@errRegNew        = UPPER(i.ERR_REG)
         ,@errCodUsrNew     = i.ERR_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30New         = UP.UP_D30
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN BANCOCODIGO BCD ON i.ERR_CODBCD=BCD.BCD_CODIGO AND BCD.BCD_ATIVO='S'
    LEFT OUTER JOIN PAGARTIPO PTP ON i.ERR_CODPTP=PTP.PTP_CODIGO AND PTP.PTP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.ERR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @bcdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO BANCO %s PARA ESTE REGISTRO',15,1,@errCodBcdNew);
    IF( @ptpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO %s PARA ESTE REGISTRO',15,1,@errCodPtpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@errCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD30New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA INCLUIR NA TABELA CNABERRO',15,1,@usrApelidoNew);
    IF( @errRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@errRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.CNABERRO( 
      ERR_CODBCD
      ,ERR_CODPTP
      ,ERR_CODIGO
      ,ERR_NOME
      ,ERR_EXECUTA
      ,ERR_ATIVO
      ,ERR_REG
      ,ERR_CODUSR) VALUES(
      @errCodBcdNew     -- ERR_CODBCD
      ,@errCodPtpNew    -- ERR_CODPTP
      ,@errCodigoNew    -- ERR_CODIGO
      ,@errNomeNew      -- ERR_NOME
      ,@errExecutaNew   -- ERR_EXECUTA
      ,@errAtivoNew     -- ERR_ATIVO
      ,@errRegNew       -- ERR_REG
      ,@errCodUsrNew    -- ERR_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCNABERRO(
      ERR_ACAO
      ,ERR_CODBCD
      ,ERR_CODPTP
      ,ERR_CODIGO
      ,ERR_NOME
      ,ERR_EXECUTA
      ,ERR_ATIVO
      ,ERR_REG
      ,ERR_CODUSR) VALUES(
      'I'                 -- ERR_ACAO
      ,@errCodBcdNew      -- ERR_CODBCD
      ,@errCodPtpNew      -- ERR_CODPTP
      ,@errCodigoNew      -- ERR_CODIGO
      ,@errNomeNew        -- ERR_NOME
      ,@errExecutaNew     -- ERR_EXECUTA
      ,@errAtivoNew       -- ERR_ATIVO
      ,@errRegNew         -- ERR_REG
      ,@errCodUsrNew      -- ERR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCNABERRO_BU ON dbo.VCNABERRO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @errCodBcdNew VARCHAR(6);
  DECLARE @bcdNomeNew VARCHAR(30);
  DECLARE @errCodPtpNew VARCHAR(2);
  DECLARE @ptpNomeNew VARCHAR(25);
  DECLARE @errCodigoNew VARCHAR(10);  
  DECLARE @errNomeNew VARCHAR(100);
  DECLARE @errExecutaNew VARCHAR(1);
  DECLARE @errAtivoNew VARCHAR(1);
  DECLARE @errRegNew VARCHAR(1);
  DECLARE @errCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD30New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @errCodBcdNew      = i.ERR_CODBCD
         ,@bcdNomeNew       = COALESCE(BCD.BCD_NOME,'ERRO')
         ,@errCodPtpNew     = i.ERR_CODPTP
         ,@ptpNomeNew       = COALESCE(PTP.PTP_NOME,'ERRO')
         ,@errCodigoNew     = dbo.fncTranslate(i.ERR_CODIGO,10)         
         ,@errNomeNew       = dbo.fncTranslate(i.ERR_NOME,100)
         ,@errExecutaNew    = dbo.fncTranslate(i.ERR_EXECUTA,1)         
         ,@errAtivoNew      = UPPER(i.ERR_ATIVO)
         ,@errRegNew        = UPPER(i.ERR_REG)
         ,@errCodUsrNew     = i.ERR_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30New         = UP.UP_D30
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN BANCOCODIGO BCD ON i.ERR_CODBCD=BCD.BCD_CODIGO AND BCD.BCD_ATIVO='S'
    LEFT OUTER JOIN PAGARTIPO PTP ON i.ERR_CODPTP=PTP.PTP_CODIGO AND PTP.PTP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.ERR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @bcdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO BANCO %s PARA ESTE REGISTRO',15,1,@errCodBcdNew);
    IF( @ptpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO %s PARA ESTE REGISTRO',15,1,@errCodPtpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@errCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD30New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA ALTERAR NA TABELA CNABERRO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @errCodBcdOld VARCHAR(6);
    DECLARE @errCodPtpOld VARCHAR(2);
    DECLARE @errCodigoOld VARCHAR(10);  
    DECLARE @errNomeOld VARCHAR(100);
    DECLARE @errExecutaOld VARCHAR(1);
    DECLARE @errAtivoOld VARCHAR(1);
    DECLARE @errRegOld VARCHAR(1);
    DECLARE @errCodUsrOld INTEGER;
    SELECT @errCodBcdOld    = d.ERR_CODBCD
           ,@errCodPtpOld   = d.ERR_CODPTP
           ,@errCodigoOld   = d.ERR_CODIGO
           ,@errNomeOld     = d.ERR_NOME
           ,@errExecutaOld  = d.ERR_EXECUTA
           ,@errAtivoOld    = d.ERR_ATIVO
           ,@errRegOld      = d.ERR_REG
           ,@errCodUsrOld   = d.ERR_CODUSR         
      FROM CNABERRO d WHERE ((d.ERR_CODBCD=@errCodBcdNew) AND (d.ERR_CODPTP=@errCodPtpNew) AND (d.ERR_CODIGO=@errCodigoNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @errCodBcdOld<>@errCodBcdNew )
      RAISERROR('CAMPO BANCO NAO PODE SER ALTERADO',15,1);  
    IF( @errCodPtpOld<>@errCodPtpNew )
      RAISERROR('CAMPO TIPO NAO PODE SER ALTERADO',15,1);  
    IF( @errCodigoOld<>@errCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @errRegOld <> @errRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@errRegOld,@errRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CNABERRO
       SET ERR_NOME       = @errNomeNew
          ,ERR_EXECUTA    = @errExecutaNew
          ,ERR_ATIVO      = @errAtivoNew
          ,ERR_REG        = @errRegNew
          ,ERR_CODUSR     = @errCodUsrNew
    WHERE ((ERR_CODBCD=@errCodBcdNew) AND (ERR_CODPTP=@errCodPtpNew) AND (ERR_CODIGO=@errCodigoNew));       
    -- Gravando LOG
    IF( (@errNomeOld<>@errNomeNew) OR (@errExecutaOld<>@errExecutaNew) OR (@errAtivoOld<>@errAtivoNew) OR (@errRegOld<>@errRegNew) ) BEGIN
      INSERT INTO dbo.BKPCNABERRO(
        ERR_ACAO
        ,ERR_CODBCD
        ,ERR_CODPTP
        ,ERR_CODIGO
        ,ERR_NOME
        ,ERR_EXECUTA
        ,ERR_ATIVO
        ,ERR_REG
        ,ERR_CODUSR) VALUES(
        'A'                 -- ERR_ACAO
        ,@errCodBcdNew      -- ERR_CODBCD
        ,@errCodPtpNew      -- ERR_CODPTP
        ,@errCodigoNew      -- ERR_CODIGO
        ,@errNomeNew        -- ERR_NOME
        ,@errExecutaNew     -- ERR_EXECUTA
        ,@errAtivoNew       -- ERR_ATIVO
        ,@errRegNew         -- ERR_REG
        ,@errCodUsrNew      -- ERR_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCNABERRO_BD ON dbo.VCNABERRO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkStrEst VARCHAR(3) = 'OK'; -- Para procurar campo foreign key str (ESTADO)
  DECLARE @erroOld VARCHAR(70);        -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @errCodBcdOld VARCHAR(6);
  DECLARE @errCodPtpOld VARCHAR(2);
  DECLARE @errCodigoOld VARCHAR(10);  
  DECLARE @errNomeOld VARCHAR(100);
  DECLARE @errExecutaOld VARCHAR(1);
  DECLARE @errAtivoOld VARCHAR(1);
  DECLARE @errRegOld VARCHAR(1);
  DECLARE @errCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD30Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @errCodBcdOld    = d.ERR_CODBCD
         ,@errCodPtpOld   = d.ERR_CODPTP
         ,@errCodigoOld   = d.ERR_CODIGO
         ,@errNomeOld     = d.ERR_NOME
         ,@errExecutaOld  = d.ERR_EXECUTA
         ,@errAtivoOld    = d.ERR_ATIVO
         ,@errRegOld      = d.ERR_REG
         ,@errCodUsrOld   = d.ERR_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30Old       = UP.UP_D30
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.ERR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@errCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD30Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA EXCLUIR NA TABELA CNABERRO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@errRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK EST_CODREG(ESTADO)
      ------------------------------------------
    --SELECT TOP 1 @fkStrEst=COALESCE(EST_CODIGO,'OK') FROM ESTADO WHERE EST_CODREG=@errCodBcdOld;
    --IF( @fkStrEst <> 'OK' )
    --  RAISERROR('CNABERRO UTILIZADA NO ESTADO %s',15,1,@fkStrEst);
    --
    DELETE FROM dbo.CNABERRO WHERE ((ERR_CODBCD=@errCodBcdOld) AND (ERR_CODPTP=@errCodPtpOld) AND (ERR_CODIGO=@errCodigoOld));       
    -- Gravando LOG
    INSERT INTO dbo.BKPCNABERRO(
      ERR_ACAO
      ,ERR_CODBCD
      ,ERR_CODPTP
      ,ERR_CODIGO
      ,ERR_NOME
      ,ERR_EXECUTA
      ,ERR_ATIVO
      ,ERR_REG
      ,ERR_CODUSR) VALUES(
      'E'                 -- ERR_ACAO
      ,@errCodBcdOld      -- ERR_CODBCD
      ,@errCodPtpOld      -- ERR_CODPTP
      ,@errCodigoOld      -- ERR_CODIGO
      ,@errNomeOld        -- ERR_NOME
      ,@errExecutaOld     -- ERR_EXECUTA
      ,@errAtivoOld       -- ERR_ATIVO
      ,@errRegOld         -- ERR_REG
      ,@errCodUsrOld      -- ERR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCNABERRO_BUD ON dbo.BKPCNABERRO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                    C N A B I N S T R U C A O
--trgcnabinstrucao
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCNABINSTRUCAO_BI ON dbo.VCNABINSTRUCAO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS   |UPD |DEL | TIPO               | Obs
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------
  -- CI_CODBCD      |PK/SEL|    |    | VC(6) NN           | Campo relacionado (BANCOCODIGO)      
  -- BCD_NOME       | SEL  |    |    | VC(20) NN          | Campo relacionado (BANCOCODIGO)         
  -- CI_CODIGO      | PK   |    |    | VC(6) NN           | Campo informado
  -- CI_NOME        |      |    |    | VC(30) NN          |
  -- CI_ATIVO       | CC   |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CI_REG         | FNC  |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- CI_CODUSR      | OK   |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL  |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL  |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D30         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ----------------------------------------------------------------------------------------------------------------
  SET NOCOUNT ON;  
  DECLARE @cioNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ciCodBcdNew VARCHAR(6);
  DECLARE @bcdNomeNew VARCHAR(30);
  DECLARE @ciCodigoNew VARCHAR(10);  
  DECLARE @ciNomeNew VARCHAR(30);
  DECLARE @ciAtivoNew VARCHAR(1);
  DECLARE @ciRegNew VARCHAR(1);
  DECLARE @ciCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD30New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ciCodBcdNew      = i.CI_CODBCD
         ,@bcdNomeNew       = COALESCE(BCD.BCD_NOME,'ERRO')
         ,@ciCodigoNew     = dbo.fncTranslate(i.CI_CODIGO,10)         
         ,@ciNomeNew       = dbo.fncTranslate(i.CI_NOME,30)         
         ,@ciAtivoNew      = UPPER(i.CI_ATIVO)
         ,@ciRegNew        = UPPER(i.CI_REG)
         ,@ciCodUsrNew     = i.CI_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30New         = UP.UP_D30
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN BANCOCODIGO BCD ON i.CI_CODBCD=BCD.BCD_CODIGO AND BCD.BCD_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.CI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @bcdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO BANCO %s PARA ESTE REGISTRO',15,1,@ciCodBcdNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ciCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD30New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA INCLUIR NA TABELA CNABINSTRUCAO',15,1,@usrApelidoNew);
    IF( @ciRegNew <> 'P' ) BEGIN
      SET @cioNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ciRegNew,@upD31New );
      IF( @cioNew != 'OK' )
        RAISERROR(@cioNew,15,1);
    END    
    --  
    INSERT INTO dbo.CNABINSTRUCAO( 
      CI_CODBCD
      ,CI_CODIGO
      ,CI_NOME
      ,CI_ATIVO
      ,CI_REG
      ,CI_CODUSR) VALUES(
      @ciCodBcdNew     -- CI_CODBCD
      ,@ciCodigoNew    -- CI_CODIGO
      ,@ciNomeNew      -- CI_NOME
      ,@ciAtivoNew     -- CI_ATIVO
      ,@ciRegNew       -- CI_REG
      ,@ciCodUsrNew    -- CI_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCNABINSTRUCAO(
      CI_ACAO
      ,CI_CODBCD
      ,CI_CODIGO
      ,CI_NOME
      ,CI_ATIVO
      ,CI_REG
      ,CI_CODUSR) VALUES(
      'I'                 -- CI_ACAO
      ,@ciCodBcdNew      -- CI_CODBCD
      ,@ciCodigoNew      -- CI_CODIGO
      ,@ciNomeNew        -- CI_NOME
      ,@ciAtivoNew       -- CI_ATIVO
      ,@ciRegNew         -- CI_REG
      ,@ciCodUsrNew      -- CI_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ciorMessage NVARCHAR(4000);
    DECLARE @ciorSeverity INT;
    DECLARE @ciorState INT;
    SELECT @ciorMessage=ERROR_MESSAGE(),@ciorSeverity=ERROR_SEVERITY(),@ciorState=ERROR_STATE();
    RAISERROR(@ciorMessage, @ciorSeverity, @ciorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCNABINSTRUCAO_BU ON dbo.VCNABINSTRUCAO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @cioNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ciCodBcdNew VARCHAR(6);
  DECLARE @bcdNomeNew VARCHAR(30);
  DECLARE @ciCodigoNew VARCHAR(10);  
  DECLARE @ciNomeNew VARCHAR(30);
  DECLARE @ciAtivoNew VARCHAR(1);
  DECLARE @ciRegNew VARCHAR(1);
  DECLARE @ciCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD30New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ciCodBcdNew      = i.CI_CODBCD
         ,@bcdNomeNew       = COALESCE(BCD.BCD_NOME,'ERRO')
         ,@ciCodigoNew     = dbo.fncTranslate(i.CI_CODIGO,10)         
         ,@ciNomeNew       = dbo.fncTranslate(i.CI_NOME,30)
         ,@ciAtivoNew      = UPPER(i.CI_ATIVO)
         ,@ciRegNew        = UPPER(i.CI_REG)
         ,@ciCodUsrNew     = i.CI_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30New         = UP.UP_D30
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN BANCOCODIGO BCD ON i.CI_CODBCD=BCD.BCD_CODIGO AND BCD.BCD_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.CI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @bcdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO BANCO %s PARA ESTE REGISTRO',15,1,@ciCodBcdNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ciCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD30New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA ALTERAR NA TABELA CNABINSTRUCAO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ciCodBcdOld VARCHAR(6);
    DECLARE @ciCodigoOld VARCHAR(10);  
    DECLARE @ciNomeOld VARCHAR(30);
    DECLARE @ciAtivoOld VARCHAR(1);
    DECLARE @ciRegOld VARCHAR(1);
    DECLARE @ciCodUsrOld INTEGER;
    SELECT @ciCodBcdOld    = d.CI_CODBCD
           ,@ciCodigoOld   = d.CI_CODIGO
           ,@ciNomeOld     = d.CI_NOME
           ,@ciAtivoOld    = d.CI_ATIVO
           ,@ciRegOld      = d.CI_REG
           ,@ciCodUsrOld   = d.CI_CODUSR         
      FROM CNABINSTRUCAO d WHERE ((d.CI_CODBCD=@ciCodBcdNew) AND (d.CI_CODIGO=@ciCodigoNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ciCodBcdOld<>@ciCodBcdNew )
      RAISERROR('CAMPO BANCO NAO PODE SER ALTERADO',15,1);  
    IF( @ciCodigoOld<>@ciCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ciRegOld <> @ciRegNew ) BEGIN
      SET @cioNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ciRegOld,@ciRegNew,@upD31New );
      IF( @cioNew <> 'OK' )
        RAISERROR(@cioNew,15,1);
    END    
    --  
    UPDATE dbo.CNABINSTRUCAO
       SET CI_NOME       = @ciNomeNew
          ,CI_ATIVO      = @ciAtivoNew
          ,CI_REG        = @ciRegNew
          ,CI_CODUSR     = @ciCodUsrNew
    WHERE ((CI_CODBCD=@ciCodBcdNew) AND (CI_CODIGO=@ciCodigoNew));
    -- Gravando LOG
    IF( (@ciNomeOld<>@ciNomeNew) OR (@ciAtivoOld<>@ciAtivoNew) OR (@ciRegOld<>@ciRegNew) ) BEGIN
      INSERT INTO dbo.BKPCNABINSTRUCAO(
        CI_ACAO
        ,CI_CODBCD
        ,CI_CODIGO
        ,CI_NOME
        ,CI_ATIVO
        ,CI_REG
        ,CI_CODUSR) VALUES(
        'A'                 -- CI_ACAO
        ,@ciCodBcdNew      -- CI_CODBCD
        ,@ciCodigoNew      -- CI_CODIGO
        ,@ciNomeNew        -- CI_NOME
        ,@ciAtivoNew       -- CI_ATIVO
        ,@ciRegNew         -- CI_REG
        ,@ciCodUsrNew      -- CI_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ciorMessage NVARCHAR(4000);
    DECLARE @ciorSeverity INT;
    DECLARE @ciorState INT;
    SELECT @ciorMessage=ERROR_MESSAGE(),@ciorSeverity=ERROR_SEVERITY(),@ciorState=ERROR_STATE();
    RAISERROR(@ciorMessage, @ciorSeverity, @ciorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCNABINSTRUCAO_BD ON dbo.VCNABINSTRUCAO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkStrEst VARCHAR(3) = 'OK'; -- Para procurar campo foreign key str (ESTADO)
  DECLARE @cioOld VARCHAR(70);        -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ciCodBcdOld VARCHAR(6);
  DECLARE @ciCodigoOld VARCHAR(10);  
  DECLARE @ciNomeOld VARCHAR(30);
  DECLARE @ciAtivoOld VARCHAR(1);
  DECLARE @ciRegOld VARCHAR(1);
  DECLARE @ciCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD30Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ciCodBcdOld    = d.CI_CODBCD
         ,@ciCodigoOld   = d.CI_CODIGO
         ,@ciNomeOld     = d.CI_NOME
         ,@ciAtivoOld    = d.CI_ATIVO
         ,@ciRegOld      = d.CI_REG
         ,@ciCodUsrOld   = d.CI_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30Old       = UP.UP_D30
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ciCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD30Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA EXCLUIR NA TABELA CNABINSTRUCAO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @cioOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ciRegOld );
    IF( @cioOld != 'OK' )
      RAISERROR(@cioOld,15,1);
      ------------------------------------------
      --  Checando a FK EST_CODREG(ESTADO)
      ------------------------------------------
    --SELECT TOP 1 @fkStrEst=COALESCE(EST_CODIGO,'OK') FROM ESTADO WHERE EST_CODREG=@ciCodBcdOld;
    --IF( @fkStrEst <> 'OK' )
    --  RAISERROR('CNABINSTRUCAO UTILIZADA NO ESTADO %s',15,1,@fkStrEst);
    --
    DELETE FROM dbo.CNABINSTRUCAO WHERE ((CI_CODBCD=@ciCodBcdOld) AND (CI_CODIGO=@ciCodigoOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPCNABINSTRUCAO(
      CI_ACAO
      ,CI_CODBCD
      ,CI_CODIGO
      ,CI_NOME
      ,CI_ATIVO
      ,CI_REG
      ,CI_CODUSR) VALUES(
      'E'                -- CI_ACAO
      ,@ciCodBcdOld      -- CI_CODBCD
      ,@ciCodigoOld      -- CI_CODIGO
      ,@ciNomeOld        -- CI_NOME
      ,@ciAtivoOld       -- CI_ATIVO
      ,@ciRegOld         -- CI_REG
      ,@ciCodUsrOld      -- CI_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ciorMessage NVARCHAR(4000);
    DECLARE @ciorSeverity INT;
    DECLARE @ciorState INT;
    SELECT @ciorMessage=ERROR_MESSAGE(),@ciorSeverity=ERROR_SEVERITY(),@ciorState=ERROR_STATE();
    RAISERROR(@ciorMessage, @ciorSeverity, @ciorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCNABINSTRUCAO_BUD ON dbo.BKPCNABINSTRUCAO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                    C N A B R E T O R N O
--trgcnabretorno
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCNABRETORNO_BI ON dbo.VCNABRETORNO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS   |UPD |DEL | TIPO               | Obs
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------
  -- CR_CODBCD      |PK/SEL|    |    | VC(6) NN           | Campo relacionado (BANCOCODIGO)      
  -- BCD_NOME       | SEL  |    |    | VC(20) NN          | Campo relacionado (BANCOCODIGO)         
  -- CR_CODIGO      | PK   |    |    | VC(6) NN           | Campo informado
  -- CR_NOME        |      |    |    | VC(30) NN          |
  -- CR_EXECUTA     | CC   |    |    | VC(3) NN           | AGE-AGENDADO, BAI-BAIXAR, REC-RECUSADO, IA-INSTRUCAO ACATADA, INA-INSTRUCAO NAO ACATADA, BM-BAIXA MANUAL, PRO-PROTESTO
  -- CR_ATIVO       | CC   |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- CR_REG         | FNC  |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- CR_CODUSR      | OK   |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL  |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL  |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D30         | SEL  |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL  |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @crCodBcdNew VARCHAR(6);
  DECLARE @bcdNomeNew VARCHAR(30);
  DECLARE @crCodigoNew VARCHAR(10);  
  DECLARE @crNomeNew VARCHAR(30);
  DECLARE @crExecutaNew VARCHAR(3);
  DECLARE @crAtivoNew VARCHAR(1);
  DECLARE @crRegNew VARCHAR(1);
  DECLARE @crCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD30New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @crCodBcdNew      = i.CR_CODBCD
         ,@bcdNomeNew      = COALESCE(BCD.BCD_NOME,'ERRO')
         ,@crCodigoNew     = dbo.fncTranslate(i.CR_CODIGO,10)         
         ,@crNomeNew       = dbo.fncTranslate(i.CR_NOME,30)         
         ,@crExecutaNew    = dbo.fncTranslate(i.CR_EXECUTA,3)
         ,@crAtivoNew      = UPPER(i.CR_ATIVO)
         ,@crRegNew        = UPPER(i.CR_REG)
         ,@crCodUsrNew     = i.CR_CODUSR         
         ,@usrApelidoNew   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30New        = UP.UP_D30
         ,@upD31New        = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN BANCOCODIGO BCD ON i.CR_CODBCD=BCD.BCD_CODIGO AND BCD.BCD_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.CR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @bcdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO BANCO %s PARA ESTE REGISTRO',15,1,@crCodBcdNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@crCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD30New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA INCLUIR NA TABELA CNABRETORNO',15,1,@usrApelidoNew);
    IF( @crRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@crRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.CNABRETORNO( 
      CR_CODBCD
      ,CR_CODIGO
      ,CR_NOME
      ,CR_EXECUTA
      ,CR_ATIVO
      ,CR_REG
      ,CR_CODUSR) VALUES(
      @crCodBcdNew     -- CR_CODBCD
      ,@crCodigoNew    -- CR_CODIGO
      ,@crNomeNew      -- CR_NOME
      ,@crExecutaNew   -- CR_EXECUTA
      ,@crAtivoNew     -- CR_ATIVO
      ,@crRegNew       -- CR_REG
      ,@crCodUsrNew    -- CR_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCNABRETORNO(
      CR_ACAO
      ,CR_CODBCD
      ,CR_CODIGO
      ,CR_NOME
      ,CR_EXECUTA
      ,CR_ATIVO
      ,CR_REG
      ,CR_CODUSR) VALUES(
      'I'                -- CR_ACAO
      ,@crCodBcdNew      -- CR_CODBCD
      ,@crCodigoNew      -- CR_CODIGO
      ,@crNomeNew        -- CR_NOME
      ,@crExecutaNew     -- CR_EXECUTA
      ,@crAtivoNew       -- CR_ATIVO
      ,@crRegNew         -- CR_REG
      ,@crCodUsrNew      -- CR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCNABRETORNO_BU ON dbo.VCNABRETORNO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @crCodBcdNew VARCHAR(6);
  DECLARE @bcdNomeNew VARCHAR(30);
  DECLARE @crCodigoNew VARCHAR(10);  
  DECLARE @crNomeNew VARCHAR(30);
  DECLARE @crExecutaNew VARCHAR(3);
  DECLARE @crAtivoNew VARCHAR(1);
  DECLARE @crRegNew VARCHAR(1);
  DECLARE @crCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD30New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @crCodBcdNew      = i.CR_CODBCD
         ,@bcdNomeNew       = COALESCE(BCD.BCD_NOME,'ERRO')
         ,@crCodigoNew     = dbo.fncTranslate(i.CR_CODIGO,10)         
         ,@crNomeNew       = dbo.fncTranslate(i.CR_NOME,30)
         ,@crExecutaNew    = dbo.fncTranslate(i.CR_EXECUTA,3)
         ,@crAtivoNew      = UPPER(i.CR_ATIVO)
         ,@crRegNew        = UPPER(i.CR_REG)
         ,@crCodUsrNew     = i.CR_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30New         = UP.UP_D30
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN BANCOCODIGO BCD ON i.CR_CODBCD=BCD.BCD_CODIGO AND BCD.BCD_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.CR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @bcdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO BANCO %s PARA ESTE REGISTRO',15,1,@crCodBcdNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@crCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD30New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA ALTERAR NA TABELA CNABRETORNO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @crCodBcdOld VARCHAR(6);
    DECLARE @crCodigoOld VARCHAR(10);  
    DECLARE @crNomeOld VARCHAR(30);
    DECLARE @crExecutaOld VARCHAR(3);
    DECLARE @crAtivoOld VARCHAR(1);
    DECLARE @crRegOld VARCHAR(1);
    DECLARE @crCodUsrOld INTEGER;
    SELECT @crCodBcdOld    = d.CR_CODBCD
           ,@crCodigoOld   = d.CR_CODIGO
           ,@crNomeOld     = d.CR_NOME
           ,@crExecutaOld  = d.CR_EXECUTA
           ,@crAtivoOld    = d.CR_ATIVO
           ,@crRegOld      = d.CR_REG
           ,@crCodUsrOld   = d.CR_CODUSR         
      FROM CNABRETORNO d WHERE ((d.CR_CODBCD=@crCodBcdNew) AND (d.CR_CODIGO=@crCodigoNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @crCodBcdOld<>@crCodBcdNew )
      RAISERROR('CAMPO BANCO NAO PODE SER ALTERADO',15,1);  
    IF( @crCodigoOld<>@crCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @crRegOld <> @crRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@crRegOld,@crRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.CNABRETORNO
       SET CR_NOME       = @crNomeNew
          ,CR_EXECUTA    = @crExecutaNew
          ,CR_ATIVO      = @crAtivoNew
          ,CR_REG        = @crRegNew
          ,CR_CODUSR     = @crCodUsrNew
    WHERE ((CR_CODBCD=@crCodBcdNew) AND (CR_CODIGO=@crCodigoNew));    
    -- Gravando LOG
    IF( (@crNomeOld<>@crNomeNew) OR (@crExecutaOld<>@crExecutaNew) OR (@crAtivoOld<>@crAtivoNew) OR (@crRegOld<>@crRegNew) ) BEGIN
      INSERT INTO dbo.BKPCNABRETORNO(
        CR_ACAO
        ,CR_CODBCD
        ,CR_CODIGO
        ,CR_NOME
        ,CR_EXECUTA
        ,CR_ATIVO
        ,CR_REG
        ,CR_CODUSR) VALUES(
        'A'                -- CR_ACAO
        ,@crCodBcdNew      -- CR_CODBCD
        ,@crCodigoNew      -- CR_CODIGO
        ,@crNomeNew        -- CR_NOME
        ,@crExecutaNew     -- CR_EXECUTA
        ,@crAtivoNew       -- CR_ATIVO
        ,@crRegNew         -- CR_REG
        ,@crCodUsrNew      -- CR_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCNABRETORNO_BD ON dbo.VCNABRETORNO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkStrEst VARCHAR(3) = 'OK'; -- Para procurar campo foreign key str (ESTADO)
  DECLARE @erroOld VARCHAR(70);        -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @crCodBcdOld VARCHAR(6);
  DECLARE @crCodigoOld VARCHAR(10);  
  DECLARE @crNomeOld VARCHAR(30);
  DECLARE @crExecutaOld VARCHAR(3);
  DECLARE @crAtivoOld VARCHAR(1);
  DECLARE @crRegOld VARCHAR(1);
  DECLARE @crCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD30Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @crCodBcdOld    = d.CR_CODBCD
         ,@crCodigoOld   = d.CR_CODIGO
         ,@crNomeOld     = d.CR_NOME
         ,@crExecutaOld  = d.CR_EXECUTA
         ,@crAtivoOld    = d.CR_ATIVO
         ,@crRegOld      = d.CR_REG
         ,@crCodUsrOld   = d.CR_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD30Old       = UP.UP_D30
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.CR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@crCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD30Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 30 PARA EXCLUIR NA TABELA CNABRETORNO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@crRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK EST_CODREG(ESTADO)
      ------------------------------------------
    --SELECT TOP 1 @fkStrEst=COALESCE(EST_CODIGO,'OK') FROM ESTADO WHERE EST_CODREG=@crCodBcdOld;
    --IF( @fkStrEst <> 'OK' )
    --  RAISERROR('CNABRETORNO UTILIZADA NO ESTADO %s',15,1,@fkStrEst);
    --
    DELETE FROM dbo.CNABRETORNO WHERE ((CR_CODBCD=@crCodBcdOld) AND (CR_CODIGO=@crCodigoOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPCNABRETORNO(
      CR_ACAO
      ,CR_CODBCD
      ,CR_CODIGO
      ,CR_NOME
      ,CR_EXECUTA
      ,CR_ATIVO
      ,CR_REG
      ,CR_CODUSR) VALUES(
      'E'                -- CR_ACAO
      ,@crCodBcdOld      -- CR_CODBCD
      ,@crCodigoOld      -- CR_CODIGO
      ,@crNomeOld        -- CR_NOME
      ,@crExecutaOld     -- CR_EXECUTA
      ,@crAtivoOld       -- CR_ATIVO
      ,@crRegOld         -- CR_REG
      ,@crCodUsrOld      -- CR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCNABRETORNO_BUD ON dbo.BKPCNABRETORNO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                              C S T I C M S
--trgcsticms
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCSTICMS_BI ON dbo.VCSTICMS
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- ICM_CODIGO     | PK  |    |    | VC(03) NN          |  
  -- ICM_ENTSAI     |PK/CC|    |    | VC(1) NN           |  
  -- ICM_NOME       |     |    |    | VC(60) NN          |
  -- ICM_SNALIQ     | CC  |    |    | VC(1) NN           |  
  -- ICM_PCISENTAS  |     |    |    | NUM(6,2) NN        | Soma de Isentas+Outras deve ser 0 ou 100
  -- ICM_PCOUTRAS   |     |    |    | NUM(6,2) NN        | Soma de Isentas+Outras deve ser 0 ou 100
  -- ICM_REDUCAOBC  | CC  |    |    | VC(1) NN           |    
  -- ICM_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- ICM_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- ICM_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D14         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(60) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @icmCodigoNew VARCHAR(3);
  DECLARE @icmEntSaiNew VARCHAR(1);  
  DECLARE @icmNomeNew VARCHAR(60);
  DECLARE @icmSnAliqNew VARCHAR(1);  
  DECLARE @icmPcIsentasNew NUMERIC(6,2);
  DECLARE @icmPcOutrasNew NUMERIC(6,2);
  DECLARE @icmReducaoBcNew VARCHAR(1);
  DECLARE @icmAtivoNew VARCHAR(1);
  DECLARE @icmRegNew VARCHAR(1);
  DECLARE @icmCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @icmCodigoNew     = i.ICM_CODIGO
         ,@icmEntSaiNew    = UPPER(i.ICM_ENTSAI)  
         ,@icmNomeNew      = dbo.fncTranslate(i.ICM_NOME,60)
         ,@icmSnAliqNew    = UPPER(i.ICM_SNALIQ)  
         ,@icmPcIsentasNew = i.ICM_PCISENTAS
         ,@icmPcOutrasNew  = i.ICM_PCOUTRAS
         ,@icmReducaoBcNew = UPPER(i.ICM_REDUCAOBC)
         ,@icmAtivoNew     = UPPER(i.ICM_ATIVO)         
         ,@icmRegNew       = UPPER(i.ICM_REG)
         ,@icmCodUsrNew    = i.ICM_CODUSR         
         ,@usrApelidoNew   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New        = UP.UP_D14
         ,@upD31New        = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ICM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@icmCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA INCLUIR NA TABELA CSTICMS',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(ICM_CODIGO,'OK') FROM CSTICMS WHERE ICM_NOME=@icmNomeNew;
    --IF( @uiCodigo <> 'OK' )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CSTICMS COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(ICM_NOME,'OK') FROM CSTICMS WHERE ICM_CODIGO=@icmCodigoNew;
    --IF( @uiNome <> 'OK' )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA CSTICMS %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @icmRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@icmRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END
    ---------------------------------------------
    -- A soma de isentas+outras deve ser 100 ou 0
    ---------------------------------------------
    IF( ((@icmPcIsentasNew+@icmPcOutrasNew)<>100) AND ((@icmPcIsentasNew+@icmPcOutrasNew)<>0) )
      RAISERROR('PERCENTUAL DE ISENTAS+OUTRAS DEVE SER 100,00 OU 0,00!',15,1);
    --  
    INSERT INTO dbo.CSTICMS( 
      ICM_CODIGO
      ,ICM_ENTSAI      
      ,ICM_NOME
      ,ICM_SNALIQ
      ,ICM_PCISENTAS
      ,ICM_PCOUTRAS
      ,ICM_REDUCAOBC
      ,ICM_ATIVO
      ,ICM_REG
      ,ICM_CODUSR) VALUES(
      @icmCodigoNew      -- ICM_CODIGO
      ,@icmEntSaiNew     -- ICM_ENTSAI      
      ,@icmNomeNew       -- ICM_NOME
      ,@icmSnAliqNew     -- ICM_SNALIQ
      ,@icmPcIsentasNew  -- ICM_PCISENTAS
      ,@icmPcOutrasNew   -- ICM_PCOUTRAS
      ,@icmReducaoBcNew  -- ICM_REDUCAOBC
      ,@icmAtivoNew      -- ICM_ATIVO
      ,@icmRegNew        -- ICM_REG
      ,@icmCodUsrNew     -- ICM_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCSTICMS(
      ICM_ACAO
      ,ICM_CODIGO
      ,ICM_ENTSAI      
      ,ICM_NOME
      ,ICM_SNALIQ
      ,ICM_PCISENTAS
      ,ICM_PCOUTRAS
      ,ICM_REDUCAOBC
      ,ICM_ATIVO
      ,ICM_REG
      ,ICM_CODUSR) VALUES(
      'I'                -- ICM_ACAO
      ,@icmCodigoNew     -- ICM_CODIGO
      ,@icmEntSaiNew     -- ICM_ENTSAI      
      ,@icmNomeNew       -- ICM_NOME
      ,@icmSnAliqNew     -- ICM_SNALIQ
      ,@icmPcIsentasNew  -- ICM_PCISENTAS
      ,@icmPcOutrasNew   -- ICM_PCOUTRAS
      ,@icmReducaoBcNew  -- ICM_REDUCAOBC
      ,@icmAtivoNew      -- ICM_ATIVO
      ,@icmRegNew        -- ICM_REG
      ,@icmCodUsrNew     -- ICM_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCSTICMS_BU ON dbo.VCSTICMS
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @icmCodigoNew VARCHAR(3);
  DECLARE @icmEntSaiNew VARCHAR(1);  
  DECLARE @icmNomeNew VARCHAR(60);
  DECLARE @icmSnAliqNew VARCHAR(1);  
  DECLARE @icmPcIsentasNew NUMERIC(6,2);
  DECLARE @icmPcOutrasNew NUMERIC(6,2);
  DECLARE @icmReducaoBcNew VARCHAR(1);
  DECLARE @icmAtivoNew VARCHAR(1);
  DECLARE @icmRegNew VARCHAR(1);
  DECLARE @icmCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @icmCodigoNew     = i.ICM_CODIGO
         ,@icmEntSaiNew    = UPPER(i.ICM_ENTSAI)  
         ,@icmNomeNew      = dbo.fncTranslate(i.ICM_NOME,60)
         ,@icmSnAliqNew    = UPPER(i.ICM_SNALIQ)  
         ,@icmPcIsentasNew = i.ICM_PCISENTAS
         ,@icmPcOutrasNew  = i.ICM_PCOUTRAS
         ,@icmReducaoBcNew = UPPER(i.ICM_REDUCAOBC)
         ,@icmAtivoNew     = UPPER(i.ICM_ATIVO)
         ,@icmRegNew       = UPPER(i.ICM_REG)
         ,@icmCodUsrNew    = i.ICM_CODUSR         
         ,@usrApelidoNew   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New        = UP.UP_D14
         ,@upD31New        = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ICM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@icmCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA ALTERAR NA TABELA CSTICMS',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @icmCodigoOld VARCHAR(3);
    DECLARE @icmEntSaiOld VARCHAR(1);    
    DECLARE @icmNomeOld VARCHAR(60);
    DECLARE @icmSnAliqOld VARCHAR(1);  
    DECLARE @icmPcIsentasOld NUMERIC(6,2);
    DECLARE @icmPcOutrasOld NUMERIC(6,2);
    DECLARE @icmReducaoBcOld VARCHAR(1);
    DECLARE @icmAtivoOld VARCHAR(1);
    DECLARE @icmRegOld VARCHAR(1);
    DECLARE @icmCodUsrOld INTEGER;
    SELECT @icmCodigoOld     = d.ICM_CODIGO
           ,@icmEntSaiOld    = d.ICM_ENTSAI    
           ,@icmNomeOld      = d.ICM_NOME
           ,@icmSnAliqOld    = d.ICM_SNALIQ  
           ,@icmPcIsentasOld = d.ICM_PCISENTAS
           ,@icmPcOutrasOld  = d.ICM_PCOUTRAS
           ,@icmReducaoBcOld = d.ICM_REDUCAOBC
           ,@icmAtivoOld     = d.ICM_ATIVO
           ,@icmRegOld       = d.ICM_REG
           ,@icmCodUsrOld    = d.ICM_CODUSR         
      FROM CSTICMS d WHERE ((d.ICM_CODIGO=@icmCodigoNew) AND (d.ICM_ENTSAI=@icmEntSaiNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @icmCodigoOld<>@icmCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @icmEntSaiOld<>@icmEntSaiNew )
      RAISERROR('CAMPO ENTRADA/SAIDA NAO PODE SER ALTERADO',15,1);  
      
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @icmNomeOld<>@icmNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(ICM_CODIGO,'OK') FROM CSTICMS WHERE ICM_NOME=@icmNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CSTICMS COM CODIGO %s',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @icmRegOld <> @icmRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@icmRegOld,@icmRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    ---------------------------------------------
    -- A soma de isentas+outras deve ser 100 ou 0
    ---------------------------------------------
    IF( ((@icmPcIsentasNew+@icmPcOutrasNew)<>100) AND ((@icmPcIsentasNew+@icmPcOutrasNew)<>0) )
      RAISERROR('PERCENTUAL DE ISENTAS+OUTRAS DEVE SER 100,00 OU 0,00!',15,1);
    --  
    --  
    UPDATE dbo.CSTICMS
       SET ICM_NOME      = @icmNomeNew
          ,ICM_SNALIQ    = @icmSnAliqNew
          ,ICM_PCISENTAS = @icmPcIsentasNew
          ,ICM_PCOUTRAS  = @icmPcOutrasNew
          ,ICM_REDUCAOBC = @icmReducaoBcNew
          ,ICM_ATIVO     = @icmAtivoNew
          ,ICM_REG       = @icmRegNew
          ,ICM_CODUSR    = @icmCodUsrNew
    WHERE ((ICM_CODIGO=@icmCodigoNew) AND (ICM_ENTSAI=@icmEntSaiNew));     
    -- Gravando LOG
    IF( (@icmNomeOld<>@icmNomeNew) OR (@icmPcIsentasOld<>@icmPcIsentasNew) OR (@icmPcOutrasOld<>@icmPcOutrasNew) 
      OR (@icmReducaoBcOld<>@icmReducaoBcNew) OR (@icmSnAliqOld<>@icmSnAliqNew) OR (@icmAtivoOld<>@icmAtivoNew) OR (@icmRegOld<>@icmRegNew) ) BEGIN
      INSERT INTO dbo.BKPCSTICMS(
        ICM_ACAO
        ,ICM_CODIGO
        ,ICM_ENTSAI        
        ,ICM_NOME
        ,ICM_SNALIQ
        ,ICM_PCISENTAS
        ,ICM_PCOUTRAS
        ,ICM_REDUCAOBC
        ,ICM_ATIVO
        ,ICM_REG
        ,ICM_CODUSR) VALUES(
        'A'                -- ICM_ACAO
        ,@icmCodigoNew     -- ICM_CODIGO
        ,@icmEntSaiNew     -- ICM_ENTSAI        
        ,@icmNomeNew       -- ICM_NOME
        ,@icmSnAliqNew     -- ICM_SNALIQ
        ,@icmPcIsentasNew  -- ICM_PCISENTAS
        ,@icmPcOutrasNew   -- ICM_PCOUTRAS
        ,@icmReducaoBcNew  -- ICM_REDUCAOBC
        ,@icmAtivoNew      -- ICM_ATIVO
        ,@icmRegNew        -- ICM_REG
        ,@icmCodUsrNew     -- ICM_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCSTICMS_BD ON dbo.VCSTICMS
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @icmCodigoOld VARCHAR(3);
  DECLARE @icmEntSaiOld VARCHAR(1);  
  DECLARE @icmNomeOld VARCHAR(60);
  DECLARE @icmSnAliqOld VARCHAR(1);  
  DECLARE @icmPcIsentasOld NUMERIC(6,2);
  DECLARE @icmPcOutrasOld NUMERIC(6,2);
  DECLARE @icmReducaoBcOld VARCHAR(1);
  DECLARE @icmAtivoOld VARCHAR(1);
  DECLARE @icmRegOld VARCHAR(1);
  DECLARE @icmCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD14Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @icmCodigoOld     = d.ICM_CODIGO
         ,@icmEntSaiOld    = d.ICM_ENTSAI  
         ,@icmNomeOld      = d.ICM_NOME
         ,@icmSnAliqOld    = d.ICM_SNALIQ  
         ,@icmPcIsentasOld = d.ICM_PCISENTAS
         ,@icmPcOutrasOld  = d.ICM_PCOUTRAS
         ,@icmReducaoBcOld = d.ICM_REDUCAOBC
         ,@icmAtivoOld     = d.ICM_ATIVO
         ,@icmRegOld       = d.ICM_REG
         ,@icmCodUsrOld    = d.ICM_CODUSR         
         ,@usrApelidoOld   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14Old        = UP.UP_D14
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.ICM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@icmCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD14Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA EXCLUIR NA TABELA CSTICMS',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@icmRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@icmCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('CSTICMS UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@icmCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('CSTICMS UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.CSTICMS WHERE ((ICM_CODIGO=@icmCodigoOld) AND (ICM_ENTSAI=@icmEntSaiOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPCSTICMS(
      ICM_ACAO
      ,ICM_CODIGO
      ,ICM_ENTSAI      
      ,ICM_NOME
      ,ICM_SNALIQ
      ,ICM_PCISENTAS
      ,ICM_PCOUTRAS
      ,ICM_REDUCAOBC
      ,ICM_ATIVO
      ,ICM_REG
      ,ICM_CODUSR) VALUES(
      'E'                -- ICM_ACAO
      ,@icmCodigoOld     -- ICM_CODIGO
      ,@icmEntSaiOld     -- ICM_ENTSAI      
      ,@icmNomeOld       -- ICM_NOME
      ,@icmSnAliqOld     -- ICM_SNALIQ
      ,@icmPcIsentasOld  -- ICM_PCISENTAS
      ,@icmPcOutrasOld   -- ICM_PCOUTRAS
      ,@icmReducaoBcOld  -- ICM_REDUCAOBC
      ,@icmAtivoOld      -- ICM_ATIVO
      ,@icmRegOld        -- ICM_REG
      ,@icmCodUsrOld     -- ICM_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCSTICMS_BUD ON dbo.BKPCSTICMS
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                              C S T I P I
--trgcstipi
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCSTIPI_BI ON dbo.VCSTIPI
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- IPI_CODIGO     | PK  |    |    | VC(03) NN          |  
  -- IPI_ENTSAI     |PK/CC|    |    | VC(1) NN           |  
  -- IPI_NOME       |     |    |    | VC(60) NN          |
  -- IPI_SNALIQ     | CC  |    |    | VC(1) NN           |  
  -- IPI_PCISENTAS  |     |    |    | NUM(6,2) NN        | Soma de Isentas+Outras deve ser 0 ou 100
  -- IPI_PCOUTRAS   |     |    |    | NUM(6,2) NN        | Soma de Isentas+Outras deve ser 0 ou 100
  -- IPI_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- IPI_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- IPI_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D14         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(60) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ipiCodigoNew VARCHAR(3);
  DECLARE @ipiEntSaiNew VARCHAR(1);  
  DECLARE @ipiNomeNew VARCHAR(60);
  DECLARE @ipiSnAliqNew VARCHAR(1);  
  DECLARE @ipiPcIsentasNew NUMERIC(6,2);
  DECLARE @ipiPcOutrasNew NUMERIC(6,2);
  DECLARE @ipiAtivoNew VARCHAR(1);
  DECLARE @ipiRegNew VARCHAR(1);
  DECLARE @ipiCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ipiCodigoNew     = i.IPI_CODIGO
         ,@ipiEntSaiNew    = UPPER(i.IPI_ENTSAI)  
         ,@ipiNomeNew      = dbo.fncTranslate(i.IPI_NOME,60)
         ,@ipiSnAliqNew    = UPPER(i.IPI_SNALIQ)  
         ,@ipiPcIsentasNew = i.IPI_PCISENTAS
         ,@ipiPcOutrasNew  = i.IPI_PCOUTRAS
         ,@ipiAtivoNew     = UPPER(i.IPI_ATIVO)         
         ,@ipiRegNew       = UPPER(i.IPI_REG)
         ,@ipiCodUsrNew    = i.IPI_CODUSR         
         ,@usrApelidoNew   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New        = UP.UP_D14
         ,@upD31New        = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.IPI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ipiCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA INCLUIR NA TABELA CSTIPI',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(IPI_CODIGO,'OK') FROM CSTIPI WHERE IPI_NOME=@ipiNomeNew;
    --IF( @uiCodigo <> 'OK' )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CSTIPI COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(IPI_NOME,'OK') FROM CSTIPI WHERE IPI_CODIGO=@ipiCodigoNew;
    --IF( @uiNome <> 'OK' )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA CSTIPI %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ipiRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ipiRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END
    ---------------------------------------------
    -- A soma de isentas+outras deve ser 100 ou 0
    ---------------------------------------------
    IF( ((@ipiPcIsentasNew+@ipiPcOutrasNew)<>100) AND ((@ipiPcIsentasNew+@ipiPcOutrasNew)<>0) )
      RAISERROR('PERCENTUAL DE ISENTAS+OUTRAS DEVE SER 100,00 OU 0,00!',15,1);
    --  
    INSERT INTO dbo.CSTIPI( 
      IPI_CODIGO
      ,IPI_ENTSAI      
      ,IPI_NOME
      ,IPI_SNALIQ
      ,IPI_PCISENTAS
      ,IPI_PCOUTRAS
      ,IPI_ATIVO
      ,IPI_REG
      ,IPI_CODUSR) VALUES(
      @ipiCodigoNew      -- IPI_CODIGO
      ,@ipiEntSaiNew     -- IPI_ENTSAI      
      ,@ipiNomeNew       -- IPI_NOME
      ,@ipiSnAliqNew     -- IPI_SNALIQ
      ,@ipiPcIsentasNew  -- IPI_PCISENTAS
      ,@ipiPcOutrasNew   -- IPI_PCOUTRAS
      ,@ipiAtivoNew      -- IPI_ATIVO
      ,@ipiRegNew        -- IPI_REG
      ,@ipiCodUsrNew     -- IPI_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCSTIPI(
      IPI_ACAO
      ,IPI_CODIGO
      ,IPI_ENTSAI      
      ,IPI_NOME
      ,IPI_SNALIQ
      ,IPI_PCISENTAS
      ,IPI_PCOUTRAS
      ,IPI_ATIVO
      ,IPI_REG
      ,IPI_CODUSR) VALUES(
      'I'                -- IPI_ACAO
      ,@ipiCodigoNew     -- IPI_CODIGO
      ,@ipiEntSaiNew     -- IPI_ENTSAI      
      ,@ipiNomeNew       -- IPI_NOME
      ,@ipiSnAliqNew     -- IPI_SNALIQ
      ,@ipiPcIsentasNew  -- IPI_PCISENTAS
      ,@ipiPcOutrasNew   -- IPI_PCOUTRAS
      ,@ipiAtivoNew      -- IPI_ATIVO
      ,@ipiRegNew        -- IPI_REG
      ,@ipiCodUsrNew     -- IPI_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCSTIPI_BU ON dbo.VCSTIPI
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ipiCodigoNew VARCHAR(3);
  DECLARE @ipiEntSaiNew VARCHAR(1);  
  DECLARE @ipiNomeNew VARCHAR(60);
  DECLARE @ipiSnAliqNew VARCHAR(1);  
  DECLARE @ipiPcIsentasNew NUMERIC(6,2);
  DECLARE @ipiPcOutrasNew NUMERIC(6,2);
  DECLARE @ipiAtivoNew VARCHAR(1);
  DECLARE @ipiRegNew VARCHAR(1);
  DECLARE @ipiCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ipiCodigoNew     = i.IPI_CODIGO
         ,@ipiEntSaiNew    = UPPER(i.IPI_ENTSAI)  
         ,@ipiNomeNew      = dbo.fncTranslate(i.IPI_NOME,60)
         ,@ipiSnAliqNew    = UPPER(i.IPI_SNALIQ)  
         ,@ipiPcIsentasNew = i.IPI_PCISENTAS
         ,@ipiPcOutrasNew  = i.IPI_PCOUTRAS
         ,@ipiAtivoNew     = UPPER(i.IPI_ATIVO)
         ,@ipiRegNew       = UPPER(i.IPI_REG)
         ,@ipiCodUsrNew    = i.IPI_CODUSR         
         ,@usrApelidoNew   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New        = UP.UP_D14
         ,@upD31New        = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.IPI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ipiCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA ALTERAR NA TABELA CSTIPI',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ipiCodigoOld VARCHAR(3);
    DECLARE @ipiEntSaiOld VARCHAR(1);    
    DECLARE @ipiNomeOld VARCHAR(60);
    DECLARE @ipiSnAliqOld VARCHAR(1);  
    DECLARE @ipiPcIsentasOld NUMERIC(6,2);
    DECLARE @ipiPcOutrasOld NUMERIC(6,2);
    DECLARE @ipiAtivoOld VARCHAR(1);
    DECLARE @ipiRegOld VARCHAR(1);
    DECLARE @ipiCodUsrOld INTEGER;
    SELECT @ipiCodigoOld     = d.IPI_CODIGO
           ,@ipiEntSaiOld    = d.IPI_ENTSAI    
           ,@ipiNomeOld      = d.IPI_NOME
           ,@ipiSnAliqOld    = d.IPI_SNALIQ  
           ,@ipiPcIsentasOld = d.IPI_PCISENTAS
           ,@ipiPcOutrasOld  = d.IPI_PCOUTRAS
           ,@ipiAtivoOld     = d.IPI_ATIVO
           ,@ipiRegOld       = d.IPI_REG
           ,@ipiCodUsrOld    = d.IPI_CODUSR         
      FROM CSTIPI d WHERE ((d.IPI_CODIGO=@ipiCodigoNew) AND (d.IPI_ENTSAI=@ipiEntSaiNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ipiCodigoOld<>@ipiCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @ipiEntSaiOld<>@ipiEntSaiNew )
      RAISERROR('CAMPO ENTRADA/SAIDA NAO PODE SER ALTERADO',15,1);  
      
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @ipiNomeOld<>@ipiNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(IPI_CODIGO,'OK') FROM CSTIPI WHERE IPI_NOME=@ipiNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CSTIPI COM CODIGO %s',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ipiRegOld <> @ipiRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ipiRegOld,@ipiRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    ---------------------------------------------
    -- A soma de isentas+outras deve ser 100 ou 0
    ---------------------------------------------
    IF( ((@ipiPcIsentasNew+@ipiPcOutrasNew)<>100) AND ((@ipiPcIsentasNew+@ipiPcOutrasNew)<>0) )
      RAISERROR('PERCENTUAL DE ISENTAS+OUTRAS DEVE SER 100,00 OU 0,00!',15,1);
    --  
    --  
    UPDATE dbo.CSTIPI
       SET IPI_NOME      = @ipiNomeNew
          ,IPI_SNALIQ    = @ipiSnAliqNew
          ,IPI_PCISENTAS = @ipiPcIsentasNew
          ,IPI_PCOUTRAS  = @ipiPcOutrasNew
          ,IPI_ATIVO     = @ipiAtivoNew
          ,IPI_REG       = @ipiRegNew
          ,IPI_CODUSR    = @ipiCodUsrNew
    WHERE ((IPI_CODIGO=@ipiCodigoNew) AND (IPI_ENTSAI=@ipiEntSaiNew));    
    -- Gravando LOG
    IF( (@ipiNomeOld<>@ipiNomeNew) OR (@ipiPcIsentasOld<>@ipiPcIsentasNew) OR (@ipiPcOutrasOld<>@ipiPcOutrasNew) 
      OR (@ipiSnAliqOld<>@ipiSnAliqNew) OR (@ipiAtivoOld<>@ipiAtivoNew) OR (@ipiRegOld<>@ipiRegNew) ) BEGIN
      INSERT INTO dbo.BKPCSTIPI(
        IPI_ACAO
        ,IPI_CODIGO
        ,IPI_ENTSAI        
        ,IPI_NOME
        ,IPI_SNALIQ
        ,IPI_PCISENTAS
        ,IPI_PCOUTRAS
        ,IPI_ATIVO
        ,IPI_REG
        ,IPI_CODUSR) VALUES(
        'A'                -- IPI_ACAO
        ,@ipiCodigoNew     -- IPI_CODIGO
        ,@ipiEntSaiNew     -- IPI_ENTSAI        
        ,@ipiNomeNew       -- IPI_NOME
        ,@ipiSnAliqNew     -- IPI_SNALIQ
        ,@ipiPcIsentasNew  -- IPI_PCISENTAS
        ,@ipiPcOutrasNew   -- IPI_PCOUTRAS
        ,@ipiAtivoNew      -- IPI_ATIVO
        ,@ipiRegNew        -- IPI_REG
        ,@ipiCodUsrNew     -- IPI_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCSTIPI_BD ON dbo.VCSTIPI
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ipiCodigoOld VARCHAR(3);
  DECLARE @ipiEntSaiOld VARCHAR(1);  
  DECLARE @ipiNomeOld VARCHAR(60);
  DECLARE @ipiSnAliqOld VARCHAR(1);  
  DECLARE @ipiPcIsentasOld NUMERIC(6,2);
  DECLARE @ipiPcOutrasOld NUMERIC(6,2);
  DECLARE @ipiAtivoOld VARCHAR(1);
  DECLARE @ipiRegOld VARCHAR(1);
  DECLARE @ipiCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD14Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ipiCodigoOld     = d.IPI_CODIGO
         ,@ipiEntSaiOld    = d.IPI_ENTSAI  
         ,@ipiNomeOld      = d.IPI_NOME
         ,@ipiSnAliqOld    = d.IPI_SNALIQ  
         ,@ipiPcIsentasOld = d.IPI_PCISENTAS
         ,@ipiPcOutrasOld  = d.IPI_PCOUTRAS
         ,@ipiAtivoOld     = d.IPI_ATIVO
         ,@ipiRegOld       = d.IPI_REG
         ,@ipiCodUsrOld    = d.IPI_CODUSR         
         ,@usrApelidoOld   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14Old        = UP.UP_D14
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.IPI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ipiCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD14Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA EXCLUIR NA TABELA CSTIPI',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ipiRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@ipiCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('CSTIPI UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@ipiCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('CSTIPI UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.CSTIPI WHERE ((IPI_CODIGO=@ipiCodigoOld) AND (IPI_ENTSAI=@ipiEntSaiOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPCSTIPI(
      IPI_ACAO
      ,IPI_CODIGO
      ,IPI_ENTSAI      
      ,IPI_NOME
      ,IPI_SNALIQ
      ,IPI_PCISENTAS
      ,IPI_PCOUTRAS
      ,IPI_ATIVO
      ,IPI_REG
      ,IPI_CODUSR) VALUES(
      'E'                -- IPI_ACAO
      ,@ipiCodigoOld     -- IPI_CODIGO
      ,@ipiEntSaiOld     -- IPI_ENTSAI      
      ,@ipiNomeOld       -- IPI_NOME
      ,@ipiSnAliqOld     -- IPI_SNALIQ
      ,@ipiPcIsentasOld  -- IPI_PCISENTAS
      ,@ipiPcOutrasOld   -- IPI_PCOUTRAS
      ,@ipiAtivoOld      -- IPI_ATIVO
      ,@ipiRegOld        -- IPI_REG
      ,@ipiCodUsrOld     -- IPI_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCSTIPI_BUD ON dbo.BKPCSTIPI
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                              C S T P I S
--trgcstpis
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCSTPIS_BI ON dbo.VCSTPIS
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PIS_CODIGO     | PK  |    |    | VC(03) NN          |  
  -- PIS_ENTSAI     |PK/CC|    |    | VC(1) NN           |  
  -- PIS_NOME       |     |    |    | VC(60) NN          |
  -- PIS_SNALIQ     | CC  |    |    | VC(1) NN           |  
  -- PIS_PCISENTAS  |     |    |    | NUM(6,2) NN        | Soma de Isentas+Outras deve ser 0 ou 100
  -- PIS_PCOUTRAS   |     |    |    | NUM(6,2) NN        | Soma de Isentas+Outras deve ser 0 ou 100
  -- PIS_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PIS_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PIS_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D14         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(60) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pisCodigoNew VARCHAR(3);
  DECLARE @pisEntSaiNew VARCHAR(1);  
  DECLARE @pisNomeNew VARCHAR(60);
  DECLARE @pisSnAliqNew VARCHAR(1);  
  DECLARE @pisPcIsentasNew NUMERIC(6,2);
  DECLARE @pisPcOutrasNew NUMERIC(6,2);
  DECLARE @pisAtivoNew VARCHAR(1);
  DECLARE @pisRegNew VARCHAR(1);
  DECLARE @pisCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pisCodigoNew     = i.PIS_CODIGO
         ,@pisEntSaiNew    = UPPER(i.PIS_ENTSAI)  
         ,@pisNomeNew      = dbo.fncTranslate(i.PIS_NOME,60)
         ,@pisSnAliqNew    = UPPER(i.PIS_SNALIQ)  
         ,@pisPcIsentasNew = i.PIS_PCISENTAS
         ,@pisPcOutrasNew  = i.PIS_PCOUTRAS
         ,@pisAtivoNew     = UPPER(i.PIS_ATIVO)         
         ,@pisRegNew       = UPPER(i.PIS_REG)
         ,@pisCodUsrNew    = i.PIS_CODUSR         
         ,@usrApelidoNew   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New        = UP.UP_D14
         ,@upD31New        = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PIS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pisCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA INCLUIR NA TABELA CSTPIS',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(PIS_CODIGO,'OK') FROM CSTPIS WHERE PIS_NOME=@pisNomeNew;
    --IF( @uiCodigo <> 'OK' )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CSTPIS COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(PIS_NOME,'OK') FROM CSTPIS WHERE PIS_CODIGO=@pisCodigoNew;
    --IF( @uiNome <> 'OK' )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA CSTPIS %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @pisRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@pisRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END
    ---------------------------------------------
    -- A soma de isentas+outras deve ser 100 ou 0
    ---------------------------------------------
    IF( ((@pisPcIsentasNew+@pisPcOutrasNew)<>100) AND ((@pisPcIsentasNew+@pisPcOutrasNew)<>0) )
      RAISERROR('PERCENTUAL DE ISENTAS+OUTRAS DEVE SER 100,00 OU 0,00!',15,1);
    --  
    INSERT INTO dbo.CSTPIS( 
      PIS_CODIGO
      ,PIS_ENTSAI      
      ,PIS_NOME
      ,PIS_SNALIQ
      ,PIS_PCISENTAS
      ,PIS_PCOUTRAS
      ,PIS_ATIVO
      ,PIS_REG
      ,PIS_CODUSR) VALUES(
      @pisCodigoNew      -- PIS_CODIGO
      ,@pisEntSaiNew     -- PIS_ENTSAI      
      ,@pisNomeNew       -- PIS_NOME
      ,@pisSnAliqNew     -- PIS_SNALIQ
      ,@pisPcIsentasNew  -- PIS_PCISENTAS
      ,@pisPcOutrasNew   -- PIS_PCOUTRAS
      ,@pisAtivoNew      -- PIS_ATIVO
      ,@pisRegNew        -- PIS_REG
      ,@pisCodUsrNew     -- PIS_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCSTPIS(
      PIS_ACAO
      ,PIS_CODIGO
      ,PIS_ENTSAI      
      ,PIS_NOME
      ,PIS_SNALIQ
      ,PIS_PCISENTAS
      ,PIS_PCOUTRAS
      ,PIS_ATIVO
      ,PIS_REG
      ,PIS_CODUSR) VALUES(
      'I'                -- PIS_ACAO
      ,@pisCodigoNew     -- PIS_CODIGO
      ,@pisEntSaiNew     -- PIS_ENTSAI      
      ,@pisNomeNew       -- PIS_NOME
      ,@pisSnAliqNew     -- PIS_SNALIQ
      ,@pisPcIsentasNew  -- PIS_PCISENTAS
      ,@pisPcOutrasNew   -- PIS_PCOUTRAS
      ,@pisAtivoNew      -- PIS_ATIVO
      ,@pisRegNew        -- PIS_REG
      ,@pisCodUsrNew     -- PIS_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCSTPIS_BU ON dbo.VCSTPIS
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @pisCodigoNew VARCHAR(3);
  DECLARE @pisEntSaiNew VARCHAR(1);  
  DECLARE @pisNomeNew VARCHAR(60);
  DECLARE @pisSnAliqNew VARCHAR(1);  
  DECLARE @pisPcIsentasNew NUMERIC(6,2);
  DECLARE @pisPcOutrasNew NUMERIC(6,2);
  DECLARE @pisAtivoNew VARCHAR(1);
  DECLARE @pisRegNew VARCHAR(1);
  DECLARE @pisCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @pisCodigoNew     = i.PIS_CODIGO
         ,@pisEntSaiNew    = UPPER(i.PIS_ENTSAI)  
         ,@pisNomeNew      = dbo.fncTranslate(i.PIS_NOME,60)
         ,@pisSnAliqNew    = UPPER(i.PIS_SNALIQ)  
         ,@pisPcIsentasNew = i.PIS_PCISENTAS
         ,@pisPcOutrasNew  = i.PIS_PCOUTRAS
         ,@pisAtivoNew     = UPPER(i.PIS_ATIVO)
         ,@pisRegNew       = UPPER(i.PIS_REG)
         ,@pisCodUsrNew    = i.PIS_CODUSR         
         ,@usrApelidoNew   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New        = UP.UP_D14
         ,@upD31New        = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PIS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pisCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA ALTERAR NA TABELA CSTPIS',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @pisCodigoOld VARCHAR(3);
    DECLARE @pisEntSaiOld VARCHAR(1);    
    DECLARE @pisNomeOld VARCHAR(60);
    DECLARE @pisSnAliqOld VARCHAR(1);  
    DECLARE @pisPcIsentasOld NUMERIC(6,2);
    DECLARE @pisPcOutrasOld NUMERIC(6,2);
    DECLARE @pisAtivoOld VARCHAR(1);
    DECLARE @pisRegOld VARCHAR(1);
    DECLARE @pisCodUsrOld INTEGER;
    SELECT @pisCodigoOld     = d.PIS_CODIGO
           ,@pisEntSaiOld    = d.PIS_ENTSAI    
           ,@pisNomeOld      = d.PIS_NOME
           ,@pisSnAliqOld    = d.PIS_SNALIQ  
           ,@pisPcIsentasOld = d.PIS_PCISENTAS
           ,@pisPcOutrasOld  = d.PIS_PCOUTRAS
           ,@pisAtivoOld     = d.PIS_ATIVO
           ,@pisRegOld       = d.PIS_REG
           ,@pisCodUsrOld    = d.PIS_CODUSR         
      FROM CSTPIS d WHERE ((d.PIS_CODIGO=@pisCodigoNew) AND (d.PIS_ENTSAI=@pisEntSaiNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @pisCodigoOld<>@pisCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @pisEntSaiOld<>@pisEntSaiNew )
      RAISERROR('CAMPO ENTRADA/SAIDA NAO PODE SER ALTERADO',15,1);  
      
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @pisNomeOld<>@pisNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(PIS_CODIGO,'OK') FROM CSTPIS WHERE PIS_NOME=@pisNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CSTPIS COM CODIGO %s',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @pisRegOld <> @pisRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@pisRegOld,@pisRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    ---------------------------------------------
    -- A soma de isentas+outras deve ser 100 ou 0
    ---------------------------------------------
    IF( ((@pisPcIsentasNew+@pisPcOutrasNew)<>100) AND ((@pisPcIsentasNew+@pisPcOutrasNew)<>0) )
      RAISERROR('PERCENTUAL DE ISENTAS+OUTRAS DEVE SER 100,00 OU 0,00!',15,1);
    --  
    --  
    UPDATE dbo.CSTPIS
       SET PIS_NOME      = @pisNomeNew
          ,PIS_SNALIQ    = @pisSnAliqNew
          ,PIS_PCISENTAS = @pisPcIsentasNew
          ,PIS_PCOUTRAS  = @pisPcOutrasNew
          ,PIS_ATIVO     = @pisAtivoNew
          ,PIS_REG       = @pisRegNew
          ,PIS_CODUSR    = @pisCodUsrNew
    WHERE ((PIS_CODIGO=@pisCodigoNew) AND (PIS_ENTSAI=@pisEntSaiNew));        
    -- Gravando LOG
    IF( (@pisNomeOld<>@pisNomeNew) OR (@pisPcIsentasOld<>@pisPcIsentasNew) OR (@pisPcOutrasOld<>@pisPcOutrasNew) 
      OR (@pisSnAliqOld<>@pisSnAliqNew) OR (@pisAtivoOld<>@pisAtivoNew) OR (@pisRegOld<>@pisRegNew) ) BEGIN
      INSERT INTO dbo.BKPCSTPIS(
        PIS_ACAO
        ,PIS_CODIGO
        ,PIS_ENTSAI        
        ,PIS_NOME
        ,PIS_SNALIQ
        ,PIS_PCISENTAS
        ,PIS_PCOUTRAS
        ,PIS_ATIVO
        ,PIS_REG
        ,PIS_CODUSR) VALUES(
        'A'                -- PIS_ACAO
        ,@pisCodigoNew     -- PIS_CODIGO
        ,@pisEntSaiNew     -- PIS_ENTSAI        
        ,@pisNomeNew       -- PIS_NOME
        ,@pisSnAliqNew     -- PIS_SNALIQ
        ,@pisPcIsentasNew  -- PIS_PCISENTAS
        ,@pisPcOutrasNew   -- PIS_PCOUTRAS
        ,@pisAtivoNew      -- PIS_ATIVO
        ,@pisRegNew        -- PIS_REG
        ,@pisCodUsrNew     -- PIS_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCSTPIS_BD ON dbo.VCSTPIS
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pisCodigoOld VARCHAR(3);
  DECLARE @pisEntSaiOld VARCHAR(1);  
  DECLARE @pisNomeOld VARCHAR(60);
  DECLARE @pisSnAliqOld VARCHAR(1);  
  DECLARE @pisPcIsentasOld NUMERIC(6,2);
  DECLARE @pisPcOutrasOld NUMERIC(6,2);
  DECLARE @pisAtivoOld VARCHAR(1);
  DECLARE @pisRegOld VARCHAR(1);
  DECLARE @pisCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD14Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pisCodigoOld     = d.PIS_CODIGO
         ,@pisEntSaiOld    = d.PIS_ENTSAI  
         ,@pisNomeOld      = d.PIS_NOME
         ,@pisSnAliqOld    = d.PIS_SNALIQ  
         ,@pisPcIsentasOld = d.PIS_PCISENTAS
         ,@pisPcOutrasOld  = d.PIS_PCOUTRAS
         ,@pisAtivoOld     = d.PIS_ATIVO
         ,@pisRegOld       = d.PIS_REG
         ,@pisCodUsrOld    = d.PIS_CODUSR         
         ,@usrApelidoOld   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14Old        = UP.UP_D14
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PIS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pisCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD14Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA EXCLUIR NA TABELA CSTPIS',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@pisRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@pisCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('CSTPIS UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@pisCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('CSTPIS UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.CSTPIS WHERE ((PIS_CODIGO=@pisCodigoOld) AND (PIS_ENTSAI=@pisEntSaiOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPCSTPIS(
      PIS_ACAO
      ,PIS_CODIGO
      ,PIS_ENTSAI      
      ,PIS_NOME
      ,PIS_SNALIQ
      ,PIS_PCISENTAS
      ,PIS_PCOUTRAS
      ,PIS_ATIVO
      ,PIS_REG
      ,PIS_CODUSR) VALUES(
      'E'                -- PIS_ACAO
      ,@pisCodigoOld     -- PIS_CODIGO
      ,@pisEntSaiOld     -- PIS_ENTSAI      
      ,@pisNomeOld       -- PIS_NOME
      ,@pisSnAliqOld     -- PIS_SNALIQ
      ,@pisPcIsentasOld  -- PIS_PCISENTAS
      ,@pisPcOutrasOld   -- PIS_PCOUTRAS
      ,@pisAtivoOld      -- PIS_ATIVO
      ,@pisRegOld        -- PIS_REG
      ,@pisCodUsrOld     -- PIS_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCSTPIS_BUD ON dbo.BKPCSTPIS
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                              C S T S I M P L E S
--trgcstsimples
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewCSTSIMPLES_BI ON dbo.VCSTSIMPLES
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- SN_CODIGO      | PK  |    |    | VC(03) NN          |  
  -- SN_ENTSAI      |PK/CC|    |    | VC(1) NN           |  
  -- SN_NOME        |     |    |    | VC(60) NN          |
  -- SN_SNALIQ      | CC  |    |    | VC(1) NN           |  
  -- SN_PCISENTAS   |     |    |    | NUM(6,2) NN        | Soma de Isentas+Outras deve ser 0 ou 100
  -- SN_PCOUTRAS    |     |    |    | NUM(6,2) NN        | Soma de Isentas+Outras deve ser 0 ou 100
  -- SN_REDUCAOBC   | CC  |    |    | VC(1) NN           |    
  -- SN_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- SN_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- SN_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D14         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(60) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @snCodigoNew VARCHAR(3);
  DECLARE @snEntSaiNew VARCHAR(1);  
  DECLARE @snNomeNew VARCHAR(60);
  DECLARE @snSnAliqNew VARCHAR(1);  
  DECLARE @snPcIsentasNew NUMERIC(6,2);
  DECLARE @snPcOutrasNew NUMERIC(6,2);
  DECLARE @snReducaoBcNew VARCHAR(1);
  DECLARE @snAtivoNew VARCHAR(1);
  DECLARE @snRegNew VARCHAR(1);
  DECLARE @snCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @snCodigoNew     = i.SN_CODIGO
         ,@snEntSaiNew    = UPPER(i.SN_ENTSAI)  
         ,@snNomeNew      = dbo.fncTranslate(i.SN_NOME,60)
         ,@snSnAliqNew    = UPPER(i.SN_SNALIQ)  
         ,@snPcIsentasNew = i.SN_PCISENTAS
         ,@snPcOutrasNew  = i.SN_PCOUTRAS
         ,@snReducaoBcNew = UPPER(i.SN_REDUCAOBC)
         ,@snAtivoNew     = UPPER(i.SN_ATIVO)         
         ,@snRegNew       = UPPER(i.SN_REG)
         ,@snCodUsrNew    = i.SN_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New       = UP.UP_D14
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.SN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@snCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA INCLUIR NA TABELA CSTSIMPLES',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(SN_CODIGO,'OK') FROM CSTSIMPLES WHERE SN_NOME=@snNomeNew;
    --IF( @uiCodigo <> 'OK' )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CSTSIMPLES COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(SN_NOME,'OK') FROM CSTSIMPLES WHERE SN_CODIGO=@snCodigoNew;
    --IF( @uiNome <> 'OK' )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA CSTSIMPLES %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @snRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@snRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END
    ---------------------------------------------
    -- A soma de isentas+outras deve ser 100 ou 0
    ---------------------------------------------
    IF( ((@snPcIsentasNew+@snPcOutrasNew)<>100) AND ((@snPcIsentasNew+@snPcOutrasNew)<>0) )
      RAISERROR('PERCENTUAL DE ISENTAS+OUTRAS DEVE SER 100,00 OU 0,00!',15,1);
    --  
    INSERT INTO dbo.CSTSIMPLES( 
      SN_CODIGO
      ,SN_ENTSAI      
      ,SN_NOME
      ,SN_SNALIQ
      ,SN_PCISENTAS
      ,SN_PCOUTRAS
      ,SN_REDUCAOBC
      ,SN_ATIVO
      ,SN_REG
      ,SN_CODUSR) VALUES(
      @snCodigoNew      -- SN_CODIGO
      ,@snEntSaiNew     -- SN_ENTSAI      
      ,@snNomeNew       -- SN_NOME
      ,@snSnAliqNew     -- SN_SNALIQ
      ,@snPcIsentasNew  -- SN_PCISENTAS
      ,@snPcOutrasNew   -- SN_PCOUTRAS
      ,@snReducaoBcNew  -- SN_REDUCAOBC
      ,@snAtivoNew      -- SN_ATIVO
      ,@snRegNew        -- SN_REG
      ,@snCodUsrNew     -- SN_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPCSTSIMPLES(
      SN_ACAO
      ,SN_CODIGO
      ,SN_ENTSAI      
      ,SN_NOME
      ,SN_SNALIQ
      ,SN_PCISENTAS
      ,SN_PCOUTRAS
      ,SN_REDUCAOBC
      ,SN_ATIVO
      ,SN_REG
      ,SN_CODUSR) VALUES(
      'I'               -- SN_ACAO
      ,@snCodigoNew     -- SN_CODIGO
      ,@snEntSaiNew     -- SN_ENTSAI      
      ,@snNomeNew       -- SN_NOME
      ,@snSnAliqNew     -- SN_SNALIQ
      ,@snPcIsentasNew  -- SN_PCISENTAS
      ,@snPcOutrasNew   -- SN_PCOUTRAS
      ,@snReducaoBcNew  -- SN_REDUCAOBC
      ,@snAtivoNew      -- SN_ATIVO
      ,@snRegNew        -- SN_REG
      ,@snCodUsrNew     -- SN_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCSTSIMPLES_BU ON dbo.VCSTSIMPLES
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @snCodigoNew VARCHAR(3);
  DECLARE @snEntSaiNew VARCHAR(1);  
  DECLARE @snNomeNew VARCHAR(60);
  DECLARE @snSnAliqNew VARCHAR(1);  
  DECLARE @snPcIsentasNew NUMERIC(6,2);
  DECLARE @snPcOutrasNew NUMERIC(6,2);
  DECLARE @snReducaoBcNew VARCHAR(1);
  DECLARE @snAtivoNew VARCHAR(1);
  DECLARE @snRegNew VARCHAR(1);
  DECLARE @snCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @snCodigoNew     = i.SN_CODIGO
         ,@snEntSaiNew    = UPPER(i.SN_ENTSAI)  
         ,@snNomeNew      = dbo.fncTranslate(i.SN_NOME,60)
         ,@snSnAliqNew    = UPPER(i.SN_SNALIQ)  
         ,@snPcIsentasNew = i.SN_PCISENTAS
         ,@snPcOutrasNew  = i.SN_PCOUTRAS
         ,@snReducaoBcNew = UPPER(i.SN_REDUCAOBC)
         ,@snAtivoNew     = UPPER(i.SN_ATIVO)
         ,@snRegNew       = UPPER(i.SN_REG)
         ,@snCodUsrNew    = i.SN_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New       = UP.UP_D14
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.SN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@snCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA ALTERAR NA TABELA CSTSIMPLES',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @snCodigoOld VARCHAR(3);
    DECLARE @snEntSaiOld VARCHAR(1);    
    DECLARE @snNomeOld VARCHAR(60);
    DECLARE @snSnAliqOld VARCHAR(1);  
    DECLARE @snPcIsentasOld NUMERIC(6,2);
    DECLARE @snPcOutrasOld NUMERIC(6,2);
    DECLARE @snReducaoBcOld VARCHAR(1);
    DECLARE @snAtivoOld VARCHAR(1);
    DECLARE @snRegOld VARCHAR(1);
    DECLARE @snCodUsrOld INTEGER;
    SELECT @snCodigoOld     = d.SN_CODIGO
           ,@snEntSaiOld    = d.SN_ENTSAI    
           ,@snNomeOld      = d.SN_NOME
           ,@snSnAliqOld    = d.SN_SNALIQ  
           ,@snPcIsentasOld = d.SN_PCISENTAS
           ,@snPcOutrasOld  = d.SN_PCOUTRAS
           ,@snReducaoBcOld = d.SN_REDUCAOBC
           ,@snAtivoOld     = d.SN_ATIVO
           ,@snRegOld       = d.SN_REG
           ,@snCodUsrOld    = d.SN_CODUSR         
      FROM CSTSIMPLES d WHERE ((d.SN_CODIGO=@snCodigoNew) AND (d.SN_ENTSAI=@snEntSaiNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @snCodigoOld<>@snCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @snEntSaiOld<>@snEntSaiNew )
      RAISERROR('CAMPO ENTRADA/SAIDA NAO PODE SER ALTERADO',15,1);  
      
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @snNomeOld<>@snNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(SN_CODIGO,'OK') FROM CSTSIMPLES WHERE SN_NOME=@snNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CSTSIMPLES COM CODIGO %s',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @snRegOld <> @snRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@snRegOld,@snRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    ---------------------------------------------
    -- A soma de isentas+outras deve ser 100 ou 0
    ---------------------------------------------
    IF( ((@snPcIsentasNew+@snPcOutrasNew)<>100) AND ((@snPcIsentasNew+@snPcOutrasNew)<>0) )
      RAISERROR('PERCENTUAL DE ISENTAS+OUTRAS DEVE SER 100,00 OU 0,00!',15,1);
    --  
    --  
    UPDATE dbo.CSTSIMPLES
       SET SN_NOME      = @snNomeNew
          ,SN_SNALIQ    = @snSnAliqNew
          ,SN_PCISENTAS = @snPcIsentasNew
          ,SN_PCOUTRAS  = @snPcOutrasNew
          ,SN_REDUCAOBC = @snReducaoBcNew
          ,SN_ATIVO     = @snAtivoNew
          ,SN_REG       = @snRegNew
          ,SN_CODUSR    = @snCodUsrNew
    WHERE ((SN_CODIGO=@snCodigoNew) AND (SN_ENTSAI=@snEntSaiNew));     
    -- Gravando LOG
    IF( (@snNomeOld<>@snNomeNew) OR (@snPcIsentasOld<>@snPcIsentasNew) OR (@snPcOutrasOld<>@snPcOutrasNew) 
      OR (@snReducaoBcOld<>@snReducaoBcNew) OR (@snSnAliqOld<>@snSnAliqNew) OR (@snAtivoOld<>@snAtivoNew) OR (@snRegOld<>@snRegNew) ) BEGIN
      INSERT INTO dbo.BKPCSTSIMPLES(
        SN_ACAO
        ,SN_CODIGO
        ,SN_ENTSAI        
        ,SN_NOME
        ,SN_SNALIQ
        ,SN_PCISENTAS
        ,SN_PCOUTRAS
        ,SN_REDUCAOBC
        ,SN_ATIVO
        ,SN_REG
        ,SN_CODUSR) VALUES(
        'A'                -- SN_ACAO
        ,@snCodigoNew     -- SN_CODIGO
        ,@snEntSaiNew     -- SN_ENTSAI        
        ,@snNomeNew       -- SN_NOME
        ,@snSnAliqNew     -- SN_SNALIQ
        ,@snPcIsentasNew  -- SN_PCISENTAS
        ,@snPcOutrasNew   -- SN_PCOUTRAS
        ,@snReducaoBcNew  -- SN_REDUCAOBC
        ,@snAtivoNew      -- SN_ATIVO
        ,@snRegNew        -- SN_REG
        ,@snCodUsrNew     -- SN_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewCSTSIMPLES_BD ON dbo.VCSTSIMPLES
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @snCodigoOld VARCHAR(3);
  DECLARE @snEntSaiOld VARCHAR(1);  
  DECLARE @snNomeOld VARCHAR(60);
  DECLARE @snSnAliqOld VARCHAR(1);  
  DECLARE @snPcIsentasOld NUMERIC(6,2);
  DECLARE @snPcOutrasOld NUMERIC(6,2);
  DECLARE @snReducaoBcOld VARCHAR(1);
  DECLARE @snAtivoOld VARCHAR(1);
  DECLARE @snRegOld VARCHAR(1);
  DECLARE @snCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD14Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @snCodigoOld     = d.SN_CODIGO
         ,@snEntSaiOld    = d.SN_ENTSAI  
         ,@snNomeOld      = d.SN_NOME
         ,@snSnAliqOld    = d.SN_SNALIQ  
         ,@snPcIsentasOld = d.SN_PCISENTAS
         ,@snPcOutrasOld  = d.SN_PCOUTRAS
         ,@snReducaoBcOld = d.SN_REDUCAOBC
         ,@snAtivoOld     = d.SN_ATIVO
         ,@snRegOld       = d.SN_REG
         ,@snCodUsrOld    = d.SN_CODUSR         
         ,@usrApelidoOld   = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld    = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14Old        = UP.UP_D14
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.SN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@snCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD14Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA EXCLUIR NA TABELA CSTSIMPLES',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@snRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@snCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('CSTSIMPLES UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@snCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('CSTSIMPLES UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.CSTSIMPLES WHERE ((SN_CODIGO=@snCodigoOld) AND (SN_ENTSAI=@snEntSaiOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPCSTSIMPLES(
      SN_ACAO
      ,SN_CODIGO
      ,SN_ENTSAI      
      ,SN_NOME
      ,SN_SNALIQ
      ,SN_PCISENTAS
      ,SN_PCOUTRAS
      ,SN_REDUCAOBC
      ,SN_ATIVO
      ,SN_REG
      ,SN_CODUSR) VALUES(
      'E'                -- SN_ACAO
      ,@snCodigoOld     -- SN_CODIGO
      ,@snEntSaiOld     -- SN_ENTSAI      
      ,@snNomeOld       -- SN_NOME
      ,@snSnAliqOld     -- SN_SNALIQ
      ,@snPcIsentasOld  -- SN_PCISENTAS
      ,@snPcOutrasOld   -- SN_PCOUTRAS
      ,@snReducaoBcOld  -- SN_REDUCAOBC
      ,@snAtivoOld      -- SN_ATIVO
      ,@snRegOld        -- SN_REG
      ,@snCodUsrOld     -- SN_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPCSTSIMPLES_BUD ON dbo.BKPCSTSIMPLES
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                     E M B A L A G E M
-- trgembalagem
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewEMBALAGEM_BI ON dbo.VEMBALAGEM
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- EMB_CODIGO     | PK  |    |    | VC(03) NN          |
  -- EMB_NOME       |     |    |    | VC(30) NN          |
  -- EMB_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- EMB_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- EMB_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D24         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(30) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @embCodigoNew VARCHAR(3);
  DECLARE @embNomeNew VARCHAR(30);
  DECLARE @embAtivoNew VARCHAR(1);
  DECLARE @embRegNew VARCHAR(1);
  DECLARE @embCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD24New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @embCodigoNew   = dbo.fncTranslate(i.EMB_CODIGO,3)
         ,@embNomeNew    = dbo.fncTranslate(i.EMB_NOME,30)
         ,@embAtivoNew   = UPPER(i.EMB_ATIVO)
         ,@embRegNew     = UPPER(i.EMB_REG)
         ,@embCodUsrNew  = i.EMB_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD24New      = UP.UP_D24
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.EMB_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@embCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD24New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 24 PARA INCLUIR NA TABELA EMBALAGEM',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(EMB_CODIGO,'OK') FROM EMBALAGEM WHERE EMB_NOME=@embNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EMBALAGEM COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(EMB_NOME,'OK') FROM EMBALAGEM WHERE EMB_CODIGO=@embCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA EMBALAGEM %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @embRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@embRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.EMBALAGEM( 
      EMB_CODIGO
      ,EMB_NOME
      ,EMB_ATIVO
      ,EMB_REG
      ,EMB_CODUSR) VALUES(
      @embCodigoNew   -- EMB_CODIGO
      ,@embNomeNew    -- EMB_NOME
      ,@embAtivoNew   -- EMB_ATIVO
      ,@embRegNew     -- EMB_REG
      ,@embCodUsrNew  -- EMB_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPEMBALAGEM(
      EMB_ACAO
      ,EMB_CODIGO
      ,EMB_NOME
      ,EMB_ATIVO
      ,EMB_REG
      ,EMB_CODUSR) VALUES(
      'I'                       -- EMB_ACAO
      ,@embCodigoNew            -- EMB_CODIGO
      ,@embNomeNew              -- EMB_NOME
      ,@embAtivoNew             -- EMB_ATIVO
      ,@embRegNew               -- EMB_REG
      ,@embCodUsrNew            -- EMB_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMBALAGEM_BU ON dbo.VEMBALAGEM
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @embCodigoNew VARCHAR(3);
  DECLARE @embNomeNew VARCHAR(30);
  DECLARE @embAtivoNew VARCHAR(1);
  DECLARE @embRegNew VARCHAR(1);
  DECLARE @embCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD24New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @embCodigoNew   = i.EMB_CODIGO
         ,@embNomeNew    = dbo.fncTranslate(i.EMB_NOME,30)
         ,@embAtivoNew   = UPPER(i.EMB_ATIVO)
         ,@embRegNew     = UPPER(i.EMB_REG)
         ,@embCodUsrNew  = i.EMB_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD24New      = UP.UP_D24
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.EMB_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@embCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD24New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 24 PARA ALTERAR NA TABELA EMBALAGEM',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @embCodigoOld VARCHAR(3);
    DECLARE @embNomeOld VARCHAR(30);
    DECLARE @embAtivoOld VARCHAR(1);
    DECLARE @embRegOld VARCHAR(1);
    DECLARE @embCodUsrOld INTEGER;
    SELECT @embCodigoOld   = d.EMB_CODIGO
           ,@embNomeOld    = d.EMB_NOME
           ,@embAtivoOld   = d.EMB_ATIVO
           ,@embRegOld     = d.EMB_REG
           ,@embCodUsrOld  = d.EMB_CODUSR         
      FROM EMBALAGEM d WHERE d.EMB_CODIGO=@embCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @embCodigoOld<>@embCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @embNomeOld<>@embNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(EMB_CODIGO,'OK') FROM EMBALAGEM WHERE EMB_NOME=@embNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EMBALAGEM COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @embRegOld <> @embRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@embRegOld,@embRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.EMBALAGEM
       SET EMB_NOME   = @embNomeNew
          ,EMB_ATIVO  = @embAtivoNew
          ,EMB_REG    = @embRegNew
          ,EMB_CODUSR = @embCodUsrNew
    WHERE EMB_CODIGO  = @embCodigoNew;     
    -- Gravando LOG
    IF( (@embNomeOld<>@embNomeNew) OR (@embAtivoOld<>@embAtivoNew) OR (@embRegOld<>@embRegNew) ) BEGIN
      INSERT INTO dbo.BKPEMBALAGEM(
        EMB_ACAO
        ,EMB_CODIGO
        ,EMB_NOME
        ,EMB_ATIVO
        ,EMB_REG
        ,EMB_CODUSR) VALUES(
        'A'             -- EMB_ACAO
        ,@embCodigoNew  -- EMB_CODIGO
        ,@embNomeNew    -- EMB_NOME
        ,@embAtivoNew   -- EMB_ATIVO
        ,@embRegNew     -- EMB_REG
        ,@embCodUsrNew  -- EMB_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMBALAGEM_BD ON dbo.VEMBALAGEM
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @embCodigoOld VARCHAR(3);
  DECLARE @embNomeOld VARCHAR(30);
  DECLARE @embAtivoOld VARCHAR(1);
  DECLARE @embRegOld VARCHAR(1);
  DECLARE @embCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD24Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @embCodigoOld   = d.EMB_CODIGO
         ,@embNomeOld    = d.EMB_NOME
         ,@embAtivoOld   = d.EMB_ATIVO
         ,@embRegOld     = d.EMB_REG
         ,@embCodUsrOld  = d.EMB_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD24Old      = UP.UP_D24
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.EMB_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@embCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD24Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 24 PARA EXCLUIR NA TABELA EMBALAGEM',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@embRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@embCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('EMBALAGEM UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@embCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('EMBALAGEM UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.EMBALAGEM WHERE EMB_CODIGO=@embCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPEMBALAGEM(
      EMB_ACAO
      ,EMB_CODIGO
      ,EMB_NOME
      ,EMB_ATIVO
      ,EMB_REG
      ,EMB_CODUSR) VALUES(
      'E'               -- EMB_ACAO
      ,@embCodigoOld    -- EMB_CODIGO
      ,@embNomeOld      -- EMB_NOME
      ,@embAtivoOld     -- EMB_ATIVO
      ,@embRegOld       -- EMB_REG
      ,@embCodUsrOld    -- EMB_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPEMBALAGEM_BUD ON dbo.BKPEMBALAGEM
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                      E M P R E S A
-- trgempresa
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewEMPRESA_BI ON dbo.VEMPRESA
INSTEAD OF INSERT 
AS
BEGIN
   -- ----------------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO                 |INS  |UPD |DEL | TIPO               | Obs
   -- ----------------------|-----|----|----|--------------------|----------------------------------------------------------
   -- EMP_CODIGO            | PK  |    |    | INT                |  Auto incremento
   -- EMP_NOME              |     |    |    | VC(40) NN          |
   -- EMP_APELIDO           |     |    |    | VC(15) NN          |  
   -- EMP_CNPJ              |     |    |    | VC(14) NN          |   
   -- EMP_INSESTAD          |     |    |    | VC(19) NN          |   
   -- EMP_CODCDD            | SEL |    |    | VC(7) NN           | Campo relacionado (CIDADE)   
   -- CDD_NOME              | SEL |    |    | VC(30) NN          | Campo relacionado (CIDADE)      
   -- EMP_CODLGR            | SEL |    |    | VC(5) NN           | Campo relacionado (LOGRADOURO)   
   -- LGR_NOME              | SEL |    |    | VC(20) NN          | Campo relacionado (LOGRADOURO)      
   -- EMP_ENDERECO          |     |    |    | VC(60) NN          |
   -- EMP_NUMERO            |     |    |    | VC(10) NN          |   
   -- EMP_CEP               |     |    |    | VC(8) NN           |
   -- EMP_BAIRRO            |     |    |    | VC(15) NN          |   
   -- EMP_FONE              |     |    |    | VC(10) NN          |      
   -- EMP_CODETF            | SEL |    |    | VC(3) NN           | Campo relacionado (EMPRESATRIBFED)
   -- ETF_NOME              | SEL |    |    | VC(20) NN          | Campo relacionado (EMPRESATRIBFED)
   -- EMP_ALIQCOFINS        |     |    |    | NUM(6,2) NN        |      
   -- EMP_ALIQPIS           |     |    |    | NUM(6,2) NN        |      
   -- EMP_ALIQCSLL          |     |    |    | NUM(6,2) NN        |      
   -- EMP_BCPRESUMIDO       |     |    |    | NUM(6,2) NN        |      
   -- EMP_ALIQIRPRESUMIDO   |     |    |    | NUM(6,2) NN        |      
   -- EMP_ALIQCSLLPRESUMIDO |     |    |    | NUM(6,2) NN        |      
   -- EMP_ALIQIRRF          |     |    |    | NUM(6,2) NN        |      
   -- EMP_ANEXOSIMPLES      |     |    |    | INT                |
   -- EMP_CODETP            | SEL |    |    | VC(3) NN           | Campo relacionado (EMPRESATIPO)
   -- ETP_NOME              | SEL |    |    | VC(20) NN          | Campo relacionado (EMPRESATIPO)
   -- EMP_CODERM            | SEL |    |    | VC(3) NN           | Campo relacionado (EMPRESARAMO)
   -- ERM_NOME              | SEL |    |    | VC(25) NN          | Campo relacionado (EMPRESARAMO)
   -- EMP_CODERT            | SEL |    |    | VC(3) NN           | Campo relacionado (EMPRESAREGTRIB)
   -- ERT_NOME              | SEL |    |    | VC(25) NN          | Campo relacionado (EMPRESAREGTRIB)
   -- EMP_SMTPUSERNAME      |     |    |    | VC(60)             |
   -- EMP_SMTPPASSWORD      |     |    |    | VC(30)             |
   -- EMP_SMTPHOST          |     |    |    | VC(30)             |
   -- EMP_SMTPPORT          |     |    |    | VC(4)              |
   -- EMP_CERTPATH          |     |    |    | VC(100)            |
   -- EMP_CERTSENHA         |     |    |    | VC(20)             |
   -- EMP_CERTVALIDADE      |     |    |    | DAT                |
   -- EMP_PRODHOMOL         | CC  |    |    | VC(1) NN           |  
   -- EMP_CONTINGENCIA      | CC  |    |    | VC(1) NN           |    
   -- EMP_ATIVO             | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- EMP_REG               | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- EMP_CODUSR            | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO           | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB            | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D03                | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31                | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ----------------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  DECLARE @uiCnpj INTEGER      = 0;     -- Para procurar unique index
  DECLARE @fkStrCdd VARCHAR(7) = 'OK';  -- Para procurar campo foreign key str (CIDADE)
  DECLARE @fkStrLgr VARCHAR(5) = 'OK';  -- Para procurar campo foreign key str (LOGRADOURO)
  DECLARE @fkStrEtf VARCHAR(3) = 'OK';  -- Para procurar campo foreign key str (EMPRESATRIBFED)
  DECLARE @fkStrEtp VARCHAR(3) = 'OK';  -- Para procurar campo foreign key str (EMPRESATIPO)
  DECLARE @fkStrErm VARCHAR(3) = 'OK';  -- Para procurar campo foreign key str (EMPRESARAMO)
  DECLARE @fkStrErt VARCHAR(3) = 'OK';  -- Para procurar campo foreign key str (EMPRESAREGTRIB)
  DECLARE @fkIntUsr INTEGER = 0 ;       -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntUp INTEGER = 0 ;        -- Para procurar campo foreign key int (USUARIOPERFIL)
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @empCodigoNew INTEGER;
  DECLARE @empNomeNew VARCHAR(40);
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @empCnpjNew VARCHAR(14);
  DECLARE @empInsNew VARCHAR(19);
  DECLARE @empCodCddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @empCodLgrNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @empEnderecoNew VARCHAR(60);
  DECLARE @empNumeroNew VARCHAR(10);
  DECLARE @empCepNew VARCHAR(8);
  DECLARE @empBairroNew VARCHAR(15);
  DECLARE @empFoneNew VARCHAR(10);
  DECLARE @empCodEtfNew VARCHAR(3);
  DECLARE @etfNomeNew VARCHAR(20);
  DECLARE @empAliqCofinsNew NUMERIC(6,2);
  DECLARE @empAliqPisNew NUMERIC(6,2);
  DECLARE @empAliqCsllNew NUMERIC(6,2);
  DECLARE @empBcPresumidoNew NUMERIC(6,2);
  DECLARE @empAliqIrPresumidoNew NUMERIC(6,2);
  DECLARE @empAliqCsllPresumidoNew NUMERIC(6,2);
  DECLARE @empAliqIrrfNew NUMERIC(6,2);
  DECLARE @empAnexoSimplesNew INTEGER;
  DECLARE @empCodEtpNew VARCHAR(3);
  DECLARE @etpNomeNew VARCHAR(20);
  DECLARE @empCodErmNew VARCHAR(3);
  DECLARE @ermNomeNew VARCHAR(25);
  DECLARE @empCodErtNew VARCHAR(3);
  DECLARE @ertNomeNew VARCHAR(25);
  DECLARE @empSmtpUserNameNew VARCHAR(60);
  DECLARE @empSmtpPasswordNew VARCHAR(30);
  DECLARE @empSmtpHostNew VARCHAR(30);
  DECLARE @empSmtpPortNew VARCHAR(4);
  DECLARE @empCertPathNew VARCHAR(100);
  DECLARE @empCertSenhaNew VARCHAR(20);
  DECLARE @empCertValidadeNew DATE;
  DECLARE @empProdHomolNew VARCHAR(1);
  DECLARE @empContingenciaNew VARCHAR(1);
  DECLARE @empAtivoNew VARCHAR(1);
  DECLARE @empRegNew VARCHAR(1);
  DECLARE @empCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmpubNew VARCHAR(1);
  DECLARE @upD03New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT
    @empCodigoNew             = i.EMP_CODIGO
    ,@empNomeNew              = dbo.fncTranslate(i.EMP_NOME,40)
    ,@empApelidoNew           = dbo.fncTranslate(i.EMP_APELIDO,15)
    ,@empCnpjNew              = dbo.fncTranslate(i.EMP_CNPJ,14)
    ,@empInsNew               = COALESCE(dbo.fncTranslate(i.EMP_INSESTAD,19),'NSA')
    ,@empCodCddNew            = dbo.fncTranslate(i.EMP_CODCDD,7)
    ,@cddNomeNew              = COALESCE(CDD.CDD_NOME,'ERRO')
    ,@empCodLgrNew            = dbo.fncTranslate(i.EMP_CODLGR,5)
    ,@lgrNomeNew              = COALESCE(LGR.LGR_NOME,'ERRO')
    ,@empEnderecoNew          = dbo.fncTranslate(i.EMP_ENDERECO,60)
    ,@empNumeroNew            = dbo.fncTranslate(i.EMP_NUMERO,10)
    ,@empCepNew               = dbo.fncTranslate(i.EMP_CEP,8)
    ,@empBairroNew            = dbo.fncTranslate(i.EMP_BAIRRO,15)
    ,@empFoneNew              = dbo.fncTranslate(i.EMP_FONE,10)
    ,@empCodEtfNew            = dbo.fncTranslate(i.EMP_CODETF,3)
    ,@etfNomeNew              = COALESCE(ETF.ETF_NOME,'ERRO')
    ,@empAliqCofinsNew        = i.EMP_ALIQCOFINS
    ,@empAliqPisNew           = i.EMP_ALIQPIS
    ,@empAliqCsllNew          = i.EMP_ALIQCSLL
    ,@empBcPresumidoNew       = i.EMP_BCPRESUMIDO
    ,@empAliqIrPresumidoNew   = i.EMP_ALIQIRPRESUMIDO
    ,@empAliqCsllPresumidoNew = i.EMP_ALIQCSLLPRESUMIDO
    ,@empAliqIrrfNew          = i.EMP_ALIQIRRF
    ,@empAnexoSimplesNew      = i.EMP_ANEXOSIMPLES
    ,@empCodEtpNew            = dbo.fncTranslate(i.EMP_CODETP,3)
    ,@etpNomeNew              = COALESCE(ETP.ETP_NOME,'ERRO')
    ,@empCodErmNew            = dbo.fncTranslate(i.EMP_CODERM,3)
    ,@ermNomeNew              = COALESCE(ERM.ERM_NOME,'ERRO')
    ,@empCodErtNew            = dbo.fncTranslate(i.EMP_CODERT,3)
    ,@ertNomeNew              = COALESCE(ERT.ERT_NOME,'ERRO')
    ,@empSmtpUserNameNew      = dbo.fncTranslate(i.EMP_SMTPUSERNAME,60)
    ,@empSmtpPasswordNew      = dbo.fncTranslate(i.EMP_SMTPPASSWORD,30)
    ,@empSmtpHostNew          = dbo.fncTranslate(i.EMP_SMTPHOST,30)
    ,@empSmtpPortNew          = dbo.fncTranslate(i.EMP_SMTPPORT,4)
    ,@empCertPathNew          = dbo.fncTranslate(i.EMP_CERTPATH,100)
    ,@empCertSenhaNew         = dbo.fncTranslate(i.EMP_CERTSENHA,20)
    ,@empCertValidadeNew      = i.EMP_CERTVALIDADE
    ,@empProdHomolNew         = dbo.fncTranslate(i.EMP_PRODHOMOL,1)
    ,@empContingenciaNew      = dbo.fncTranslate(i.EMP_CONTINGENCIA,1)
    ,@empAtivoNew             = UPPER(i.EMP_ATIVO)
    ,@empRegNew               = UPPER(i.EMP_REG)
    ,@empCodUsrNew            = i.EMP_CODUSR
    ,@usrApelidoNew           = COALESCE(USR.USR_APELIDO,'ERRO')
    ,@usrAdmpubNew            = COALESCE(USR.USR_ADMPUB,'ERRO')
    ,@upD03New                = UP.UP_D03
    ,@upD31New                = UP.UP_D31
  FROM inserted i
  LEFT OUTER JOIN CIDADE CDD ON i.EMP_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'
  LEFT OUTER JOIN LOGRADOURO LGR ON i.EMP_CODLGR=LGR.LGR_CODIGO AND LGR.LGR_ATIVO='S'
  LEFT OUTER JOIN EMPRESATRIBFED ETF ON i.EMP_CODETF=ETF.ETF_CODIGO AND ETF.ETF_ATIVO='S'
  LEFT OUTER JOIN EMPRESATIPO ETP ON i.EMP_CODETP=ETP.ETP_CODIGO AND ETP.ETP_ATIVO='S'
  LEFT OUTER JOIN EMPRESARAMO ERM ON i.EMP_CODERM=ERM.ERM_CODIGO AND ERM.ERM_ATIVO='S'
  LEFT OUTER JOIN EMPRESAREGTRIB ERT ON i.EMP_CODERT=ERT.ERT_CODIGO AND ERT.ERT_ATIVO='S'
  LEFT OUTER JOIN USUARIO USR ON i.EMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
  LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@empCodCddNew);
    IF( @lgrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LOGRADOURO %s PARA ESTE REGISTRO',15,1,@empCodLgrNew);
    IF( @etfNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESATRIBFED %s PARA ESTE REGISTRO',15,1,@empCodEtfNew);
    IF( @etpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESATIPO %s PARA ESTE REGISTRO',15,1,@empCodEtpNew);
    IF( @ermNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESARAMO %s PARA ESTE REGISTRO',15,1,@empCodErmNew);
    IF( @ertNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESAREGTRIB %s PARA ESTE REGISTRO',15,1,@empCodErtNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@empCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD03New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA INCLUIR NA TABELA EMPRESA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo CNPJ deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCnpj=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CNPJ=@empCnpjNew;
    IF( @uiCnpj <> 0 )
      RAISERROR('CNPJ JA CADASTRADO NA TABELA EMPRESA COM CODIGO %i',15,1,@uiCnpj);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @empRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmpubNew,@empRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END
    --  
    INSERT INTO dbo.EMPRESA(
      EMP_NOME
      ,EMP_APELIDO
      ,EMP_CNPJ
      ,EMP_INSESTAD
      ,EMP_CODCDD
      ,EMP_CODLGR
      ,EMP_ENDERECO
      ,EMP_NUMERO
      ,EMP_CEP
      ,EMP_BAIRRO
      ,EMP_FONE
      ,EMP_CODETF
      ,EMP_ALIQCOFINS
      ,EMP_ALIQPIS
      ,EMP_ALIQCSLL
      ,EMP_BCPRESUMIDO
      ,EMP_ALIQIRPRESUMIDO
      ,EMP_ALIQCSLLPRESUMIDO
      ,EMP_ALIQIRRF
      ,EMP_ANEXOSIMPLES
      ,EMP_CODETP
      ,EMP_CODERM
      ,EMP_CODERT
      ,EMP_SMTPUSERNAME
      ,EMP_SMTPPASSWORD
      ,EMP_SMTPHOST
      ,EMP_SMTPPORT
      ,EMP_CERTPATH
      ,EMP_CERTSENHA
      ,EMP_CERTVALIDADE
      ,EMP_PRODHOMOL
      ,EMP_CONTINGENCIA
      ,EMP_ATIVO
      ,EMP_REG
      ,EMP_CODUSR) VALUES(
      @empNomeNew               -- EMP_NOME
      ,@empApelidoNew           -- EMP_APELIDO
      ,@empCnpjNew              -- EMP_CNPJ
      ,@empInsNew               -- EMP_INSESTAD
      ,@empCodCddNew            -- EMP_CODCDD
      ,@empCodLgrNew            -- EMP_CODLGR
      ,@empEnderecoNew          -- EMP_ENDERECO
      ,@empNumeroNew            -- EMP_NUMERO
      ,@empCepNew               -- EMP_CEP
      ,@empBairroNew            -- EMP_BAIRRO
      ,@empFoneNew              -- EMP_FONE
      ,@empCodEtfNew            -- EMP_CODETF
      ,@empAliqCofinsNew        -- EMP_ALIQCOFINS
      ,@empAliqPisNew           -- EMP_ALIQPIS
      ,@empAliqCsllNew          -- EMP_ALIQCSLL
      ,@empBcPresumidoNew       -- EMP_BCPRESUMIDO
      ,@empAliqIrPresumidoNew   -- EMP_ALIQIRPRESUMIDO
      ,@empAliqCsllPresumidoNew -- EMP_ALIQCSLLPRESUMIDO
      ,@empAliqIrrfNew          -- EMP_ALIQIRRF
      ,@empAnexoSimplesNew      -- EMP_ANEXOSIMPLES
      ,@empCodEtpNew            -- EMP_CODETP
      ,@empCodErmNew            -- EMP_CODERM
      ,@empCodErtNew            -- EMP_CODERT
      ,@empSmtpUserNameNew      -- EMP_SMTPUSERNAME
      ,@empSmtpPasswordNew      -- EMP_SMTPPASSWORD
      ,@empSmtpHostNew          -- EMP_SMTPHOST
      ,@empSmtpPortNew          -- EMP_SMTPPORT
      ,@empCertPathNew          -- EMP_CERTPATH
      ,@empCertSenhaNew         -- EMP_CERTSENHA
      ,@empCertValidadeNew      -- EMP_CERTVALIDADE
      ,@empProdHomolNew         -- EMP_PRODHOMOL
      ,@empContingenciaNew      -- EMP_CONTINGENCIA
      ,@empAtivoNew             -- EMP_ATIVO
      ,@empRegNew               -- EMP_REG
      ,@empCodUsrNew            -- EMP_CODUSR
    );
    ------------------------------------
    -- Toda empresa nasce com uma filial
    ------------------------------------
    DECLARE @codFll INTEGER=((IDENT_CURRENT('EMPRESA')*1000)+IDENT_CURRENT('EMPRESA'));
    INSERT INTO FILIAL(
      FLL_CODIGO
      ,FLL_NOME
      ,FLL_APELIDO
      ,FLL_BAIRRO
      ,FLL_CEP
      ,FLL_CNPJ
      ,FLL_CODCDD
      ,FLL_CODLGR
      ,FLL_ENDERECO
      ,FLL_NUMERO
      ,FLL_FONE
      ,FLL_INSESTAD
      ,FLL_INSMUNIC
      ,FLL_CODEMP
      ,FLL_ATIVO
      ,FLL_REG
      ,FLL_CODUSR) VALUES(
      @codFll                   -- FLL_CODIGO
      ,@empNomeNew              -- FLL_NOME
      ,@empApelidoNew           -- FLL_APELIDO
      ,@empBairroNew            -- FLL_BAIRRO
      ,@empCepNew               -- FLL_CEP
      ,@empCnpjNew              -- FLL_CNPJ
      ,@empCodCddNew            -- FLL_CODCDD
      ,@empCodLgrNew            -- FLL_CODLGR
      ,@empEnderecoNew          -- FLL_ENDERECO
      ,@empNumeroNew            -- FLL_NUMERO
      ,@empFoneNew              -- FLL_FONE
      ,@empInsNew               -- FLL_INSESTAD
      ,null                     -- FLL_INSMUNIC
      ,IDENT_CURRENT('EMPRESA') -- FLL_CODEMP
      ,@empAtivoNew             -- FLL_ATIVO
      ,@empRegNew               -- FLL_REG
      ,@empCodUsrNew            -- FLL_CODUSR
    );      
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESA(
      EMP_ACAO
      ,EMP_CODIGO
      ,EMP_NOME
      ,EMP_APELIDO
      ,EMP_CNPJ
      ,EMP_INSESTAD
      ,EMP_CODCDD
      ,EMP_CODLGR
      ,EMP_ENDERECO
      ,EMP_NUMERO
      ,EMP_CEP
      ,EMP_BAIRRO
      ,EMP_FONE
      ,EMP_CODETF
      ,EMP_ALIQCOFINS
      ,EMP_ALIQPIS
      ,EMP_ALIQCSLL
      ,EMP_BCPRESUMIDO
      ,EMP_ALIQIRPRESUMIDO
      ,EMP_ALIQCSLLPRESUMIDO
      ,EMP_ALIQIRRF
      ,EMP_ANEXOSIMPLES
      ,EMP_CODETP
      ,EMP_CODERM
      ,EMP_CODERT
      ,EMP_SMTPUSERNAME
      ,EMP_SMTPPASSWORD
      ,EMP_SMTPHOST
      ,EMP_SMTPPORT
      ,EMP_CERTPATH
      ,EMP_CERTSENHA
      ,EMP_CERTVALIDADE
      ,EMP_PRODHOMOL
      ,EMP_CONTINGENCIA
      ,EMP_ATIVO
      ,EMP_REG
      ,EMP_CODUSR) VALUES(
      'I'
      ,IDENT_CURRENT('EMPRESA')  -- EMP_CODIGO
      ,@empNomeNew               -- EMP_NOME
      ,@empApelidoNew            -- EMP_APELIDO
      ,@empCnpjNew               -- EMP_CNPJ
      ,@empInsNew                -- EMP_INSESTAD
      ,@empCodCddNew             -- EMP_CODCDD
      ,@empCodLgrNew             -- EMP_CODLGR
      ,@empEnderecoNew           -- EMP_ENDERECO
      ,@empNumeroNew             -- EMP_NUMERO
      ,@empCepNew                -- EMP_CEP
      ,@empBairroNew             -- EMP_BAIRRO
      ,@empFoneNew               -- EMP_FONE
      ,@empCodEtfNew             -- EMP_CODETF
      ,@empAliqCofinsNew         -- EMP_ALIQCOFINS
      ,@empAliqPisNew            -- EMP_ALIQPIS
      ,@empAliqCsllNew           -- EMP_ALIQCSLL
      ,@empBcPresumidoNew        -- EMP_BCPRESUMIDO
      ,@empAliqIrPresumidoNew    -- EMP_ALIQIRPRESUMIDO
      ,@empAliqCsllPresumidoNew  -- EMP_ALIQCSLLPRESUMIDO
      ,@empAliqIrrfNew           -- EMP_ALIQIRRF
      ,@empAnexoSimplesNew       -- EMP_ANEXOSIMPLES
      ,@empCodEtpNew             -- EMP_CODETP
      ,@empCodErmNew             -- EMP_CODERM
      ,@empCodErtNew             -- EMP_CODERT
      ,@empSmtpUserNameNew       -- EMP_SMTPUSERNAME
      ,@empSmtpPasswordNew       -- EMP_SMTPPASSWORD
      ,@empSmtpHostNew           -- EMP_SMTPHOST
      ,@empSmtpPortNew           -- EMP_SMTPPORT
      ,@empCertPathNew           -- EMP_CERTPATH
      ,@empCertSenhaNew          -- EMP_CERTSENHA
      ,@empCertValidadeNew       -- EMP_CERTVALIDADE
      ,@empProdhomolNew          -- EMP_PRODHOMOL
      ,@empContingenciaNew       -- EMP_CONTINGENCIA
      ,@empAtivoNew              -- EMP_ATIVO
      ,@empRegNew                -- EMP_REG
      ,@empCodUsrNew             -- EMP_CODUSR
    );
    INSERT INTO BKPFILIAL(
      FLL_ACAO    
      ,FLL_CODIGO
      ,FLL_NOME
      ,FLL_APELIDO
      ,FLL_BAIRRO
      ,FLL_CEP
      ,FLL_CNPJ
      ,FLL_CODCDD
      ,FLL_CODLGR
      ,FLL_ENDERECO
      ,FLL_NUMERO
      ,FLL_FONE
      ,FLL_INSESTAD
      ,FLL_INSMUNIC
      ,FLL_CODEMP
      ,FLL_ATIVO
      ,FLL_REG
      ,FLL_CODUSR) VALUES(
      'I'
      ,@codFll                  -- FLL_CODIGO
      ,@empNomeNew              -- FLL_NOME
      ,@empApelidoNew           -- FLL_APELIDO
      ,@empBairroNew            -- FLL_BAIRRO
      ,@empCepNew               -- FLL_CEP
      ,@empCnpjNew              -- FLL_CNPJ
      ,@empCodCddNew            -- FLL_CODCDD
      ,@empCodLgrNew            -- FLL_CODLGR
      ,@empEnderecoNew          -- FLL_ENDERECO
      ,@empNumeroNew            -- FLL_NUMERO
      ,@empFoneNew              -- FLL_FONE
      ,@empInsNew               -- FLL_INSESTAD
      ,null                     -- FLL_INSMUNIC
      ,IDENT_CURRENT('EMPRESA') -- FLL_CODEMP
      ,@empAtivoNew             -- FLL_ATIVO
      ,@empRegNew               -- FLL_REG
      ,@empCodUsrNew            -- FLL_CODUSR
    );   
    -----------------------------------------------------------------------------
    -- PARA CADA NOVO USUARIO(MENOS ADMIN)
    -- -Cadastro o usuario para todas empresas
    -- SE CADASTRAR UMA NOVA EMPRESA A ROTINA É A MESMA
    -----------------------------------------------------------------------------
    DECLARE @codusr INTEGER;
    DECLARE @apelido VARCHAR(15);
    DECLARE @ativo VARCHAR(1);
    DECLARE crsrUsr CURSOR FOR SELECT USR_CODIGO,USR_APELIDO FROM USUARIO
    OPEN crsrUsr
    -- posicionar o ponteiro do cursor na primeira linha do resultado do select acima
    -- insere nas variaveis os valores da primeira linha do resultado armazenado no cursor
    FETCH NEXT FROM crsrUsr into @codusr,@apelido
    WHILE @@FETCH_STATUS = 0 BEGIN
      SET @ativo='S';
      --IF( @apelido='ADMIN' )
      --  SET @ativo='S';
    
      INSERT INTO USUARIOEMPRESA(
        UE_CODUSR
        ,UE_CODEMP
        ,UE_ATIVO
        ,UE_REG
        ,SIS_CODUSR) VALUES(
        @codusr                     -- UE_CODUSR
        ,IDENT_CURRENT('EMPRESA')   -- UE_CODEMP
        ,@ativo                     -- UE_ATIVO
        ,'P'                        -- UE_REG
        ,@empCodUsrNew              -- SIS_CODUSR
      );
      FETCH NEXT FROM crsrUsr into @codusr,@apelido
    END
    CLOSE crsrUsr
    DEALLOCATE crsrUsr
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESA_BU ON dbo.VEMPRESA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  DECLARE @uiCnpj INTEGER      = 0;     -- Para procurar unique index
  DECLARE @fkStrCdd VARCHAR(7) = 'OK';  -- Para procurar campo foreign key str (CIDADE)
  DECLARE @fkStrLgr VARCHAR(5) = 'OK';  -- Para procurar campo foreign key str (LOGRADOURO)
  DECLARE @fkStrEtf VARCHAR(3) = 'OK';  -- Para procurar campo foreign key str (EMPRESATRIBFED)
  DECLARE @fkStrEtp VARCHAR(3) = 'OK';  -- Para procurar campo foreign key str (EMPRESATIPO)
  DECLARE @fkStrErm VARCHAR(3) = 'OK';  -- Para procurar campo foreign key str (EMPRESARAMO)
  DECLARE @fkStrErt VARCHAR(3) = 'OK';  -- Para procurar campo foreign key str (EMPRESAREGTRIB)
  DECLARE @fkIntUsr INTEGER = 0 ;       -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntUp INTEGER = 0 ;        -- Para procurar campo foreign key int (USUARIOPERFIL)
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @empCodigoNew INTEGER;
  DECLARE @empNomeNew VARCHAR(40);
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @empCnpjNew VARCHAR(14);
  DECLARE @empInsNew VARCHAR(19);
  DECLARE @empCodCddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @empCodLgrNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @empEnderecoNew VARCHAR(60);
  DECLARE @empNumeroNew VARCHAR(10);
  DECLARE @empCepNew VARCHAR(8);
  DECLARE @empBairroNew VARCHAR(15);
  DECLARE @empFoneNew VARCHAR(10);
  DECLARE @empCodEtfNew VARCHAR(3);
  DECLARE @etfNomeNew VARCHAR(20);
  DECLARE @empAliqCofinsNew NUMERIC(6,2);
  DECLARE @empAliqPisNew NUMERIC(6,2);
  DECLARE @empAliqCsllNew NUMERIC(6,2);
  DECLARE @empBcPresumidoNew NUMERIC(6,2);
  DECLARE @empAliqIrPresumidoNew NUMERIC(6,2);
  DECLARE @empAliqCsllPresumidoNew NUMERIC(6,2);
  DECLARE @empAliqIrrfNew NUMERIC(6,2);
  DECLARE @empAnexoSimplesNew INTEGER;
  DECLARE @empCodEtpNew VARCHAR(3);
  DECLARE @etpNomeNew VARCHAR(20);
  DECLARE @empCodErmNew VARCHAR(3);
  DECLARE @ermNomeNew VARCHAR(25);
  DECLARE @empCodErtNew VARCHAR(3);
  DECLARE @ertNomeNew VARCHAR(25);
  DECLARE @empSmtpUserNameNew VARCHAR(60);
  DECLARE @empSmtpPasswordNew VARCHAR(30);
  DECLARE @empSmtpHostNew VARCHAR(30);
  DECLARE @empSmtpPortNew VARCHAR(4);
  DECLARE @empCertPathNew VARCHAR(100);
  DECLARE @empCertSenhaNew VARCHAR(20);
  DECLARE @empCertValidadeNew DATE;
  DECLARE @empProdHomolNew VARCHAR(1);
  DECLARE @empContingenciaNew VARCHAR(1);
  DECLARE @empAtivoNew VARCHAR(1);
  DECLARE @empRegNew VARCHAR(1);
  DECLARE @empCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmpubNew VARCHAR(1);
  DECLARE @upD03New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT
    @empCodigoNew             = i.EMP_CODIGO
    ,@empNomeNew              = dbo.fncTranslate(i.EMP_NOME,40)
    ,@empApelidoNew           = dbo.fncTranslate(i.EMP_APELIDO,15)
    ,@empCnpjNew              = dbo.fncTranslate(i.EMP_CNPJ,14)
    ,@empInsNew               = COALESCE(dbo.fncTranslate(i.EMP_INSESTAD,19),'NSA')
    ,@empCodCddNew            = dbo.fncTranslate(i.EMP_CODCDD,7)
    ,@cddNomeNew              = COALESCE(CDD.CDD_NOME,'ERRO')
    ,@empCodLgrNew            = dbo.fncTranslate(i.EMP_CODLGR,5)
    ,@lgrNomeNew              = COALESCE(LGR.LGR_NOME,'ERRO')
    ,@empEnderecoNew          = dbo.fncTranslate(i.EMP_ENDERECO,60)
    ,@empNumeroNew            = dbo.fncTranslate(i.EMP_NUMERO,10)
    ,@empCepNew               = dbo.fncTranslate(i.EMP_CEP,8)
    ,@empBairroNew            = dbo.fncTranslate(i.EMP_BAIRRO,15)
    ,@empFoneNew              = dbo.fncTranslate(i.EMP_FONE,10)
    ,@empCodEtfNew            = dbo.fncTranslate(i.EMP_CODETF,3)
    ,@etfNomeNew              = COALESCE(ETF.ETF_NOME,'ERRO')
    ,@empAliqCofinsNew        = i.EMP_ALIQCOFINS
    ,@empAliqPisNew           = i.EMP_ALIQPIS
    ,@empAliqCsllNew          = i.EMP_ALIQCSLL
    ,@empBcPresumidoNew       = i.EMP_BCPRESUMIDO
    ,@empAliqIrPresumidoNew   = i.EMP_ALIQIRPRESUMIDO
    ,@empAliqCsllPresumidoNew = i.EMP_ALIQCSLLPRESUMIDO
    ,@empAliqIrrfNew          = i.EMP_ALIQIRRF
    ,@empAnexoSimplesNew      = i.EMP_ANEXOSIMPLES
    ,@empCodEtpNew            = dbo.fncTranslate(i.EMP_CODETP,3)
    ,@etpNomeNew              = COALESCE(ETP.ETP_NOME,'ERRO')
    ,@empCodErmNew            = dbo.fncTranslate(i.EMP_CODERM,3)
    ,@ermNomeNew              = COALESCE(ERM.ERM_NOME,'ERRO')
    ,@empCodErtNew            = dbo.fncTranslate(i.EMP_CODERT,3)
    ,@ertNomeNew              = COALESCE(ERT.ERT_NOME,'ERRO')
    ,@empSmtpUserNameNew      = dbo.fncTranslate(i.EMP_SMTPUSERNAME,60)
    ,@empSmtpPasswordNew      = dbo.fncTranslate(i.EMP_SMTPPASSWORD,30)
    ,@empSmtpHostNew          = dbo.fncTranslate(i.EMP_SMTPHOST,30)
    ,@empSmtpPortNew          = dbo.fncTranslate(i.EMP_SMTPPORT,4)
    ,@empCertPathNew          = dbo.fncTranslate(i.EMP_CERTPATH,100)
    ,@empCertSenhaNew         = dbo.fncTranslate(i.EMP_CERTSENHA,20)
    ,@empCertValidadeNew      = i.EMP_CERTVALIDADE
    ,@empProdHomolNew         = dbo.fncTranslate(i.EMP_PRODHOMOL,1)
    ,@empContingenciaNew      = dbo.fncTranslate(i.EMP_CONTINGENCIA,1)
    ,@empAtivoNew             = UPPER(i.EMP_ATIVO)
    ,@empRegNew               = UPPER(i.EMP_REG)
    ,@empCodUsrNew            = i.EMP_CODUSR
    ,@usrApelidoNew           = COALESCE(USR.USR_APELIDO,'ERRO')
    ,@usrAdmpubNew            = COALESCE(USR.USR_ADMPUB,'ERRO')
    ,@upD03New                = UP.UP_D03
    ,@upD31New                = UP.UP_D31
  FROM inserted i
  LEFT OUTER JOIN CIDADE CDD ON i.EMP_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'
  LEFT OUTER JOIN LOGRADOURO LGR ON i.EMP_CODLGR=LGR.LGR_CODIGO AND LGR.LGR_ATIVO='S'
  LEFT OUTER JOIN EMPRESATRIBFED ETF ON i.EMP_CODETF=ETF.ETF_CODIGO AND ETF.ETF_ATIVO='S'
  LEFT OUTER JOIN EMPRESATIPO ETP ON i.EMP_CODETP=ETP.ETP_CODIGO AND ETP.ETP_ATIVO='S'
  LEFT OUTER JOIN EMPRESARAMO ERM ON i.EMP_CODERM=ERM.ERM_CODIGO AND ERM.ERM_ATIVO='S'
  LEFT OUTER JOIN EMPRESAREGTRIB ERT ON i.EMP_CODERT=ERT.ERT_CODIGO AND ERT.ERT_ATIVO='S'
  LEFT OUTER JOIN USUARIO USR ON i.EMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
  LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO
  
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@empCodCddNew);
    IF( @lgrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LOGRADOURO %s PARA ESTE REGISTRO',15,1,@empCodLgrNew);
    IF( @etfNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESATRIBFED %s PARA ESTE REGISTRO',15,1,@empCodEtfNew);
    IF( @etpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESATIPO %s PARA ESTE REGISTRO',15,1,@empCodEtpNew);
    IF( @ermNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESARAMO %s PARA ESTE REGISTRO',15,1,@empCodErmNew);
    IF( @ertNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESAREGTRIB %s PARA ESTE REGISTRO',15,1,@empCodErtNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@empCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD03New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA ALTERAR NA TABELA EMPRESA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @empCodigoOld INTEGER;
    DECLARE @empNomeOld VARCHAR(40);
    DECLARE @empApelidoOld VARCHAR(15);
    DECLARE @empCnpjOld VARCHAR(14);
    DECLARE @empInsOld VARCHAR(19);
    DECLARE @empCodCddOld VARCHAR(7);
    DECLARE @empCodLgrOld VARCHAR(5);
    DECLARE @empEnderecoOld VARCHAR(60);
    DECLARE @empNumeroOld VARCHAR(10);
    DECLARE @empCepOld VARCHAR(8);
    DECLARE @empBairroOld VARCHAR(15);
    DECLARE @empFoneOld VARCHAR(10);
    DECLARE @empCodEtfOld VARCHAR(3);
    DECLARE @empAliqCofinsOld NUMERIC(6,2);
    DECLARE @empAliqPisOld NUMERIC(6,2);
    DECLARE @empAliqCsllOld NUMERIC(6,2);
    DECLARE @empBcPresumidoOld NUMERIC(6,2);
    DECLARE @empAliqIrPresumidoOld NUMERIC(6,2);
    DECLARE @empAliqCsllPresumidoOld NUMERIC(6,2);
    DECLARE @empAliqIrrfOld NUMERIC(6,2);
    DECLARE @empAnexoSimplesOld INTEGER;
    DECLARE @empCodEtpOld VARCHAR(3);
    DECLARE @empCodErmOld VARCHAR(3);
    DECLARE @empCodErtOld VARCHAR(3);
    DECLARE @empSmtpUserNameOld VARCHAR(60);
    DECLARE @empSmtpPasswordOld VARCHAR(30);
    DECLARE @empSmtpHostOld VARCHAR(30);
    DECLARE @empSmtpPortOld VARCHAR(4);
    DECLARE @empCertPathOld VARCHAR(100);
    DECLARE @empCertSenhaOld VARCHAR(20);
    DECLARE @empCertValidadeOld DATE;
    DECLARE @empProdHomolOld VARCHAR(1);
    DECLARE @empContingenciaOld VARCHAR(1);
    DECLARE @empAtivoOld VARCHAR(1);
    DECLARE @empRegOld VARCHAR(1);
    DECLARE @empCodUsrOld INTEGER;
    
    SELECT
      @empCodigoOld             = d.EMP_CODIGO
      ,@empNomeOld              = d.EMP_NOME
      ,@empApelidoOld           = d.EMP_APELIDO
      ,@empCnpjOld              = d.EMP_CNPJ
      ,@empInsOld               = d.EMP_INSESTAD
      ,@empCodCddOld            = d.EMP_CODCDD
      ,@empCodLgrOld            = d.EMP_CODLGR
      ,@empEnderecoOld          = d.EMP_ENDERECO
      ,@empNumeroOld            = d.EMP_NUMERO
      ,@empCepOld               = d.EMP_CEP
      ,@empBairroOld            = d.EMP_BAIRRO
      ,@empFoneOld              = d.EMP_FONE
      ,@empCodEtfOld            = d.EMP_CODETF
      ,@empAliqCofinsOld        = d.EMP_ALIQCOFINS
      ,@empAliqPisOld           = d.EMP_ALIQPIS
      ,@empAliqCsllOld          = d.EMP_ALIQCSLL
      ,@empBcPresumidoOld       = d.EMP_BCPRESUMIDO
      ,@empAliqIrPresumidoOld   = d.EMP_ALIQIRPRESUMIDO
      ,@empAliqCsllPresumidoOld = d.EMP_ALIQCSLLPRESUMIDO
      ,@empAliqIrrfOld          = d.EMP_ALIQIRRF
      ,@empAnexoSimplesOld      = d.EMP_ANEXOSIMPLES
      ,@empCodEtpOld            = d.EMP_CODETP
      ,@empCodErmOld            = d.EMP_CODERM
      ,@empCodErtOld            = d.EMP_CODERT
      ,@empSmtpUserNameOld      = d.EMP_SMTPUSERNAME
      ,@empSmtpPasswordOld      = d.EMP_SMTPPASSWORD
      ,@empSmtpHostOld          = d.EMP_SMTPHOST
      ,@empSmtpPortOld          = d.EMP_SMTPPORT
      ,@empCertPathOld          = d.EMP_CERTPATH
      ,@empCertSenhaOld         = d.EMP_CERTSENHA
      ,@empCertValidadeOld      = d.EMP_CERTVALIDADE
      ,@empProdHomolOld         = d.EMP_PRODHOMOL
      ,@empContingenciaOld      = d.EMP_CONTINGENCIA
      ,@empAtivoOld             = d.EMP_ATIVO
      ,@empRegOld               = d.EMP_REG
      ,@empCodUsrOld            = d.EMP_CODUSR
    FROM EMPRESA d WHERE d.EMP_CODIGO=@empCodigoNew;      
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @empCodigoOld<>@empCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo CNPJ deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @empCnpjOld<>@empCnpjNew ) BEGIN
      SELECT @uiCnpj=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CNPJ=@empCnpjNew;
      IF( @uiCnpj <> 0 )
        RAISERROR('CNPJ JA CADASTRADO NA TABELA EMPRESA COM CODIGO %i',15,1,@uiCnpj);
    END  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @empRegOld <> @empRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@empRegOld,@empRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.EMPRESA
       SET EMP_NOME              = @empNomeNew             
          ,EMP_APELIDO           = @empApelidoNew          
          ,EMP_CNPJ              = @empCnpjNew             
          ,EMP_INSESTAD          = @empInsNew              
          ,EMP_CODCDD            = @empCodCddNew           
          ,EMP_CODLGR            = @empCodLgrNew           
          ,EMP_ENDERECO          = @empEnderecoNew         
          ,EMP_NUMERO            = @empNumeroNew           
          ,EMP_CEP               = @empCepNew              
          ,EMP_BAIRRO            = @empBairroNew           
          ,EMP_FONE              = @empFoneNew             
          ,EMP_CODETF            = @empCodEtfNew           
          ,EMP_ALIQCOFINS        = @empAliqCofinsNew       
          ,EMP_ALIQPIS           = @empAliqPisNew          
          ,EMP_ALIQCSLL          = @empAliqCsllNew         
          ,EMP_BCPRESUMIDO       = @empBcPresumidoNew      
          ,EMP_ALIQIRPRESUMIDO   = @empAliqIrPresumidoNew  
          ,EMP_ALIQCSLLPRESUMIDO = @empAliqCsllPresumidoNew
          ,EMP_ALIQIRRF          = @empAliqIrrfNew         
          ,EMP_ANEXOSIMPLES      = @empAnexoSimplesNew     
          ,EMP_CODETP            = @empCodEtpNew           
          ,EMP_CODERM            = @empCodErmNew           
          ,EMP_CODERT            = @empCodErtNew           
          ,EMP_SMTPUSERNAME      = @empSmtpUserNameNew     
          ,EMP_SMTPPASSWORD      = @empSmtpPasswordNew     
          ,EMP_SMTPHOST          = @empSmtpHostNew         
          ,EMP_SMTPPORT          = @empSmtpPortNew         
          ,EMP_CERTPATH          = @empCertPathNew         
          ,EMP_CERTSENHA         = @empCertSenhaNew        
          ,EMP_CERTVALIDADE      = @empCertValidadeNew     
          ,EMP_PRODHOMOL         = @empProdHomolNew        
          ,EMP_CONTINGENCIA      = @empContingenciaNew     
          ,EMP_ATIVO             = @empAtivoNew            
          ,EMP_REG               = @empRegNew              
          ,EMP_CODUSR            = @empCodUsrNew           
    WHERE EMP_CODIGO = @empCodigoNew;     
    -- Gravando LOG
    IF( (@empNomeOld<>@empNomeNew)                 OR (@empApelidoOld<>@empApelidoNew)           OR (@empCnpjOld<>@empCnpjNew)         OR (@empInsOld<>@empInsNew)              
     OR (@empCodCddOld<>@empCodCddNew)             OR (@empCodLgrOld<>@empCodLgrNew)             OR (@empEnderecoOld<>@empEnderecoNew) OR (@empNumeroOld<>@empNumeroNew)           
     OR (@empCepOld<>@empCepNew)                   OR (@empBairroOld<>@empBairroNew)             OR (@empFoneOld<>@empFoneNew)         OR (@empCodEtfOld<>@empCodEtfNew)           
     OR (@empAliqCofinsOld<>@empAliqCofinsNew)     OR (@empAliqPisOld<>@empAliqPisNew)           OR (@empAliqCsllOld<>@empAliqCsllNew) OR (@empBcPresumidoOld<>@empBcPresumidoNew)
     OR (@empAliqIrrfOld<>@empAliqIrrfNew)         OR (@empAnexoSimplesOld<>@empAnexoSimplesNew) OR (@empCodEtpOld<>@empCodEtpNew)     OR (@empCodErmOld<>@empCodErmNew)  
     OR (@empCodErtOld<>@empCodErtNew)             OR (@empSmtpUserNameOld<>@empSmtpUserNameNew) OR (@empSmtpHostOld<>@empSmtpHostNew) OR (@empSmtpPortOld<>@empSmtpPortNew)         
     OR (@empCertPathOld<>@empCertPathNew)         OR (@empCertSenhaOld<>@empCertSenhaNew)       OR (@empCertValidadeOld<>@empCertValidadeNew)     
     OR (@empProdHomolOld<>@empProdHomolNew)       OR (@empContingenciaOld<>@empContingenciaNew) OR (@empAtivoOld<>@empAtivoNew) OR (@empRegOld<>@empRegNew)              
     OR (@empSmtpPasswordOld<>@empSmtpPasswordNew) OR (@empCodUsrOld<>@empCodUsrNew)             OR (@empAliqIrPresumidoOld<>@empAliqIrPresumidoNew) 
     OR (@empAliqCsllPresumidoOld<>@empAliqCsllPresumidoNew) ) BEGIN
      INSERT INTO dbo.BKPEMPRESA(
        EMP_ACAO
        ,EMP_CODIGO
        ,EMP_NOME
        ,EMP_APELIDO
        ,EMP_CNPJ
        ,EMP_INSESTAD
        ,EMP_CODCDD
        ,EMP_CODLGR
        ,EMP_ENDERECO
        ,EMP_NUMERO
        ,EMP_CEP
        ,EMP_BAIRRO
        ,EMP_FONE
        ,EMP_CODETF
        ,EMP_ALIQCOFINS
        ,EMP_ALIQPIS
        ,EMP_ALIQCSLL
        ,EMP_BCPRESUMIDO
        ,EMP_ALIQIRPRESUMIDO
        ,EMP_ALIQCSLLPRESUMIDO
        ,EMP_ALIQIRRF
        ,EMP_ANEXOSIMPLES
        ,EMP_CODETP
        ,EMP_CODERM
        ,EMP_CODERT
        ,EMP_SMTPUSERNAME
        ,EMP_SMTPPASSWORD
        ,EMP_SMTPHOST
        ,EMP_SMTPPORT
        ,EMP_CERTPATH
        ,EMP_CERTSENHA
        ,EMP_CERTVALIDADE
        ,EMP_PRODHOMOL
        ,EMP_CONTINGENCIA
        ,EMP_ATIVO
        ,EMP_REG
        ,EMP_CODUSR) VALUES(
        'A'
        ,@empCodigoNew             -- EMP_CODIGO
        ,@empNomeNew               -- EMP_NOME
        ,@empApelidoNew            -- EMP_APELIDO
        ,@empCnpjNew               -- EMP_CNPJ
        ,@empInsNew                -- EMP_INSESTAD
        ,@empCodCddNew             -- EMP_CODCDD
        ,@empCodLgrNew             -- EMP_CODLGR
        ,@empEnderecoNew           -- EMP_ENDERECO
        ,@empNumeroNew             -- EMP_NUMERO
        ,@empCepNew                -- EMP_CEP
        ,@empBairroNew             -- EMP_BAIRRO
        ,@empFoneNew               -- EMP_FONE
        ,@empCodEtfNew             -- EMP_CODETF
        ,@empAliqCofinsNew         -- EMP_ALIQCOFINS
        ,@empAliqPisNew            -- EMP_ALIQPIS
        ,@empAliqCsllNew           -- EMP_ALIQCSLL
        ,@empBcPresumidoNew        -- EMP_BCPRESUMIDO
        ,@empAliqIrPresumidoNew    -- EMP_ALIQIRPRESUMIDO
        ,@empAliqCsllPresumidoNew  -- EMP_ALIQCSLLPRESUMIDO
        ,@empAliqIrrfNew           -- EMP_ALIQIRRF
        ,@empAnexoSimplesNew       -- EMP_ANEXOSIMPLES
        ,@empCodEtpNew             -- EMP_CODETP
        ,@empCodErmNew             -- EMP_CODERM
        ,@empCodErtNew             -- EMP_CODERT
        ,@empSmtpUserNameNew       -- EMP_SMTPUSERNAME
        ,@empSmtpPasswordNew       -- EMP_SMTPPASSWORD
        ,@empSmtpHostNew           -- EMP_SMTPHOST
        ,@empSmtpPortNew           -- EMP_SMTPPORT
        ,@empCertPathNew           -- EMP_CERTPATH
        ,@empCertSenhaNew          -- EMP_CERTSENHA
        ,@empCertValidadeNew       -- EMP_CERTVALIDADE
        ,@empProdhomolNew          -- EMP_PRODHOMOL
        ,@empContingenciaNew       -- EMP_CONTINGENCIA
        ,@empAtivoNew              -- EMP_ATIVO
        ,@empRegNew                -- EMP_REG
        ,@empCodUsrNew             -- EMP_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESA_BD ON dbo.VEMPRESA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntFll INTEGER = 0;  -- Para procurar campo foreign key int (F)
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @empCodigoOld INTEGER;
  DECLARE @empNomeOld VARCHAR(40);
  DECLARE @empApelidoOld VARCHAR(15);
  DECLARE @empCnpjOld VARCHAR(14);
  DECLARE @empInsOld VARCHAR(19);
  DECLARE @empCodCddOld VARCHAR(7);
  DECLARE @empCodLgrOld VARCHAR(5);
  DECLARE @empEnderecoOld VARCHAR(60);
  DECLARE @empNumeroOld VARCHAR(10);
  DECLARE @empCepOld VARCHAR(8);
  DECLARE @empBairroOld VARCHAR(15);
  DECLARE @empFoneOld VARCHAR(10);
  DECLARE @empCodEtfOld VARCHAR(3);
  DECLARE @empAliqCofinsOld NUMERIC(6,2);
  DECLARE @empAliqPisOld NUMERIC(6,2);
  DECLARE @empAliqCsllOld NUMERIC(6,2);
  DECLARE @empBcPresumidoOld NUMERIC(6,2);
  DECLARE @empAliqIrPresumidoOld NUMERIC(6,2);
  DECLARE @empAliqCsllPresumidoOld NUMERIC(6,2);
  DECLARE @empAliqIrrfOld NUMERIC(6,2);
  DECLARE @empAnexoSimplesOld INTEGER;
  DECLARE @empCodEtpOld VARCHAR(3);
  DECLARE @empCodErmOld VARCHAR(3);
  DECLARE @empCodErtOld VARCHAR(3);
  DECLARE @empSmtpUserNameOld VARCHAR(60);
  DECLARE @empSmtpPasswordOld VARCHAR(30);
  DECLARE @empSmtpHostOld VARCHAR(30);
  DECLARE @empSmtpPortOld VARCHAR(4);
  DECLARE @empCertPathOld VARCHAR(100);
  DECLARE @empCertSenhaOld VARCHAR(20);
  DECLARE @empCertValidadeOld DATE;
  DECLARE @empProdHomolOld VARCHAR(1);
  DECLARE @empContingenciaOld VARCHAR(1);
  DECLARE @empAtivoOld VARCHAR(1);
  DECLARE @empRegOld VARCHAR(1);
  DECLARE @empCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD03Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @empCodigoOld             = d.EMP_CODIGO
         ,@empNomeOld              = d.EMP_NOME
         ,@empApelidoOld           = d.EMP_APELIDO
         ,@empCnpjOld              = d.EMP_CNPJ
         ,@empInsOld               = d.EMP_INSESTAD
         ,@empCodCddOld            = d.EMP_CODCDD
         ,@empCodLgrOld            = d.EMP_CODLGR
         ,@empEnderecoOld          = d.EMP_ENDERECO
         ,@empNumeroOld            = d.EMP_NUMERO
         ,@empCepOld               = d.EMP_CEP
         ,@empBairroOld            = d.EMP_BAIRRO
         ,@empFoneOld              = d.EMP_FONE
         ,@empCodEtfOld            = d.EMP_CODETF
         ,@empAliqCofinsOld        = d.EMP_ALIQCOFINS
         ,@empAliqPisOld           = d.EMP_ALIQPIS
         ,@empAliqCsllOld          = d.EMP_ALIQCSLL
         ,@empBcPresumidoOld       = d.EMP_BCPRESUMIDO
         ,@empAliqIrPresumidoOld   = d.EMP_ALIQIRPRESUMIDO
         ,@empAliqCsllPresumidoOld = d.EMP_ALIQCSLLPRESUMIDO
         ,@empAliqIrrfOld          = d.EMP_ALIQIRRF
         ,@empAnexoSimplesOld      = d.EMP_ANEXOSIMPLES
         ,@empCodEtpOld            = d.EMP_CODETP
         ,@empCodErmOld            = d.EMP_CODERM
         ,@empCodErtOld            = d.EMP_CODERT
         ,@empSmtpUserNameOld      = d.EMP_SMTPUSERNAME
         ,@empSmtpPasswordOld      = d.EMP_SMTPPASSWORD
         ,@empSmtpHostOld          = d.EMP_SMTPHOST
         ,@empSmtpPortOld          = d.EMP_SMTPPORT
         ,@empCertPathOld          = d.EMP_CERTPATH
         ,@empCertSenhaOld         = d.EMP_CERTSENHA
         ,@empCertValidadeOld      = d.EMP_CERTVALIDADE
         ,@empProdHomolOld         = d.EMP_PRODHOMOL
         ,@empContingenciaOld      = d.EMP_CONTINGENCIA
         ,@empAtivoOld             = d.EMP_ATIVO
         ,@empRegOld               = d.EMP_REG
         ,@empCodUsrOld            = d.EMP_CODUSR
         ,@usrApelidoOld           = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld            = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03Old                = UP.UP_D03
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.EMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@empCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD03Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA EXCLUIR NA TABELA RAMO_EMPRESA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@empRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    ---------------------------------------------
    --   Checando a FK EMP_CODERT(EMPRESA)
    ---------------------------------------------
    SELECT TOP 1 @fkIntFll=COALESCE(FLL_CODIGO,0) FROM FILIAL WHERE FLL_CODEMP=@empCodigoOld;
    IF( @fkIntFll > 0 )
      RAISERROR('EMPRESA UTILIZADO NA FILIAL %i',15,1,@fkIntFll);
    --
    DELETE FROM dbo.EMPRESA WHERE EMP_CODIGO=@empCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESA(
      EMP_ACAO
      ,EMP_CODIGO
      ,EMP_NOME
      ,EMP_APELIDO
      ,EMP_CNPJ
      ,EMP_INSESTAD
      ,EMP_CODCDD
      ,EMP_CODLGR
      ,EMP_ENDERECO
      ,EMP_NUMERO
      ,EMP_CEP
      ,EMP_BAIRRO
      ,EMP_FONE
      ,EMP_CODETF
      ,EMP_ALIQCOFINS
      ,EMP_ALIQPIS
      ,EMP_ALIQCSLL
      ,EMP_BCPRESUMIDO
      ,EMP_ALIQIRPRESUMIDO
      ,EMP_ALIQCSLLPRESUMIDO
      ,EMP_ALIQIRRF
      ,EMP_ANEXOSIMPLES
      ,EMP_CODETP
      ,EMP_CODERM
      ,EMP_CODERT
      ,EMP_SMTPUSERNAME
      ,EMP_SMTPPASSWORD
      ,EMP_SMTPHOST
      ,EMP_SMTPPORT
      ,EMP_CERTPATH
      ,EMP_CERTSENHA
      ,EMP_CERTVALIDADE
      ,EMP_PRODHOMOL
      ,EMP_CONTINGENCIA
      ,EMP_ATIVO
      ,EMP_REG
      ,EMP_CODUSR) VALUES(
      'E'
      ,@empCodigoOld             -- EMP_CODIGO
      ,@empNomeOld               -- EMP_NOME
      ,@empApelidoOld            -- EMP_APELIDO
      ,@empCnpjOld               -- EMP_CNPJ
      ,@empInsOld                -- EMP_INSESTAD
      ,@empCodCddOld             -- EMP_CODCDD
      ,@empCodLgrOld             -- EMP_CODLGR
      ,@empEnderecoOld           -- EMP_ENDERECO
      ,@empNumeroOld             -- EMP_NUMERO
      ,@empCepOld                -- EMP_CEP
      ,@empBairroOld             -- EMP_BAIRRO
      ,@empFoneOld               -- EMP_FONE
      ,@empCodEtfOld             -- EMP_CODETF
      ,@empAliqCofinsOld         -- EMP_ALIQCOFINS
      ,@empAliqPisOld            -- EMP_ALIQPIS
      ,@empAliqCsllOld           -- EMP_ALIQCSLL
      ,@empBcPresumidoOld        -- EMP_BCPRESUMIDO
      ,@empAliqIrPresumidoOld    -- EMP_ALIQIRPRESUMIDO
      ,@empAliqCsllPresumidoOld  -- EMP_ALIQCSLLPRESUMIDO
      ,@empAliqIrrfOld           -- EMP_ALIQIRRF
      ,@empAnexoSimplesOld       -- EMP_ANEXOSIMPLES
      ,@empCodEtpOld             -- EMP_CODETP
      ,@empCodErmOld             -- EMP_CODERM
      ,@empCodErtOld             -- EMP_CODERT
      ,@empSmtpUserNameOld       -- EMP_SMTPUSERNAME
      ,@empSmtpPasswordOld       -- EMP_SMTPPASSWORD
      ,@empSmtpHostOld           -- EMP_SMTPHOST
      ,@empSmtpPortOld           -- EMP_SMTPPORT
      ,@empCertPathOld           -- EMP_CERTPATH
      ,@empCertSenhaOld          -- EMP_CERTSENHA
      ,@empCertValidadeOld       -- EMP_CERTVALIDADE
      ,@empProdhomolOld          -- EMP_PRODHOMOL
      ,@empContingenciaOld       -- EMP_CONTINGENCIA
      ,@empAtivoOld              -- EMP_ATIVO
      ,@empRegOld                -- EMP_REG
      ,@empCodUsrOld             -- EMP_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPEMPRESA_BUD ON dbo.BKPEMPRESA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                 E M P R E S A R A M O
-- trgempresaramo
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewEMPRESARAMO_BI ON dbo.VEMPRESARAMO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- ERM_CODIGO     | PK  |    |    | VC(03) NN          |
  -- ERM_NOME       |     |    |    | VC(25) NN          |
  -- ERM_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- ERM_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- ERM_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D25         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(25) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ermCodigoNew VARCHAR(3);
  DECLARE @ermNomeNew VARCHAR(25);
  DECLARE @ermAtivoNew VARCHAR(1);
  DECLARE @ermRegNew VARCHAR(1);
  DECLARE @ermCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ermCodigoNew   = dbo.fncTranslate(i.ERM_CODIGO,3)
         ,@ermNomeNew    = dbo.fncTranslate(i.ERM_NOME,25)
         ,@ermAtivoNew   = UPPER(i.ERM_ATIVO)
         ,@ermRegNew     = UPPER(i.ERM_REG)
         ,@ermCodUsrNew  = i.ERM_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ERM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ermCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA INCLUIR NA TABELA RAMO_EMPRESA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(ERM_CODIGO,'OK') FROM EMPRESARAMO WHERE ERM_NOME=@ermNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA RAMO_EMPRESA COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(ERM_NOME,'OK') FROM EMPRESARAMO WHERE ERM_CODIGO=@ermCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA RAMO_EMPRESA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ermRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ermRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.EMPRESARAMO( 
      ERM_CODIGO
      ,ERM_NOME
      ,ERM_ATIVO
      ,ERM_REG
      ,ERM_CODUSR) VALUES(
      @ermCodigoNew   -- ERM_CODIGO
      ,@ermNomeNew    -- ERM_NOME
      ,@ermAtivoNew   -- ERM_ATIVO
      ,@ermRegNew     -- ERM_REG
      ,@ermCodUsrNew  -- ERM_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESARAMO(
      ERM_ACAO
      ,ERM_CODIGO
      ,ERM_NOME
      ,ERM_ATIVO
      ,ERM_REG
      ,ERM_CODUSR) VALUES(
      'I'                       -- ERM_ACAO
      ,@ermCodigoNew            -- ERM_CODIGO
      ,@ermNomeNew              -- ERM_NOME
      ,@ermAtivoNew             -- ERM_ATIVO
      ,@ermRegNew               -- ERM_REG
      ,@ermCodUsrNew            -- ERM_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESARAMO_BU ON dbo.VEMPRESARAMO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ermCodigoNew VARCHAR(3);
  DECLARE @ermNomeNew VARCHAR(25);
  DECLARE @ermAtivoNew VARCHAR(1);
  DECLARE @ermRegNew VARCHAR(1);
  DECLARE @ermCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ermCodigoNew   = dbo.fncTranslate(i.ERM_CODIGO,3)
         ,@ermNomeNew    = dbo.fncTranslate(i.ERM_NOME,25)
         ,@ermAtivoNew   = UPPER(i.ERM_ATIVO)
         ,@ermRegNew     = UPPER(i.ERM_REG)
         ,@ermCodUsrNew  = i.ERM_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ERM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ermCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA ALTERAR NA TABELA RAMO_EMPRESA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ermCodigoOld VARCHAR(3);
    DECLARE @ermNomeOld VARCHAR(25);
    DECLARE @ermAtivoOld VARCHAR(1);
    DECLARE @ermRegOld VARCHAR(1);
    DECLARE @ermCodUsrOld INTEGER;
    SELECT @ermCodigoOld   = d.ERM_CODIGO
           ,@ermNomeOld    = d.ERM_NOME
           ,@ermAtivoOld   = d.ERM_ATIVO
           ,@ermRegOld     = d.ERM_REG
           ,@ermCodUsrOld  = d.ERM_CODUSR         
      FROM EMPRESARAMO d WHERE d.ERM_CODIGO=@ermCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ermCodigoOld<>@ermCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @ermNomeOld<>@ermNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(ERM_CODIGO,'OK') FROM EMPRESARAMO WHERE ERM_NOME=@ermNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA RAMO_EMPRESA COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ermRegOld <> @ermRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ermRegOld,@ermRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.EMPRESARAMO
       SET ERM_NOME   = @ermNomeNew
          ,ERM_ATIVO  = @ermAtivoNew
          ,ERM_REG    = @ermRegNew
          ,ERM_CODUSR = @ermCodUsrNew
    WHERE ERM_CODIGO  = @ermCodigoNew;     
    -- Gravando LOG
    IF( (@ermNomeOld<>@ermNomeNew) OR (@ermAtivoOld<>@ermAtivoNew) OR (@ermRegOld<>@ermRegNew) ) BEGIN
      INSERT INTO dbo.BKPEMPRESARAMO(
        ERM_ACAO
        ,ERM_CODIGO
        ,ERM_NOME
        ,ERM_ATIVO
        ,ERM_REG
        ,ERM_CODUSR) VALUES(
        'A'             -- ERM_ACAO
        ,@ermCodigoNew  -- ERM_CODIGO
        ,@ermNomeNew    -- ERM_NOME
        ,@ermAtivoNew   -- ERM_ATIVO
        ,@ermRegNew     -- ERM_REG
        ,@ermCodUsrNew  -- ERM_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESARAMO_BD ON dbo.VEMPRESARAMO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntEmp INTEGER = 0;  -- Para procurar campo foreign key int (EMPRESA)
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ermCodigoOld VARCHAR(3);
  DECLARE @ermNomeOld VARCHAR(25);
  DECLARE @ermAtivoOld VARCHAR(1);
  DECLARE @ermRegOld VARCHAR(1);
  DECLARE @ermCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD25Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ermCodigoOld   = d.ERM_CODIGO
         ,@ermNomeOld    = d.ERM_NOME
         ,@ermAtivoOld   = d.ERM_ATIVO
         ,@ermRegOld     = d.ERM_REG
         ,@ermCodUsrOld  = d.ERM_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25Old = UP.UP_D25
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.ERM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ermCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD25Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA EXCLUIR NA TABELA RAMO_EMPRESA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ermRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    ---------------------------------------------
    --   Checando a FK EMP_CODETF(EMPRESARAMO)
    ---------------------------------------------
    SELECT TOP 1 @fkIntEmp=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CODERM=@ermCodigoOld;
    IF( @fkIntEmp > 0 )
      RAISERROR('RAMO_EMPRESA UTILIZADO NA EMPRESA %i',15,1,@fkIntEmp);
    --
    DELETE FROM dbo.EMPRESARAMO WHERE ERM_CODIGO=@ermCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESARAMO(
      ERM_ACAO
      ,ERM_CODIGO
      ,ERM_NOME
      ,ERM_ATIVO
      ,ERM_REG
      ,ERM_CODUSR) VALUES(
      'E'               -- ERM_ACAO
      ,@ermCodigoOld    -- ERM_CODIGO
      ,@ermNomeOld      -- ERM_NOME
      ,@ermAtivoOld     -- ERM_ATIVO
      ,@ermRegOld       -- ERM_REG
      ,@ermCodUsrOld    -- ERM_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPEMPRESARAMO_BUD ON dbo.BKPEMPRESARAMO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                 E M P R E S A R E G T R I B
-- trgempresaregtrib
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewEMPRESAREGTRIB_BI ON dbo.VEMPRESAREGTRIB
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- ERT_CODIGO     | PK  |    |    | VC(03) NN          |
  -- ERT_NOME       |     |    |    | VC(50) NN          |
  -- ERT_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- ERT_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- ERT_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D25         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(50) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ertCodigoNew VARCHAR(3);
  DECLARE @ertNomeNew VARCHAR(50);
  DECLARE @ertAtivoNew VARCHAR(1);
  DECLARE @ertRegNew VARCHAR(1);
  DECLARE @ertCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ertCodigoNew   = dbo.fncTranslate(i.ERT_CODIGO,3)
         ,@ertNomeNew    = dbo.fncTranslate(i.ERT_NOME,50)
         ,@ertAtivoNew   = UPPER(i.ERT_ATIVO)
         ,@ertRegNew     = UPPER(i.ERT_REG)
         ,@ertCodUsrNew  = i.ERT_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ERT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ertCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA INCLUIR NA TABELA RAMO_EMPRESA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(ERT_CODIGO,'OK') FROM EMPRESAREGTRIB WHERE ERT_NOME=@ertNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA RAMO_EMPRESA COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(ERT_NOME,'OK') FROM EMPRESAREGTRIB WHERE ERT_CODIGO=@ertCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA RAMO_EMPRESA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ertRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ertRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.EMPRESAREGTRIB( 
      ERT_CODIGO
      ,ERT_NOME
      ,ERT_ATIVO
      ,ERT_REG
      ,ERT_CODUSR) VALUES(
      @ertCodigoNew   -- ERT_CODIGO
      ,@ertNomeNew    -- ERT_NOME
      ,@ertAtivoNew   -- ERT_ATIVO
      ,@ertRegNew     -- ERT_REG
      ,@ertCodUsrNew  -- ERT_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESAREGTRIB(
      ERT_ACAO
      ,ERT_CODIGO
      ,ERT_NOME
      ,ERT_ATIVO
      ,ERT_REG
      ,ERT_CODUSR) VALUES(
      'I'                       -- ERT_ACAO
      ,@ertCodigoNew            -- ERT_CODIGO
      ,@ertNomeNew              -- ERT_NOME
      ,@ertAtivoNew             -- ERT_ATIVO
      ,@ertRegNew               -- ERT_REG
      ,@ertCodUsrNew            -- ERT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESAREGTRIB_BU ON dbo.VEMPRESAREGTRIB
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ertCodigoNew VARCHAR(3);
  DECLARE @ertNomeNew VARCHAR(50);
  DECLARE @ertAtivoNew VARCHAR(1);
  DECLARE @ertRegNew VARCHAR(1);
  DECLARE @ertCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ertCodigoNew   = dbo.fncTranslate(i.ERT_CODIGO,3)
         ,@ertNomeNew    = dbo.fncTranslate(i.ERT_NOME,50)
         ,@ertAtivoNew   = UPPER(i.ERT_ATIVO)
         ,@ertRegNew     = UPPER(i.ERT_REG)
         ,@ertCodUsrNew  = i.ERT_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ERT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ertCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA ALTERAR NA TABELA RAMO_EMPRESA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ertCodigoOld VARCHAR(3);
    DECLARE @ertNomeOld VARCHAR(50);
    DECLARE @ertAtivoOld VARCHAR(1);
    DECLARE @ertRegOld VARCHAR(1);
    DECLARE @ertCodUsrOld INTEGER;
    SELECT @ertCodigoOld   = d.ERT_CODIGO
           ,@ertNomeOld    = d.ERT_NOME
           ,@ertAtivoOld   = d.ERT_ATIVO
           ,@ertRegOld     = d.ERT_REG
           ,@ertCodUsrOld  = d.ERT_CODUSR         
      FROM EMPRESAREGTRIB d WHERE d.ERT_CODIGO=@ertCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ertCodigoOld<>@ertCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @ertNomeOld<>@ertNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(ERT_CODIGO,'OK') FROM EMPRESAREGTRIB WHERE ERT_NOME=@ertNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA RAMO_EMPRESA COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ertRegOld <> @ertRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ertRegOld,@ertRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.EMPRESAREGTRIB
       SET ERT_NOME   = @ertNomeNew
          ,ERT_ATIVO  = @ertAtivoNew
          ,ERT_REG    = @ertRegNew
          ,ERT_CODUSR = @ertCodUsrNew
    WHERE ERT_CODIGO  = @ertCodigoNew;     
    -- Gravando LOG
    IF( (@ertNomeOld<>@ertNomeNew) OR (@ertAtivoOld<>@ertAtivoNew) OR (@ertRegOld<>@ertRegNew) ) BEGIN
      INSERT INTO dbo.BKPEMPRESAREGTRIB(
        ERT_ACAO
        ,ERT_CODIGO
        ,ERT_NOME
        ,ERT_ATIVO
        ,ERT_REG
        ,ERT_CODUSR) VALUES(
        'A'             -- ERT_ACAO
        ,@ertCodigoNew  -- ERT_CODIGO
        ,@ertNomeNew    -- ERT_NOME
        ,@ertAtivoNew   -- ERT_ATIVO
        ,@ertRegNew     -- ERT_REG
        ,@ertCodUsrNew  -- ERT_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESAREGTRIB_BD ON dbo.VEMPRESAREGTRIB
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntEmp INTEGER = 0;  -- Para procurar campo foreign key int (EMPRESA)
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ertCodigoOld VARCHAR(3);
  DECLARE @ertNomeOld VARCHAR(50);
  DECLARE @ertAtivoOld VARCHAR(1);
  DECLARE @ertRegOld VARCHAR(1);
  DECLARE @ertCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD25Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ertCodigoOld   = d.ERT_CODIGO
         ,@ertNomeOld    = d.ERT_NOME
         ,@ertAtivoOld   = d.ERT_ATIVO
         ,@ertRegOld     = d.ERT_REG
         ,@ertCodUsrOld  = d.ERT_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25Old = UP.UP_D25
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.ERT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ertCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD25Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA EXCLUIR NA TABELA RAMO_EMPRESA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ertRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    ---------------------------------------------
    --   Checando a FK EMP_CODERT(EMPRESAREGTRIB)
    ---------------------------------------------
    SELECT TOP 1 @fkIntEmp=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CODERT=@ertCodigoOld;
    IF( @fkIntEmp > 0 )
      RAISERROR('RAMO_EMPRESA UTILIZADO NA EMPRESA %i',15,1,@fkIntEmp);
    --
    DELETE FROM dbo.EMPRESAREGTRIB WHERE ERT_CODIGO=@ertCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESAREGTRIB(
      ERT_ACAO
      ,ERT_CODIGO
      ,ERT_NOME
      ,ERT_ATIVO
      ,ERT_REG
      ,ERT_CODUSR) VALUES(
      'E'               -- ERT_ACAO
      ,@ertCodigoOld    -- ERT_CODIGO
      ,@ertNomeOld      -- ERT_NOME
      ,@ertAtivoOld     -- ERT_ATIVO
      ,@ertRegOld       -- ERT_REG
      ,@ertCodUsrOld    -- ERT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPEMPRESAREGTRIB_BUD ON dbo.BKPEMPRESAREGTRIB
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                 E M P R E S A T I P O
-- trgempresatipo
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewEMPRESATIPO_BI ON dbo.VEMPRESATIPO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- ETP_CODIGO     | PK  |    |    | VC(03) NN          |
  -- ETP_NOME       |     |    |    | VC(20) NN          |
  -- ETP_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- ETP_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- ETP_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D25         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @etpCodigoNew VARCHAR(3);
  DECLARE @etpNomeNew VARCHAR(20);
  DECLARE @etpAtivoNew VARCHAR(1);
  DECLARE @etpRegNew VARCHAR(1);
  DECLARE @etpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @etpCodigoNew   = dbo.fncTranslate(i.ETP_CODIGO,3)
         ,@etpNomeNew    = dbo.fncTranslate(i.ETP_NOME,20)
         ,@etpAtivoNew   = UPPER(i.ETP_ATIVO)
         ,@etpRegNew     = UPPER(i.ETP_REG)
         ,@etpCodUsrNew  = i.ETP_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ETP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@etpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA INCLUIR NA TABELA TIPO_EMPRESA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(ETP_CODIGO,'OK') FROM EMPRESATIPO WHERE ETP_NOME=@etpNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA TIPO_EMPRESA COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(ETP_NOME,'OK') FROM EMPRESATIPO WHERE ETP_CODIGO=@etpCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA TIPO_EMPRESA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @etpRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@etpRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.EMPRESATIPO( 
      ETP_CODIGO
      ,ETP_NOME
      ,ETP_ATIVO
      ,ETP_REG
      ,ETP_CODUSR) VALUES(
      @etpCodigoNew   -- ETP_CODIGO
      ,@etpNomeNew    -- ETP_NOME
      ,@etpAtivoNew   -- ETP_ATIVO
      ,@etpRegNew     -- ETP_REG
      ,@etpCodUsrNew  -- ETP_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESATIPO(
      ETP_ACAO
      ,ETP_CODIGO
      ,ETP_NOME
      ,ETP_ATIVO
      ,ETP_REG
      ,ETP_CODUSR) VALUES(
      'I'                       -- ETP_ACAO
      ,@etpCodigoNew            -- ETP_CODIGO
      ,@etpNomeNew              -- ETP_NOME
      ,@etpAtivoNew             -- ETP_ATIVO
      ,@etpRegNew               -- ETP_REG
      ,@etpCodUsrNew            -- ETP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESATIPO_BU ON dbo.VEMPRESATIPO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @etpCodigoNew VARCHAR(3);
  DECLARE @etpNomeNew VARCHAR(20);
  DECLARE @etpAtivoNew VARCHAR(1);
  DECLARE @etpRegNew VARCHAR(1);
  DECLARE @etpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @etpCodigoNew   = dbo.fncTranslate(i.ETP_CODIGO,3)
         ,@etpNomeNew    = dbo.fncTranslate(i.ETP_NOME,20)
         ,@etpAtivoNew   = UPPER(i.ETP_ATIVO)
         ,@etpRegNew     = UPPER(i.ETP_REG)
         ,@etpCodUsrNew  = i.ETP_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ETP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@etpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA ALTERAR NA TABELA TIPO_EMPRESA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @etpCodigoOld VARCHAR(3);
    DECLARE @etpNomeOld VARCHAR(20);
    DECLARE @etpAtivoOld VARCHAR(1);
    DECLARE @etpRegOld VARCHAR(1);
    DECLARE @etpCodUsrOld INTEGER;
    SELECT @etpCodigoOld   = d.ETP_CODIGO
           ,@etpNomeOld    = d.ETP_NOME
           ,@etpAtivoOld   = d.ETP_ATIVO
           ,@etpRegOld     = d.ETP_REG
           ,@etpCodUsrOld  = d.ETP_CODUSR         
      FROM EMPRESATIPO d WHERE d.ETP_CODIGO=@etpCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @etpCodigoOld<>@etpCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @etpNomeOld<>@etpNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(ETP_CODIGO,'OK') FROM EMPRESATIPO WHERE ETP_NOME=@etpNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA TIPO_EMPRESA COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @etpRegOld <> @etpRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@etpRegOld,@etpRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.EMPRESATIPO
       SET ETP_NOME   = @etpNomeNew
          ,ETP_ATIVO  = @etpAtivoNew
          ,ETP_REG    = @etpRegNew
          ,ETP_CODUSR = @etpCodUsrNew
    WHERE ETP_CODIGO  = @etpCodigoNew;     
    -- Gravando LOG
    IF( (@etpNomeOld<>@etpNomeNew) OR (@etpAtivoOld<>@etpAtivoNew) OR (@etpRegOld<>@etpRegNew) ) BEGIN
      INSERT INTO dbo.BKPEMPRESATIPO(
        ETP_ACAO
        ,ETP_CODIGO
        ,ETP_NOME
        ,ETP_ATIVO
        ,ETP_REG
        ,ETP_CODUSR) VALUES(
        'A'             -- ETP_ACAO
        ,@etpCodigoNew  -- ETP_CODIGO
        ,@etpNomeNew    -- ETP_NOME
        ,@etpAtivoNew   -- ETP_ATIVO
        ,@etpRegNew     -- ETP_REG
        ,@etpCodUsrNew  -- ETP_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESATIPO_BD ON dbo.VEMPRESATIPO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntEmp INTEGER = 0;  -- Para procurar campo foreign key int (EMPRESA)
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @etpCodigoOld VARCHAR(3);
  DECLARE @etpNomeOld VARCHAR(20);
  DECLARE @etpAtivoOld VARCHAR(1);
  DECLARE @etpRegOld VARCHAR(1);
  DECLARE @etpCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD25Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @etpCodigoOld   = d.ETP_CODIGO
         ,@etpNomeOld    = d.ETP_NOME
         ,@etpAtivoOld   = d.ETP_ATIVO
         ,@etpRegOld     = d.ETP_REG
         ,@etpCodUsrOld  = d.ETP_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25Old = UP.UP_D25
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.ETP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@etpCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD25Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA EXCLUIR NA TABELA TIPO_EMPRESA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@etpRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    ---------------------------------------------
    --   Checando a FK EMP_CODETF(EMPRESATIPO)
    ---------------------------------------------
    SELECT TOP 1 @fkIntEmp=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CODETP=@etpCodigoOld;
    IF( @fkIntEmp > 0 )
      RAISERROR('TIPO_EMPRESA UTILIZADO NA EMPRESA %i',15,1,@fkIntEmp);
    --
    DELETE FROM dbo.EMPRESATIPO WHERE ETP_CODIGO=@etpCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESATIPO(
      ETP_ACAO
      ,ETP_CODIGO
      ,ETP_NOME
      ,ETP_ATIVO
      ,ETP_REG
      ,ETP_CODUSR) VALUES(
      'E'               -- ETP_ACAO
      ,@etpCodigoOld    -- ETP_CODIGO
      ,@etpNomeOld      -- ETP_NOME
      ,@etpAtivoOld     -- ETP_ATIVO
      ,@etpRegOld       -- ETP_REG
      ,@etpCodUsrOld    -- ETP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPEMPRESATIPO_BUD ON dbo.BKPEMPRESATIPO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                 E M P R E S A T R I B F E D
-- trgempresatribfed
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewEMPRESATRIBFED_BI ON dbo.VEMPRESATRIBFED
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- ETF_CODIGO     | PK  |    |    | VC(03) NN          |
  -- ETF_NOME       |     |    |    | VC(20) NN          |
  -- ETF_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- ETF_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- ETF_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D25         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @etfCodigoNew VARCHAR(3);
  DECLARE @etfNomeNew VARCHAR(20);
  DECLARE @etfAtivoNew VARCHAR(1);
  DECLARE @etfRegNew VARCHAR(1);
  DECLARE @etfCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @etfCodigoNew   = dbo.fncTranslate(i.ETF_CODIGO,3)
         ,@etfNomeNew    = dbo.fncTranslate(i.ETF_NOME,20)
         ,@etfAtivoNew   = UPPER(i.ETF_ATIVO)
         ,@etfRegNew     = UPPER(i.ETF_REG)
         ,@etfCodUsrNew  = i.ETF_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ETF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@etfCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA INCLUIR NA TABELA TRIB_FEDERAL',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(ETF_CODIGO,'OK') FROM EMPRESATRIBFED WHERE ETF_NOME=@etfNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA TRIB_FEDERAL COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(ETF_NOME,'OK') FROM EMPRESATRIBFED WHERE ETF_CODIGO=@etfCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA TRIB_FEDERAL %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @etfRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@etfRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.EMPRESATRIBFED( 
      ETF_CODIGO
      ,ETF_NOME
      ,ETF_ATIVO
      ,ETF_REG
      ,ETF_CODUSR) VALUES(
      @etfCodigoNew   -- ETF_CODIGO
      ,@etfNomeNew    -- ETF_NOME
      ,@etfAtivoNew   -- ETF_ATIVO
      ,@etfRegNew     -- ETF_REG
      ,@etfCodUsrNew  -- ETF_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESATRIBFED(
      ETF_ACAO
      ,ETF_CODIGO
      ,ETF_NOME
      ,ETF_ATIVO
      ,ETF_REG
      ,ETF_CODUSR) VALUES(
      'I'                       -- ETF_ACAO
      ,@etfCodigoNew            -- ETF_CODIGO
      ,@etfNomeNew              -- ETF_NOME
      ,@etfAtivoNew             -- ETF_ATIVO
      ,@etfRegNew               -- ETF_REG
      ,@etfCodUsrNew            -- ETF_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESATRIBFED_BU ON dbo.VEMPRESATRIBFED
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @etfCodigoNew VARCHAR(3);
  DECLARE @etfNomeNew VARCHAR(20);
  DECLARE @etfAtivoNew VARCHAR(1);
  DECLARE @etfRegNew VARCHAR(1);
  DECLARE @etfCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @etfCodigoNew   = dbo.fncTranslate(i.ETF_CODIGO,3)
         ,@etfNomeNew    = dbo.fncTranslate(i.ETF_NOME,20)
         ,@etfAtivoNew   = UPPER(i.ETF_ATIVO)
         ,@etfRegNew     = UPPER(i.ETF_REG)
         ,@etfCodUsrNew  = i.ETF_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.ETF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@etfCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA ALTERAR NA TABELA TRIB_FEDERAL',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @etfCodigoOld VARCHAR(3);
    DECLARE @etfNomeOld VARCHAR(20);
    DECLARE @etfAtivoOld VARCHAR(1);
    DECLARE @etfRegOld VARCHAR(1);
    DECLARE @etfCodUsrOld INTEGER;
    SELECT @etfCodigoOld   = d.ETF_CODIGO
           ,@etfNomeOld    = d.ETF_NOME
           ,@etfAtivoOld   = d.ETF_ATIVO
           ,@etfRegOld     = d.ETF_REG
           ,@etfCodUsrOld  = d.ETF_CODUSR         
      FROM EMPRESATRIBFED d WHERE d.ETF_CODIGO=@etfCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @etfCodigoOld<>@etfCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @etfNomeOld<>@etfNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(ETF_CODIGO,'OK') FROM EMPRESATRIBFED WHERE ETF_NOME=@etfNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA TRIB_FEDERAL COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @etfRegOld <> @etfRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@etfRegOld,@etfRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.EMPRESATRIBFED
       SET ETF_NOME   = @etfNomeNew
          ,ETF_ATIVO  = @etfAtivoNew
          ,ETF_REG    = @etfRegNew
          ,ETF_CODUSR = @etfCodUsrNew
    WHERE ETF_CODIGO  = @etfCodigoNew;     
    -- Gravando LOG
    IF( (@etfNomeOld<>@etfNomeNew) OR (@etfAtivoOld<>@etfAtivoNew) OR (@etfRegOld<>@etfRegNew) ) BEGIN
      INSERT INTO dbo.BKPEMPRESATRIBFED(
        ETF_ACAO
        ,ETF_CODIGO
        ,ETF_NOME
        ,ETF_ATIVO
        ,ETF_REG
        ,ETF_CODUSR) VALUES(
        'A'             -- ETF_ACAO
        ,@etfCodigoNew  -- ETF_CODIGO
        ,@etfNomeNew    -- ETF_NOME
        ,@etfAtivoNew   -- ETF_ATIVO
        ,@etfRegNew     -- ETF_REG
        ,@etfCodUsrNew  -- ETF_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMPRESATRIBFED_BD ON dbo.VEMPRESATRIBFED
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntEmp INTEGER = 0;  -- Para procurar campo foreign key int (EMPRESA)
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @etfCodigoOld VARCHAR(3);
  DECLARE @etfNomeOld VARCHAR(20);
  DECLARE @etfAtivoOld VARCHAR(1);
  DECLARE @etfRegOld VARCHAR(1);
  DECLARE @etfCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD25Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @etfCodigoOld   = d.ETF_CODIGO
         ,@etfNomeOld    = d.ETF_NOME
         ,@etfAtivoOld   = d.ETF_ATIVO
         ,@etfRegOld     = d.ETF_REG
         ,@etfCodUsrOld  = d.ETF_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25Old = UP.UP_D25
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.ETF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@etfCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD25Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA EXCLUIR NA TABELA TRIB_FEDERAL',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@etfRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    ---------------------------------------------
    --   Checando a FK EMP_CODETF(EMPRESATRIBFED)
    ---------------------------------------------
    SELECT TOP 1 @fkIntEmp=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CODETF=@etfCodigoOld;
    IF( @fkIntEmp > 0 )
      RAISERROR('TRIB_FEDERAL UTILIZADO NA EMPRESA %i',15,1,@fkIntEmp);
    --
    DELETE FROM dbo.EMPRESATRIBFED WHERE ETF_CODIGO=@etfCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPEMPRESATRIBFED(
      ETF_ACAO
      ,ETF_CODIGO
      ,ETF_NOME
      ,ETF_ATIVO
      ,ETF_REG
      ,ETF_CODUSR) VALUES(
      'E'               -- ETF_ACAO
      ,@etfCodigoOld    -- ETF_CODIGO
      ,@etfNomeOld      -- ETF_NOME
      ,@etfAtivoOld     -- ETF_ATIVO
      ,@etfRegOld       -- ETF_REG
      ,@etfCodUsrOld    -- ETF_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPEMPRESATRIBFED_BUD ON dbo.BKPEMPRESATRIBFED
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                                  E M A I L
--trgemail
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewEMAIL_BI ON dbo.VEMAIL
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- EMA_CODIGO     | PK  |    |    | INT                |  Auto incremento
  -- EMA_NOME       |     |    |    | VC(20) NN          |  
  -- EMA_EMAIL      |     |    |    | VC(50) NN          |    
  -- EMA_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- EMA_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- EMA_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D16         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  --DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @emaCodigoNew INTEGER;
  DECLARE @emaNomeNew VARCHAR(20);
  DECLARE @emaEmailNew VARCHAR(50);
  DECLARE @emaAtivoNew VARCHAR(1);
  DECLARE @emaRegNew VARCHAR(1);
  DECLARE @emaCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD16New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @emaCodigoNew   = i.EMA_CODIGO
         ,@emaNomeNew    = dbo.fncTranslate(i.EMA_NOME,20)
         ,@emaEmailNew   = LOWER(dbo.fncTranslate(i.EMA_EMAIL,50))
         ,@emaAtivoNew   = UPPER(i.EMA_ATIVO)
         ,@emaRegNew     = UPPER(i.EMA_REG)
         ,@emaCodUsrNew  = i.EMA_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD16New      = UP.UP_D16
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.EMA_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@emaCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD16New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 16 PARA INCLUIR NA TABELA EMAIL',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(EMA_CODIGO,0) FROM EMAIL WHERE EMA_NOME=@emaNomeNew;
    --IF( @uiCodigo <> 0 )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EMAIL COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(EMA_NOME,'OK') FROM EMAIL WHERE EMA_CODIGO=@emaCodigoNew;
    --IF( @uiNome IS NOT NULL ) BEGIN
    --  IF( @uiNome <> 'OK' )
    --    RAISERROR('CODIGO JA CADASTRADO NA TABELA EMAIL %s',15,1,@uiNome);
    --END  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @emaRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@emaRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.EMAIL( 
      EMA_NOME
      ,EMA_EMAIL
      ,EMA_ATIVO
      ,EMA_REG
      ,EMA_CODUSR) VALUES(
      @emaNomeNew     -- EMA_NOME
      ,@emaEmailNew   -- EMA_EMAIL
      ,@emaAtivoNew   -- EMA_ATIVO
      ,@emaRegNew     -- EMA_REG
      ,@emaCodUsrNew  -- EMA_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPEMAIL(
      EMA_ACAO
      ,EMA_CODIGO
      ,EMA_EMAIL      
      ,EMA_NOME
      ,EMA_ATIVO
      ,EMA_REG
      ,EMA_CODUSR) VALUES(
      'I'                         -- EMA_ACAO
      ,IDENT_CURRENT('EMAIL')     -- EMA_CODIGO
      ,@emaEmailNew               -- EMA_EMAIL      
      ,@emaNomeNew                -- EMA_NOME
      ,@emaAtivoNew               -- EMA_ATIVO
      ,@emaRegNew                 -- EMA_REG
      ,@emaCodUsrNew              -- EMA_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMAIL_BU ON dbo.VEMAIL
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @emaCodigoNew INTEGER;
  DECLARE @emaNomeNew VARCHAR(20);
  DECLARE @emaEmailNew VARCHAR(50);  
  DECLARE @emaAtivoNew VARCHAR(1);
  DECLARE @emaRegNew VARCHAR(1);
  DECLARE @emaCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD16New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @emaCodigoNew   = i.EMA_CODIGO
         ,@emaNomeNew    = dbo.fncTranslate(i.EMA_NOME,20)
         ,@emaEmailNew   = LOWER(dbo.fncTranslate(i.EMA_EMAIL,50))
         ,@emaAtivoNew   = UPPER(i.EMA_ATIVO)
         ,@emaRegNew     = UPPER(i.EMA_REG)
         ,@emaCodUsrNew  = i.EMA_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD16New      = UP.UP_D16
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.EMA_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@emaCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD16New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA EMAIL',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @emaCodigoOld INTEGER;
    DECLARE @emaNomeOld VARCHAR(20);
    DECLARE @emaEmailOld VARCHAR(50);    
    DECLARE @emaAtivoOld VARCHAR(1);
    DECLARE @emaRegOld VARCHAR(1);
    DECLARE @emaCodUsrOld INTEGER;
    SELECT @emaCodigoOld   = d.EMA_CODIGO
           ,@emaNomeOld    = d.EMA_NOME
           ,@emaEmailOld   = d.EMA_EMAIL
           ,@emaAtivoOld   = d.EMA_ATIVO
           ,@emaRegOld     = d.EMA_REG
           ,@emaCodUsrOld  = d.EMA_CODUSR         
      FROM EMAIL d WHERE d.EMA_CODIGO=@emaCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @emaCodigoOld<>@emaCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @emaNomeOld<>@emaNomeNew )
      RAISERROR('CAMPO ROTINA NAO PODE SER ALTERADO',15,1);  
      
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @emaNomeOld<>@emaNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(EMA_CODIGO,0) FROM EMAIL WHERE EMA_NOME=@emaNomeNew;
    --  IF( @uiCodigo <> 0 )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EMAIL COM CODIGO %i',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @emaRegOld <> @emaRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@emaRegOld,@emaRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.EMAIL
       SET EMA_NOME   = @emaNomeNew
          ,EMA_EMAIL  = @emaEmailNew
          ,EMA_ATIVO  = @emaAtivoNew
          ,EMA_REG    = @emaRegNew
          ,EMA_CODUSR = @emaCodUsrNew
    WHERE EMA_CODIGO  = @emaCodigoNew;     
    -- Gravando LOG
    IF( (@emaEmailOld<>@emaEmailNew) OR (@emaAtivoOld<>@emaAtivoNew) OR (@emaRegOld<>@emaRegNew) ) BEGIN
      INSERT INTO dbo.BKPEMAIL(
        EMA_ACAO
        ,EMA_CODIGO
        ,EMA_NOME
        ,EMA_EMAIL
        ,EMA_ATIVO
        ,EMA_REG
        ,EMA_CODUSR) VALUES(
        'A'             -- EMA_ACAO
        ,@emaCodigoNew  -- EMA_CODIGO
        ,@emaNomeNew    -- EMA_NOME
        ,@emaEmailNew   -- EMA_EMAIL        
        ,@emaAtivoNew   -- EMA_ATIVO
        ,@emaRegNew     -- EMA_REG
        ,@emaCodUsrNew  -- EMA_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewEMAIL_BD ON dbo.VEMAIL
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @emaCodigoOld INTEGER;
  DECLARE @emaNomeOld VARCHAR(20);
  DECLARE @emaEmailOld VARCHAR(20);
  DECLARE @emaAtivoOld VARCHAR(1);
  DECLARE @emaRegOld VARCHAR(1);
  DECLARE @emaCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD16Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @emaCodigoOld   = d.EMA_CODIGO
         ,@emaNomeOld    = d.EMA_NOME
         ,@emaEmailOld   = d.EMA_NOME
         ,@emaAtivoOld   = d.EMA_ATIVO
         ,@emaRegOld     = d.EMA_REG
         ,@emaCodUsrOld  = d.EMA_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD16Old      = UP.UP_D16
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.EMA_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@emaCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD16Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 16 PARA EXCLUIR NA TABELA EMAIL',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@emaRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@emaCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('EMAIL UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@emaCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('EMAIL UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.EMAIL WHERE EMA_CODIGO=@emaCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPEMAIL(
      EMA_ACAO
      ,EMA_CODIGO
      ,EMA_NOME
      ,EMA_EMAIL
      ,EMA_ATIVO
      ,EMA_REG
      ,EMA_CODUSR) VALUES(
      'E'               -- EMA_ACAO
      ,@emaCodigoOld    -- EMA_CODIGO
      ,@emaNomeOld      -- EMA_NOME
      ,@emaEmailOld     -- EMA_NOME
      ,@emaAtivoOld     -- EMA_ATIVO
      ,@emaRegOld       -- EMA_REG
      ,@emaCodUsrOld    -- EMA_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPEMAIL_BUD ON dbo.BKPEMAIL
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                    E S T A D O
--trgestado
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewESTADO_BI ON dbo.VESTADO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- EST_CODIGO     | OK  |    |    | VC(5) NN PK        | Codigo informado pelo usuario
  -- EST_NOME       | OK  |    |    | VC(20) NN          | 
  -- EST_ALIQICMS   |     |    |    | NUM(6,2) NN        |   
  -- EST_CODREG     | SEL |    |    | VC(5) NN           | Campo relacionado (REGIAO)
  -- REG_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (REGIAO)     
  -- EST_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- EST_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- EST_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D08      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(5) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20)  = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @estCodigoNew VARCHAR(5);
  DECLARE @estNomeNew VARCHAR(20);
  DECLARE @estAliqIcmsNew NUMERIC(6,2);
  DECLARE @estAtivoNew VARCHAR(1);
  DECLARE @estCodRegNew VARCHAR(5);
  DECLARE @regNomeNew VARCHAR(20);
  DECLARE @estRegNew VARCHAR(1);
  DECLARE @estCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @estCodigoNew      = dbo.fncTranslate(i.EST_CODIGO,5)
         ,@estNomeNew       = dbo.fncTranslate(i.EST_NOME,20)
         ,@estAliqIcmsNew   = i.EST_ALIQICMS
         ,@estCodRegNew     = i.EST_CODREG
         ,@regNomeNew       = COALESCE(REG.REG_NOME,'ERRO')
         ,@estAtivoNew      = UPPER(i.EST_ATIVO)
         ,@estRegNew        = UPPER(i.EST_REG)
         ,@estCodUsrNew     = i.EST_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New         = UP.UP_D08
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN REGIAO REG ON i.EST_CODREG=REG.REG_CODIGO AND REG.REG_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.EST_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @regNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO REGIAO %s PARA ESTE REGISTRO',15,1,@estCodRegNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@estCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA INCLUIR NA TABELA ESTADO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(EST_CODIGO,'OK') FROM ESTADO WHERE EST_NOME=@estNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA ESTADO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(EST_NOME,'OK') FROM ESTADO WHERE EST_CODIGO=@estCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA ESTADO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @estRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@estRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.ESTADO( 
      EST_CODIGO
      ,EST_NOME
      ,EST_ALIQICMS
      ,EST_CODREG
      ,EST_ATIVO
      ,EST_REG
      ,EST_CODUSR) VALUES(
      @estCodigoNew     -- EST_CODIGO
      ,@estNomeNew      -- EST_NOME
      ,@estAliqIcmsNew  -- EST_ALIQICMS
      ,@estCodRegNew    -- EST_CODREG
      ,@estAtivoNew     -- EST_ATIVO
      ,@estRegNew       -- EST_REG
      ,@estCodUsrNew    -- EST_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPESTADO(
      EST_ACAO
      ,EST_CODIGO
      ,EST_NOME
      ,EST_ALIQICMS
      ,EST_CODREG      
      ,EST_ATIVO
      ,EST_REG
      ,EST_CODUSR) VALUES(
      'I'                 -- EST_ACAO
      ,@estCodigoNew      -- EST_CODIGO
      ,@estNomeNew        -- EST_NOME
      ,@estAliqIcmsNew    -- EST_ALIQICMS
      ,@estCodRegNew      -- EST_CODREG      
      ,@estAtivoNew       -- EST_ATIVO
      ,@estRegNew         -- EST_REG
      ,@estCodUsrNew      -- EST_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewESTADO_BU ON dbo.VESTADO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(5) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @estCodigoNew VARCHAR(5);
  DECLARE @estNomeNew VARCHAR(20);
  DECLARE @estAliqIcmsNew NUMERIC(6,2);  
  DECLARE @estCodRegNew VARCHAR(5);
  DECLARE @regNomeNew VARCHAR(20);
  DECLARE @estAtivoNew VARCHAR(1);
  DECLARE @estRegNew VARCHAR(1);
  DECLARE @estCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @estCodigoNew    = dbo.fncTranslate(i.EST_CODIGO,5)
         ,@estNomeNew     = dbo.fncTranslate(i.EST_NOME,20)
         ,@estAliqIcmsNew = i.EST_ALIQICMS
         ,@estCodRegNew   = i.EST_CODREG
         ,@regNomeNew     = COALESCE(REG.REG_NOME,'ERRO')
         ,@estAtivoNew    = UPPER(i.EST_ATIVO)
         ,@estRegNew      = UPPER(i.EST_REG)
         ,@estCodUsrNew   = i.EST_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New       = UP.UP_D08
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN REGIAO REG ON i.EST_CODREG=REG.REG_CODIGO AND REG.REG_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.EST_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @regNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO REGIAO %s PARA ESTE REGISTRO',15,1,@estCodRegNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@estCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA ALTERAR NA TABELA ESTADO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @estCodigoOld VARCHAR(5);
    DECLARE @estNomeOld VARCHAR(20);
    DECLARE @estAliqIcmsOld NUMERIC(6,2);
    DECLARE @estCodRegOld VARCHAR(5);    
    DECLARE @estAtivoOld VARCHAR(1);
    DECLARE @estRegOld VARCHAR(1);
    DECLARE @estCodUsrOld INTEGER;
    SELECT @estCodigoOld    = d.EST_CODIGO
           ,@estNomeOld     = d.EST_NOME
           ,@estAliqIcmsOld = d.EST_ALIQICMS
           ,@estCodRegOld   = d.EST_CODREG           
           ,@estAtivoOld    = d.EST_ATIVO
           ,@estRegOld      = d.EST_REG
           ,@estCodUsrOld   = d.EST_CODUSR         
      FROM ESTADO d WHERE d.EST_CODIGO=@estCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @estCodigoOld<>@estCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @estNomeOld<>@estNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(EST_CODIGO,'OK') FROM ESTADO WHERE EST_NOME=@estNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EVENTO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @estRegOld <> @estRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@estRegOld,@estRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.ESTADO
       SET EST_NOME       = @estNomeNew
          ,EST_ALIQICMS   = @estAliqIcmsNew
          ,EST_CODREG     = @estCodRegNew
          ,EST_ATIVO      = @estAtivoNew
          ,EST_REG        = @estRegNew
          ,EST_CODUSR     = @estCodUsrNew
    WHERE EST_CODIGO  = @estCodigoNew;     
    -- Gravando LOG
    IF( (@estNomeOld<>@estNomeNew) OR (@estAliqIcmsOld<>@estAliqIcmsNew) OR (@estCodRegOld<>@estCodRegNew) OR (@estAtivoOld<>@estAtivoNew) OR (@estRegOld<>@estRegNew) ) BEGIN
      INSERT INTO dbo.BKPESTADO(
        EST_ACAO
        ,EST_CODIGO
        ,EST_NOME
        ,EST_ALIQICMS        
        ,EST_CODREG        
        ,EST_ATIVO
        ,EST_REG
        ,EST_CODUSR) VALUES(
        'A'               -- EST_ACAO
        ,@estCodigoNew    -- EST_CODIGO
        ,@estNomeNew      -- EST_NOME
        ,@estAliqIcmsNew  -- EST_ALIQICMS        
        ,@estCodRegNew    -- EST_CODREG        
        ,@estAtivoNew     -- EST_ATIVO
        ,@estRegNew       -- EST_REG
        ,@estCodUsrNew    -- EST_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewESTADO_BD ON dbo.VESTADO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkStrCdd VARCHAR(7) = 'OK'; -- Para procurar campo foreign key str (CIDADE)
  DECLARE @erroOld VARCHAR(70);        -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @estCodigoOld VARCHAR(5);
  DECLARE @estNomeOld VARCHAR(20);
  DECLARE @estAliqIcmsOld NUMERIC(6,2);
  DECLARE @estCodRegOld VARCHAR(5);      
  DECLARE @estAtivoOld VARCHAR(1);
  DECLARE @estRegOld VARCHAR(1);
  DECLARE @estCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD08Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @estCodigoOld    = d.EST_CODIGO
         ,@estNomeOld     = d.EST_NOME
         ,@estAliqIcmsOld = d.EST_ALIQICMS
         ,@estCodRegOld   = d.EST_CODREG                    
         ,@estAtivoOld    = d.EST_ATIVO
         ,@estRegOld      = d.EST_REG
         ,@estCodUsrOld   = d.EST_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08Old       = UP.UP_D08
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.EST_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@estCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD08Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA EXCLUIR NA TABELA ESTADO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@estRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK CDD_CODEST(CIDADE)
      ------------------------------------------
    SELECT TOP 1 @fkStrCdd=COALESCE(CDD_CODIGO,'OK') FROM CIDADE WHERE CDD_CODEST=@estCodigoOld;
    IF( @fkStrCdd <> 'OK' )
      RAISERROR('ESTADO UTILIZADA NA CIDADE %s',15,1,@fkStrCdd);
    --
    DELETE FROM dbo.ESTADO WHERE EST_CODIGO=@estCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPESTADO(
      EST_ACAO
      ,EST_CODIGO
      ,EST_NOME
      ,EST_ALIQICMS      
      ,EST_CODREG
      ,EST_ATIVO
      ,EST_REG
      ,EST_CODUSR) VALUES(
      'E'               -- EST_ACAO
      ,@estCodigoOld    -- EST_CODIGO
      ,@estNomeOld      -- EST_NOME
      ,@estAliqIcmsOld  -- EST_ALIQICMS      
      ,@estCodRegOld    -- EST_CODREG
      ,@estAtivoOld     -- EST_ATIVO
      ,@estRegOld       -- EST_REG
      ,@estCodUsrOld    -- EST_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPESTADO_BUD ON dbo.BKPESTADO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                    F A V O R E C I D O
-- trgfavorecido
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewFAVORECIDO_BI ON dbo.VFAVORECIDO
INSTEAD OF INSERT 
AS
BEGIN
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- FVR_CODIGO     | PK  |    |    | INT                |  Auto incremento
   -- FVR_NOME       |     |    |    | VC(60) NN          |
   -- FVR_APELIDO    |     |    |    | VC(15) NN          |     
   -- FVR_CNPJCPF    |     |    |    | VC(14) NN          |   
   -- FVR_CODCDD     | SEL |    |    | VC(7) NN           | Campo relacionado (CIDADE)   
   -- CDD_NOME       | SEL |    |    | VC(30) NN          | Campo relacionado (CIDADE) 
   -- FVR_DTCADASTRO |     |    |    | DAT NN             | Campo automatico   
   -- FVR_FISJUR     | CC  |    |    | VC(1) NN           | F|J  Se eh fisica ou juridica  
   -- FVR_INSMUNIC   |     |    |    | VC(20)             |
   -- FVR_CONTATO    |     |    |    | VC(40)             |   
   -- FVR_ENDERECO   |     |    |    | VC(60) NN          |
   -- FVR_NUMERO     |     |    |    | VC(10) NN          |   
   -- FVR_CEP        |     |    |    | VC(8) NN           |
   -- FVR_BAIRRO     |     |    |    | VC(15) NN          |   
   -- FVR_FONE       |     |    |    | VC(10) NN          |
   -- FVR_INS        |     |    |    | VC(19)             |   
   -- FVR_CTAATIVO   |     |    |    | VC(15) NN          | Gerado pelo trigger
   -- FVR_CTAPASSIVO |     |    |    | VC(15) NN          | Gerado pelo trigger
   -- FVR_CADMUNIC   |     |    |    | VC(20)             |   
   -- FVR_EMAIL      |     |    |    | VC(60)             |   
   -- FVR_CODCTG     | SEL |    |    | VC(3) NN           | Campo relacionado (CATEGORIA)   
   -- CTG_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (CATEGORIA) 
   -- FVR_SENHA      |     |    |    | VC(10)             |   
   -- FVR_COMPLEMENTO|     |    |    | VC(60)             |   
   -- FVR_CODLGR     | SEL |    |    | VC(5) NN           | Campo relacionado (LOGRADOURO)   
   -- LGR_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (LOGRADOURO)      
   -- FVR_GFCP       | SEL |    |    | INT NN             | Campo relacionado (GRUPOFAVORECIDO) Lancado em outra rotina   
   -- GF_NOME        | SEL |    |    | VC(40) NN          | Campo relacionado (GRUPOFAVORECIDO) Lancado em outra rotina
   -- FVR_GFCR       | SEL |    |    | INT NN             | Campo relacionado (GRUPOFAVORECIDO) Lancado em outra rotina  
   -- GF_NOME        | SEL |    |    | VC(40) NN          | Campo relacionado (GRUPOFAVORECIDO) Lancado em outra rotina
   -- FVR_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- FVR_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
   -- FVR_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP_D05         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
   -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
   -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;
  DECLARE @erroNew VARCHAR(70)  = 'OK'; -- Buscando retorno de erro para funcao
  DECLARE @uiCodigo INTEGER     = 0;     -- Para procurar unique index    
  DECLARE @uiCnpj INTEGER       = 0;     -- Para procurar unique index  
  DECLARE @fkStrEmp VARCHAR(15) = 'OK'; -- Para procurar campo foreign key str (EMPRESA)
  DECLARE @fkStrCdd VARCHAR(7)  = 'OK'; -- Para procurar campo foreign key str (CIDADE)
  DECLARE @fkStrCtg VARCHAR(3)  = 'OK'; -- Para procurar campo foreign key str (CATEGORIA)
  DECLARE @fkStrLgr VARCHAR(5)  = 'OK'; -- Para procurar campo foreign key str (LOGRADOURO)
  DECLARE @fkIntUsr INTEGER     = 0;    -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkStrUsr VARCHAR(15) = 'OK'; -- Para procurar campo foreign key str (USUARIO)
  DECLARE @fkStrUp VARCHAR(1)   = 'OK'; -- Para procurar campo foreign key str (USUARIOPERFIL)
  DECLARE @fkIntUp INTEGER      = 0;    -- Para procurar campo foreign key int (USUARIOPERFIL)
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @fvrCodigoNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @fvrCnpjcpfNew VARCHAR(14);
  DECLARE @fvrCodcddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @fvrDtcadastroNew DATE;
  DECLARE @fvrFisjurNew VARCHAR(1);
  DECLARE @fvrInsmunicNew VARCHAR(20);
  DECLARE @fvrContatoNew VARCHAR(40);
  DECLARE @fvrEnderecoNew VARCHAR(60);
  DECLARE @fvrNumeroNew VARCHAR(10);
  DECLARE @fvrCepNew VARCHAR(8);
  DECLARE @fvrBairroNew VARCHAR(15);
  DECLARE @fvrFoneNew VARCHAR(10);
  DECLARE @fvrInsNew VARCHAR(19);
  DECLARE @fvrCtaAtivoNew VARCHAR(15);
  DECLARE @fvrCtaPassivoNew VARCHAR(15);
  DECLARE @fvrCadmunicNew VARCHAR(20);
  DECLARE @fvrEmailNew VARCHAR(60);
  DECLARE @fvrCodctgNew VARCHAR(3);
  DECLARE @ctgNomeNew VARCHAR(20);
  DECLARE @fvrSenhaNew VARCHAR(10);
  DECLARE @fvrComplementoNew VARCHAR(60);
  DECLARE @fvrCodlgrNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @fvrAtivoNew VARCHAR(1);
  DECLARE @fvrRegNew VARCHAR(1);
  DECLARE @fvrCodusrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmpubNew VARCHAR(1);
  DECLARE @upD05New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT
    @fvrCodigoNew       = i.FVR_CODIGO
    ,@fvrNomeNew        = dbo.fncTranslate(i.FVR_NOME,60)
    ,@fvrApelidoNew     = dbo.fncTranslate(i.FVR_APELIDO,15)
    ,@fvrCnpjcpfNew     = COALESCE(i.FVR_CNPJCPF,'ERRO')
    ,@fvrCodcddNew      = dbo.fncTranslate(i.FVR_CODCDD,7)
    ,@cddNomeNew        = COALESCE(CDD.CDD_NOME,'ERRO')
    ,@fvrDtcadastroNew  = GETDATE()
    ,@fvrFisjurNew      = dbo.fncTranslate(i.FVR_FISJUR,1)
    ,@fvrInsmunicNew    = dbo.fncTranslate(i.FVR_INSMUNIC,20)
    ,@fvrContatoNew     = dbo.fncTranslate(i.FVR_CONTATO,40)
    ,@fvrEnderecoNew    = dbo.fncTranslate(i.FVR_ENDERECO,60)
    ,@fvrNumeroNew      = dbo.fncTranslate(i.FVR_NUMERO,10)
    ,@fvrCepNew         = dbo.fncTranslate(i.FVR_CEP,8)
    ,@fvrBairroNew      = dbo.fncTranslate(i.FVR_BAIRRO,15)
    ,@fvrFoneNew        = dbo.fncTranslate(i.FVR_FONE,10)
    ,@fvrInsNew         = COALESCE(dbo.fncTranslate(i.FVR_INS,19),'NSA')
    ,@fvrCadmunicNew    = COALESCE(dbo.fncTranslate(i.FVR_CADMUNIC,20),'NSA')
    ,@fvrEmailNew       = COALESCE(LOWER(dbo.fncTranslate(i.FVR_EMAIL,60)),'NSA')
    ,@fvrCodctgNew      = dbo.fncTranslate(i.FVR_CODCTG,3)
    ,@ctgNomeNew        = COALESCE(CTG.CTG_NOME,'ERRO')
    ,@fvrSenhaNew       = dbo.fncTranslate(i.FVR_SENHA,10)
    ,@fvrComplementoNew = COALESCE(dbo.fncTranslate(i.FVR_COMPLEMENTO,60),'NSA')
    ,@fvrCodlgrNew      = dbo.fncTranslate(i.FVR_CODLGR,5)
    ,@lgrNomeNew        = COALESCE(LGR.LGR_NOME,'ERRO')
    ,@fvrAtivoNew       = UPPER(i.FVR_ATIVO)
    ,@fvrRegNew         = UPPER(i.FVR_REG)
    ,@fvrCodusrNew      = i.FVR_CODUSR
    ,@usrApelidoNew     = COALESCE(USR.USR_APELIDO,'ERRO')
    ,@usrAdmpubNew      = COALESCE(USR.USR_ADMPUB,'ERRO')
    ,@upD05New          = UP.UP_D05
    ,@upD31New          = UP.UP_D31
  FROM inserted i
  LEFT OUTER JOIN CIDADE CDD ON i.FVR_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'
  LEFT OUTER JOIN CATEGORIA CTG ON i.FVR_CODCTG=CTG.CTG_CODIGO AND CTG.CTG_ATIVO='S'
  LEFT OUTER JOIN LOGRADOURO LGR ON i.FVR_CODLGR=LGR.LGR_CODIGO AND LGR.LGR_ATIVO='S'
  LEFT OUTER JOIN USUARIO USR ON i.FVR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
  LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO AND UP.UP_ATIVO='S';    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@fvrCodcddNew);
    IF( @ctgNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CATEGORIA %s PARA ESTE REGISTRO',15,1,@fvrCodctgNew);
    IF( @lgrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LOGRADOURO %s PARA ESTE REGISTRO',15,1,@fvrCodlgrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fvrCodusrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD05New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 05 PARA INCLUIR NA TABELA FAVOREDICO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo CNPJ deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCnpj=COALESCE(FVR_CODIGO,0) FROM FAVORECIDO WHERE FVR_CNPJCPF=@fvrCnpjcpfNew;
    IF( @uiCnpj <> 0 )
      RAISERROR('CNPJ JA CADASTRADO NA TABELA FAVORECIDO COM CODIGO %i',15,1,@uiCnpj);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @fvrRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmpubNew,@fvrRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END
    -----------------------------------------------------------------
    --  Aqui vou cadastrar a conta de ativo e passivo para favorecido
    -----------------------------------------------------------------
    DECLARE @seekConta VARCHAR(15)= NULL;
    DECLARE @intConta INTEGER     = 2;
    WHILE( @intConta<9999 ) BEGIN
      SET @fvrCtaAtivoNew   = CONCAT('1.01.05.02.',RIGHT('0000' + CAST(@intConta AS VARCHAR(4)),4));
      SET @fvrCtaPassivoNew = CONCAT('2.01.01.01.',RIGHT('0000' + CAST(@intConta AS VARCHAR(4)),4))
      SET @seekConta        = NULL;
      SELECT @seekConta=COALESCE(CC_CODIGO,NULL) FROM CONTACONTABIL WHERE CC_CODIGO=@fvrCtaAtivoNew;
      IF( @seekConta IS NULL ) BEGIN
        INSERT INTO CONTACONTABIL(
          CC_CODIGO
          ,CC_NOME
          ,CC_LANCTO
          ,CC_CODCTR
          ,CC_F10
          ,CC_ATIVO
          ,CC_REG
          ,CC_CODUSR) VALUES(
          @fvrCtaativoNew                                   -- CC_CODIGO
          ,SUBSTRING(CONCAT('CLIENTE ',@fvrNomeNew),0,40)   -- CC_NOME
          ,'S'                                              -- CC_LANCTO
          ,'1.01.0001'                                      -- CC_CODCTR
          ,'N'                                              -- CC_F10          
          ,'S'                                              -- CC_ATIVO
          ,'S'                                              -- CC_REG
          ,@fvrCodusrNew                                    -- CC_CODUSR
        );
        -- Gravando LOG
        INSERT INTO dbo.BKPCONTACONTABIL(
          CC_ACAO
          ,CC_CODIGO
          ,CC_NOME
          ,CC_LANCTO
          ,CC_CODCTR
          ,CC_F10          
          ,CC_ATIVO
          ,CC_REG
          ,CC_CODUSR) VALUES(
          'I'                                             -- CC_ACAO
          ,@fvrCtaAtivoNew                                -- CC_CODIGO
          ,SUBSTRING(CONCAT('CLIENTE ',@fvrNomeNew),0,40) -- CC_NOME
          ,'S'                                            -- CC_LANCTO
          ,'1.01.0001'                                    -- CC_CODCTR
          ,'N'                                            -- CC_F10          
          ,'S'                                            -- CC_ATIVO
          ,'P'                                            -- CC_REG
          ,@fvrCodusrNew                                  -- CC_CODUSR
        );  
        --
        --  
        INSERT INTO CONTACONTABIL(
          CC_CODIGO
          ,CC_NOME
          ,CC_LANCTO
          ,CC_CODCTR
          ,CC_F10          
          ,CC_ATIVO
          ,CC_REG
          ,CC_CODUSR) VALUES(
          @fvrCtaPassivoNew                                   -- CC_CODIGO
          ,SUBSTRING(CONCAT('FORNECEDOR ',@fvrNomeNew),0,40)  -- CC_NOME
          ,'S'                                                -- CC_LANCTO
          ,'2.01.0001'                                        -- CC_CODCTR
          ,'N'                                                -- CC_F10          
          ,'S'                                                -- CC_ATIVO
          ,'S'                                                -- CC_REG
          ,@fvrCodusrNew                                      -- CC_CODUSR
        );  
        -- Gravando LOG
        INSERT INTO dbo.BKPCONTACONTABIL(
          CC_ACAO
          ,CC_CODIGO
          ,CC_NOME
          ,CC_LANCTO
          ,CC_CODCTR
          ,CC_F10          
          ,CC_ATIVO
          ,CC_REG
          ,CC_CODUSR) VALUES(
          'I'                                                 -- CC_ACAO
          ,@fvrCtaPassivoNew                                  -- CC_CODIGO
          ,SUBSTRING(CONCAT('FORNECEDOR ',@fvrNomeNew),0,40)  -- CC_NOME
          ,'S'                                                -- CC_LANCTO
          ,'2.01.0001'                                        -- CC_CODCTR
          ,'N'                                                -- CC_F10          
          ,'S'                                                -- CC_ATIVO
          ,'P'                                                -- CC_REG
          ,@fvrCodusrNew                                      -- CC_CODUSR
        );  
        --
        --
        INSERT INTO BALANCO(
          BLN_CODIGO
          ,BLN_NOME
          ,BLN_CODSPD
          ,BLN_ATIVO
          ,BLN_REG
          ,BLN_CODUSR) VALUES(
          @fvrCtaAtivoNew                                   -- BLN_CODIGO  
          ,SUBSTRING(CONCAT('CLIENTE ',@fvrNomeNew),0,40)   -- BLN_NOME
          ,'**'                                             -- BLN_CODSPD
          ,'S'                                              -- BLN_ATIVO
          ,'P'                                              -- BLN_REG
          ,@fvrCodusrNew                                    -- BLN_CODUSR
        );
        -- Gravando LOG
        INSERT INTO dbo.BKPBALANCO(
          BLN_ACAO
          ,BLN_CODIGO
          ,BLN_NOME
          ,BLN_CODSPD      
          ,BLN_ATIVO
          ,BLN_REG
          ,BLN_CODUSR) VALUES(
          'I'                                             -- BLN_ACAO
          ,@fvrCtaAtivoNew                                -- BLN_CODIGO
          ,SUBSTRING(CONCAT('CLIENTE ',@fvrNomeNew),0,40) -- BLN_NOME
          ,'**'                                           -- BLN_CODSPD      
          ,'S'                                            -- BLN_ATIVO
          ,'P'                                            -- BLN_REG
          ,@fvrCodusrNew                                  -- BLN_CODUSR
        );  
        --
        --
        INSERT INTO BALANCO(
          BLN_CODIGO
          ,BLN_NOME
          ,BLN_CODSPD
          ,BLN_ATIVO
          ,BLN_REG
          ,BLN_CODUSR) VALUES(
          @fvrCtaPassivoNew                                   -- BLN_CODIGO  
          ,SUBSTRING(CONCAT('FORNECEDOR ',@fvrNomeNew),0,40)  -- BLN_NOME
          ,'**'                                               -- BLN_CODSPD
          ,'S'                                                -- BLN_ATIVO
          ,'P'                                                -- BLN_REG
          ,@fvrCodusrNew                                      -- BLN_CODUSR
        );
        -- Gravando LOG
        INSERT INTO dbo.BKPBALANCO(
          BLN_ACAO
          ,BLN_CODIGO
          ,BLN_NOME
          ,BLN_CODSPD      
          ,BLN_ATIVO
          ,BLN_REG
          ,BLN_CODUSR) VALUES(
          'I'                                                 -- BLN_ACAO
          ,@fvrCtaPassivoNew                                  -- BLN_CODIGO
          ,SUBSTRING(CONCAT('FORNECEDOR ',@fvrNomeNew),0,40)  -- BLN_NOME
          ,'**'                                               -- BLN_CODSPD      
          ,'S'                                                -- BLN_ATIVO
          ,'P'                                                -- BLN_REG
          ,@fvrCodusrNew                                      -- BLN_CODUSR
        );  
        BREAK;
      END
      SET @intConta=(@intConta+1);  
    END
    --
    --
    INSERT INTO dbo.FAVORECIDO(
      FVR_NOME
      ,FVR_APELIDO
      ,FVR_CNPJCPF
      ,FVR_CODCDD
      ,FVR_DTCADASTRO
      ,FVR_FISJUR
      ,FVR_INSMUNIC
      ,FVR_CONTATO
      ,FVR_ENDERECO
      ,FVR_NUMERO
      ,FVR_CEP
      ,FVR_BAIRRO
      ,FVR_FONE
      ,FVR_INS
      ,FVR_CTAATIVO
      ,FVR_CTAPASSIVO
      ,FVR_CADMUNIC
      ,FVR_EMAIL
      ,FVR_CODCTG
      ,FVR_SENHA
      ,FVR_COMPLEMENTO
      ,FVR_CODLGR
      ,FVR_GFCP
      ,FVR_GFCR
      ,FVR_ATIVO
      ,FVR_REG
      ,FVR_CODUSR) VALUES(
      @fvrNomeNew              -- FVR_NOME
      ,@fvrApelidoNew           -- FVR_APELIDO
      ,@fvrCnpjcpfNew           -- FVR_CNPJCPF
      ,@fvrCodcddNew            -- FVR_CODCDD
      ,@fvrDtcadastroNew        -- FVR_DTCADASTRO
      ,@fvrFisjurNew            -- FVR_FISJUR
      ,@fvrInsmunicNew          -- FVR_INSMUNIC
      ,@fvrContatoNew           -- FVR_CONTATO
      ,@fvrEnderecoNew          -- FVR_ENDERECO
      ,@fvrNumeroNew            -- FVR_NUMERO
      ,@fvrCepNew               -- FVR_CEP
      ,@fvrBairroNew            -- FVR_BAIRRO
      ,@fvrFoneNew              -- FVR_FONE
      ,@fvrInsNew               -- FVR_INS
      ,@fvrCtaAtivoNew          -- FVR_CTAATIVO
      ,@fvrCtaPassivoNew        -- FVR_CTAPASSIVO
      ,@fvrCadmunicNew          -- FVR_CADMUNIC
      ,@fvrEmailNew             -- FVR_EMAIL
      ,@fvrCodctgNew            -- FVR_CODCTG
      ,@fvrSenhaNew             -- FVR_SENHA
      ,@fvrComplementoNew       -- FVR_COMPLEMENTO
      ,@fvrCodlgrNew            -- FVR_CODLGR
      ,1                        -- FVR_GFCP
      ,1                        -- FVR_GFCR
      ,@fvrAtivoNew             -- FVR_ATIVO
      ,@fvrRegNew               -- FVR_REG
      ,@fvrCodusrNew            -- FVR_CODUSR
    );
    /*
    --------------------------------------------------------------------------
    -- Gravando endereco para contrato pois pode ser cliente/terceiro/parceiro
    --------------------------------------------------------------------------
    SELECT @uiCodigo=CNTE_CODIGO FROM CONTRATOENDERECO WHERE CNTE_CODFVR=IDENT_CURRENT('FAVORECIDO');
    IF( @@rowcount=0 ) BEGIN
      INSERT INTO CONTRATOENDERECO(
        CNTE_CODFVR
        ,CNTE_BAIRRO
        ,CNTE_CEP
        ,CNTE_CODCDD
        ,CNTE_ENDERECO
        ,CNTE_FONE
        ,CNTE_EMAIL
        ,CNTE_COMPLEMENTO
        ,CNTE_NUMERO
        ,CNTE_CODLGR
        ,CNTE_ATIVO
        ,CNTE_REG
        ,CNTE_CODUSR) VALUES(
        IDENT_CURRENT('FAVORECIDO') -- CNTE_CODFVR
        ,@fvrBairroNew              -- CNTE_BAIRRO
        ,@fvrCepNew                 -- CNTE_CEP
        ,@fvrCodcddNew              -- CNTE_CODCDD
        ,@fvrEnderecoNew            -- CNTE_ENDERECO
        ,@fvrFoneNew                -- CNTE_FONE
        ,@fvrEmailNew               -- CNTE_EMAIL
        ,@fvrComplementoNew         -- CNTE_COMPLEMENTO
        ,@fvrNumeroNew              -- CNTE_NUMERO
        ,@fvrCodlgrNew              -- CNTE_CODLGR
        ,@fvrAtivoNew               -- CNTE_ATIVO
        ,@fvrRegNew                 -- CNTE_REG
        ,@fvrCodusrNew              -- CNTE_CODUSR
      );
    END
    */
    ---------------
    -- Gravando LOG
    ---------------
    INSERT INTO dbo.BKPFAVORECIDO(
      FVR_ACAO
      ,FVR_CODIGO
      ,FVR_NOME
      ,FVR_APELIDO
      ,FVR_CNPJCPF      
      ,FVR_CODCDD
      ,FVR_DTCADASTRO
      ,FVR_FISJUR
      ,FVR_INSMUNIC
      ,FVR_CONTATO
      ,FVR_ENDERECO
      ,FVR_NUMERO
      ,FVR_CEP
      ,FVR_BAIRRO
      ,FVR_FONE
      ,FVR_INS
      ,FVR_CTAATIVO
      ,FVR_CTAPASSIVO
      ,FVR_CADMUNIC
      ,FVR_EMAIL
      ,FVR_CODCTG
      ,FVR_SENHA
      ,FVR_COMPLEMENTO
      ,FVR_CODLGR
      ,FVR_GFCP
      ,FVR_GFCR
      ,FVR_ATIVO
      ,FVR_REG
      ,FVR_CODUSR) VALUES(
      'I'
      ,IDENT_CURRENT('FAVORECIDO')  -- FVR_CODIGO
      ,@fvrNomeNew               -- FVR_NOME
      ,@fvrApelidoNew            -- FVR_APELIDO
      ,@fvrCnpjcpfNew            -- FVR_CNPJCPF
      ,@fvrCodcddNew             -- FVR_CODCDD
      ,@fvrDtcadastroNew         -- FVR_DTCADASTRO
      ,@fvrFisjurNew             -- FVR_FISJUR
      ,@fvrInsmunicNew           -- FVR_INSMUNIC
      ,@fvrContatoNew            -- FVR_CONTATO
      ,@fvrEnderecoNew           -- FVR_ENDERECO
      ,@fvrNumeroNew             -- FVR_NUMERO
      ,@fvrCepNew                -- FVR_CEP
      ,@fvrBairroNew             -- FVR_BAIRRO
      ,@fvrFoneNew               -- FVR_FONE
      ,@fvrInsNew                -- FVR_INS
      ,@fvrCtaAtivoNew           -- FVR_CTAATIVO
      ,@fvrCtaPassivoNew         -- FVR_CTAPASSIVO
      ,@fvrCadmunicNew           -- FVR_CADMUNIC
      ,@fvrEmailNew              -- FVR_EMAIL
      ,@fvrCodctgNew             -- FVR_CODCTG
      ,@fvrSenhaNew              -- FVR_SENHA
      ,@fvrComplementoNew        -- FVR_COMPLEMENTO
      ,@fvrCodlgrNew             -- FVR_CODLGR
      ,0                         -- FVR_GFCP
      ,0                         -- FVR_GFCR
      ,@fvrAtivoNew              -- FVR_ATIVO
      ,@fvrRegNew                -- FVR_REG
      ,@fvrCodusrNew             -- FVR_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFAVORECIDO_BU ON dbo.VFAVORECIDO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70)  = 'OK'; -- Buscando retorno de erro para funcao
  DECLARE @uiCnpj INTEGER       = 0;    -- Para procurar unique index  
  DECLARE @fkStrEmp VARCHAR(15) = 'OK'; -- Para procurar campo foreign key str (EMPRESA)
  DECLARE @fkStrCdd VARCHAR(7)  = 'OK'; -- Para procurar campo foreign key str (CIDADE)
  DECLARE @fkStrCtg VARCHAR(3)  = 'OK'; -- Para procurar campo foreign key str (CATEGORIA)
  DECLARE @fkStrLgr VARCHAR(5)  = 'OK'; -- Para procurar campo foreign key str (LOGRADOURO)
  DECLARE @fkIntUsr INTEGER     = 0;    -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkStrUsr VARCHAR(15) = 'OK'; -- Para procurar campo foreign key str (USUARIO)
  DECLARE @fkStrUp VARCHAR(1)   = 'OK'; -- Para procurar campo foreign key str (USUARIOPERFIL)
  DECLARE @fkIntUp INTEGER      = 0;    -- Para procurar campo foreign key int (USUARIOPERFIL)
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @fvrCodigoNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @fvrCnpjcpfNew VARCHAR(14);
  DECLARE @fvrCodcddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @fvrDtcadastroNew DATE;
  DECLARE @fvrFisjurNew VARCHAR(1);
  DECLARE @fvrInsmunicNew VARCHAR(20);
  DECLARE @fvrContatoNew VARCHAR(40);
  DECLARE @fvrEnderecoNew VARCHAR(60);
  DECLARE @fvrNumeroNew VARCHAR(10);
  DECLARE @fvrCepNew VARCHAR(8);
  DECLARE @fvrBairroNew VARCHAR(15);
  DECLARE @fvrFoneNew VARCHAR(10);
  DECLARE @fvrInsNew VARCHAR(19);
  DECLARE @fvrCtaAtivoNew VARCHAR(15);
  DECLARE @fvrCtaPassivoNew VARCHAR(15);
  DECLARE @fvrCadmunicNew VARCHAR(20);
  DECLARE @fvrEmailNew VARCHAR(60);
  DECLARE @fvrCodctgNew VARCHAR(3);
  DECLARE @ctgNomeNew VARCHAR(20);
  DECLARE @fvrSenhaNew VARCHAR(10);
  DECLARE @fvrComplementoNew VARCHAR(60);
  DECLARE @fvrCodlgrNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @fvrGfCpNew INTEGER;
  DECLARE @fvrGfCrNew INTEGER;
  DECLARE @fvrAtivoNew VARCHAR(1);
  DECLARE @fvrRegNew VARCHAR(1);
  DECLARE @fvrCodusrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmpubNew VARCHAR(1);
  DECLARE @upD05New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT
    @fvrCodigoNew       = i.FVR_CODIGO
    ,@fvrNomeNew        = dbo.fncTranslate(i.FVR_NOME,60)
    ,@fvrApelidoNew     = dbo.fncTranslate(i.FVR_APELIDO,15)
    ,@fvrCnpjcpfNew     = COALESCE(i.FVR_CNPJCPF,'ERRO')
    ,@fvrCodcddNew      = dbo.fncTranslate(i.FVR_CODCDD,7)
    ,@cddNomeNew        = COALESCE(CDD.CDD_NOME,'ERRO')
    ,@fvrDtcadastroNew  = i.FVR_DTCADASTRO
    ,@fvrFisjurNew      = dbo.fncTranslate(i.FVR_FISJUR,1)
    ,@fvrInsmunicNew    = dbo.fncTranslate(i.FVR_INSMUNIC,20)
    ,@fvrContatoNew     = dbo.fncTranslate(i.FVR_CONTATO,40)
    ,@fvrEnderecoNew    = dbo.fncTranslate(i.FVR_ENDERECO,60)
    ,@fvrNumeroNew      = dbo.fncTranslate(i.FVR_NUMERO,10)
    ,@fvrCepNew         = dbo.fncTranslate(i.FVR_CEP,8)
    ,@fvrBairroNew      = dbo.fncTranslate(i.FVR_BAIRRO,15)
    ,@fvrFoneNew        = dbo.fncTranslate(i.FVR_FONE,10)
    ,@fvrInsNew         = dbo.fncTranslate(i.FVR_INS,19)
    ,@fvrCtaAtivoNew    = i.FVR_CTAATIVO    -- Devido tabela espiao
    ,@fvrCtaPassivoNew  = i.FVR_CTAPASSIVO  -- Devido tabela espiao
    ,@fvrCadmunicNew    = dbo.fncTranslate(i.FVR_CADMUNIC,20)
    ,@fvrEmailNew       = LOWER(dbo.fncTranslate(i.FVR_EMAIL,60))
    ,@fvrCodctgNew      = dbo.fncTranslate(i.FVR_CODCTG,3)
    ,@ctgNomeNew        = COALESCE(CTG.CTG_NOME,'ERRO')
    ,@fvrSenhaNew       = dbo.fncTranslate(i.FVR_SENHA,10)
    ,@fvrComplementoNew = dbo.fncTranslate(i.FVR_COMPLEMENTO,60)
    ,@fvrCodlgrNew      = dbo.fncTranslate(i.FVR_CODLGR,5)
    ,@lgrNomeNew        = COALESCE(LGR.LGR_NOME,'ERRO')
    ,@fvrGfCpNew        = i.FVR_GFCP
    ,@fvrGfCrNew        = i.FVR_GFCR
    ,@fvrAtivoNew       = UPPER(i.FVR_ATIVO)
    ,@fvrRegNew         = UPPER(i.FVR_REG)
    ,@fvrCodusrNew      = i.FVR_CODUSR
    ,@usrApelidoNew     = COALESCE(USR.USR_APELIDO,'ERRO')
    ,@usrAdmpubNew      = COALESCE(USR.USR_ADMPUB,'ERRO')
    ,@upD05New          = UP.UP_D05
    ,@upD31New          = UP.UP_D31
  FROM inserted i
  LEFT OUTER JOIN CIDADE CDD ON i.FVR_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'
  LEFT OUTER JOIN CATEGORIA CTG ON i.FVR_CODCTG=CTG.CTG_CODIGO AND CTG.CTG_ATIVO='S'
  LEFT OUTER JOIN LOGRADOURO LGR ON i.FVR_CODLGR=LGR.LGR_CODIGO AND LGR.LGR_ATIVO='S'
  LEFT OUTER JOIN USUARIO USR ON i.FVR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
  LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO AND UP.UP_ATIVO='S';    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@fvrCodcddNew);
    IF( @ctgNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CATEGORIA %s PARA ESTE REGISTRO',15,1,@fvrCodctgNew);
    IF( @lgrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LOGRADOURO %s PARA ESTE REGISTRO',15,1,@fvrCodlgrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fvrCodusrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD05New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 05 PARA ALTERAR NA TABELA FAVORECIDO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @fvrCodigoOld INTEGER;
    DECLARE @fvrNomeOld VARCHAR(60);
    DECLARE @fvrApelidoOld VARCHAR(15);
    DECLARE @fvrCnpjcpfOld VARCHAR(14);
    DECLARE @fvrCodcddOld VARCHAR(7);
    DECLARE @fvrFisjurOld VARCHAR(1);
    DECLARE @fvrInsmunicOld VARCHAR(20);
    DECLARE @fvrContatoOld VARCHAR(40);
    DECLARE @fvrEnderecoOld VARCHAR(60);
    DECLARE @fvrNumeroOld VARCHAR(10);
    DECLARE @fvrCepOld VARCHAR(8);
    DECLARE @fvrBairroOld VARCHAR(15);
    DECLARE @fvrFoneOld VARCHAR(10);
    DECLARE @fvrInsOld VARCHAR(19);
    DECLARE @fvrCadmunicOld VARCHAR(20);
    DECLARE @fvrEmailOld VARCHAR(60);
    DECLARE @fvrCodctgOld VARCHAR(3);
    DECLARE @fvrSenhaOld VARCHAR(10);
    DECLARE @fvrComplementoOld VARCHAR(60);
    DECLARE @fvrCodlgrOld VARCHAR(5);
    DECLARE @fvrGfCpOld INTEGER;
    DECLARE @fvrGfCrOld INTEGER;
    DECLARE @fvrAtivoOld VARCHAR(1);
    DECLARE @fvrRegOld VARCHAR(1);
    DECLARE @fvrCodusrOld INTEGER;
    
    SELECT
      @fvrCodigoOld       = d.FVR_CODIGO
      ,@fvrNomeOld        = d.FVR_NOME
      ,@fvrApelidoOld     = d.FVR_APELIDO
      ,@fvrCnpjcpfOld     = d.FVR_CNPJCPF
      ,@fvrCodcddOld      = d.FVR_CODCDD
      ,@fvrFisjurOld      = d.FVR_FISJUR
      ,@fvrInsmunicOld    = d.FVR_INSMUNIC
      ,@fvrContatoOld     = d.FVR_CONTATO
      ,@fvrEnderecoOld    = d.FVR_ENDERECO
      ,@fvrNumeroOld      = d.FVR_NUMERO
      ,@fvrCepOld         = d.FVR_CEP
      ,@fvrBairroOld      = d.FVR_BAIRRO
      ,@fvrFoneOld        = d.FVR_FONE
      ,@fvrInsOld         = d.FVR_INS
      ,@fvrCadmunicOld    = d.FVR_CADMUNIC
      ,@fvrEmailOld       = d.FVR_EMAIL
      ,@fvrCodctgOld      = d.FVR_CODCTG
      ,@fvrSenhaOld       = d.FVR_SENHA
      ,@fvrComplementoOld = d.FVR_COMPLEMENTO
      ,@fvrCodlgrOld      = d.FVR_CODLGR
      ,@fvrGfCpOld        = d.FVR_GFCP
      ,@fvrGfCrOld        = d.FVR_GFCR
      ,@fvrAtivoOld       = d.FVR_ATIVO
      ,@fvrRegOld         = d.FVR_REG
      ,@fvrCodusrOld      = d.FVR_CODUSR
      FROM FAVORECIDO d WHERE d.FVR_CODIGO=@fvrCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @fvrCodigoOld<>@fvrCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo CNPJ deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @fvrCnpjcpfOld<>@fvrCnpjcpfNew ) BEGIN
      SELECT @uiCnpj=COALESCE(FVR_CODIGO,0) FROM FAVORECIDO WHERE FVR_CNPJCPF=@fvrCnpjcpfNew;
      IF( @uiCnpj <> 0 )
        RAISERROR('CNPJ JA CADASTRADO NA TABELA FAVORECIDO COM CODIGO %i',15,1,@uiCnpj);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @fvrRegOld <> @fvrRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@fvrRegOld,@fvrRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.FAVORECIDO
       SET FVR_NOME          = @fvrNomeNew
           ,FVR_APELIDO      = @fvrApelidoNew
           ,FVR_CNPJCPF      = @fvrCnpjcpfNew
           ,FVR_CODCDD       = @fvrCodcddNew
           ,FVR_FISJUR       = @fvrFisjurNew
           ,FVR_INSMUNIC     = @fvrInsmunicNew
           ,FVR_CONTATO      = @fvrContatoNew
           ,FVR_ENDERECO     = @fvrEnderecoNew
           ,FVR_NUMERO       = @fvrNumeroNew
           ,FVR_CEP          = @fvrCepNew
           ,FVR_BAIRRO       = @fvrBairroNew
           ,FVR_FONE         = @fvrFoneNew
           ,FVR_INS          = @fvrInsNew
           ,FVR_CADMUNIC     = @fvrCadmunicNew
           ,FVR_EMAIL        = @fvrEmailNew
           ,FVR_CODCTG       = @fvrCodctgNew
           ,FVR_SENHA        = @fvrSenhaNew
           ,FVR_COMPLEMENTO  = @fvrComplementoNew
           ,FVR_CODLGR       = @fvrCodlgrNew
           ,FVR_GFCP         = @fvrGfCpNew
           ,FVR_GFCR         = @fvrGfCrNew
           ,FVR_ATIVO        = @fvrAtivoNew
           ,FVR_REG          = @fvrRegNew
           ,FVR_CODUSR       = @fvrCodusrNew
    WHERE FVR_CODIGO  = @fvrCodigoNew;     
    -- Gravando LOG
    IF( (@fvrNomeOld<>@fvrNomeNew)      OR (@fvrApelidoOld<>@fvrApelidoNew)         OR (@fvrCnpjcpfOld<>@fvrCnpjcpfNew) OR (@fvrCodcddOld<> @fvrCodcddNew) 
     OR (@fvrFisjurOld<> @fvrFisjurNew) OR (@fvrInsmunicOld<>@fvrInsmunicNew)       OR (@fvrContatoOld<>@fvrContatoNew) OR (@fvrEnderecoOld<>@fvrEnderecoNew) 
     OR (@fvrNumeroOld<> @fvrNumeroNew) OR (@fvrCepOld<> @fvrCepNew)                OR (@fvrBairroOld<> @fvrBairroNew)  OR (@fvrFoneOld<>@fvrFoneNew) 
     OR (@fvrInsOld<> @fvrInsNew)       OR (@fvrCadmunicOld<>@fvrCadmunicNew)       OR (@fvrEmailOld<>@fvrEmailNew)     OR (@fvrCodctgOld<>@fvrCodctgNew) 
     OR (@fvrSenhaOld<>@fvrSenhaNew)    OR (@fvrComplementoOld<>@fvrComplementoNew) OR (@fvrCodlgrOld<>@fvrCodlgrNew)   OR (@fvrGfCpOld<>@fvrGfCpNew)      
     OR (@fvrGfCrOld<>@fvrGfCrNew)      OR (@fvrAtivoOld<>@fvrAtivoNew)             OR (@fvrRegOld<>@fvrRegNew)         OR (@fvrCodusrOld<>@fvrCodusrNew) ) BEGIN
      INSERT INTO dbo.BKPFAVORECIDO(
        FVR_ACAO
        ,FVR_CODIGO
        ,FVR_NOME
        ,FVR_APELIDO
        ,FVR_CNPJCPF      
        ,FVR_CODCDD
        ,FVR_DTCADASTRO
        ,FVR_FISJUR
        ,FVR_INSMUNIC
        ,FVR_CONTATO
        ,FVR_ENDERECO
        ,FVR_NUMERO
        ,FVR_CEP
        ,FVR_BAIRRO
        ,FVR_FONE
        ,FVR_INS
        ,FVR_CTAATIVO
        ,FVR_CTAPASSIVO
        ,FVR_CADMUNIC
        ,FVR_EMAIL
        ,FVR_CODCTG
        ,FVR_SENHA
        ,FVR_COMPLEMENTO
        ,FVR_CODLGR
        ,FVR_GFCP
        ,FVR_GFCR
        ,FVR_ATIVO
        ,FVR_REG
        ,FVR_CODUSR) VALUES(
        'A'
        ,@fvrCodigoNew             -- FVR_CODIGO
        ,@fvrNomeNew               -- FVR_NOME
        ,@fvrApelidoNew            -- FVR_APELIDO
        ,@fvrCnpjcpfNew            -- FVR_CNPJCPF
        ,@fvrCodcddNew             -- FVR_CODCDD
        ,@fvrDtcadastroNew         -- FVR_DTCADASTRO
        ,@fvrFisjurNew             -- FVR_FISJUR
        ,@fvrInsmunicNew           -- FVR_INSMUNIC
        ,@fvrContatoNew            -- FVR_CONTATO
        ,@fvrEnderecoNew           -- FVR_ENDERECO
        ,@fvrNumeroNew             -- FVR_NUMERO
        ,@fvrCepNew                -- FVR_CEP
        ,@fvrBairroNew             -- FVR_BAIRRO
        ,@fvrFoneNew               -- FVR_FONE
        ,@fvrInsNew                -- FVR_INS
        ,@fvrCtaAtivoNew           -- FVR_CTAATIVO
        ,@fvrCtaPassivoNew         -- FVR_CTAPASSIVO
        ,@fvrCadmunicNew           -- FVR_CADMUNIC
        ,@fvrEmailNew              -- FVR_EMAIL
        ,@fvrCodctgNew             -- FVR_CODCTG
        ,@fvrSenhaNew              -- FVR_SENHA
        ,@fvrComplementoNew        -- FVR_COMPLEMENTO
        ,@fvrCodlgrNew             -- FVR_CODLGR
        ,@fvrGfCpNew               -- FVR_GFCP
        ,@fvrGfCrNew               -- FVR_GFCR
        ,@fvrAtivoNew              -- FVR_ATIVO
        ,@fvrRegNew                -- FVR_REG
        ,@fvrCodusrNew             -- FVR_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFAVORECIDO_BD ON dbo.VFAVORECIDO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @fvrCodigoOld INTEGER;
  DECLARE @fvrNomeOld VARCHAR(60);
  DECLARE @fvrApelidoOld VARCHAR(15);
  DECLARE @fvrCnpjcpfOld VARCHAR(14);
  DECLARE @fvrCodcddOld VARCHAR(7);
  DECLARE @fvrDtcadastroOld DATE;
  DECLARE @fvrFisjurOld VARCHAR(1);
  DECLARE @fvrInsmunicOld VARCHAR(20);
  DECLARE @fvrContatoOld VARCHAR(40);
  DECLARE @fvrEnderecoOld VARCHAR(60);
  DECLARE @fvrNumeroOld VARCHAR(10);
  DECLARE @fvrCepOld VARCHAR(8);
  DECLARE @fvrBairroOld VARCHAR(15);
  DECLARE @fvrFoneOld VARCHAR(10);
  DECLARE @fvrInsOld VARCHAR(19);
  DECLARE @fvrCtaAtivoOld VARCHAR(15);
  DECLARE @fvrCtaPassivoOld VARCHAR(15);
  DECLARE @fvrCadmunicOld VARCHAR(20);
  DECLARE @fvrEmailOld VARCHAR(60);
  DECLARE @fvrCodctgOld VARCHAR(3);
  DECLARE @fvrSenhaOld VARCHAR(10);
  DECLARE @fvrComplementoOld VARCHAR(60);
  DECLARE @fvrCodlgrOld VARCHAR(5);
  DECLARE @fvrGfCpOld INTEGER;
  DECLARE @fvrGfCrOld INTEGER;
  DECLARE @fvrAtivoOld VARCHAR(1);
  DECLARE @fvrRegOld VARCHAR(1);
  DECLARE @fvrCodusrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmpubOld VARCHAR(1);
  DECLARE @upD05Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT
    @fvrCodigoOld       = d.FVR_CODIGO
    ,@fvrNomeOld        = d.FVR_NOME
    ,@fvrApelidoOld     = d.FVR_APELIDO
    ,@fvrCnpjcpfOld     = d.FVR_CNPJCPF
    ,@fvrCodcddOld      = d.FVR_CODCDD
    ,@fvrDtcadastroOld  = d.FVR_DTCADASTRO
    ,@fvrFisjurOld      = d.FVR_FISJUR
    ,@fvrInsmunicOld    = d.FVR_INSMUNIC
    ,@fvrContatoOld     = d.FVR_CONTATO
    ,@fvrEnderecoOld    = d.FVR_ENDERECO
    ,@fvrNumeroOld      = d.FVR_NUMERO
    ,@fvrCepOld         = d.FVR_CEP
    ,@fvrBairroOld      = d.FVR_BAIRRO
    ,@fvrFoneOld        = d.FVR_FONE
    ,@fvrInsOld         = d.FVR_INS
    ,@fvrCtaAtivoOld    = d.FVR_CTAATIVO    -- Devido tabela espiao
    ,@fvrCtaPassivoOld  = d.FVR_CTAPASSIVO  -- Devido tabela espiao
    ,@fvrCadmunicOld    = d.FVR_CADMUNIC
    ,@fvrEmailOld       = d.FVR_EMAIL
    ,@fvrCodctgOld      = d.FVR_CODCTG
    ,@fvrSenhaOld       = d.FVR_SENHA
    ,@fvrComplementoOld = d.FVR_COMPLEMENTO
    ,@fvrCodlgrOld      = d.FVR_CODLGR
    ,@fvrGfCpOld        = d.FVR_GFCP
    ,@fvrGfCrOld        = d.FVR_GFCR
    ,@fvrAtivoOld       = d.FVR_ATIVO
    ,@fvrRegOld         = d.FVR_REG
    ,@fvrCodusrOld      = d.FVR_CODUSR
    ,@usrApelidoOld     = COALESCE(USR.USR_APELIDO,'ERRO')
    ,@usrAdmPubOld      = COALESCE(USR.USR_ADMPUB,'P')
    ,@upD05Old          = UP.UP_D05
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.FVR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fvrCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD05Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 05 PARA EXCLUIR NA TABELA FAVORECIDO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@fvrRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@fvrCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('FORMACOBRANCA UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@fvrCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('FORMACOBRANCA UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.FAVORECIDO WHERE FVR_CODIGO=@fvrCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPFAVORECIDO(
      FVR_ACAO
      ,FVR_CODIGO
      ,FVR_NOME
      ,FVR_APELIDO
      ,FVR_CNPJCPF      
      ,FVR_CODCDD
      ,FVR_DTCADASTRO
      ,FVR_FISJUR
      ,FVR_INSMUNIC
      ,FVR_CONTATO
      ,FVR_ENDERECO
      ,FVR_NUMERO
      ,FVR_CEP
      ,FVR_BAIRRO
      ,FVR_FONE
      ,FVR_INS
      ,FVR_CTAATIVO
      ,FVR_CTAPASSIVO
      ,FVR_CADMUNIC
      ,FVR_EMAIL
      ,FVR_CODCTG
      ,FVR_SENHA
      ,FVR_COMPLEMENTO
      ,FVR_CODLGR
      ,FVR_GFCP
      ,FVR_GFCR
      ,FVR_ATIVO
      ,FVR_REG
      ,FVR_CODUSR) VALUES(
      'E'
      ,@fvrCodigoOld             -- FVR_CODIGO
      ,@fvrNomeOld               -- FVR_NOME
      ,@fvrApelidoOld            -- FVR_APELIDO
      ,@fvrCnpjcpfOld            -- FVR_CNPJCPF
      ,@fvrCodcddOld             -- FVR_CODCDD
      ,@fvrDtcadastroOld         -- FVR_DTCADASTRO
      ,@fvrFisjurOld             -- FVR_FISJUR
      ,@fvrInsmunicOld           -- FVR_INSMUNIC
      ,@fvrContatoOld            -- FVR_CONTATO
      ,@fvrEnderecoOld           -- FVR_ENDERECO
      ,@fvrNumeroOld             -- FVR_NUMERO
      ,@fvrCepOld                -- FVR_CEP
      ,@fvrBairroOld             -- FVR_BAIRRO
      ,@fvrFoneOld               -- FVR_FONE
      ,@fvrInsOld                -- FVR_INS
      ,@fvrCtaAtivoOld           -- FVR_CTAATIVO
      ,@fvrCtaPassivoOld         -- FVR_CTAPASSIVO
      ,@fvrCadmunicOld           -- FVR_CADMUNIC
      ,@fvrEmailOld              -- FVR_EMAIL
      ,@fvrCodctgOld             -- FVR_CODCTG
      ,@fvrSenhaOld              -- FVR_SENHA
      ,@fvrComplementoOld        -- FVR_COMPLEMENTO
      ,@fvrCodlgrOld             -- FVR_CODLGR
      ,@fvrGfCpOld               -- FVR_GFCP
      ,@fvrGfCrOld               -- FVR_GFCR
      ,@fvrAtivoOld              -- FVR_ATIVO
      ,@fvrRegOld                -- FVR_REG
      ,@fvrCodusrOld             -- FVR_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPFAVORECIDO_BUD ON dbo.BKPFAVORECIDO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                                 F A B R I C A N T E                             --
--trgfabricante
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewFABRICANTE_BI ON dbo.VFABRICANTE
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS      |UPD |DEL | TIPO               | Obs
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------
  -- FBR_CODFVR     | SEL/PK  |    |    | INT                | Campo relacionado (FAVORECIDO)
  -- FVR_NOME       | SEL     |    |    | VC(60)             | Campo relacionado (FAVORECIDO)
  -- FBR_CODGP      | PK      |    |    | VC(3)              | Campo relacionado (GRUPOPRODUTO)
  -- FBR_ATIVO      | CC      |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- FBR_REG        | FNC     |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- FBR_CODUSR     | OK      |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL     |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL     |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D33         | SEL     |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL     |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER    = 0;     -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @fbrCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @fbrCodGpNew VARCHAR(3)
  DECLARE @gpNomeNew VARCHAR(20);
  DECLARE @fbrAtivoNew VARCHAR(1);
  DECLARE @fbrRegNew VARCHAR(1);
  DECLARE @fbrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @fbrCodFvrNew   = i.FBR_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@fbrCodGpNew   = dbo.fncTranslate(i.FBR_CODGP,3)
         ,@gpNomeNew     = COALESCE(GP.GP_NOME,'ERRO')
         ,@fbrAtivoNew   = UPPER(i.FBR_ATIVO)
         ,@fbrRegNew     = UPPER(i.FBR_REG)
         ,@fbrCodUsrNew  = i.FBR_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.FBR_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN GRUPOPRODUTO GP ON i.FBR_CODGP=GP.GP_CODIGO AND GP.GP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.FBR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @gpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO %s PARA ESTE REGISTRO',15,1,@fbrCodGpNew);
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@fbrCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fbrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA INCLUIR NA TABELA FABRICANTE',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(FBR_CODFVR,0) FROM FABRICANTE WHERE ((FBR_CODFVR=@fbrCodFvrNew) AND (FBR_CODGP=@fbrCodGpNew));
    IF( @uicODIGO <> 0 )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA FABRICANTE %s',15,1,@fvrNomeNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @fbrRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@fbrRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.FABRICANTE( 
      FBR_CODFVR
      ,FBR_CODGP
      ,FBR_ATIVO
      ,FBR_REG
      ,FBR_CODUSR) VALUES(
      @fbrCodFvrNew   -- FBR_CODFVR
      ,@fbrCodGpNew   -- FBR_CODGP
      ,@fbrAtivoNew   -- FBR_ATIVO
      ,@fbrRegNew     -- FBR_REG
      ,@fbrCodUsrNew  -- FBR_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPFABRICANTE(
      FBR_ACAO
      ,FBR_CODFVR
      ,FBR_CODGP
      ,FBR_ATIVO
      ,FBR_REG
      ,FBR_CODUSR) VALUES(
      'I'               -- FBR_ACAO
      ,@fbrCodFvrNew    -- FBR_CODFVR
      ,@fbrCodGpNew     -- FBR_CODGP
      ,@fbrAtivoNew     -- FBR_ATIVO
      ,@fbrRegNew       -- FBR_REG
      ,@fbrCodUsrNew    -- FBR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFABRICANTE_BU ON dbo.VFABRICANTE
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @fbrCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @fbrCodGpNew VARCHAR(3)
  DECLARE @gpNomeNew VARCHAR(20);
  DECLARE @fbrAtivoNew VARCHAR(1);
  DECLARE @fbrRegNew VARCHAR(1);
  DECLARE @fbrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @fbrCodFvrNew   = i.FBR_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@fbrCodGpNew   = dbo.fncTranslate(i.FBR_CODGP,3)
         ,@gpNomeNew     = COALESCE(GP.GP_NOME,'ERRO')
         ,@fbrAtivoNew   = UPPER(i.FBR_ATIVO)
         ,@fbrRegNew     = UPPER(i.FBR_REG)
         ,@fbrCodUsrNew  = i.FBR_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.FBR_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN GRUPOPRODUTO GP ON i.FBR_CODGP=GP.GP_CODIGO AND GP.GP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.FBR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @gpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO %s PARA ESTE REGISTRO',15,1,@fbrCodGpNew);
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@fbrCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fbrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA ALTERAR NA TABELA FABRICANTE',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @fbrCodFvrOld INTEGER;
    DECLARE @fbrCodGpOld VARCHAR(3);    
    DECLARE @fbrAtivoOld VARCHAR(1);
    DECLARE @fbrRegOld VARCHAR(1);
    DECLARE @fbrCodUsrOld INTEGER;
    SELECT @fbrCodFvrOld   = d.FBR_CODFVR
           ,@fbrCodGpOld   = d.FBR_CODGP
           ,@fbrAtivoOld   = d.FBR_ATIVO
           ,@fbrRegOld     = d.FBR_REG
           ,@fbrCodUsrOld  = d.FBR_CODUSR         
      FROM FABRICANTE d WHERE ((d.FBR_CODFVR=@fbrCodFvrNew) AND (d.FBR_CODGP=@fbrCodGpNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @fbrCodFvrOld<>@fbrCodFvrNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @fbrCodGpOld<>@fbrCodGpNew )
      RAISERROR('CAMPO GRUPO NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @fbrRegOld <> @fbrRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@fbrRegOld,@fbrRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.FABRICANTE
       SET FBR_ATIVO  = @fbrAtivoNew
          ,FBR_REG    = @fbrRegNew
          ,FBR_CODUSR = @fbrCodUsrNew
    WHERE FBR_CODFVR  = @fbrCodFvrNew;     
    -- Gravando LOG
    IF( (@fbrAtivoOld<>@fbrAtivoNew) OR (@fbrRegOld<>@fbrRegNew) ) BEGIN
      INSERT INTO dbo.BKPFABRICANTE(
        FBR_ACAO
        ,FBR_CODFVR
        ,FBR_CODGP
        ,FBR_ATIVO
        ,FBR_REG
        ,FBR_CODUSR) VALUES(
        'A'                 -- FBR_ACAO
        ,@fbrCodFvrNew      -- FBR_CODFVR
        ,@fbrCodGpNew       -- FBR_CODGP
        ,@fbrAtivoNew       -- FBR_ATIVO
        ,@fbrRegNew         -- FBR_REG
        ,@fbrCodUsrNew      -- FBR_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFABRICANTE_BD ON dbo.VFABRICANTE
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntGm INTEGER = 0; -- Para procurar campo foreign key int (GRUPOMODELO)
  DECLARE @erroOld VARCHAR(70); -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @fbrCodFvrOld INTEGER;
  DECLARE @fbrCodGpOld VARCHAR(3);
  DECLARE @fbrAtivoOld VARCHAR(1);
  DECLARE @fbrRegOld VARCHAR(1);
  DECLARE @fbrCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD33Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @fbrCodFvrOld   = d.FBR_CODFVR
         ,@fbrCodGpOld   = d.FBR_CODGP
         ,@fbrAtivoOld   = d.FBR_ATIVO
         ,@fbrRegOld     = d.FBR_REG
         ,@fbrCodUsrOld  = d.FBR_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33Old      = UP.UP_D33
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.FBR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fbrCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD33Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA EXCLUIR NA TABELA FABRICANTE',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@fbrRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    -----------------------------------------
    --   Checando a FK GM_CODFBR(GRUPOMODELO)
    -----------------------------------------
    SELECT TOP 1 @fkIntGm=COALESCE(GM_CODIGO,0) FROM GRUPOMODELO WHERE GM_CODFBR=@fbrCodFvrOld;
    IF( @fkIntGm > 0 )
      RAISERROR('FABRICANTE UTILIZADO NO MODELO %i',15,1,@fkIntGm);
    --
    --
    DELETE FROM dbo.FABRICANTE WHERE ((FBR_CODFVR=@fbrCodFvrOld) AND (FBR_CODGP=@fbrCodGpOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPFABRICANTE(
      FBR_ACAO
      ,FBR_CODFVR
      ,FBR_CODGP
      ,FBR_ATIVO
      ,FBR_REG
      ,FBR_CODUSR) VALUES(
      'E'                         -- FBR_ACAO
      ,@fbrCodFvrOld              -- FBR_CODFVR
      ,@fbrCodGpOld               -- FBR_CODGP
      ,@fbrAtivoOld               -- FBR_ATIVO
      ,@fbrRegOld                 -- FBR_REG
      ,@fbrCodUsrOld              -- FBR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPFABRICANTE_BUD ON dbo.BKPFABRICANTE
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                                 F E R I A D O                                   --
--trgferiado
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewFERIADO_BI ON dbo.VFERIADO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS   |UPD |DEL | TIPO               | Obs
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------
  -- FRD_CODIGO     | PK   |    |    | DAT NN             |  
  -- FRD_CODEMP     |PK/SEL|    |    | INT NN             | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO    | SEL  |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- FRD_NOME       |      |    |    | VC(30) NN          |
  -- FRD_PAGAR      |      |    |    | INT NN             | Qtdade de dias que antecipa ou posterga
  -- FRD_RECEBER    |      |    |    | INT NN             | Qtdade de dias que antecipa ou posterga  
  -- FRD_ATIVO      | CC   |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- FRD_REG        | FNC  |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- FRD_CODUSR     | OK   |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL  |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL  |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D19         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo DATE = NULL;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @frdCodigoNew DATE;
  DECLARE @frdNomeNew VARCHAR(30);
  DECLARE @frdCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @frdPagarNew INTEGER;  
  DECLARE @frdReceberNew INTEGER;    
  DECLARE @frdAtivoNew VARCHAR(1);
  DECLARE @frdRegNew VARCHAR(1);
  DECLARE @frdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD19New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @frdCodigoNew   = i.FRD_CODIGO
         ,@frdNomeNew    = dbo.fncTranslate(i.FRD_NOME,30)
         ,@frdCodEmpNew  = i.FRD_CODEMP
         ,@empApelidoNew = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@frdPagarNew   = i.FRD_PAGAR
         ,@frdReceberNew = i.FRD_RECEBER
         ,@frdAtivoNew   = UPPER(i.FRD_ATIVO)
         ,@frdRegNew     = UPPER(i.FRD_REG)
         ,@frdCodUsrNew  = i.FRD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD19New      = UP.UP_D19
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.FRD_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.FRD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@frdCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@frdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD19New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 19 PARA INCLUIR NA TABELA FERIADO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(FRD_CODIGO,NULL) FROM FERIADO WHERE ((FRD_CODIGO=@frdCodigoNew) AND (FRD_CODEMP=@frdCodEmpNew));
    IF( @uiCodigo IS NOT NULL )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA FERIADO %s',15,1,@frdNomeNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @frdRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@frdRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END 
    --
    IF( (@frdPagarNew=0) AND (@frdReceberNew=0) )   
      RAISERROR('REGISTRO INVALIDO, PAGAR OU RECEBER TEM QUE SER DIFERENTE DE ZERO',15,1);
    --  
    INSERT INTO dbo.FERIADO( 
      FRD_CODIGO
      ,FRD_NOME
      ,FRD_PAGAR
      ,FRD_RECEBER
      ,FRD_CODEMP
      ,FRD_ATIVO
      ,FRD_REG
      ,FRD_CODUSR) VALUES(
      @frdCodigoNew   -- FRD_CODIGO
      ,@frdNomeNew    -- FRD_NOME
      ,@frdPagarNew   -- FRD_PAGAR
      ,@frdReceberNew -- FRD_RECEBER
      ,@frdCodEmpNew  -- FRD_CODEMP
      ,@frdAtivoNew   -- FRD_ATIVO
      ,@frdRegNew     -- FRD_REG
      ,@frdCodUsrNew  -- FRD_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPFERIADO(
      FRD_ACAO
      ,FRD_CODIGO
      ,FRD_NOME
      ,FRD_PAGAR
      ,FRD_RECEBER
      ,FRD_CODEMP
      ,FRD_ATIVO
      ,FRD_REG
      ,FRD_CODUSR) VALUES(
      'I'               -- FRD_ACAO
      ,@frdCodigoNew    -- FRD_CODIGO
      ,@frdNomeNew      -- FRD_NOME
      ,@frdPagarNew     -- FRD_PAGAR
      ,@frdReceberNew   -- FRD_RECEBER
      ,@frdCodEmpNew    -- FRD_CODEMP
      ,@frdAtivoNew     -- FRD_ATIVO
      ,@frdRegNew       -- FRD_REG
      ,@frdCodUsrNew    -- FRD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFERIADO_BU ON dbo.VFERIADO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @frdCodigoNew DATE;
  DECLARE @frdNomeNew VARCHAR(30);
  DECLARE @frdPagarNew INTEGER;  
  DECLARE @frdReceberNew INTEGER;    
  DECLARE @frdCodEmpNew INTEGER;  
  DECLARE @empApelidoNew VARCHAR(15);  
  DECLARE @frdAtivoNew VARCHAR(1);
  DECLARE @frdRegNew VARCHAR(1);
  DECLARE @frdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD19New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @frdCodigoNew   = i.FRD_CODIGO
         ,@frdNomeNew    = dbo.fncTranslate(i.FRD_NOME,30)
         ,@frdPagarNew   = i.FRD_PAGAR
         ,@frdReceberNew = i.FRD_RECEBER
         ,@frdCodEmpNew  = i.FRD_CODEMP
         ,@empApelidoNew = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@frdAtivoNew   = UPPER(i.FRD_ATIVO)
         ,@frdRegNew     = UPPER(i.FRD_REG)
         ,@frdCodUsrNew  = i.FRD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD19New      = UP.UP_D19
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.FRD_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.FRD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@frdCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@frdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD19New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 19 PARA ALTERAR NA TABELA FERIADO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @frdCodigoOld DATE;
    DECLARE @frdNomeOld VARCHAR(30);
    DECLARE @frdPagarOld INTEGER;  
    DECLARE @frdReceberOld INTEGER;    
    DECLARE @frdCodEmpOld INTEGER;
    DECLARE @frdAtivoOld VARCHAR(1);
    DECLARE @frdRegOld VARCHAR(1);
    DECLARE @frdCodUsrOld INTEGER;
    SELECT @frdCodigoOld   = d.FRD_CODIGO
           ,@frdNomeOld    = d.FRD_NOME
           ,@frdPagarOld   = d.FRD_PAGAR
           ,@frdReceberOld = d.FRD_RECEBER
           ,@frdCodEmpOld  = d.FRD_CODEMP
           ,@frdAtivoOld   = d.FRD_ATIVO
           ,@frdRegOld     = d.FRD_REG
           ,@frdCodUsrOld  = d.FRD_CODUSR         
      FROM FERIADO d WHERE ((d.FRD_CODIGO=@frdCodigoNew) AND (d.FRD_CODEMP=@frdCodEmpNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @frdCodigoOld<>@frdCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @frdCodEmpOld<>@frdCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @frdRegOld <> @frdRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@frdRegOld,@frdRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --
    IF( (@frdPagarNew=0) AND (@frdReceberNew=0) )   
      RAISERROR('REGISTRO INVALIDO, PAGAR OU RECEBER TEM QUE SER DIFERENTE DE ZERO',15,1);
    --  
    UPDATE dbo.FERIADO
       SET FRD_NOME     = @frdNomeNew
          ,FRD_PAGAR    = @frdPagarNew
          ,FRD_RECEBER  = @frdReceberNew          
          ,FRD_ATIVO    = @frdAtivoNew
          ,FRD_REG      = @frdRegNew
          ,FRD_CODUSR   = @frdCodUsrNew
    WHERE FRD_CODIGO    = @frdCodigoNew;     
    -- Gravando LOG
    IF( (@frdNomeOld<>@frdNomeNew) OR (@frdPagarOld<>@frdPagarNew) OR (@frdReceberOld<>@frdReceberNew) OR (@frdAtivoOld<>@frdAtivoNew) OR (@frdRegOld<>@frdRegNew) ) BEGIN
      INSERT INTO dbo.BKPFERIADO(
        FRD_ACAO
        ,FRD_CODIGO
        ,FRD_NOME
        ,FRD_PAGAR
        ,FRD_RECEBER
        ,FRD_CODEMP
        ,FRD_ATIVO
        ,FRD_REG
        ,FRD_CODUSR) VALUES(
        'A'               -- FRD_ACAO
        ,@frdCodigoNew    -- FRD_CODIGO
        ,@frdNomeNew      -- FRD_NOME
        ,@frdPagarNew     -- FRD_PAGAR
        ,@frdReceberNew   -- FRD_RECEBER
        ,@frdCodEmpNew    -- FRD_CODEMP
        ,@frdAtivoNew     -- FRD_ATIVO
        ,@frdRegNew       -- FRD_REG
        ,@frdCodUsrNew    -- FRD_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFERIADO_BD ON dbo.VFERIADO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @frdCodigoOld DATE;
  DECLARE @frdNomeOld VARCHAR(30);
  DECLARE @frdPagarOld INTEGER;  
  DECLARE @frdReceberOld INTEGER;    
  DECLARE @frdCodEmpOld INTEGER;
  DECLARE @frdAtivoOld VARCHAR(1);
  DECLARE @frdRegOld VARCHAR(1);
  DECLARE @frdCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD19Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @frdCodigoOld   = d.FRD_CODIGO
         ,@frdNomeOld    = d.FRD_NOME
         ,@frdPagarOld   = d.FRD_PAGAR
         ,@frdReceberOld = d.FRD_RECEBER
         ,@frdCodEmpOld  = d.FRD_CODEMP
         ,@frdAtivoOld   = d.FRD_ATIVO
         ,@frdRegOld     = d.FRD_REG
         ,@frdCodUsrOld  = d.FRD_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD19Old      = UP.UP_D19
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.FRD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@frdCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD19Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 19 PARA EXCLUIR NA TABELA FERIADO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@frdRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@frdCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('FERIADO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@frdCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('FERIADO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.FERIADO WHERE ((FRD_CODIGO=@frdCodigoOld) AND (FRD_CODEMP=@frdCodEmpOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPFERIADO(
      FRD_ACAO
      ,FRD_CODIGO
      ,FRD_NOME
      ,FRD_PAGAR
      ,FRD_RECEBER
      ,FRD_CODEMP
      ,FRD_ATIVO
      ,FRD_REG
      ,FRD_CODUSR) VALUES(
      'E'               -- FRD_ACAO
      ,@frdCodigoOld    -- FRD_CODIGO
      ,@frdNomeOld      -- FRD_NOME
      ,@frdPagarOld     -- FRD_PAGAR
      ,@frdReceberOld   -- FRD_RECEBER
      ,@frdCodEmpOld    -- FRD_CODEMP
      ,@frdAtivoOld     -- FRD_ATIVO
      ,@frdRegOld       -- FRD_REG
      ,@frdCodUsrOld    -- FRD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPFERIADO_BUD ON dbo.BKPFERIADO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                                 F I L I A L                                     --
--trgfilial
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewFILIAL_BI ON dbo.VFILIAL
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS   |UPD |DEL | TIPO               | Obs
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------
  -- FLL_CODIGO     | PK   |    |    | DAT NN             |  
  -- FLL_NOME       |      |    |    | VC(40) NN          |
  -- FLL_APELIDO    |      |    |    | VC(15) NN          |
  -- FLL_BAIRRO     |      |    |    | VC(15) NN          |
  -- FLL_CEP        |      |    |    | VC(8) NN           |
  -- FLL_CNPJ       |      |    |    | VC(14) NN          |
  -- FLL_CODCDD     | SEL  |    |    | VC(7) NN           | Campo relacionado (CIDADE)        
  -- CDD_NOME       | SEL  |    |    | VC(30) NN          | Campo relacionado (CIDADE)        
  -- FLL_CODLGR     | SEL  |    |    | VC(5) NN           | Campo relacionado (LOGRADOURO)        
  -- LGR_NOME       | SEL  |    |    | VC(20) NN          | Campo relacionado (LOGRADOURO)        
  -- FLL_ENDERECO   |      |    |    | VC(60) NN          |
  -- FLL_NUMERO     |      |    |    | VC(10) NN          |
  -- FLL_FONE       |      |    |    | VC(10)             |
  -- FLL_INSESTAD   |      |    |    | VC(19)             |
  -- FLL_INSMUNIC   |      |    |    | VC(20) NN          |
  -- FLL_CODEMP     |PK/SEL|    |    | INT NN             | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO    | SEL  |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- FLL_ATIVO      | CC   |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- FLL_REG        | FNC  |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- FLL_CODUSR     | OK   |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL  |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL  |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D03         | SEL  |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL  |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @fllCodigoNew INTEGER=0;
  DECLARE @fllNomeNew VARCHAR(40);
  DECLARE @fllApelidoNew VARCHAR(15);  
  DECLARE @fllBairroNew VARCHAR(15);  
  DECLARE @fllCepNew VARCHAR(8);  
  DECLARE @fllCnpjNew VARCHAR(14);
  DECLARE @fllCodCddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @fllCodLgrNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @fllEnderecoNew VARCHAR(60);
  DECLARE @fllNumeroNew VARCHAR(10);
  DECLARE @fllFoneNew VARCHAR(10);  
  DECLARE @fllInsEstadNew VARCHAR(19);  
  DECLARE @fllInsMunicNew VARCHAR(20);  
  DECLARE @fllCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @fllAtivoNew VARCHAR(1);
  DECLARE @fllRegNew VARCHAR(1);
  DECLARE @fllCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD03New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT --@fllCodigoNew    = i.FLL_CODIGO                                                        
         @fllNomeNew      = dbo.fncTranslate(i.FLL_NOME,40)
         ,@fllApelidoNew  = dbo.fncTranslate(i.FLL_APELIDO,15)         
         ,@fllBairroNew   = dbo.fncTranslate(i.FLL_BAIRRO,15)         
         ,@fllCepNew      = dbo.fncTranslate(i.FLL_CEP,8)         
         ,@fllCnpjNew     = dbo.fncTranslate(i.FLL_CNPJ,14)         
         ,@fllCodCddNew   = dbo.fncTranslate(i.FLL_CODCDD,7)
         ,@cddNomeNew     = COALESCE(CDD.CDD_NOME,'ERRO')
         ,@fllCodLgrNew   = dbo.fncTranslate(i.FLL_CODLGR,5)
         ,@lgrNomeNew     = COALESCE(LGR.LGR_NOME,'ERRO')
         ,@fllEnderecoNew = dbo.fncTranslate(i.FLL_ENDERECO,60)
         ,@fllNumeroNew   = dbo.fncTranslate(i.FLL_NUMERO,10)
         ,@fllFoneNew     = dbo.fncTranslate(i.FLL_FONE,10)         
         ,@fllInsEstadNew = COALESCE(dbo.fncTranslate(i.FLL_INSESTAD,19),'NSA')         
         ,@fllInsMunicNew = COALESCE(dbo.fncTranslate(i.FLL_INSMUNIC,20),'NSA')         
         ,@fllCodEmpNew   = i.FLL_CODEMP
         ,@empApelidoNew  = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@fllAtivoNew    = UPPER(i.FLL_ATIVO)
         ,@fllRegNew      = UPPER(i.FLL_REG)
         ,@fllCodUsrNew   = i.FLL_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03New       = UP.UP_D03
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN CIDADE CDD ON i.FLL_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'
    LEFT OUTER JOIN LOGRADOURO LGR ON i.FLL_CODLGR=LGR.LGR_CODIGO AND LGR.LGR_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.FLL_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.FLL_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@fllCodCddNew);
    IF( @lgrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LOGRADOURO %s PARA ESTE REGISTRO',15,1,@fllCodLgrNew);
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@fllCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fllCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD03New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA INCLUIR NA TABELA FILIAL',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @fllCodigoNew=(MAX(FLL_CODIGO)+1) FROM FILIAL WHERE FLL_CODEMP=@fllCodEmpNew;
    --SELECT @uiCodigo=COALESCE(FLL_CODIGO,NULL) FROM FILIAL WHERE ((FLL_CODIGO=@fllCodigoNew) AND (FLL_CODEMP=@fllCodEmpNew));
    --IF( @uiCodigo IS NOT NULL )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA FILIAL %s',15,1,@fllNomeNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @fllRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@fllRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.FILIAL( 
      FLL_CODIGO
      ,FLL_NOME
      ,FLL_APELIDO
      ,FLL_BAIRRO
      ,FLL_CEP
      ,FLL_CNPJ
      ,FLL_CODCDD
      ,FLL_CODLGR
      ,FLL_ENDERECO
      ,FLL_NUMERO
      ,FLL_FONE
      ,FLL_INSESTAD
      ,FLL_INSMUNIC
      ,FLL_CODEMP
      ,FLL_ATIVO
      ,FLL_REG
      ,FLL_CODUSR) VALUES(
      @fllCodigoNew    -- FLL_CODIGO
      ,@fllNomeNew     -- FLL_NOME
      ,@fllApelidoNew  -- FLL_APELIDO
      ,@fllBairroNew   -- FLL_BAIRRO
      ,@fllCepNew      -- FLL_CEP
      ,@fllCnpjNew     -- FLL_CNPJ
      ,@fllCodCddNew   -- FLL_CODCDD
      ,@fllCodLgrNew   -- FLL_CODLGR
      ,@fllEnderecoNew -- FLL_ENDERECO
      ,@fllNumeroNew   -- FLL_NUMERO
      ,@fllFoneNew     -- FLL_FONE
      ,@fllInsEstadNew -- FLL_INSESTAD
      ,@fllInsMunicNew -- FLL_INSMUNIC
      ,@fllCodEmpNew   -- FLL_CODEMP
      ,@fllAtivoNew    -- FLL_ATIVO
      ,@fllRegNew      -- FLL_REG
      ,@fllCodUsrNew   -- FLL_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPFILIAL(
      FLL_ACAO
      ,FLL_CODIGO
      ,FLL_NOME
      ,FLL_APELIDO
      ,FLL_BAIRRO
      ,FLL_CEP
      ,FLL_CNPJ
      ,FLL_CODCDD
      ,FLL_CODLGR
      ,FLL_ENDERECO
      ,FLL_NUMERO
      ,FLL_FONE
      ,FLL_INSESTAD
      ,FLL_INSMUNIC
      ,FLL_CODEMP
      ,FLL_ATIVO
      ,FLL_REG
      ,FLL_CODUSR) VALUES(
      'I'              -- FLL_ACAO
      ,@fllCodigoNew   -- FLL_CODIGO
      ,@fllNomeNew     -- FLL_NOME
      ,@fllApelidoNew  -- FLL_APELIDO
      ,@fllBairroNew   -- FLL_BAIRRO
      ,@fllCepNew      -- FLL_CEP
      ,@fllCnpjNew     -- FLL_CNPJ
      ,@fllCodCddNew   -- FLL_CODCDD
      ,@fllCodLgrNew   -- FLL_CODLGR
      ,@fllEnderecoNew -- FLL_ENDERECO
      ,@fllNumeroNew   -- FLL_NUMERO
      ,@fllFoneNew     -- FLL_FONE
      ,@fllInsEstadNew -- FLL_INSESTAD
      ,@fllInsMunicNew -- FLL_INSMUNIC
      ,@fllCodEmpNew   -- FLL_CODEMP
      ,@fllAtivoNew    -- FLL_ATIVO
      ,@fllRegNew      -- FLL_REG
      ,@fllCodUsrNew   -- FLL_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END

GO
CREATE TRIGGER dbo.TRGViewFILIAL_BU ON dbo.VFILIAL
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @fllCodigoNew INTEGER;                                              
  DECLARE @fllNomeNew VARCHAR(40);
  DECLARE @fllApelidoNew VARCHAR(15);  
  DECLARE @fllBairroNew VARCHAR(15);  
  DECLARE @fllCepNew VARCHAR(8);  
  DECLARE @fllCnpjNew VARCHAR(14);
  DECLARE @fllCodCddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @fllCodLgrNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @fllEnderecoNew VARCHAR(60);
  DECLARE @fllNumeroNew VARCHAR(10);
  DECLARE @fllFoneNew VARCHAR(10);  
  DECLARE @fllInsEstadNew VARCHAR(19);  
  DECLARE @fllInsMunicNew VARCHAR(20);  
  DECLARE @fllCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @fllAtivoNew VARCHAR(1);
  DECLARE @fllRegNew VARCHAR(1);
  DECLARE @fllCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD03New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @fllCodigoNew    = i.FLL_CODIGO                                                        
         ,@fllNomeNew     = dbo.fncTranslate(i.FLL_NOME,40)
         ,@fllApelidoNew  = dbo.fncTranslate(i.FLL_APELIDO,15)         
         ,@fllBairroNew   = dbo.fncTranslate(i.FLL_BAIRRO,15)         
         ,@fllCepNew      = dbo.fncTranslate(i.FLL_CEP,8)         
         ,@fllCnpjNew     = dbo.fncTranslate(i.FLL_CNPJ,14)         
         ,@fllCodCddNew   = dbo.fncTranslate(i.FLL_CODCDD,7)
         ,@cddNomeNew     = COALESCE(CDD.CDD_NOME,'ERRO')
         ,@fllCodLgrNew   = dbo.fncTranslate(i.FLL_CODLGR,5)
         ,@lgrNomeNew     = COALESCE(LGR.LGR_NOME,'ERRO')
         ,@fllEnderecoNew = dbo.fncTranslate(i.FLL_ENDERECO,60)
         ,@fllNumeroNew   = dbo.fncTranslate(i.FLL_NUMERO,10)
         ,@fllFoneNew     = dbo.fncTranslate(i.FLL_FONE,10)         
         ,@fllInsEstadNew = COALESCE(dbo.fncTranslate(i.FLL_INSESTAD,19),'NSA')         
         ,@fllInsMunicNew = COALESCE(dbo.fncTranslate(i.FLL_INSMUNIC,20),'NSA')         
         ,@fllCodEmpNew   = i.FLL_CODEMP
         ,@empApelidoNew  = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@fllAtivoNew    = UPPER(i.FLL_ATIVO)
         ,@fllRegNew      = UPPER(i.FLL_REG)
         ,@fllCodUsrNew   = i.FLL_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03New       = UP.UP_D03
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN CIDADE CDD ON i.FLL_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'
    LEFT OUTER JOIN LOGRADOURO LGR ON i.FLL_CODLGR=LGR.LGR_CODIGO AND LGR.LGR_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.FLL_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.FLL_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@fllCodCddNew);
    IF( @lgrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LOGRADOURO %s PARA ESTE REGISTRO',15,1,@fllCodLgrNew);
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@fllCodEmpNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fllCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD03New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA ALTERAR NA TABELA FILIAL',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @fllCodigoOld INTEGER;
    DECLARE @fllNomeOld VARCHAR(40);
    DECLARE @fllApelidoOld VARCHAR(15);  
    DECLARE @fllBairroOld VARCHAR(15);  
    DECLARE @fllCepOld VARCHAR(8);  
    DECLARE @fllCnpjOld VARCHAR(14);
    DECLARE @fllCodCddOld VARCHAR(7);
    DECLARE @fllCodLgrOld VARCHAR(5);
    DECLARE @fllEnderecoOld VARCHAR(60);
    DECLARE @fllNumeroOld VARCHAR(10);
    DECLARE @fllFoneOld VARCHAR(10);  
    DECLARE @fllInsEstadOld VARCHAR(19);  
    DECLARE @fllInsMunicOld VARCHAR(20);  
    DECLARE @fllCodEmpOld INTEGER;
    DECLARE @fllAtivoOld VARCHAR(1);
    DECLARE @fllRegOld VARCHAR(1);
    DECLARE @fllCodUsrOld INTEGER;
    
    SELECT @fllCodigoOld    = d.FLL_CODIGO
           ,@fllNomeOld     = d.FLL_NOME
           ,@fllApelidoOld  = d.FLL_APELIDO
           ,@fllBairroOld   = d.FLL_BAIRRO
           ,@fllCepOld      = d.FLL_CEP
           ,@fllCnpjOld     = d.FLL_CNPJ
           ,@fllCodCddOld   = d.FLL_CODCDD
           ,@fllCodLgrOld   = d.FLL_CODLGR
           ,@fllEnderecoOld = d.FLL_ENDERECO
           ,@fllNumeroOld   = d.FLL_NUMERO
           ,@fllFoneOld     = d.FLL_FONE
           ,@fllInsEstadOld = d.FLL_INSESTAD
           ,@fllInsMunicOld = d.FLL_INSMUNIC
           ,@fllCodEmpOld   = d.FLL_CODEMP
           ,@fllAtivoOld    = d.FLL_ATIVO
           ,@fllRegOld      = d.FLL_REG
           ,@fllCodUsrOld   = d.FLL_CODUSR         
      FROM FILIAL d WHERE ((d.FLL_CODIGO=@fllCodigoNew) AND (d.FLL_CODEMP=@fllCodEmpNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @fllCodigoOld<>@fllCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @fllCodEmpOld<>@fllCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @fllRegOld <> @fllRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@fllRegOld,@fllRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.FILIAL
       SET FLL_NOME     = @fllNomeNew
          ,FLL_APELIDO  = @fllApelidoNew
          ,FLL_BAIRRO   = @fllBairroNew
          ,FLL_CEP      = @fllCepNew
          ,FLL_CNPJ     = @fllCnpjNew
          ,FLL_CODCDD   = @fllCodCddNew
          ,FLL_CODLGR   = @fllCodLgrNew
          ,FLL_ENDERECO = @fllEnderecoNew
          ,FLL_NUMERO   = @fllNumeroNew
          ,FLL_FONE     = @fllFoneNew
          ,FLL_INSESTAD = @fllInsEstadNew
          ,FLL_INSMUNIC = @fllInsMunicNew
          ,FLL_ATIVO    = @fllAtivoNew
          ,FLL_REG      = @fllRegNew
          ,FLL_CODUSR   = @fllCodUsrNew
    WHERE FLL_CODIGO    = @fllCodigoNew;     
    -- Gravando LOG
    IF( (@fllNomeOld<>@fllNomeNew) OR (@fllApelidoOld<>@fllApelidoNew) OR (@fllBairroOld<>@fllBairroNew) OR (@fllCepOld<>@fllCepNew) OR (@fllCnpjOld<>@fllCnpjNew)
     OR (@fllCodCddOld<>@fllCodCddNew) OR (@fllCodLgrOld<>@fllCodLgrNew) OR (@fllEnderecoOld<>@fllEnderecoNew) OR (@fllNumeroOld<>@fllNumeroNew)
     OR (@fllFoneOld<>@fllFoneNew) OR (@fllInsEstadOld<>@fllInsEstadNew) OR (@fllInsMunicOld<>@fllInsMunicNew) OR (@fllAtivoOld<>@fllAtivoNew)
     OR (@fllRegOld<>@fllRegNew) OR (@fllCodUsrOld<>@fllCodUsrNew) ) BEGIN
      INSERT INTO dbo.BKPFILIAL(
        FLL_ACAO
        ,FLL_CODIGO
        ,FLL_NOME
        ,FLL_APELIDO
        ,FLL_BAIRRO
        ,FLL_CEP
        ,FLL_CNPJ
        ,FLL_CODCDD
        ,FLL_CODLGR
        ,FLL_ENDERECO
        ,FLL_NUMERO
        ,FLL_FONE
        ,FLL_INSESTAD
        ,FLL_INSMUNIC
        ,FLL_CODEMP
        ,FLL_ATIVO
        ,FLL_REG
        ,FLL_CODUSR) VALUES(
        'A'              -- FLL_ACAO
        ,@fllCodigoNew   -- FLL_CODIGO
        ,@fllNomeNew     -- FLL_NOME
        ,@fllApelidoNew  -- FLL_APELIDO
        ,@fllBairroNew   -- FLL_BAIRRO
        ,@fllCepNew      -- FLL_CEP
        ,@fllCnpjNew     -- FLL_CNPJ
        ,@fllCodCddNew   -- FLL_CODCDD
        ,@fllCodLgrNew   -- FLL_CODLGR
        ,@fllEnderecoNew -- FLL_ENDERECO
        ,@fllNumeroNew   -- FLL_NUMERO
        ,@fllFoneNew     -- FLL_FONE
        ,@fllInsEstadNew -- FLL_INSESTAD
        ,@fllInsMunicNew -- FLL_INSMUNIC
        ,@fllCodEmpNew   -- FLL_CODEMP
        ,@fllAtivoNew    -- FLL_ATIVO
        ,@fllRegNew      -- FLL_REG
        ,@fllCodUsrNew   -- FLL_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFILIAL_BD ON dbo.VFILIAL
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @fllCodigoOld INTEGER;
  DECLARE @fllNomeOld VARCHAR(40);
  DECLARE @fllApelidoOld VARCHAR(15);  
  DECLARE @fllBairroOld VARCHAR(15);  
  DECLARE @fllCepOld VARCHAR(8);  
  DECLARE @fllCnpjOld VARCHAR(14);
  DECLARE @fllCodCddOld VARCHAR(7);
  DECLARE @fllCodLgrOld VARCHAR(5);
  DECLARE @fllEnderecoOld VARCHAR(60);
  DECLARE @fllNumeroOld VARCHAR(10);
  DECLARE @fllFoneOld VARCHAR(10);  
  DECLARE @fllInsEstadOld VARCHAR(19);  
  DECLARE @fllInsMunicOld VARCHAR(20);  
  DECLARE @fllCodEmpOld INTEGER;
  DECLARE @fllAtivoOld VARCHAR(1);
  DECLARE @fllRegOld VARCHAR(1);
  DECLARE @fllCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD03Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @fllCodigoOld    = d.FLL_CODIGO
         ,@fllNomeOld     = d.FLL_NOME
         ,@fllApelidoOld  = d.FLL_APELIDO
         ,@fllBairroOld   = d.FLL_BAIRRO
         ,@fllCepOld      = d.FLL_CEP
         ,@fllCnpjOld     = d.FLL_CNPJ
         ,@fllCodCddOld   = d.FLL_CODCDD
         ,@fllCodLgrOld   = d.FLL_CODLGR
         ,@fllEnderecoOld = d.FLL_ENDERECO
         ,@fllNumeroOld   = d.FLL_NUMERO
         ,@fllFoneOld     = d.FLL_FONE
         ,@fllInsEstadOld = d.FLL_INSESTAD
         ,@fllInsMunicOld = d.FLL_INSMUNIC
         ,@fllCodEmpOld   = d.FLL_CODEMP
         ,@fllAtivoOld    = d.FLL_ATIVO
         ,@fllRegOld      = d.FLL_REG
         ,@fllCodUsrOld   = d.FLL_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03Old       = UP.UP_D03
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.FLL_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fllCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD03Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA EXCLUIR NA TABELA FILIAL',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@fllRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@fllCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('FILIAL UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@fllCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('FILIAL UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.FILIAL WHERE ((FLL_CODIGO=@fllCodigoOld) AND (FLL_CODEMP=@fllCodEmpOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPFILIAL(
      FLL_ACAO
      ,FLL_CODIGO
      ,FLL_NOME
      ,FLL_APELIDO
      ,FLL_BAIRRO
      ,FLL_CEP
      ,FLL_CNPJ
      ,FLL_CODCDD
      ,FLL_CODLGR
      ,FLL_ENDERECO
      ,FLL_NUMERO
      ,FLL_FONE
      ,FLL_INSESTAD
      ,FLL_INSMUNIC
      ,FLL_CODEMP
      ,FLL_ATIVO
      ,FLL_REG
      ,FLL_CODUSR) VALUES(
      'E'              -- FLL_ACAO
      ,@fllCodigoOld   -- FLL_CODIGO
      ,@fllNomeOld     -- FLL_NOME
      ,@fllApelidoOld  -- FLL_APELIDO
      ,@fllBairroOld   -- FLL_BAIRRO
      ,@fllCepOld      -- FLL_CEP
      ,@fllCnpjOld     -- FLL_CNPJ
      ,@fllCodCddOld   -- FLL_CODCDD
      ,@fllCodLgrOld   -- FLL_CODLGR
      ,@fllEnderecoOld -- FLL_ENDERECO
      ,@fllNumeroOld   -- FLL_NUMERO
      ,@fllFoneOld     -- FLL_FONE
      ,@fllInsEstadOld -- FLL_INSESTAD
      ,@fllInsMunicOld -- FLL_INSMUNIC
      ,@fllCodEmpOld   -- FLL_CODEMP
      ,@fllAtivoOld    -- FLL_ATIVO
      ,@fllRegOld      -- FLL_REG
      ,@fllCodUsrOld   -- FLL_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPFILIAL_BUD ON dbo.BKPFILIAL
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                 F O R M A C O B R A N C A                 --
--trgformacobranca                                           --
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewFORMACOBRANCA_BI ON dbo.VFORMACOBRANCA
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- FC_CODIGO      | PK  |    |    | VC(03) NN          |
  -- FC_NOME        |     |    |    | VC(20) NN          |
  -- FC_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- FC_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- FC_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D20         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @fcCodigoNew VARCHAR(3);
  DECLARE @fcNomeNew VARCHAR(20);
  DECLARE @fcAtivoNew VARCHAR(1);
  DECLARE @fcRegNew VARCHAR(1);
  DECLARE @fcCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD20New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @fcCodigoNew   = dbo.fncTranslate(i.FC_CODIGO,3)
         ,@fcNomeNew    = dbo.fncTranslate(i.FC_NOME,20)
         ,@fcAtivoNew   = UPPER(i.FC_ATIVO)
         ,@fcRegNew     = UPPER(i.FC_REG)
         ,@fcCodUsrNew  = i.FC_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20New      = UP.UP_D20
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.FC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fcCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD20New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA INCLUIR NA TABELA FORMACOBRANCA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(FC_CODIGO,'OK') FROM FORMACOBRANCA WHERE FC_NOME=@fcNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA FORMACOBRANCA COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(FC_NOME,'OK') FROM FORMACOBRANCA WHERE FC_CODIGO=@fcCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA FORMACOBRANCA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @fcRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@fcRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.FORMACOBRANCA( 
      FC_CODIGO
      ,FC_NOME
      ,FC_ATIVO
      ,FC_REG
      ,FC_CODUSR) VALUES(
      @fcCodigoNew   -- FC_CODIGO
      ,@fcNomeNew    -- FC_NOME
      ,@fcAtivoNew   -- FC_ATIVO
      ,@fcRegNew     -- FC_REG
      ,@fcCodUsrNew  -- FC_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPFORMACOBRANCA(
      FC_ACAO
      ,FC_CODIGO
      ,FC_NOME
      ,FC_ATIVO
      ,FC_REG
      ,FC_CODUSR) VALUES(
      'I'                       -- FC_ACAO
      ,@fcCodigoNew            -- FC_CODIGO
      ,@fcNomeNew              -- FC_NOME
      ,@fcAtivoNew             -- FC_ATIVO
      ,@fcRegNew               -- FC_REG
      ,@fcCodUsrNew            -- FC_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFORMACOBRANCA_BU ON dbo.VFORMACOBRANCA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @fcCodigoNew VARCHAR(3);
  DECLARE @fcNomeNew VARCHAR(20);
  DECLARE @fcAtivoNew VARCHAR(1);
  DECLARE @fcRegNew VARCHAR(1);
  DECLARE @fcCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD20New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @fcCodigoNew   = i.FC_CODIGO
         ,@fcNomeNew    = dbo.fncTranslate(i.FC_NOME,20)
         ,@fcAtivoNew   = UPPER(i.FC_ATIVO)
         ,@fcRegNew     = UPPER(i.FC_REG)
         ,@fcCodUsrNew  = i.FC_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20New      = UP.UP_D20
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.FC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fcCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD20New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA FORMACOBRANCA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @fcCodigoOld VARCHAR(3);
    DECLARE @fcNomeOld VARCHAR(20);
    DECLARE @fcAtivoOld VARCHAR(1);
    DECLARE @fcRegOld VARCHAR(1);
    DECLARE @fcCodUsrOld INTEGER;
    SELECT @fcCodigoOld   = d.FC_CODIGO
           ,@fcNomeOld    = d.FC_NOME
           ,@fcAtivoOld   = d.FC_ATIVO
           ,@fcRegOld     = d.FC_REG
           ,@fcCodUsrOld  = d.FC_CODUSR         
      FROM FORMACOBRANCA d WHERE d.FC_CODIGO=@fcCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @fcCodigoOld<>@fcCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @fcNomeOld<>@fcNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(FC_CODIGO,'OK') FROM FORMACOBRANCA WHERE FC_NOME=@fcNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA FORMACOBRANCA COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @fcRegOld <> @fcRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@fcRegOld,@fcRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.FORMACOBRANCA
       SET FC_NOME   = @fcNomeNew
          ,FC_ATIVO  = @fcAtivoNew
          ,FC_REG    = @fcRegNew
          ,FC_CODUSR = @fcCodUsrNew
    WHERE FC_CODIGO  = @fcCodigoNew;     
    -- Gravando LOG
    IF( (@fcNomeOld<>@fcNomeNew) OR (@fcAtivoOld<>@fcAtivoNew) OR (@fcRegOld<>@fcRegNew) ) BEGIN
      INSERT INTO dbo.BKPFORMACOBRANCA(
        FC_ACAO
        ,FC_CODIGO
        ,FC_NOME
        ,FC_ATIVO
        ,FC_REG
        ,FC_CODUSR) VALUES(
        'A'             -- FC_ACAO
        ,@fcCodigoNew  -- FC_CODIGO
        ,@fcNomeNew    -- FC_NOME
        ,@fcAtivoNew   -- FC_ATIVO
        ,@fcRegNew     -- FC_REG
        ,@fcCodUsrNew  -- FC_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewFORMACOBRANCA_BD ON dbo.VFORMACOBRANCA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @fcCodigoOld VARCHAR(3);
  DECLARE @fcNomeOld VARCHAR(20);
  DECLARE @fcAtivoOld VARCHAR(1);
  DECLARE @fcRegOld VARCHAR(1);
  DECLARE @fcCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD20Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @fcCodigoOld   = d.FC_CODIGO
         ,@fcNomeOld    = d.FC_NOME
         ,@fcAtivoOld   = d.FC_ATIVO
         ,@fcRegOld     = d.FC_REG
         ,@fcCodUsrOld  = d.FC_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20Old      = UP.UP_D20
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.FC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@fcCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD20Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA EXCLUIR NA TABELA FORMACOBRANCA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@fcRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@fcCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('FORMACOBRANCA UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@fcCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('FORMACOBRANCA UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.FORMACOBRANCA WHERE FC_CODIGO=@fcCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPFORMACOBRANCA(
      FC_ACAO
      ,FC_CODIGO
      ,FC_NOME
      ,FC_ATIVO
      ,FC_REG
      ,FC_CODUSR) VALUES(
      'E'               -- FC_ACAO
      ,@fcCodigoOld    -- FC_CODIGO
      ,@fcNomeOld      -- FC_NOME
      ,@fcAtivoOld     -- FC_ATIVO
      ,@fcRegOld       -- FC_REG
      ,@fcCodUsrOld    -- FC_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPFORMACOBRANCA_BUD ON dbo.BKPFORMACOBRANCA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                         G R U P O F A V O R E C I D O                           --
--trggrupofavorecido
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewGRUPOFAVORECIDO_BI ON dbo.VGRUPOFAVORECIDO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- GF_CODIGO      | PK  |    |    | INT                |  Auto incremento
  -- GF_NOME        |     |    |    | VC(40) NN          |
  -- GF_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- GF_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- GF_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D11         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @uiNome VARCHAR(40) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  --DECLARE @gfCodigoNew INTEGER;
  DECLARE @gfNomeNew VARCHAR(40);
  DECLARE @gfAtivoNew VARCHAR(1);
  DECLARE @gfRegNew VARCHAR(1);
  DECLARE @gfCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD20New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gfNomeNew    = dbo.fncTranslate(i.GF_NOME,40)
         ,@gfAtivoNew   = UPPER(i.GF_ATIVO)
         ,@gfRegNew     = UPPER(i.GF_REG)
         ,@gfCodUsrNew  = i.GF_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20New      = UP.UP_D20
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.GF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gfCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD20New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA INCLUIR NA TABELA GRUPOFAVORECIDO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(GF_CODIGO,0) FROM GRUPOFAVORECIDO WHERE GF_NOME=@gfNomeNew;
    IF( @uiCodigo <> 0 )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA GRUPOFAVORECIDO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(GF_NOME,'OK') FROM GRUPOFAVORECIDO WHERE GF_CODIGO=@gfCodigoNew;
    --IF( @uiNome <> 'OK' )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA GRUPOFAVORECIDO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @gfRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@gfRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.GRUPOFAVORECIDO( 
      GF_NOME
      ,GF_ATIVO
      ,GF_REG
      ,GF_CODUSR) VALUES(
      @gfNomeNew     -- GF_NOME
      ,@gfAtivoNew   -- GF_ATIVO
      ,@gfRegNew     -- GF_REG
      ,@gfCodUsrNew  -- GF_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOFAVORECIDO(
      GF_ACAO
      ,GF_CODIGO
      ,GF_NOME
      ,GF_ATIVO
      ,GF_REG
      ,GF_CODUSR) VALUES(
      'I'                         -- GF_ACAO
      ,IDENT_CURRENT('GRUPOFAVORECIDO')  -- GF_CODIGO
      ,@gfNomeNew                -- GF_NOME
      ,@gfAtivoNew               -- GF_ATIVO
      ,@gfRegNew                 -- GF_REG
      ,@gfCodUsrNew              -- GF_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOFAVORECIDO_BU ON dbo.VGRUPOFAVORECIDO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @gfCodigoNew INTEGER;
  DECLARE @gfNomeNew VARCHAR(40);
  DECLARE @gfAtivoNew VARCHAR(1);
  DECLARE @gfRegNew VARCHAR(1);
  DECLARE @gfCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD20New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @gfCodigoNew   = i.GF_CODIGO
         ,@gfNomeNew    = dbo.fncTranslate(i.GF_NOME,40)
         ,@gfAtivoNew   = UPPER(i.GF_ATIVO)
         ,@gfRegNew     = UPPER(i.GF_REG)
         ,@gfCodUsrNew  = i.GF_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20New      = UP.UP_D20
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.GF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gfCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD20New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA GRUPOFAVORECIDO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @gfCodigoOld INTEGER;
    DECLARE @gfNomeOld VARCHAR(40);
    DECLARE @gfAtivoOld VARCHAR(1);
    DECLARE @gfRegOld VARCHAR(1);
    DECLARE @gfCodUsrOld INTEGER;
    SELECT @gfCodigoOld   = d.GF_CODIGO
           ,@gfNomeOld    = d.GF_NOME
           ,@gfAtivoOld   = d.GF_ATIVO
           ,@gfRegOld     = d.GF_REG
           ,@gfCodUsrOld  = d.GF_CODUSR         
      FROM GRUPOFAVORECIDO d WHERE d.GF_CODIGO=@gfCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @gfCodigoOld<>@gfCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @gfNomeOld<>@gfNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(GF_CODIGO,0) FROM GRUPOFAVORECIDO WHERE GF_NOME=@gfNomeNew;
      IF( @uiCodigo <> 0 )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA GRUPOFAVORECIDO COM CODIGO %i',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @gfRegOld <> @gfRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@gfRegOld,@gfRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.GRUPOFAVORECIDO
       SET GF_NOME   = @gfNomeNew
          ,GF_ATIVO  = @gfAtivoNew
          ,GF_REG    = @gfRegNew
          ,GF_CODUSR = @gfCodUsrNew
    WHERE GF_CODIGO  = @gfCodigoNew;     
    -- Gravando LOG
    IF( (@gfNomeOld<>@gfNomeNew) OR (@gfAtivoOld<>@gfAtivoNew) OR (@gfRegOld<>@gfRegNew) ) BEGIN
      INSERT INTO dbo.BKPGRUPOFAVORECIDO(
        GF_ACAO
        ,GF_CODIGO
        ,GF_NOME
        ,GF_ATIVO
        ,GF_REG
        ,GF_CODUSR) VALUES(
        'A'            -- GF_ACAO
        ,@gfCodigoNew  -- GF_CODIGO
        ,@gfNomeNew    -- GF_NOME
        ,@gfAtivoNew   -- GF_ATIVO
        ,@gfRegNew     -- GF_REG
        ,@gfCodUsrNew  -- GF_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOFAVORECIDO_BD ON dbo.VGRUPOFAVORECIDO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntFvrP INTEGER = 0;   -- Para procurar campo foreign key int (FAVORECIDO-FVR_GFCP) 
  DECLARE @fkIntFvrR INTEGER = 0;   -- Para procurar campo foreign key int (FAVORECIDO-FVR_GFCR) 
  DECLARE @erroOld VARCHAR(70);     -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gfCodigoOld INTEGER;
  DECLARE @gfNomeOld VARCHAR(40);
  DECLARE @gfAtivoOld VARCHAR(1);
  DECLARE @gfRegOld VARCHAR(1);
  DECLARE @gfCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD20Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gfCodigoOld   = d.GF_CODIGO
         ,@gfNomeOld    = d.GF_NOME
         ,@gfAtivoOld   = d.GF_ATIVO
         ,@gfRegOld     = d.GF_REG
         ,@gfCodUsrOld  = d.GF_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20Old      = UP.UP_D20
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.GF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gfCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD20Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA EXCLUIR NA TABELA GRUPOFAVORECIDO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@gfRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK FVR_GFCP(FAVORECIDO)
    --                 FVR_GFCR(FAVORECIDO)    
    --------------------------------------
    SELECT TOP 1 @fkIntFvrP=COALESCE(FVR_CODIGO,0) FROM FAVORECIDO WHERE FVR_GFCP=@gfCodigoOld;
    IF( @fkIntFvrP > 0 )
      RAISERROR('GRUPO UTILIZADO NO FAVORECIDO %i',15,1,@fkIntFvrP);
    SELECT TOP 1 @fkIntFvrR=COALESCE(FVR_CODIGO,0) FROM FAVORECIDO WHERE FVR_GFCR=@gfCodigoOld;
    IF( @fkIntFvrR > 0 )
      RAISERROR('GRUPO UTILIZADO NO FAVORECIDO %i',15,1,@fkIntFvrR);
    --
    --
    DELETE FROM dbo.GRUPOFAVORECIDO WHERE GF_CODIGO=@gfCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOFAVORECIDO(
      GF_ACAO
      ,GF_CODIGO
      ,GF_NOME
      ,GF_ATIVO
      ,GF_REG
      ,GF_CODUSR) VALUES(
      'E'              -- GF_ACAO
      ,@gfCodigoOld    -- GF_CODIGO
      ,@gfNomeOld      -- GF_NOME
      ,@gfAtivoOld     -- GF_ATIVO
      ,@gfRegOld       -- GF_REG
      ,@gfCodUsrOld    -- GF_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPGRUPOFAVORECIDO_BUD ON dbo.BKPGRUPOFAVORECIDO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                             G R U P O M O D E L O
--trggrupomodelo TABELA USADA PARA PRODUTO E AUTO
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELO_BI ON dbo.VGRUPOMODELO
INSTEAD OF INSERT 
AS
BEGIN
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO            |INS  |UPD |DEL | TIPO               | TBL     | Obs
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------
  -- GM_CODIGO        | PK  |    |    | INT                | PRD-AUT | Campo auto incremento
  -- GM_CODFBR        | PK  |    |    | INT NN             | PRD     | Campo relacionado (FABRICANTE)  
  -- FVR_APELIDO      | SEL |    |    | VC(15) NN          | PRD     | Campo relacionado (FABRICANTE)  
  -- GM_NOME          |     |    |    | VC(30) NN          | PRD-AUT |
  -- GM_CODGP         | SEL |    |    | VC(3) NN           | PRD-AUT | Campo relacionado (GRUPOPRODUTO)    
  -- GM_ESTOQUE       | CC  |    |    | INT NN             | PRD-AUT | Total gerado nesta tela
  -- GM_NUMSERIE      | CC  |    |    | VC(1) NN           | PRD     | S|N Se informa numero de serie no produto
  -- GM_SINCARD       | CC  |    |    | VC(1) NN           | PRD     | S|N Se informa sincard de serie no produto
  -- GM_OPERADORA     | CC  |    |    | VC(1) NN           | PRD     | S|N Se informa operadora de serie no produto
  -- GM_FONE          | CC  |    |    | VC(1) NN           | PRD     | S|N Se informa numero de telefone no produto 
  -- GM_VENDA         | CC  |    |    | VC(1) NN           | PRD-AUT | S|N Se produto eh de venda ou naum
  -- GM_LOCACAO       | CC  |    |    | VC(1) NN           | PRD-AUT | S|N Se produto eh de locacao ou naum  
  -- GM_CONTRATO      | CC  |    |    | VC(1) NN           | PRD     | S|N Se informa numero de contrato
  -- GM_GPOBRIGATORIO |     |    |    | VC(40) NN          | AUT     | Grupos de produtos obrigatorio para montagem de um auto
  -- GM_GMOBRIGATORIO |     |    |    | VC(70) NN          | AUT     | Modelos de produtos aceitos conforme grupos
  -- GM_GPACEITO      |     |    |    | VC(40) NN          | AUT     | Grupos de produtos aceitos/naum obrigatorios para montagem de um auto  
  -- GM_GMACEITO      |     |    |    | VC(70) NN          | AUT     | Modelos de produtos aceitos conforme grupos  
  -- GM_VALORVISTA    |     |    |    | N(15,2) NN         | PRD-AUT | Valor a vista
  -- GM_VALORPRAZO    |     |    |    | N(15,2) NN         | PRD-AUT | Valor a prazo
  -- GM_VALORMINIMO   |     |    |    | N(15,2) NN         | PRD-AUT | Valor minimo para negociacao
  -- GM_ATIVO         | CC  |    |    | VC(1) NN           | PRD-AUT | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- GM_REG           | FNC |    |    | VC(1) NN           | PRD-AUT | P|A|S   P=Publico  A=Administrador S=Sistema
  -- GM_CODUSR        | OK  |    |    | INT NN             | PRD-AUT | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO      | SEL |    |    | VC(15) NN          | PRD-AUT | Campo relacionado (USUARIO)
  -- USR_ADMPUB       | SEL |    |    | VC(1) NN           | PRD-AUT | Retornar se o usuario eh PUB/ADM
  -- UP_D11           | SEL |    |    | INT NN             | PRD-AUT | Recupera o direito de usuario para esta tabela
  -- UP_D31           | SEL |    |    | INT NN             | PRD-AUT | Recupera o direito se pode transformar registro do sistema
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @pkCodigo INTEGER = NULL;     -- Para procurar primary key
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  --DECLARE @gmCodigoNew INTEGER;
  DECLARE @gmCodFbrNew INTEGER;
  DECLARE @fvrApelidoNew VARCHAR(15);  
  DECLARE @gmNomeNew VARCHAR(30);
  DECLARE @gmCodGpNew VARCHAR(3);
  DECLARE @gpNomeNew VARCHAR(40);
  DECLARE @gmNumSerieNew VARCHAR(1);
  DECLARE @gmSinCardNew VARCHAR(1);
  DECLARE @gmOperadoraNew VARCHAR(1);
  DECLARE @gmFoneNew VARCHAR(1);
  DECLARE @gmVendaNew VARCHAR(1);
  DECLARE @gmLocacaoNew VARCHAR(1);  
  DECLARE @gmContratoNew VARCHAR(1);
  DECLARE @gmGpObrigatorioNew VARCHAR(40);
  DECLARE @gmGmObrigatorioNew VARCHAR(70);  
  DECLARE @gmGpAceitoNew VARCHAR(40);
  DECLARE @gmGmAceitoNew VARCHAR(70);    
  DECLARE @gmValorVistaNew NUMERIC(15,2);      
  DECLARE @gmValorPrazoNew NUMERIC(15,2);
  DECLARE @gmValorMinimoNew NUMERIC(15,2);  
  DECLARE @gmAtivoNew VARCHAR(1);
  DECLARE @gmRegNew VARCHAR(1);
  DECLARE @gmCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD11New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gmCodFbrNew         = COALESCE(i.GM_CODFBR,0)
         ,@fvrApelidoNew      = COALESCE(FVR.FVR_APELIDO,'ERRO')
         ,@gmNomeNew          = dbo.fncTranslate(i.GM_NOME,30)
         ,@gmCodGpNew         = dbo.fncTranslate(i.GM_CODGP,3)
         ,@gpNomeNew          = COALESCE(GP.GP_NOME,'ERRO')
         ,@gmNumSerieNew      = COALESCE(UPPER(i.GM_NUMSERIE),'N')
         ,@gmSinCardNew       = COALESCE(UPPER(i.GM_SINCARD),'N')
         ,@gmOperadoraNew     = COALESCE(UPPER(i.GM_OPERADORA),'N')
         ,@gmFoneNew          = COALESCE(UPPER(i.GM_FONE),'N')
         ,@gmVendaNew         = UPPER(i.GM_VENDA)
         ,@gmLocacaoNew       = UPPER(i.GM_LOCACAO)         
         ,@gmContratoNew      = COALESCE(UPPER(i.GM_CONTRATO),'N')
         ,@gmGpObrigatorioNew = COALESCE(dbo.fncTranslate(i.GM_GPOBRIGATORIO,40),'NSA')
         ,@gmGmObrigatorioNew = COALESCE(dbo.fncTranslate(i.GM_GMOBRIGATORIO,70),'NSA')
         ,@gmGpAceitoNew      = COALESCE(dbo.fncTranslate(i.GM_GPACEITO,40),'NSA')
         ,@gmGmAceitoNew      = COALESCE(dbo.fncTranslate(i.GM_GMACEITO,70),'NSA')
         ,@gmValorVistaNew    = i.GM_VALORVISTA
         ,@gmValorPrazoNew    = i.GM_VALORPRAZO
         ,@gmValorMinimoNew   = i.GM_VALORMINIMO
         ,@gmAtivoNew         = UPPER(i.GM_ATIVO)
         ,@gmRegNew           = UPPER(i.GM_REG)
         ,@gmCodUsrNew        = i.GM_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD11New           = UP.UP_D11
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FABRICANTE FBR ON i.GM_CODFBR=FBR.FBR_CODFVR AND FBR.FBR_ATIVO='S'
    LEFT OUTER JOIN FAVORECIDO FVR ON FBR.FBR_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'    
    LEFT OUTER JOIN GRUPOPRODUTO GP ON i.GM_CODGP=GP.GP_CODIGO AND GP.GP_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.GM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    ----------------------------------------------------
    -- VERIFICANDO A FOREIGN KEYs SE FOR PRODUTO OU AUTO
    ----------------------------------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmCodUsrNew);
      
    IF( @gmCodGpNew<>'AUT' ) BEGIN  
      IF( @fvrApelidoNew='ERRO' )
        RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@gmCodFbrNew);
      IF( @gpNomeNew='ERRO' )
        RAISERROR('NAO LOCALIZADO EVENTO %s PARA ESTE REGISTRO',15,1,@gmCodGpNew);
    END    
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD11New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 11 PARA INCLUIR NA TABELA GRUPOMODELO',15,1,@usrApelidoNew);
    -------------------------------------------------------------
    -- Checando a primary key
    -------------------------------------------------------------
    --SELECT @pkCodigo=COALESCE(GM_CODIGO,NULL) FROM GRUPOMODELO WHERE ((GM_CODIGO=@gmCodigoNew) AND (GM_CODFVR=@gmCodFvrNew));
    --IF( @pkCodigo <> NULL) OR (@pkCodigo IS NOT NULL) )
    --  RAISERROR('REGISTRO COM CODIGO E FAVORECIDO JA CADASTRADO',15,1);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(GM_CODIGO,0) FROM GRUPOMODELO WHERE GM_NOME=@gmNomeNew;
    --IF( @uiCodigo <> 0 )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA GRUPOMODELO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(GM_NOME,'OK') FROM GRUPOMODELO WHERE GM_CODIGO=@gmCodigoNew;
    --IF( @uiNome IS NOT NULL ) BEGIN
    --  IF( @uiNome <> 'OK' )
    --    RAISERROR('CODIGO JA CADASTRADO NA TABELA GRUPOMODELO %s',15,1,@uiNome);
    --END  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @gmRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@gmRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.GRUPOMODELO( 
      --GM_CODIGO
      GM_CODFBR
      ,GM_NOME
      ,GM_CODGP
      ,GM_ESTOQUE
      ,GM_NUMSERIE
      ,GM_SINCARD
      ,GM_OPERADORA
      ,GM_FONE
      ,GM_VENDA
      ,GM_LOCACAO      
      ,GM_CONTRATO      
      ,GM_GPOBRIGATORIO
      ,GM_GMOBRIGATORIO      
      ,GM_GPACEITO
      ,GM_GMACEITO  
      ,GM_VALORVISTA
      ,GM_VALORPRAZO
      ,GM_VALORMINIMO      
      ,GM_ATIVO
      ,GM_REG
      ,GM_CODUSR) VALUES(
      @gmCodFbrNew         -- GM_CODFBR
      ,@gmNomeNew          -- GM_NOME
      ,@gmCodGpNew         -- GM_CODGP      
      ,0                   -- GM_ESTOQUE
      ,@gmNumSerieNew      -- GM_NUMSERIE
      ,@gmSinCardNew       -- GM_SINCARD
      ,@gmOperadoraNew     -- GM_OPERADORA
      ,@gmFoneNew          -- GM_FONE
      ,@gmVendaNew         -- GM_VENDA
      ,@gmLocacaoNew       -- GM_LOCACAO
      ,@gmContratoNew      -- GM_CONTRATO
      ,@gmGpObrigatorioNew -- GM_GPOBRIGATORIO
      ,@gmGmObrigatorioNew -- GM_GMOBRIGATORIO      
      ,@gmGpAceitoNew      -- GM_GPACEITO
      ,@gmGmAceitoNew      -- GM_GMACEITO      
      ,@gmValorVistaNew    -- GM_VALORVISTA
      ,@gmValorPrazoNew    -- GM_VALORPRAZO
      ,@gmValorMinimoNew   -- GM_VALORMINIMO
      ,@gmAtivoNew         -- GM_ATIVO
      ,@gmRegNew           -- GM_REG
      ,@gmCodUsrNew        -- GM_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOMODELO(
      GM_ACAO
      ,GM_CODIGO
      ,GM_CODFBR      
      ,GM_NOME
      ,GM_CODGP
      ,GM_ESTOQUE
      ,GM_NUMSERIE
      ,GM_SINCARD
      ,GM_OPERADORA
      ,GM_FONE
      ,GM_VENDA
      ,GM_LOCACAO      
      ,GM_CONTRATO
      ,GM_GPOBRIGATORIO
      ,GM_GMOBRIGATORIO      
      ,GM_GPACEITO
      ,GM_GMACEITO      
      ,GM_VALORVISTA
      ,GM_VALORPRAZO
      ,GM_VALORMINIMO      
      ,GM_ATIVO
      ,GM_REG
      ,GM_CODUSR) VALUES(
      'I'                           -- GM_ACAO
      ,IDENT_CURRENT('GRUPOMODELO') -- GM_CODIGO
      ,@gmCodFbrNew                 -- GM_CODFBR
      ,@gmNomeNew                   -- GM_NOME
      ,@gmCodGpNew                  -- GM_CODGP      
      --,@gmEstoqueNew              -- GM_ESTOQUE
      ,0                            -- GM_ESTOQUE
      ,@gmNumSerieNew               -- GM_NUMSERIE
      ,@gmSinCardNew                -- GM_SINCARD
      ,@gmOperadoraNew              -- GM_OPERADORA
      ,@gmFoneNew                   -- GM_FONE
      ,@gmVendaNew                  -- GM_VENDA
      ,@gmLocacaoNew                -- GM_LOCACAO      
      ,@gmContratoNew               -- GM_CONTRATO
      ,@gmGpObrigatorioNew          -- GM_GPOBRIGATORIO
      ,@gmGmObrigatorioNew          -- GM_GMOBRIGATORIO      
      ,@gmGpAceitoNew               -- GM_GPACEITO
      ,@gmGmAceitoNew               -- GM_GMACEITO      
      ,@gmValorVistaNew             -- GM_VALORVISTA
      ,@gmValorPrazoNew             -- GM_VALORPRAZO
      ,@gmValorMinimoNew            -- GM_VALORMINIMO      
      ,@gmAtivoNew                  -- GM_ATIVO
      ,@gmRegNew                    -- GM_REG
      ,@gmCodUsrNew                 -- GM_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELO_BU ON dbo.VGRUPOMODELO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @gmCodigoNew INTEGER;
  DECLARE @gmCodFbrNew INTEGER;
  DECLARE @fvrApelidoNew VARCHAR(15);  
  DECLARE @gmNomeNew VARCHAR(30);
  DECLARE @gmCodGpNew VARCHAR(3);
  DECLARE @gpNomeNew VARCHAR(20);  
  DECLARE @gmEstoqueNew INTEGER;
  DECLARE @gmNumSerieNew VARCHAR(1);
  DECLARE @gmSinCardNew VARCHAR(1);
  DECLARE @gmOperadoraNew VARCHAR(1);
  DECLARE @gmFoneNew VARCHAR(1);
  DECLARE @gmVendaNew VARCHAR(1);
  DECLARE @gmLocacaoNew VARCHAR(1);    
  DECLARE @gmContratoNew VARCHAR(1);
  DECLARE @gmGpObrigatorioNew VARCHAR(40);
  DECLARE @gmGmObrigatorioNew VARCHAR(70);  
  DECLARE @gmGpAceitoNew VARCHAR(40);
  DECLARE @gmGmAceitoNew VARCHAR(70);  
  DECLARE @gmValorVistaNew NUMERIC(15,2);      
  DECLARE @gmValorPrazoNew NUMERIC(15,2);        
  DECLARE @gmValorMinimoNew NUMERIC(15,2);    
  DECLARE @gmAtivoNew VARCHAR(1);
  DECLARE @gmRegNew VARCHAR(1);
  DECLARE @gmCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD11New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @gmCodigoNew         = i.GM_CODIGO
         ,@gmCodFbrNew        = i.GM_CODFBR
         ,@fvrApelidoNew      = COALESCE(FVR.FVR_APELIDO,'ERRO')
         ,@gmNomeNew          = dbo.fncTranslate(i.GM_NOME,30)
         ,@gmCodGpNew         = i.GM_CODGP
         ,@gpNomeNew          = COALESCE(GP.GP_NOME,'ERRO')
         ,@gmEstoqueNew       = i.GM_ESTOQUE
         ,@gmNumSerieNew      = UPPER(i.GM_NUMSERIE)
         ,@gmSinCardNew       = UPPER(i.GM_SINCARD)
         ,@gmOperadoraNew     = UPPER(i.GM_OPERADORA)
         ,@gmFoneNew          = UPPER(i.GM_FONE)
         ,@gmVendaNew         = UPPER(i.GM_VENDA)
         ,@gmLocacaoNew       = UPPER(i.GM_LOCACAO)                  
         ,@gmContratoNew      = UPPER(i.GM_CONTRATO)         
         ,@gmGpObrigatorioNew = dbo.fncTranslate(i.GM_GPOBRIGATORIO,40)
         ,@gmGmObrigatorioNew = dbo.fncTranslate(i.GM_GMOBRIGATORIO,70)
         ,@gmGpAceitoNew      = dbo.fncTranslate(i.GM_GPACEITO,40)
         ,@gmGmAceitoNew      = dbo.fncTranslate(i.GM_GMACEITO,70)
         ,@gmValorVistaNew    = i.GM_VALORVISTA
         ,@gmValorPrazoNew    = i.GM_VALORPRAZO
         ,@gmValorMinimoNew   = i.GM_VALORMINIMO         
         ,@gmAtivoNew         = UPPER(i.GM_ATIVO)
         ,@gmRegNew           = UPPER(i.GM_REG)
         ,@gmCodUsrNew        = i.GM_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD11New           = UP.UP_D11
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.GM_CODFBR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'   
    LEFT OUTER JOIN GRUPOPRODUTO GP ON i.GM_CODGP=GP.GP_CODIGO AND GP.GP_ATIVO='S'        
    LEFT OUTER JOIN USUARIO USR ON i.GM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmCodUsrNew);
    IF( @gmCodGpNew<>'AUT' ) BEGIN  
      IF( @fvrApelidoNew='ERRO' )
        RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@gmCodFbrNew);
      IF( @gpNomeNew='ERRO' )
        RAISERROR('NAO LOCALIZADO EVENTO %s PARA ESTE REGISTRO',15,1,@gmCodGpNew);
    END    
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD11New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 11 PARA ALTERAR NA TABELA GRUPOMODELO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @gmCodigoOld INTEGER;
    DECLARE @gmCodFbrOld INTEGER;
    DECLARE @gmNomeOld VARCHAR(30);
    DECLARE @gmCodGpOld VARCHAR(3);    
    DECLARE @gmEstoqueOld INTEGER;
    DECLARE @gmNumSerieOld VARCHAR(1);
    DECLARE @gmSinCardOld VARCHAR(1);
    DECLARE @gmOperadoraOld VARCHAR(1);
    DECLARE @gmFoneOld VARCHAR(1);
    DECLARE @gmVendaOld VARCHAR(1);
    DECLARE @gmLocacaoOld VARCHAR(1);
    DECLARE @gmContratoOld VARCHAR(1);
    DECLARE @gmGpObrigatorioOld VARCHAR(40);
    DECLARE @gmGmObrigatorioOld VARCHAR(70);  
    DECLARE @gmGpAceitoOld VARCHAR(40);
    DECLARE @gmGmAceitoOld VARCHAR(70);  
    DECLARE @gmValorVistaOld NUMERIC(15,2);      
    DECLARE @gmValorPrazoOld NUMERIC(15,2);        
    DECLARE @gmValorMinimoOld NUMERIC(15,2);        
    DECLARE @gmAtivoOld VARCHAR(1);
    DECLARE @gmRegOld VARCHAR(1);
    DECLARE @gmCodUsrOld INTEGER;
    SELECT @gmCodigoOld         = d.GM_CODIGO
           ,@gmCodFbrOld        = d.GM_CODFBR    
           ,@gmNomeOld          = d.GM_NOME
           ,@gmCodGpOld         = d.GM_CODGP           
           ,@gmEstoqueOld       = d.GM_ESTOQUE
           ,@gmNumSerieOld      = d.GM_NUMSERIE
           ,@gmSinCardOld       = d.GM_SINCARD
           ,@gmOperadoraOld     = d.GM_OPERADORA
           ,@gmFoneOld          = d.GM_FONE
           ,@gmVendaOld         = d.GM_VENDA
           ,@gmLocacaoOld       = d.GM_LOCACAO
           ,@gmContratoOld      = d.GM_CONTRATO
           ,@gmGpObrigatorioOld = d.GM_GPOBRIGATORIO
           ,@gmGmObrigatorioOld = d.GM_GMOBRIGATORIO
           ,@gmGpAceitoOld      = d.GM_GPACEITO
           ,@gmGmAceitoOld      = d.GM_GMACEITO
           ,@gmValorVistaOld    = d.GM_VALORVISTA
           ,@gmValorPrazoOld    = d.GM_VALORPRAZO
           ,@gmValorMinimoOld   = d.GM_VALORMINIMO
           ,@gmAtivoOld         = d.GM_ATIVO
           ,@gmRegOld           = d.GM_REG
           ,@gmCodUsrOld        = d.GM_CODUSR         
      FROM GRUPOMODELO d WHERE d.GM_CODIGO=@gmCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @gmCodigoOld<>@gmCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @gmCodFbrOld<>@gmCodFbrNew )
      RAISERROR('CAMPO FABRICANTE NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @gmNomeOld<>@gmNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(GM_CODIGO,0) FROM GRUPOMODELO WHERE GM_NOME=@gmNomeNew;
    --  IF( @uiCodigo <> 0 )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA GRUPOMODELO COM CODIGO %i',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @gmRegOld <> @gmRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@gmRegOld,@gmRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.GRUPOMODELO
       SET GM_NOME          = @gmNomeNew
          ,GM_ATIVO         = @gmAtivoNew
          ,GM_CODGP         = @gmCodGpNew
          ,GM_ESTOQUE       = @gmEstoqueNew   
          ,GM_NUMSERIE      = @gmNumSerieNew  
          ,GM_SINCARD       = @gmSinCardNew   
          ,GM_OPERADORA     = @gmOperadoraNew 
          ,GM_FONE          = @gmFoneNew      
          ,GM_VENDA         = @gmVendaNew     
          ,GM_LOCACAO       = @gmLocacaoNew     
          ,GM_CONTRATO      = @gmContratoNew     
          ,GM_GPOBRIGATORIO = @gmGpObrigatorioNew
          ,GM_GMOBRIGATORIO = @gmGmObrigatorioNew
          ,GM_GPACEITO      = @gmGpAceitoNew
          ,GM_GMACEITO      = @gmGmAceitoNew
          ,GM_VALORVISTA    = @gmValorVistaNew          
          ,GM_VALORPRAZO    = @gmValorPrazoNew                    
          ,GM_VALORMINIMO   = @gmValorMinimoNew                    
          ,GM_REG           = @gmRegNew
          ,GM_CODUSR        = @gmCodUsrNew
    WHERE GM_CODIGO         = @gmCodigoNew;     
    -- Gravando LOG
    IF( (@gmNomeOld<>@gmNomeNew) OR (@gmCodGpOld<>@gmCodGpNew) OR (@gmEstoqueOld<>@gmEstoqueNew) OR (@gmNumSerieOld<>@gmNumSerieNew) 
     OR (@gmSinCardOld<>@gmSinCardNew) OR (@gmOperadoraOld<>@gmOperadoraNew) OR (@gmFoneOld<>@gmFoneNew) OR (@gmVendaOld<>@gmVendaNew)
     OR (@gmGpObrigatorioOld<>@gmGpObrigatorioNew) OR (@gmGmObrigatorioOld<>@gmGmObrigatorioNew) OR (@gmGpAceitoOld<>@gmGpAceitoNew) OR (@gmGmAceitoOld<>@gmGmAceitoNew)
     OR (@gmValorVistaOld<>@gmValorVistaNew) OR (@gmValorPrazoOld<>@gmValorPrazoNew) OR (@gmValorMinimoOld<>@gmValorMinimoNew)
     OR (@gmLocacaoOld<>@gmLocacaoNew) OR (@gmAtivoOld<>@gmAtivoNew) OR (@gmRegOld<>@gmRegNew) ) BEGIN
      INSERT INTO dbo.BKPGRUPOMODELO(
        GM_ACAO
        ,GM_CODIGO
        ,GM_CODFBR      
        ,GM_NOME
        ,GM_CODGP
        ,GM_ESTOQUE
        ,GM_NUMSERIE
        ,GM_SINCARD
        ,GM_OPERADORA
        ,GM_FONE
        ,GM_VENDA
        ,GM_LOCACAO        
        ,GM_CONTRATO        
        ,GM_GPOBRIGATORIO
        ,GM_GMOBRIGATORIO      
        ,GM_GPACEITO
        ,GM_GMACEITO      
        ,GM_VALORVISTA
        ,GM_VALORPRAZO
        ,GM_VALORMINIMO        
        ,GM_ATIVO
        ,GM_REG
        ,GM_CODUSR) VALUES(
        'A'                  -- GM_ACAO
        ,@gmCodigoNew        -- GM_CODIGO
        ,@gmCodFbrNew        -- GM_CODFBR
        ,@gmNomeNew          -- GM_NOME
        ,@gmCodGpNew         -- GM_CODGP      
        ,@gmEstoqueNew       -- GM_ESTOQUE
        ,@gmNumSerieNew      -- GM_NUMSERIE
        ,@gmSinCardNew       -- GM_SINCARD
        ,@gmOperadoraNew     -- GM_OPERADORA
        ,@gmFoneNew          -- GM_FONE
        ,@gmVendaNew         -- GM_VENDA
        ,@gmLocacaoNew       -- GM_LOCACAO        
        ,@gmContratoNew      -- GM_CONTRATO
        ,@gmGpObrigatorioNew -- GM_GPOBRIGATORIO
        ,@gmGmObrigatorioNew -- GM_GMOBRIGATORIO      
        ,@gmGpAceitoNew      -- GM_GPACEITO
        ,@gmGmAceitoNew      -- GM_GMACEITO      
        ,@gmValorVistaNew    -- GM_VALORVISTA
        ,@gmValorPrazoNew    -- GM_VALORPRAZO
        ,@gmValorMinimoNew   -- GM_VALORMINIMO
        ,@gmAtivoNew         -- GM_ATIVO
        ,@gmRegNew           -- GM_REG
        ,@gmCodUsrNew        -- GM_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELO_BD ON dbo.VGRUPOMODELO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gmCodigoOld INTEGER;
  DECLARE @gmCodFbrOld INTEGER;
  DECLARE @gmNomeOld VARCHAR(30);
  DECLARE @gmCodGpOld VARCHAR(5);      
  DECLARE @gmEstoqueOld INTEGER;
  DECLARE @gmNumSerieOld VARCHAR(1);
  DECLARE @gmSinCardOld VARCHAR(1);
  DECLARE @gmOperadoraOld VARCHAR(1);
  DECLARE @gmFoneOld VARCHAR(1);
  DECLARE @gmVendaOld VARCHAR(1);
  DECLARE @gmLocacaoOld VARCHAR(1);    
  DECLARE @gmContratoOld VARCHAR(1);  
  DECLARE @gmGpObrigatorioOld VARCHAR(40);
  DECLARE @gmGmObrigatorioOld VARCHAR(70);  
  DECLARE @gmGpAceitoOld VARCHAR(40);
  DECLARE @gmGmAceitoOld VARCHAR(70);  
  DECLARE @gmValorVistaOld NUMERIC(15,2);      
  DECLARE @gmValorPrazoOld NUMERIC(15,2);        
  DECLARE @gmValorMinimoOld NUMERIC(15,2);        
  DECLARE @gmAtivoOld VARCHAR(1);
  DECLARE @gmRegOld VARCHAR(1);
  DECLARE @gmCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD11Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gmCodigoOld         = d.GM_CODIGO
         ,@gmCodFbrOld        = d.GM_CODFBR      
         ,@gmNomeOld          = d.GM_NOME
         ,@gmCodGpOld         = d.GM_CODGP         
         ,@gmEstoqueOld       = d.GM_ESTOQUE
         ,@gmNumSerieOld      = d.GM_NUMSERIE
         ,@gmSinCardOld       = d.GM_SINCARD
         ,@gmOperadoraOld     = d.GM_OPERADORA
         ,@gmFoneOld          = d.GM_FONE
         ,@gmVendaOld         = d.GM_VENDA
         ,@gmLocacaoOld       = d.GM_LOCACAO
         ,@gmContratoOld      = d.GM_CONTRATO
         ,@gmGpObrigatorioOld = d.GM_GPOBRIGATORIO
         ,@gmGmObrigatorioOld = d.GM_GMOBRIGATORIO
         ,@gmGpAceitoOld      = d.GM_GPACEITO
         ,@gmGmAceitoOld      = d.GM_GMACEITO
         ,@gmValorVistaOld    = d.GM_VALORVISTA
         ,@gmValorPrazoOld    = d.GM_VALORPRAZO
         ,@gmValorMinimoOld   = d.GM_VALORMINIMO
         ,@gmAtivoOld         = d.GM_ATIVO
         ,@gmRegOld           = d.GM_REG
         ,@gmCodUsrOld        = d.GM_CODUSR         
         ,@usrApelidoOld      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD11Old           = UP.UP_D11
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.GM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD11Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 11 PARA EXCLUIR NA TABELA GRUPOMODELO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@gmRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@gmCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('GRUPOMODELO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@gmCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('GRUPOMODELO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.GRUPOMODELO WHERE GM_CODIGO=@gmCodigoOld AND GM_CODFBR=@gmCodFbrOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOMODELO(
      GM_ACAO
      ,GM_CODIGO
      ,GM_CODFBR      
      ,GM_NOME
      ,GM_CODGP
      ,GM_ESTOQUE
      ,GM_NUMSERIE
      ,GM_SINCARD
      ,GM_OPERADORA
      ,GM_FONE
      ,GM_VENDA
      ,GM_LOCACAO      
      ,GM_CONTRATO 
      ,GM_GPOBRIGATORIO
      ,GM_GMOBRIGATORIO      
      ,GM_GPACEITO
      ,GM_GMACEITO      
      ,GM_VALORVISTA
      ,GM_VALORPRAZO
      ,GM_VALORMINIMO
      ,GM_ATIVO
      ,GM_REG
      ,GM_CODUSR) VALUES(
      'E'                  -- GM_ACAO
      ,@gmCodigoOld        -- GM_CODIGO
      ,@gmCodFbrOld        -- GM_CODFBR
      ,@gmNomeOld          -- GM_NOME
      ,@gmCodGpOld         -- GM_CODGP      
      ,@gmEstoqueOld       -- GM_ESTOQUE
      ,@gmNumSerieOld      -- GM_NUMSERIE
      ,@gmSinCardOld       -- GM_SINCARD
      ,@gmOperadoraOld     -- GM_OPERADORA
      ,@gmFoneOld          -- GM_FONE
      ,@gmVendaOld         -- GM_VENDA
      ,@gmLocacaoOld       -- GM_LOCACAO      
      ,@gmContratoOld      -- GM_CONTRATO
      ,@gmGpObrigatorioOld -- GM_GPOBRIGATORIO
      ,@gmGmObrigatorioOld -- GM_GMOBRIGATORIO      
      ,@gmGpAceitoOld      -- GM_GPACEITO
      ,@gmGmAceitoOld      -- GM_GMACEITO      
      ,@gmValorVistaOld    -- GM_VALORVISTA
      ,@gmValorPrazoOld    -- GM_VALORPRAZO
      ,@gmValorMinimoOld   -- GM_VALORMINIMO
      ,@gmAtivoOld         -- GM_ATIVO
      ,@gmRegOld           -- GM_REG
      ,@gmCodUsrOld        -- GM_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPGRUPOMODELO_BUD ON dbo.BKPGRUPOMODELO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                       G R U P O M O D E L O L O T E                             --
--trggrupomodelolote
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELOLOTE_BI ON dbo.VGRUPOMODELOLOTE
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS      |UPD |DEL | TIPO               | Obs
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------
  -- GML_CODIGO     | FNC     |    |    | INT NN             |
  -- GML_CODGM      |         |    |    | INT NN             | Campo relacionado (GRUPOMODELO)  
  -- GM_NOME        |         |    |    | VC(20) NN          | Campo relacionado (GRUPOPRODUTO)    
  -- GML_DATA       |         |    |    | DAT NN             | Data da entrada em estoque
  -- GML_ENTRADA    |         |    |    | INT NN             | Quantidade de modelo importados
  -- GML_CODGMPINI  |         |    |    | INT NN             | Primeiro codigo(GRUPOMODELOPRODUTO) importado ( Para abertura )
  -- GML_CODGMPFIM  |         |    |    | INT NN             | Ultimo codigo(GRUPOMODELOPRODUTO) importado ( Para abertura )
  -- GML_CODUSR     |         |    |    | INT NN             | Usuario responsavel pela importacao
  -- USR_APELIDO    | SEL     |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL     |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D35         | SEL     |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL     |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gmlCodigoNew INTEGER;
  DECLARE @gmlCodGmNew INTEGER;
  DECLARE @gmNomeNew  VARCHAR(20);
  DECLARE @gmlDataNew  DATE;
  DECLARE @gmlEntradaNew INTEGER;
  DECLARE @gmlCodGmpIni INTEGER;
  DECLARE @gmlCodGmpFim INTEGER;
  DECLARE @gmlCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD35New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gmlCodigoNew    = i.GML_CODIGO   
         ,@gmlCodGmNew    = i.GML_CODGM    
         ,@gmNomeNew      = COALESCE(GM.GM_NOME,'ERRO')         
         ,@gmlDataNew     = i.GML_DATA     
         ,@gmlEntradaNew  = i.GML_ENTRADA  
         ,@gmlCodGmpIni   = i.GML_CODGMPINI
         ,@gmlCodGmpFim   = i.GML_CODGMPFIM
         ,@gmlCodUsrNew   = i.GML_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD35New       = UP.UP_D35
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN GRUPOMODELO GM ON i.GML_CODGM=GM.GM_CODIGO AND GM.GM_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.GML_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmlCodUsrNew);
    IF( @gmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO_MODELO %s PARA ESTE REGISTRO',15,1,@gmlCodGmNew);
    --  
    INSERT INTO dbo.GRUPOMODELOLOTE( 
      GML_CODIGO
      ,GML_CODGM
      ,GML_DATA
      ,GML_ENTRADA
      ,GML_CODGMPINI
      ,GML_CODGMPFIM
      ,GML_CODUSR) VALUES(
      @gmlCodigoNew     -- GML_CODIGO
      ,@gmlCodGmNew     -- GML_CODGM
      ,@gmlDataNew      -- GML_DATA
      ,@gmlEntradaNew   -- GML_ENTRADA
      ,@gmlCodGmpIni    -- GML_CODGMPINI
      ,@gmlCodGmpFim    -- GML_CODGMPFIM
      ,@gmlCodUsrNew    -- GML_CODUSR
    );
    -- Gravando LOG
    /*
    INSERT INTO dbo.BKPGRUPOMODELOLOTE(
      GML_ACAO
      ,GML_CODFVR
      ,GML_CODEMP
      ,GML_ATIVO
      ,GML_REG
      ,GML_CODUSR) VALUES(
      'I'                         -- GML_ACAO
      ,@gmlCodFvrNew              -- GML_CODFVR
      ,@gmlCodEmpNew              -- GML_CODEMP
      ,@gmlAtivoNew               -- GML_ATIVO
      ,@gmlRegNew                 -- GML_REG
      ,@gmlCodUsrNew              -- GML_CODUSR
    );  
    */
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
-------------------------------------------------------------------------------------
--                        G R U P O M O D E L O S E R V I C O
--trggrupomodeloservico
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELOSERVICO_BI ON dbo.VGRUPOMODELOSERVICO
INSTEAD OF INSERT 
AS
BEGIN
  -- -------------------|--------|----|----|--------------------|----------------------------------------------------------
  -- CAMPO              |INS     |UPD |DEL | TIPO               | Obs
  -- -------------------|--------|----|----|--------------------|----------------------------------------------------------
  -- GMS_CODGM          | PK     |    |    | INT NN             | Campo relacionado (GRUPOMODELO)
  -- GM_NOME            | SEL    |    |    | VC(30) NN          | Campo relacionado (GRUPOMODELO)  
  -- GMS_CODSRV         | PK     |    |    | INT NN             | Campo relacionado (SERVICO)
  -- SRV_NOME           | SEL    |    |    | VC(60) NN          | Campo relacionado (SERVICO)    
  -- GMS_VENDALOCACAO   | PK(CC) |    |    | VC(1) NN           | V/L
  -- GMS_MENSAL         | CC     |    |    | VC(1) NN           | S/N   
  -- GMS_OBRIGATORIO    | CC     |    |    | VC(1) NN           | S/N     
  -- GMS_VALOR          | CC     |    |    | NUM(15,2) NN       |    
  -- GMS_ATIVO          | CC     |    |    | VC(1) NN           |
  -- GMS_REG            | CC     |    |    | VC(1) NN           |
  -- GMS_CODUSR         |        |    |    | INT NN             |
  -- USR_APELIDO        | SEL    |    |    | VC(15) NN          |
  -- USR_ADMPUB         | CC     |    |    | VC(1) NN           |    
  -- UP.UP_D11          | SEL    |    |    | INT NN             | Recupera o direito de usuario para esta tabela   
  -- UP_D31             | SEL    |    |    | INT NN             | PRD-AUT | Recupera o direito se pode transformar registro do sistema  
  -- -------------------|--------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- -------------------|--------|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @pkCodigo INTEGER = 0;        -- Para procurar primary key
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gmsCodGmNew INTEGER;           -- GMS_CODGM
  DECLARE @gmNomeNew VARCHAR(30);         -- GM_NOME
  DECLARE @gmsCodSrvNew INTEGER;          -- GMS_CODSRV
  DECLARE @srvNomeNew VARCHAR(60);        -- SRV_NOME
  DECLARE @gmsVendaLocacaoNew VARCHAR(1); -- GMS_VENDALOCACAO
  DECLARE @gmsMensalNew VARCHAR(1);       -- GMS_MENSAL
  DECLARE @gmsObrigatorioNew VARCHAR(1);  -- GMS_OBRIGATORIO
  DECLARE @gmsValorNew NUMERIC(15,2);     -- GMS_VALOR
  DECLARE @gmsAtivoNew VARCHAR(1);        -- GMS_ATIVO
  DECLARE @gmsRegNew VARCHAR(1);          -- GMS_REG
  DECLARE @gmsCodUsrNew INTEGER;          -- GMS_CODUSR
  DECLARE @usrApelidoNew VARCHAR(15);     -- USR_APELIDO
  DECLARE @usrAdmPubNew VARCHAR(01);      -- USR_ADMPUB
  DECLARE @upD11New INTEGER;              -- UP.UP_D11
  DECLARE @upD31New INTEGER;              -- UP_D31
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gmsCodGmNew         = i.GMS_CODGM
         ,@gmNomeNew          = COALESCE(GM.GM_NOME,'ERRO')
         ,@gmsCodSrvNew       = i.GMS_CODSRV
         ,@srvNomeNew         = COALESCE(SRV.SRV_NOME,'ERRO')
         ,@gmsVendaLocacaoNew = UPPER(i.GMS_VENDALOCACAO)
         ,@gmsMensalNew       = UPPER(i.GMS_MENSAL)
         ,@gmsObrigatorioNew  = UPPER(i.GMS_OBRIGATORIO)
         ,@gmsValorNew        = i.GMS_VALOR
         ,@gmsAtivoNew        = UPPER(i.GMS_ATIVO)
         ,@gmsRegNew          = UPPER(i.GMS_REG)
         ,@gmsCodUsrNew       = i.GMS_CODUSR
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD11New           = UP.UP_D11
         ,@upD31New           = UP_D31
    FROM inserted i
    LEFT OUTER JOIN GRUPOMODELO GM ON i.GMS_CODGM=GM.GM_CODIGO AND GM.GM_ATIVO='S'    
    LEFT OUTER JOIN SERVICO SRV ON i.GMS_CODSRV=SRV.SRV_CODIGO AND SRV.SRV_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.GMS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    ----------------------------------------------------
    -- VERIFICANDO A FOREIGN KEYs SE FOR PRODUTO OU AUTO
    ----------------------------------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmsCodUsrNew);
    IF( @gmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPOMODELO %i PARA ESTE REGISTRO',15,1,@gmsCodGmNew);
    IF( @srvNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO SERVICO %i PARA ESTE REGISTRO',15,1,@gmsCodSrvNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD11New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 11 PARA INCLUIR NA TABELA GRUPOMODELOSERVICO',15,1,@usrApelidoNew);
    -------------------------------------------------------------
    -- Checando a primary key
    -------------------------------------------------------------
    SELECT @pkCodigo=COALESCE(GMS_CODGM,NULL) FROM GRUPOMODELOSERVICO 
     WHERE ( (GMS_CODGM=@gmsCodGmNew) AND (GMS_CODSRV=@gmsCodSrvNew) AND (GMS_VENDALOCACAO=@gmsVendaLocacaoNew) );
    IF( @@rowcount>0 )
      RAISERROR('REGISTRO JA CADASTRADO COM O CODIGO %i',15,1,@pkCodigo);       
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @gmsRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@gmsRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.GRUPOMODELOSERVICO( 
      GMS_CODGM
      ,GMS_CODSRV
      ,GMS_VENDALOCACAO
      ,GMS_MENSAL
      ,GMS_OBRIGATORIO
      ,GMS_VALOR
      ,GMS_ATIVO
      ,GMS_REG
      ,GMS_CODUSR) VALUES(
      @gmsCodGmNew        -- GMS_CODGM
      ,@gmsCodSrvNew       -- GMS_CODSRV
      ,@gmsVendaLocacaoNew -- GMS_VENDALOCACAO
      ,@gmsMensalNew       -- GMS_MENSAL
      ,@gmsObrigatorioNew  -- GMS_OBRIGATORIO
      ,@gmsValorNew        -- GMS_VALOR
      ,@gmsAtivoNew        -- GMS_ATIVO
      ,@gmsRegNew          -- GMS_REG
      ,@gmsCodUsrNew       -- GMS_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOMODELOSERVICO( 
      GMS_ACAO
      ,GMS_CODGM
      ,GMS_CODSRV
      ,GMS_VENDALOCACAO
      ,GMS_MENSAL
      ,GMS_OBRIGATORIO
      ,GMS_VALOR
      ,GMS_ATIVO
      ,GMS_REG
      ,GMS_CODUSR) VALUES(
      'I'                  -- GMS_ACAO
      ,@gmsCodGmNew        -- GMS_CODGM
      ,@gmsCodSrvNew       -- GMS_CODSRV
      ,@gmsVendaLocacaoNew -- GMS_VENDALOCACAO
      ,@gmsMensalNew       -- GMS_MENSAL
      ,@gmsObrigatorioNew  -- GMS_OBRIGATORIO
      ,@gmsValorNew        -- GMS_VALOR
      ,@gmsAtivoNew        -- GMS_ATIVO
      ,@gmsRegNew          -- GMS_REG
      ,@gmsCodUsrNew       -- GMS_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELOSERVICO_BU ON dbo.VGRUPOMODELOSERVICO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @gmsCodGmNew INTEGER;           -- GMS_CODGM
  DECLARE @gmNomeNew VARCHAR(30);         -- GM_NOME
  DECLARE @gmsCodSrvNew INTEGER;          -- GMS_CODSRV
  DECLARE @srvNomeNew VARCHAR(60);        -- SRV_NOME
  DECLARE @gmsVendaLocacaoNew VARCHAR(1); -- GMS_VENDALOCACAO
  DECLARE @gmsMensalNew VARCHAR(1);       -- GMS_MENSAL
  DECLARE @gmsObrigatorioNew VARCHAR(1);  -- GMS_OBRIGATORIO
  DECLARE @gmsValorNew NUMERIC(15,2);     -- GMS_VALOR
  DECLARE @gmsAtivoNew VARCHAR(1);        -- GMS_ATIVO
  DECLARE @gmsRegNew VARCHAR(1);          -- GMS_REG
  DECLARE @gmsCodUsrNew INTEGER;          -- GMS_CODUSR
  DECLARE @usrApelidoNew VARCHAR(15);     -- USR_APELIDO
  DECLARE @usrAdmPubNew VARCHAR(01);      -- USR_ADMPUB
  DECLARE @upD11New INTEGER;              -- UP.UP_D11
  DECLARE @upD31New INTEGER;              -- UP_D31
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @gmsCodGmNew         = i.GMS_CODGM
         ,@gmNomeNew          = COALESCE(GM.GM_NOME,'ERRO')
         ,@gmsCodSrvNew       = i.GMS_CODSRV
         ,@srvNomeNew         = COALESCE(SRV.SRV_NOME,'ERRO')
         ,@gmsVendaLocacaoNew = UPPER(i.GMS_VENDALOCACAO)
         ,@gmsMensalNew       = UPPER(i.GMS_MENSAL)
         ,@gmsObrigatorioNew  = UPPER(i.GMS_OBRIGATORIO)
         ,@gmsValorNew        = i.GMS_VALOR
         ,@gmsAtivoNew        = UPPER(i.GMS_ATIVO)
         ,@gmsRegNew          = UPPER(i.GMS_REG)
         ,@gmsCodUsrNew       = i.GMS_CODUSR
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD11New           = UP.UP_D11
         ,@upD31New           = UP_D31
    FROM inserted i
    LEFT OUTER JOIN GRUPOMODELO GM ON i.GMS_CODGM=GM.GM_CODIGO AND GM.GM_ATIVO='S'    
    LEFT OUTER JOIN SERVICO SRV ON i.GMS_CODSRV=SRV.SRV_CODIGO AND SRV.SRV_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.GMS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmsCodUsrNew);
    IF( @gmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPOMODELO %i PARA ESTE REGISTRO',15,1,@gmsCodGmNew);
    IF( @srvNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO SERVICO %i PARA ESTE REGISTRO',15,1,@gmsCodSrvNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD11New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 11 PARA ALTERAR NA TABELA GRUPOMODELOSERVICO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @gmsCodGmOld INTEGER;
    DECLARE @gmsCodSrvOld INTEGER;
    DECLARE @gmsVendaLocacaoOld VARCHAR(1);
    DECLARE @gmsMensalOld VARCHAR(1);
    DECLARE @gmsObrigatorioOld VARCHAR(1);
    DECLARE @gmsValorOld NUMERIC(15,2);
    DECLARE @gmsAtivoOld VARCHAR(1);
    DECLARE @gmsRegOld VARCHAR(1);
    DECLARE @gmsCodUsrOld INTEGER;
    
    SELECT @gmsCodGmOld         = d.GMS_CODGM
           ,@gmsCodSrvOld       = d.GMS_CODSRV
           ,@gmsVendaLocacaoOld = d.GMS_VENDALOCACAO
           ,@gmsMensalOld       = d.GMS_MENSAL
           ,@gmsObrigatorioOld  = d.GMS_OBRIGATORIO
           ,@gmsValorOld        = d.GMS_VALOR
           ,@gmsAtivoOld        = d.GMS_ATIVO
           ,@gmsRegOld          = d.GMS_REG
           ,@gmsCodUsrOld       = d.GMS_CODUSR
      FROM GRUPOMODELOSERVICO d WHERE ((d.GMS_CODGM=@gmsCodGmNew) AND (d.GMS_CODSRV=@gmsCodSrvNew) AND (d.GMS_VENDALOCACAO=@gmsVendaLocacaoNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @gmsCodGmOld<>@gmsCodGmNew )
      RAISERROR('CAMPO MODELO NAO PODE SER ALTERADO',15,1);  
    IF( @gmsCodSrvOld<>@gmsCodSrvNew )
      RAISERROR('CAMPO SERVICO NAO PODE SER ALTERADO',15,1);  
    IF( @gmsVendaLocacaoOld<>@gmsVendaLocacaoNew )
      RAISERROR('CAMPO VENDA_LOCACAO NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @gmsRegOld <> @gmsRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@gmsRegOld,@gmsRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.GRUPOMODELOSERVICO
       SET GMS_MENSAL       = @gmsMensalNew
           ,GMS_OBRIGATORIO = @gmsObrigatorioNew
           ,GMS_VALOR       = @gmsValorNew
           ,GMS_ATIVO       = @gmsAtivoNew
           ,GMS_REG         = @gmsRegNew
           ,GMS_CODUSR      = @gmsCodUsrNew
     WHERE ((GMS_CODGM=@gmsCodGmNew) AND (GMS_CODSRV=@gmsCodSrvNew) AND (GMS_VENDALOCACAO=@gmsVendaLocacaoNew));      
    -- Gravando LOG
    
    IF((@gmsMensalOld<>@gmsMensalNew) OR (@gmsObrigatorioOld<>@gmsObrigatorioNew) OR (@gmsValorOld<>@gmsValorNew) OR (@gmsAtivoOld<>@gmsAtivoNew) 
    OR (@gmsRegOld<>@gmsRegNew) OR (@gmsCodUsrOld<>@gmsCodUsrNew) ) BEGIN
      INSERT INTO dbo.BKPGRUPOMODELOSERVICO( 
        GMS_ACAO
        ,GMS_CODGM
        ,GMS_CODSRV
        ,GMS_VENDALOCACAO
        ,GMS_MENSAL
        ,GMS_OBRIGATORIO
        ,GMS_VALOR
        ,GMS_ATIVO
        ,GMS_REG
        ,GMS_CODUSR) VALUES(
        'A'                  -- GMS_ACAO
        ,@gmsCodGmNew        -- GMS_CODGM
        ,@gmsCodSrvNew       -- GMS_CODSRV
        ,@gmsVendaLocacaoNew -- GMS_VENDALOCACAO
        ,@gmsMensalNew       -- GMS_MENSAL
        ,@gmsObrigatorioNew  -- GMS_OBRIGATORIO
        ,@gmsValorNew        -- GMS_VALOR
        ,@gmsAtivoNew        -- GMS_ATIVO
        ,@gmsRegNew          -- GMS_REG
        ,@gmsCodUsrNew       -- GMS_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELOSERVICO_BD ON dbo.VGRUPOMODELOSERVICO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gmsCodGmOld INTEGER;
  DECLARE @gmsCodSrvOld INTEGER;
  DECLARE @gmsVendaLocacaoOld VARCHAR(1);
  DECLARE @gmsMensalOld VARCHAR(1);
  DECLARE @gmsObrigatorioOld VARCHAR(1);
  DECLARE @gmsValorOld NUMERIC(15,2);
  DECLARE @gmsAtivoOld VARCHAR(1);
  DECLARE @gmsRegOld VARCHAR(1);
  DECLARE @gmsCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD11Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gmsCodGmOld         = d.GMS_CODGM
         ,@gmsCodSrvOld       = d.GMS_CODSRV
         ,@gmsVendaLocacaoOld = d.GMS_VENDALOCACAO
         ,@gmsMensalOld       = d.GMS_MENSAL
         ,@gmsObrigatorioOld  = d.GMS_OBRIGATORIO
         ,@gmsValorOld        = d.GMS_VALOR
         ,@gmsAtivoOld        = d.GMS_ATIVO
         ,@gmsRegOld          = d.GMS_REG
         ,@gmsCodUsrOld       = d.GMS_CODUSR
         ,@usrApelidoOld      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD11Old           = UP.UP_D11
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.GMS_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmsCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD11Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 11 PARA EXCLUIR NA TABELA GRUPOMODELOSERVICO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@gmsRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    DELETE FROM dbo.GRUPOMODELOSERVICO WHERE ((GMS_CODGM=@gmsCodGmOld) AND (GMS_CODSRV=@gmsCodSrvOld) AND (GMS_VENDALOCACAO=@gmsVendaLocacaoOld));          
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOMODELOSERVICO( 
      GMS_ACAO
      ,GMS_CODGM
      ,GMS_CODSRV
      ,GMS_VENDALOCACAO
      ,GMS_MENSAL
      ,GMS_OBRIGATORIO
      ,GMS_VALOR
      ,GMS_ATIVO
      ,GMS_REG
      ,GMS_CODUSR) VALUES(
      'E'                  -- GMS_ACAO
      ,@gmsCodGmOld        -- GMS_CODGM
      ,@gmsCodSrvOld       -- GMS_CODSRV
      ,@gmsVendaLocacaoOld -- GMS_VENDALOCACAO
      ,@gmsMensalOld       -- GMS_MENSAL
      ,@gmsObrigatorioOld  -- GMS_OBRIGATORIO
      ,@gmsValorOld        -- GMS_VALOR
      ,@gmsAtivoOld        -- GMS_ATIVO
      ,@gmsRegOld          -- GMS_REG
      ,@gmsCodUsrOld       -- GMS_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPGRUPOMODELOSERVICO_BUD ON dbo.BKPGRUPOMODELOSERVICO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                           P R O D U T O G R U P O                               --
--trgGRUPOPRODUTO
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewGRUPOPRODUTO_BI ON dbo.VGRUPOPRODUTO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- GP_CODIGO      | PK  |    |    | VC(03) NN          |
  -- GP_NOME        |     |    |    | VC(20) NN          |
  -- GP_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- GP_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- GP_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D33         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gpCodigoNew VARCHAR(3);
  DECLARE @gpNomeNew VARCHAR(20);
  DECLARE @gpAtivoNew VARCHAR(1);
  DECLARE @gpRegNew VARCHAR(1);
  DECLARE @gpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gpCodigoNew   = dbo.fncTranslate(i.GP_CODIGO,3)
         ,@gpNomeNew    = dbo.fncTranslate(i.GP_NOME,20)
         ,@gpAtivoNew   = UPPER(i.GP_ATIVO)
         ,@gpRegNew     = UPPER(i.GP_REG)
         ,@gpCodUsrNew  = i.GP_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.GP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA INCLUIR NA TABELA GRUPOPRODUTO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(GP_CODIGO,'OK') FROM GRUPOPRODUTO WHERE GP_NOME=@gpNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA GRUPOPRODUTO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(GP_NOME,'OK') FROM GRUPOPRODUTO WHERE GP_CODIGO=@gpCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA GRUPOPRODUTO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @gpRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@gpRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.GRUPOPRODUTO( 
      GP_CODIGO
      ,GP_NOME
      ,GP_ATIVO
      ,GP_REG
      ,GP_CODUSR) VALUES(
      @gpCodigoNew   -- GP_CODIGO
      ,@gpNomeNew    -- GP_NOME
      ,@gpAtivoNew   -- GP_ATIVO
      ,@gpRegNew     -- GP_REG
      ,@gpCodUsrNew  -- GP_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOPRODUTO(
      GP_ACAO
      ,GP_CODIGO
      ,GP_NOME
      ,GP_ATIVO
      ,GP_REG
      ,GP_CODUSR) VALUES(
      'I'                      -- GP_ACAO
      ,@gpCodigoNew            -- GP_CODIGO
      ,@gpNomeNew              -- GP_NOME
      ,@gpAtivoNew             -- GP_ATIVO
      ,@gpRegNew               -- GP_REG
      ,@gpCodUsrNew            -- GP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOPRODUTO_BU ON dbo.VGRUPOPRODUTO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @gpCodigoNew VARCHAR(3);
  DECLARE @gpNomeNew VARCHAR(20);
  DECLARE @gpAtivoNew VARCHAR(1);
  DECLARE @gpRegNew VARCHAR(1);
  DECLARE @gpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @gpCodigoNew   = i.GP_CODIGO
         ,@gpNomeNew    = dbo.fncTranslate(i.GP_NOME,20)
         ,@gpAtivoNew   = UPPER(i.GP_ATIVO)
         ,@gpRegNew     = UPPER(i.GP_REG)
         ,@gpCodUsrNew  = i.GP_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.GP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA ALTERAR NA TABELA GRUPOPRODUTO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @gpCodigoOld VARCHAR(3);
    DECLARE @gpNomeOld VARCHAR(20);
    DECLARE @gpAtivoOld VARCHAR(1);
    DECLARE @gpRegOld VARCHAR(1);
    DECLARE @gpCodUsrOld INTEGER;
    SELECT @gpCodigoOld   = d.GP_CODIGO
           ,@gpNomeOld    = d.GP_NOME
           ,@gpAtivoOld   = d.GP_ATIVO
           ,@gpRegOld     = d.GP_REG
           ,@gpCodUsrOld  = d.GP_CODUSR         
      FROM GRUPOPRODUTO d WHERE d.GP_CODIGO=@gpCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @gpCodigoOld<>@gpCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @gpNomeOld<>@gpNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(GP_CODIGO,'OK') FROM GRUPOPRODUTO WHERE GP_NOME=@gpNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA GRUPOPRODUTO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @gpRegOld <> @gpRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@gpRegOld,@gpRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.GRUPOPRODUTO
       SET GP_NOME   = @gpNomeNew
          ,GP_ATIVO  = @gpAtivoNew
          ,GP_REG    = @gpRegNew
          ,GP_CODUSR = @gpCodUsrNew
    WHERE GP_CODIGO  = @gpCodigoNew;     
    -- Gravando LOG
    IF( (@gpNomeOld<>@gpNomeNew) OR (@gpAtivoOld<>@gpAtivoNew) OR (@gpRegOld<>@gpRegNew) ) BEGIN
      INSERT INTO dbo.BKPGRUPOPRODUTO(
        GP_ACAO
        ,GP_CODIGO
        ,GP_NOME
        ,GP_ATIVO
        ,GP_REG
        ,GP_CODUSR) VALUES(
        'A'            -- GP_ACAO
        ,@gpCodigoNew  -- GP_CODIGO
        ,@gpNomeNew    -- GP_NOME
        ,@gpAtivoNew   -- GP_ATIVO
        ,@gpRegNew     -- GP_REG
        ,@gpCodUsrNew  -- GP_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOPRODUTO_BD ON dbo.VGRUPOPRODUTO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntFbr INTEGER = 0;  -- Para procurar campo foreign key int (FABRICANTE)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gpCodigoOld VARCHAR(3);
  DECLARE @gpNomeOld VARCHAR(20);
  DECLARE @gpAtivoOld VARCHAR(1);
  DECLARE @gpRegOld VARCHAR(1);
  DECLARE @gpCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD33Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gpCodigoOld   = d.GP_CODIGO
         ,@gpNomeOld    = d.GP_NOME
         ,@gpAtivoOld   = d.GP_ATIVO
         ,@gpRegOld     = d.GP_REG
         ,@gpCodUsrOld  = d.GP_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33Old      = UP.UP_D33
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.GP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gpCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD33Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA EXCLUIR NA TABELA GRUPOPRODUTO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@gpRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    -----------------------------------------
    --   Checando a FK FBR_CODFVR(FABRICANTE)
    -----------------------------------------
    SELECT TOP 1 @fkIntFbr=COALESCE(FBR_CODFVR,0) FROM FABRICANTE WHERE FBR_CODGP=@gpCodigoOld;
    IF( @fkIntFbr > 0 )
      RAISERROR('GRUPO UTILIZADO NO FABRICANTE %i',15,1,@fkIntFbr);
    --
    --
    DELETE FROM dbo.GRUPOPRODUTO WHERE GP_CODIGO=@gpCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOPRODUTO(
      GP_ACAO
      ,GP_CODIGO
      ,GP_NOME
      ,GP_ATIVO
      ,GP_REG
      ,GP_CODUSR) VALUES(
      'E'              -- GP_ACAO
      ,@gpCodigoOld    -- GP_CODIGO
      ,@gpNomeOld      -- GP_NOME
      ,@gpAtivoOld     -- GP_ATIVO
      ,@gpRegOld       -- GP_REG
      ,@gpCodUsrOld    -- GP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPGRUPOPRODUTO_BUD ON dbo.BKPGRUPOPRODUTO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                       I M P O S T O
-- trgimposto
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewIMPOSTO_BI ON dbo.VIMPOSTO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|--------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS     |UPD |DEL | TIPO               | Obs
  -- ---------------|--------|----|----|--------------------|----------------------------------------------------------
  -- IMP_UFDE       | PK/SEL |    |    | VC(03) NN          | Campo relacionado (ESTADO)   
  -- EST_NOME       | SEL    |    |    | VC(20) NN          | Campo relacionado (ESTADO)         
  -- IMP_UFPARA     | PK/SEL |    |    | VC(03) NN          | Campo relacionado (ESTADO)   
  -- EST_NOME       | SEL    |    |    | VC(20) NN          | Campo relacionado (ESTADO)         
  -- IMP_CODNCM     | PK/SEL |    |    | VC(10) NN          | Campo relacionado (NCM)   
  -- NCM_NOME       | SEL    |    |    | VC(60) NN          | Campo relacionado (NCM)   
  -- IMP_CODCTG     | PK/SEL |    |    | VC(3) NN           | Campo relacionado (CATEGORIA)   
  -- CTG_NOME       | SEL    |    |    | VC(20) NN          | Campo relacionado (CATEGORIA) 
  -- IMP_ENTSAI     | PK/CC  |    |    | VC(1) NN           |  
  -- IMP_CODNO      | PK/SEL |    |    | VC(2) NN           | Campo relacionado (NATUREZAOPERACAO)
  -- NO_NOME        | SEL    |    |    | VC(30) NN          | Campo relacionado (NATUREZAOPERACAO)    
  -- IMP_CFOP       | SEL    |    |    | VC(5) NN           | Campo relacionado (CFOP)      
  -- CFO_NOME       | SEL    |    |    | VC(30) NN          | Campo relacionado (CFOP)       
  -- IMP_CSTICMS    | SEL    |    |    | VC(3) NN           | Campo relacionado (CSTICMS)       
  -- ICMS_NOME      | SEL    |    |    | VC(60) NN          | Campo relacionado (CSTICMS)   
  -- IMP_ALIQICMS   |        |    |    | NUM(6,2) NN        |
  -- IMP_REDUCAOBC  |        |    |    | NUM(15,4) NN       |
  -- IMP_CSTIPI     | SEL    |    |    | VC(3) NN           | Campo relacionado (CSTIPI)
  -- IPI_NOME       | SEL    |    |    | VC(60) NN          | Campo relacionado (CSTIPI)   
  -- IMP_ALIQIPI    |        |    |    | NUM(6,2) NN        |
  -- IMP_CSTPIS     | SEL    |    |    | VC(3) NN           | Campo relacionado (CSTPIS)
  -- PIS_NOME       | SEL    |    |    | VC(60) NN          | Campo relacionado (CSTPIS)   
  -- IMP_ALIQPIS    |        |    |    | NUM(6,2) NN        |
  -- IMP_CSTCOFINS  | SEL    |    |    | VC(3) NN           | Campo relacionado (CSTPIS)   
  -- PIS_NOME       | SEL    |    |    | VC(60) NN          | Campo relacionado (CSTPIS)   
  -- IMP_ALIQCOFINS |        |    |    | NUM(6,2) NN        |
  -- IMP_ALIQST     |        |    |    | NUM(6,2) NN        |
  -- IMP_ALTERANFP  | CC     |    |    | VC(1) NN           |  
  -- IMP_CODFLL     | PK/SEL |    |    | INT NN             | Campo relacionado (FILIAL)
  -- FLL_APELIDO    | SEL    |    |    | VC(15) NN          | Campo relacionado (FILIAL)        
  -- IMP_CODEMP     | PK/SEL |    |    | INT NN             | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO    | SEL    |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- IMP_ATIVO      | CC     |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- IMP_REG        | FNC    |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- IMP_CODUSR     | OK     |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL    |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL    |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D23         | SEL    |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL    |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|--------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  --DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @impUfDeNew VARCHAR(3);
  DECLARE @estDeNew VARCHAR(20);
  DECLARE @impUfParaNew VARCHAR(3);
  DECLARE @estParaNew VARCHAR(20);
  DECLARE @impCodNcmNew VARCHAR(10);
  DECLARE @ncmNomeNew VARCHAR(60);
  DECLARE @impCodCtgNew VARCHAR(3);
  DECLARE @ctgNomeNew VARCHAR(20);
  DECLARE @impEntSaiNew VARCHAR(1);
  DECLARE @impCodNoNew VARCHAR(2);
  DECLARE @noNomeNew VARCHAR(30);
  DECLARE @impCfopNew VARCHAR(5);
  DECLARE @cfoNomeNew VARCHAR(30);
  DECLARE @impCstIcmsNew VARCHAR(3);
  DECLARE @icmsNomeNew VARCHAR(60);
  DECLARE @impAliqIcmsNew NUMERIC(6,2);
  DECLARE @impReducaoBcNew NUMERIC(15,2);
  DECLARE @impCstIpiNew VARCHAR(3);
  DECLARE @ipiNomeNew VARCHAR(60);
  DECLARE @impAliqIpiNew NUMERIC(6,2);
  DECLARE @impCstPisNew VARCHAR(3);
  DECLARE @pisNomeNew VARCHAR(60);
  DECLARE @impAliqPisNew NUMERIC(6,2);
  DECLARE @impAliqCofinsNew NUMERIC(6,2);
  DECLARE @impAliqStNew NUMERIC(6,2);
  DECLARE @impAlteraNfpNew VARCHAR(1);
  DECLARE @impCodFllNew INTEGER;
  DECLARE @fllApelidoNew VARCHAR(15);
  DECLARE @impCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @impAtivoNew VARCHAR(1);
  DECLARE @impRegNew VARCHAR(1);
  DECLARE @impCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD23New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @impUfDeNew        = dbo.fncTranslate(i.IMP_UFDE,3)
         ,@estDeNew         = COALESCE(ESTD.EST_NOME,'ERRO')
         ,@impUfParaNew     = dbo.fncTranslate(i.IMP_UFPARA,3)
         ,@estParaNew       = COALESCE(ESTP.EST_NOME,'ERRO')
         ,@impCodNcmNew     = dbo.fncTranslate(i.IMP_CODNCM,10)
         ,@ncmNomeNew       = COALESCE(NCM.NCM_NOME,'ERRO')
         ,@impCodCtgNew     = dbo.fncTranslate(i.IMP_CODCTG,3)
         ,@ctgNomeNew       = COALESCE(CTG.CTG_NOME,'ERRO')
         ,@impEntSaiNew     = UPPER(i.IMP_ENTSAI)
         ,@impCodNoNew      = dbo.fncTranslate(i.IMP_CODNO,2)
         ,@noNomeNew        = COALESCE(NO.NO_NOME,'ERRO')
         ,@impCfopNew       = dbo.fncTranslate(i.IMP_CFOP,5)
         ,@cfoNomeNew       = COALESCE(CFO.CFO_NOME,'ERRO')
         ,@impCstIcmsNew    = dbo.fncTranslate(i.IMP_CSTICMS,3)
         ,@icmsNomeNew      = COALESCE(ICM.ICM_NOME,'ERRO')
         ,@impAliqIcmsNew   = i.IMP_ALIQICMS
         ,@impReducaoBcNew  = i.IMP_REDUCAOBC
         ,@impCstIpiNew     = dbo.fncTranslate(i.IMP_CSTIPI,3)
         ,@ipiNomeNew       = COALESCE(IPI.IPI_NOME,'ERRO')
         ,@impAliqIpiNew    = i.IMP_ALIQIPI
         ,@impCstPisNew     = dbo.fncTranslate(i.IMP_CSTPIS,3)
         ,@pisNomeNew       = COALESCE(PIS_NOME,'ERRO')
         ,@impAliqPisNew    = i.IMP_ALIQPIS
         ,@impAliqCofinsNew = i.IMP_ALIQCOFINS
         ,@impAliqStNew     = i.IMP_ALIQST
         ,@impAlteraNfpNew  = UPPER(i.IMP_ALTERANFP)
         ,@impCodFllNew     = i.IMP_CODFLL
         ,@fllApelidoNew    = COALESCE(FLL_APELIDO,'ERRO')
         ,@impCodEmpNew     = i.IMP_CODEMP
         ,@empApelidoNew    = COALESCE(EMP_APELIDO,'ERRO')
         ,@impAtivoNew      = UPPER(i.IMP_ATIVO)
         ,@impRegNew        = UPPER(i.IMP_REG)
         ,@impCodUsrNew     = i.IMP_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD23New         = UP.UP_D23
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN ESTADO ESTD ON i.IMP_UFDE=ESTD.EST_CODIGO AND ESTD.EST_ATIVO='S'
    LEFT OUTER JOIN ESTADO ESTP ON i.IMP_UFPARA=ESTP.EST_CODIGO AND ESTP.EST_ATIVO='S'
    LEFT OUTER JOIN NCM NCM ON i.IMP_CODNCM=NCM.NCM_CODIGO AND NCM.NCM_ATIVO='S'
    LEFT OUTER JOIN CATEGORIA CTG ON i.IMP_CODCTG=CTG.CTG_CODIGO AND CTG.CTG_ATIVO='S'
    LEFT OUTER JOIN NATUREZAOPERACAO NO ON i.IMP_CODNO=NO.NO_CODIGO AND NO.NO_ATIVO='S'
    LEFT OUTER JOIN CFOP CFO ON i.IMP_CFOP=CFO.CFO_CODIGO AND CFO.CFO_ATIVO='S'
    LEFT OUTER JOIN CSTICMS ICM ON i.IMP_CSTICMS=ICM.ICM_CODIGO AND ICM.ICM_ATIVO='S'
    LEFT OUTER JOIN CSTIPI IPI ON i.IMP_CSTIPI=IPI.IPI_CODIGO AND IPI.IPI_ATIVO='S'
    LEFT OUTER JOIN CSTPIS PIS ON i.IMP_CSTPIS=PIS.PIS_CODIGO AND PIS.PIS_ATIVO='S'
    --LEFT OUTER JOIN CSTCOFINS PIS ON i.IMP_CSTPIS=PIS.PIS_CODIGO AND PIS_ATIVO='S'
    LEFT OUTER JOIN FILIAL FLL ON i.IMP_CODFLL=FLL.FLL_CODIGO AND FLL.FLL_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.IMP_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.IMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @estDeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO UFORIGEM %s PARA ESTE REGISTRO',15,1,@impUfDeNew);    
    IF( @estParaNew='ERRO' )
      RAISERROR('NAO LOCALIZADO UFDESTINO %s PARA ESTE REGISTRO',15,1,@impUfParaNew);    
    IF( @ncmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO NCM %s PARA ESTE REGISTRO',15,1,@impCodNcmNew); 
    IF( @ctgNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CATEGORIA %s PARA ESTE REGISTRO',15,1,@impCodCtgNew);
    IF( @noNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO NAT OPERACAO %s PARA ESTE REGISTRO',15,1,@impCodNoNew);    
    IF( @cfoNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CFOP %s PARA ESTE REGISTRO',15,1,@impCfopNew);    
    IF( @icmsNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CST ICMS %s PARA ESTE REGISTRO',15,1,@impCstIcmsNew);    
    IF( @ipiNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CST IPI %s PARA ESTE REGISTRO',15,1,@impCstIpiNew);    
    IF( @pisNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CST PIS %s PARA ESTE REGISTRO',15,1,@impCstPisNew);    
    IF( @fllApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FILIAL %i PARA ESTE REGISTRO',15,1,@impCodFllNew);    
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@impCodEmpNew);    
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@impCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD23New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 23 PARA INCLUIR NA TABELA IMPOSTO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @impRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@impRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.IMPOSTO( 
      IMP_UFDE
      ,IMP_UFPARA
      ,IMP_CODNCM
      ,IMP_CODCTG
      ,IMP_ENTSAI
      ,IMP_CODNO
      ,IMP_CFOP
      ,IMP_CSTICMS
      ,IMP_ALIQICMS
      ,IMP_REDUCAOBC
      ,IMP_CSTIPI
      ,IMP_ALIQIPI
      ,IMP_CSTPIS
      ,IMP_ALIQPIS
      ,IMP_CSTCOFINS
      ,IMP_ALIQCOFINS
      ,IMP_ALIQST
      ,IMP_ALTERANFP
      ,IMP_CODFLL
      ,IMP_CODEMP
      ,IMP_ATIVO
      ,IMP_REG
      ,IMP_CODUSR) VALUES(
      @impUfDeNew         -- IMP_UFDE
      ,@impUfParaNew      -- IMP_UFPARA
      ,@impCodNcmNew      -- IMP_CODNCM
      ,@impCodCtgNew      -- IMP_CODCTG
      ,@impEntSaiNew      -- IMP_ENTSAI
      ,@impCodNoNew       -- IMP_CODNO
      ,@impCfopNew        -- IMP_CFOP
      ,@impCstIcmsNew     -- IMP_CSTICMS
      ,@impAliqIcmsNew    -- IMP_ALIQICMS
      ,@impReducaoBcNew   -- IMP_REDUCAOBC
      ,@impCstIpiNew      -- IMP_CSTIPI
      ,@impAliqIpiNew     -- IMP_ALIQIPI
      ,@impCstPisNew      -- IMP_CSTPIS
      ,@impAliqPisNew     -- IMP_ALIQPIS
      ,@impCstPisNew      -- IMP_CSTCOFINS
      ,@impAliqCofinsNew  -- IMP_ALIQCOFINS
      ,@impAliqStNew      -- IMP_ALIQST
      ,@impAlteraNfpNew   -- IMP_ALTERANFP
      ,@impCodFllNew      -- IMP_CODFLL
      ,@impCodEmpNew      -- IMP_CODEMP
      ,@impAtivoNew       -- IMP_ATIVO
      ,@impRegNew         -- IMP_REG
      ,@impCodUsrNew      -- IMP_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPIMPOSTO(
      IMP_ACAO
      ,IMP_UFDE
      ,IMP_UFPARA
      ,IMP_CODNCM
      ,IMP_CODCTG
      ,IMP_ENTSAI
      ,IMP_CODNO
      ,IMP_CFOP
      ,IMP_CSTICMS
      ,IMP_ALIQICMS
      ,IMP_REDUCAOBC
      ,IMP_CSTIPI
      ,IMP_ALIQIPI
      ,IMP_CSTPIS
      ,IMP_ALIQPIS
      ,IMP_CSTCOFINS
      ,IMP_ALIQCOFINS
      ,IMP_ALIQST
      ,IMP_ALTERANFP
      ,IMP_CODFLL
      ,IMP_CODEMP
      ,IMP_ATIVO
      ,IMP_REG
      ,IMP_CODUSR) VALUES(
      'I'                 -- IMP_ACAO
      ,@impUfDENew        -- IMP_UFDE
      ,@impUfParaNew      -- IMP_UFPARA
      ,@impCodNcmNew      -- IMP_CODNCM
      ,@impCodCtgNew      -- IMP_CODCTG
      ,@impEntSaiNew      -- IMP_ENTSAI
      ,@impCodNoNew       -- IMP_CODNO
      ,@impCfopNew        -- IMP_CFOP
      ,@impCstIcmsNew     -- IMP_CSTICMS
      ,@impAliqIcmsNew    -- IMP_ALIQICMS
      ,@impReducaoBcNew   -- IMP_REDUCAOBC
      ,@impCstIpiNew      -- IMP_CSTIPI
      ,@impAliqIpiNew     -- IMP_ALIQIPI
      ,@impCstPisNew      -- IMP_CSTPIS
      ,@impAliqPisNew     -- IMP_ALIQPIS
      ,@impCstPisNew      -- IMP_CSTCOFINS
      ,@impAliqCofinsNew  -- IMP_ALIQCOFINS
      ,@impAliqStNew      -- IMP_ALIQST
      ,@impAlteraNfpNew   -- IMP_ALTERANFP
      ,@impCodFllNew      -- IMP_CODFLL
      ,@impCodEmpNew      -- IMP_CODEMP
      ,@impAtivoNew       -- IMP_ATIVO
      ,@impRegNew         -- IMP_REG
      ,@impCodUsrNew      -- IMP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewIMPOSTO_BU ON dbo.VIMPOSTO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @impUfDeNew VARCHAR(3);
  DECLARE @estDeNew VARCHAR(20);
  DECLARE @impUfParaNew VARCHAR(3);
  DECLARE @estParaNew VARCHAR(20);
  DECLARE @impCodNcmNew VARCHAR(10);
  DECLARE @ncmNomeNew VARCHAR(60);
  DECLARE @impCodCtgNew VARCHAR(3);
  DECLARE @ctgNomeNew VARCHAR(20);
  DECLARE @impEntSaiNew VARCHAR(1);
  DECLARE @impCodNoNew VARCHAR(2);
  DECLARE @noNomeNew VARCHAR(30);
  DECLARE @impCfopNew VARCHAR(5);
  DECLARE @cfoNomeNew VARCHAR(30);
  DECLARE @impCstIcmsNew VARCHAR(3);
  DECLARE @icmsNomeNew VARCHAR(60);
  DECLARE @impAliqIcmsNew NUMERIC(6,2);
  DECLARE @impReducaoBcNew NUMERIC(15,2);
  DECLARE @impCstIpiNew VARCHAR(3);
  DECLARE @ipiNomeNew VARCHAR(60);
  DECLARE @impAliqIpiNew NUMERIC(6,2);
  DECLARE @impCstPisNew VARCHAR(3);
  DECLARE @pisNomeNew VARCHAR(60);
  DECLARE @impAliqPisNew NUMERIC(6,2);
  DECLARE @impAliqCofinsNew NUMERIC(6,2);
  DECLARE @impAliqStNew NUMERIC(6,2);
  DECLARE @impAlteraNfpNew VARCHAR(1);
  DECLARE @impCodFllNew INTEGER;
  DECLARE @fllApelidoNew VARCHAR(15);
  DECLARE @impCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @impAtivoNew VARCHAR(1);
  DECLARE @impRegNew VARCHAR(1);
  DECLARE @impCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD23New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @impUfDeNew        = dbo.fncTranslate(i.IMP_UFDE,3)
         ,@estDeNew         = COALESCE(ESTD.EST_NOME,'ERRO')
         ,@impUfParaNew     = dbo.fncTranslate(i.IMP_UFPARA,3)
         ,@estParaNew       = COALESCE(ESTP.EST_NOME,'ERRO')
         ,@impCodNcmNew     = dbo.fncTranslate(i.IMP_CODNCM,10)
         ,@ncmNomeNew       = COALESCE(NCM.NCM_NOME,'ERRO')
         ,@impCodCtgNew     = dbo.fncTranslate(i.IMP_CODCTG,3)
         ,@ctgNomeNew       = COALESCE(CTG.CTG_NOME,'ERRO')
         ,@impEntSaiNew     = UPPER(i.IMP_ENTSAI)
         ,@impCodNoNew      = dbo.fncTranslate(i.IMP_CODNO,2)
         ,@noNomeNew        = COALESCE(NO.NO_NOME,'ERRO')
         ,@impCfopNew       = dbo.fncTranslate(i.IMP_CFOP,5)
         ,@cfoNomeNew       = COALESCE(CFO.CFO_NOME,'ERRO')
         ,@impCstIcmsNew    = dbo.fncTranslate(i.IMP_CSTICMS,3)
         ,@icmsNomeNew      = COALESCE(ICM.ICM_NOME,'ERRO')
         ,@impAliqIcmsNew   = i.IMP_ALIQICMS
         ,@impReducaoBcNew  = i.IMP_REDUCAOBC
         ,@impCstIpiNew     = dbo.fncTranslate(i.IMP_CSTIPI,3)
         ,@ipiNomeNew       = COALESCE(IPI.IPI_NOME,'ERRO')
         ,@impAliqIpiNew    = i.IMP_ALIQIPI
         ,@impCstPisNew     = dbo.fncTranslate(i.IMP_CSTPIS,3)
         ,@pisNomeNew       = COALESCE(PIS_NOME,'ERRO')
         ,@impAliqPisNew    = i.IMP_ALIQPIS
         ,@impAliqCofinsNew = i.IMP_ALIQCOFINS
         ,@impAliqStNew     = i.IMP_ALIQST
         ,@impAlteraNfpNew  = UPPER(i.IMP_ALTERANFP)
         ,@impCodFllNew     = i.IMP_CODFLL
         ,@fllApelidoNew    = COALESCE(FLL_APELIDO,'ERRO')
         ,@impCodEmpNew     = i.IMP_CODEMP
         ,@empApelidoNew    = COALESCE(EMP_APELIDO,'ERRO')
         ,@impAtivoNew      = UPPER(i.IMP_ATIVO)
         ,@impRegNew        = UPPER(i.IMP_REG)
         ,@impCodUsrNew     = i.IMP_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD23New         = UP.UP_D23
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN ESTADO ESTD ON i.IMP_UFDE=ESTD.EST_CODIGO AND ESTD.EST_ATIVO='S'
    LEFT OUTER JOIN ESTADO ESTP ON i.IMP_UFPARA=ESTP.EST_CODIGO AND ESTP.EST_ATIVO='S'
    LEFT OUTER JOIN NCM NCM ON i.IMP_CODNCM=NCM.NCM_CODIGO AND NCM.NCM_ATIVO='S'
    LEFT OUTER JOIN CATEGORIA CTG ON i.IMP_CODCTG=CTG.CTG_CODIGO AND CTG.CTG_ATIVO='S'
    LEFT OUTER JOIN NATUREZAOPERACAO NO ON i.IMP_CODNO=NO.NO_CODIGO AND NO.NO_ATIVO='S'
    LEFT OUTER JOIN CFOP CFO ON i.IMP_CFOP=CFO.CFO_CODIGO AND CFO.CFO_ATIVO='S'
    LEFT OUTER JOIN CSTICMS ICM ON i.IMP_CSTICMS=ICM.ICM_CODIGO AND ICM.ICM_ATIVO='S'
    LEFT OUTER JOIN CSTIPI IPI ON i.IMP_CSTIPI=IPI.IPI_CODIGO AND IPI.IPI_ATIVO='S'
    LEFT OUTER JOIN CSTPIS PIS ON i.IMP_CSTPIS=PIS.PIS_CODIGO AND PIS.PIS_ATIVO='S'
    --LEFT OUTER JOIN CSTCOFINS PIS ON i.IMP_CSTPIS=PIS.PIS_CODIGO AND PIS_ATIVO='S'
    LEFT OUTER JOIN FILIAL FLL ON i.IMP_CODFLL=FLL.FLL_CODIGO AND FLL.FLL_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.IMP_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.IMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @estDeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO UFORIGEM %s PARA ESTE REGISTRO',15,1,@impUfDeNew);    
    IF( @estParaNew='ERRO' )
      RAISERROR('NAO LOCALIZADO UFDESTINO %s PARA ESTE REGISTRO',15,1,@impUfParaNew);    
    IF( @ncmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO NCM %s PARA ESTE REGISTRO',15,1,@impCodNcmNew); 
    IF( @ctgNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CATEGORIA %s PARA ESTE REGISTRO',15,1,@impCodCtgNew);
    IF( @noNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO NAT OPERACAO %s PARA ESTE REGISTRO',15,1,@impCodNoNew);    
    IF( @cfoNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CFOP %s PARA ESTE REGISTRO',15,1,@impCfopNew);    
    IF( @icmsNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CST ICMS %s PARA ESTE REGISTRO',15,1,@impCstIcmsNew);    
    IF( @ipiNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CST IPI %s PARA ESTE REGISTRO',15,1,@impCstIpiNew);    
    IF( @pisNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CST PIS %s PARA ESTE REGISTRO',15,1,@impCstPisNew);    
    IF( @fllApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FILIAL %i PARA ESTE REGISTRO',15,1,@impCodFllNew);    
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@impCodEmpNew);    
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@impCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD23New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 23 PARA ALTERAR NA TABELA IMPOSTO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @impUfDeOld VARCHAR(3);
    DECLARE @impUfParaOld VARCHAR(3);
    DECLARE @impCodNcmOld VARCHAR(10);
    DECLARE @impCodCtgOld VARCHAR(3);
    DECLARE @impEntSaiOld VARCHAR(1);
    DECLARE @impCodNoOld VARCHAR(2);
    DECLARE @impCfopOld VARCHAR(5);
    DECLARE @impCstIcmsOld VARCHAR(3);
    DECLARE @impAliqIcmsOld NUMERIC(6,2);
    DECLARE @impReducaoBcOld NUMERIC(15,2);
    DECLARE @impCstIpiOld VARCHAR(3);
    DECLARE @impAliqIpiOld NUMERIC(6,2);
    DECLARE @impCstPisOld VARCHAR(3);
    DECLARE @impAliqPisOld NUMERIC(6,2);
    DECLARE @impAliqCofinsOld NUMERIC(6,2);
    DECLARE @impAliqStOld NUMERIC(6,2);
    DECLARE @impAlteraNfpOld VARCHAR(1);
    DECLARE @impCodFllOld INTEGER;
    DECLARE @impCodEmpOld INTEGER;
    DECLARE @impAtivoOld VARCHAR(1);
    DECLARE @impRegOld VARCHAR(1);
    DECLARE @impCodUsrOld INTEGER;
    
    SELECT @impUfDeOld        = d.IMP_UFDE
           ,@impUfParaOld     = d.IMP_UFPARA
           ,@impCodNcmOld     = d.IMP_CODNCM
           ,@impCodCtgOld     = d.IMP_CODCTG
           ,@impEntSaiOld     = d.IMP_ENTSAI
           ,@impCodNoOld      = d.IMP_CODNO
           ,@impCfopOld       = d.IMP_CFOP
           ,@impCstIcmsOld    = d.IMP_CSTICMS
           ,@impAliqIcmsOld   = d.IMP_ALIQICMS
           ,@impReducaoBcOld  = d.IMP_REDUCAOBC
           ,@impCstIpiOld     = d.IMP_CSTIPI
           ,@impAliqIpiOld    = d.IMP_ALIQIPI
           ,@impCstPisOld     = d.IMP_CSTPIS
           ,@impAliqPisOld    = d.IMP_ALIQPIS
           ,@impAliqCofinsOld = d.IMP_ALIQCOFINS
           ,@impAliqStOld     = d.IMP_ALIQST
           ,@impAlteraNfpOld  = d.IMP_ALTERANFP
           ,@impCodFllOld     = d.IMP_CODFLL
           ,@impCodEmpOld     = d.IMP_CODEMP
           ,@impAtivoOld      = d.IMP_ATIVO
           ,@impRegOld        = d.IMP_REG
           ,@impCodUsrOld     = d.IMP_CODUSR         
      FROM IMPOSTO d WHERE ((d.IMP_UFDE=@impUfDeNew) AND (d.IMP_UFPARA=@impUfParaNew) AND (d.IMP_CODNCM=@impCodNcmNew) AND (d.IMP_CODCTG=@impCodCtgNew) AND (d.IMP_ENTSAI=@impEntSaiNew) 
                       AND (d.IMP_CODNO=@impCodNoNew) AND (d.IMP_CODFLL=@impCodFllNew) AND (d.IMP_CODEMP=@impCodEmpNew));
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @impUfDeOld<>@impUfDeNew )
      RAISERROR('CAMPO UFORIGEM NAO PODE SER ALTERADO',15,1);  
    IF( @impUfParaOld<>@impUfParaNew)
      RAISERROR('CAMPO UFDESTINO NAO PODE SER ALTERADO',15,1);      
    IF( @impCodNcmOld<>@impCodNcmNew)
      RAISERROR('CAMPO NCM NAO PODE SER ALTERADO',15,1);      
    IF( @impCodCtgOld<>@impCodCtgNew)
      RAISERROR('CAMPO CATEGORIA NAO PODE SER ALTERADO',15,1);      
    IF( @impEntSaiOld<>@impEntSaiNew)
      RAISERROR('CAMPO ENTSAI NAO PODE SER ALTERADO',15,1);      
    IF( @impCodNoOld<> @impCodNoNew)
      RAISERROR('CAMPO NATUREZA NAO PODE SER ALTERADO',15,1);      
    IF( @impCodFllOld<>@impCodFllNew)
      RAISERROR('CAMPO FILIAL NAO PODE SER ALTERADO',15,1);      
    IF( @impCodEmpOld<>@impCodEmpNew)
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);        
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @impNomeOld<>@impNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(IMP_CODIGO,'OK') FROM IMPOSTO WHERE IMP_NOME=@impNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA IMPOSTO COM CODIGO %s',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @impRegOld <> @impRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@impRegOld,@impRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.IMPOSTO
       SET IMP_CFOP        = @impCfopNew
           ,IMP_CSTICMS    = @impCstIcmsNew
           ,IMP_ALIQICMS   = @impAliqIcmsNew
           ,IMP_REDUCAOBC  = @impReducaoBcNew
           ,IMP_CSTIPI     = @impCstIpiNew
           ,IMP_ALIQIPI    = @impAliqIpiNew
           ,IMP_CSTPIS     = @impCstPisNew
           ,IMP_ALIQPIS    = @impAliqPisNew
           ,IMP_ALIQCOFINS = @impAliqCofinsNew
           ,IMP_ALIQST     = @impAliqStNew
           ,IMP_ALTERANFP  = @impAlteraNfpNew
           ,IMP_ATIVO      = @impAtivoNew
           ,IMP_REG        = @impRegNew
           ,IMP_CODUSR     = @impCodUsrNew
      WHERE ((IMP_UFDE=@impUfDeNew) AND (IMP_UFPARA=@impUfParaNew) AND (IMP_CODNCM=@impCodNcmNew) AND (IMP_CODCTG=@impCodCtgNew) AND (IMP_ENTSAI=@impEntSaiNew) 
        AND (IMP_CODNO=@impCodNoNew) AND (IMP_CODFLL=@impCodFllNew) AND (IMP_CODEMP=@impCodEmpNew));
    -- Gravando LOG
    
    IF( (@impCfopOld<>@impCfopNew) OR (@impCstIcmsOld<>@impCstIcmsNew) OR (@impAliqIcmsOld<>@impAliqIcmsNew) OR (@impReducaoBcOld<>@impReducaoBcNew)
     OR(@impCstIpiOld<>@impCstIpiNew) OR (@impAliqIpiOld<>@impAliqIpiNew) OR (@impCstPisOld<>@impCstPisNew) OR (@impAliqPisOld<>@impAliqPisNew) 
     OR(@impAliqCofinsOld<>@impAliqCofinsNew) OR (@impAliqStOld<>@impAliqStNew) OR (@impAlteraNfpOld<>@impAlteraNfpNew) OR (@impAtivoOld<>@impAtivoNew)
     OR(@impRegOld<>@impRegNew) OR (@impCodUsrOld<>@impCodUsrNew) ) BEGIN
      INSERT INTO dbo.BKPIMPOSTO(
        IMP_ACAO
        ,IMP_UFDE
        ,IMP_UFPARA
        ,IMP_CODNCM
        ,IMP_CODCTG
        ,IMP_ENTSAI
        ,IMP_CODNO
        ,IMP_CFOP
        ,IMP_CSTICMS
        ,IMP_ALIQICMS
        ,IMP_REDUCAOBC
        ,IMP_CSTIPI
        ,IMP_ALIQIPI
        ,IMP_CSTPIS
        ,IMP_ALIQPIS
        ,IMP_CSTCOFINS
        ,IMP_ALIQCOFINS
        ,IMP_ALIQST
        ,IMP_ALTERANFP
        ,IMP_CODFLL
        ,IMP_CODEMP
        ,IMP_ATIVO
        ,IMP_REG
        ,IMP_CODUSR) VALUES(
        'A'                 -- IMP_ACAO         
        ,@impUfDeNew        -- IMP_UFDE         
        ,@impUfParaNew      -- IMP_UFPARA       
        ,@impCodNcmNew      -- IMP_CODNCM       
        ,@impCodCtgNew      -- IMP_CODCTG       
        ,@impEntSaiNew      -- IMP_ENTSAI       
        ,@impCodNoNew       -- IMP_CODNO        
        ,@impCfopNew        -- IMP_CFOP         
        ,@impCstIcmsNew     -- IMP_CSTICMS      
        ,@impAliqIcmsNew    -- IMP_ALIQICMS     
        ,@impReducaoBcNew   -- IMP_REDUCAOBC    
        ,@impCstIpiNew      -- IMP_CSTIPI       
        ,@impAliqIpiNew     -- IMP_ALIQIPI      
        ,@impCstPisNew      -- IMP_CSTPIS       
        ,@impAliqPisNew     -- IMP_ALIQPIS      
        ,@impCstPisNew      -- IMP_CSTCOFINS    
        ,@impAliqCofinsNew  -- IMP_ALIQCOFINS   
        ,@impAliqStNew      -- IMP_ALIQST       
        ,@impAlteraNfpNew   -- IMP_ALTERANFP    
        ,@impCodFllNew      -- IMP_CODFLL       
        ,@impCodEmpNew      -- IMP_CODEMP       
        ,@impAtivoNew       -- IMP_ATIVO        
        ,@impRegNew         -- IMP_REG          
        ,@impCodUsrNew      -- IMP_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewIMPOSTO_BD ON dbo.VIMPOSTO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @impUfDeOld VARCHAR(3);
  DECLARE @impUfParaOld VARCHAR(3);
  DECLARE @impCodNcmOld VARCHAR(10);
  DECLARE @impCodCtgOld VARCHAR(3);
  DECLARE @impEntSaiOld VARCHAR(1);
  DECLARE @impCodNoOld VARCHAR(2);
  DECLARE @impCfopOld VARCHAR(5);
  DECLARE @impCstIcmsOld VARCHAR(3);
  DECLARE @impAliqIcmsOld NUMERIC(6,2);
  DECLARE @impReducaoBcOld NUMERIC(15,2);
  DECLARE @impCstIpiOld VARCHAR(3);
  DECLARE @impAliqIpiOld NUMERIC(6,2);
  DECLARE @impCstPisOld VARCHAR(3);
  DECLARE @impAliqPisOld NUMERIC(6,2);
  DECLARE @impAliqCofinsOld NUMERIC(6,2);
  DECLARE @impAliqStOld NUMERIC(6,2);
  DECLARE @impAlteraNfpOld VARCHAR(1);
  DECLARE @impCodFllOld INTEGER;
  DECLARE @impCodEmpOld INTEGER;
  DECLARE @impAtivoOld VARCHAR(1);
  DECLARE @impRegOld VARCHAR(1);
  DECLARE @impCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD23Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @impUfDeOld        = d.IMP_UFDE
         ,@impUfParaOld     = d.IMP_UFPARA
         ,@impCodNcmOld     = d.IMP_CODNCM
         ,@impCodCtgOld     = d.IMP_CODCTG
         ,@impEntSaiOld     = d.IMP_ENTSAI
         ,@impCodNoOld      = d.IMP_CODNO
         ,@impCfopOld       = d.IMP_CFOP
         ,@impCstIcmsOld    = d.IMP_CSTICMS
         ,@impAliqIcmsOld   = d.IMP_ALIQICMS
         ,@impReducaoBcOld  = d.IMP_REDUCAOBC
         ,@impCstIpiOld     = d.IMP_CSTIPI
         ,@impAliqIpiOld    = d.IMP_ALIQIPI
         ,@impCstPisOld     = d.IMP_CSTPIS
         ,@impAliqPisOld    = d.IMP_ALIQPIS
         ,@impAliqCofinsOld = d.IMP_ALIQCOFINS
         ,@impAliqStOld     = d.IMP_ALIQST
         ,@impAlteraNfpOld  = d.IMP_ALTERANFP
         ,@impCodFllOld     = d.IMP_CODFLL
         ,@impCodEmpOld     = d.IMP_CODEMP
         ,@impAtivoOld      = d.IMP_ATIVO
         ,@impRegOld        = d.IMP_REG
         ,@impCodUsrOld     = d.IMP_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD23Old      = UP.UP_D23
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.IMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@impCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD23Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 23 PARA EXCLUIR NA TABELA IMPOSTO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@impRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@impCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('IMPOSTO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@impCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('IMPOSTO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.IMPOSTO WHERE ((IMP_UFDE=@impUfDeOld) AND (IMP_UFPARA=@impUfParaOld) AND (IMP_CODNCM=@impCodNcmOld) AND (IMP_CODCTG=@impCodCtgOld) 
                              AND (IMP_ENTSAI=@impEntSaiOld) AND (IMP_CODNO=@impCodNoOld) AND (IMP_CODFLL=@impCodFllOld) AND (IMP_CODEMP=@impCodEmpOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPIMPOSTO(
      IMP_ACAO
      ,IMP_UFDE
      ,IMP_UFPARA
      ,IMP_CODNCM
      ,IMP_CODCTG
      ,IMP_ENTSAI
      ,IMP_CODNO
      ,IMP_CFOP
      ,IMP_CSTICMS
      ,IMP_ALIQICMS
      ,IMP_REDUCAOBC
      ,IMP_CSTIPI
      ,IMP_ALIQIPI
      ,IMP_CSTPIS
      ,IMP_ALIQPIS
      ,IMP_CSTCOFINS
      ,IMP_ALIQCOFINS
      ,IMP_ALIQST
      ,IMP_ALTERANFP
      ,IMP_CODFLL
      ,IMP_CODEMP
      ,IMP_ATIVO
      ,IMP_REG
      ,IMP_CODUSR) VALUES(
      'E'                 -- IMP_ACAO
      ,@impUfDeOld        -- IMP_UFDE
      ,@impUfParaOld      -- IMP_UFPARA
      ,@impCodNcmOld      -- IMP_CODNCM
      ,@impCodCtgOld      -- IMP_CODCTG
      ,@impEntSaiOld      -- IMP_ENTSAI
      ,@impCodNoOld       -- IMP_CODNO
      ,@impCfopOld        -- IMP_CFOP
      ,@impCstIcmsOld     -- IMP_CSTICMS
      ,@impAliqIcmsOld    -- IMP_ALIQICMS
      ,@impReducaoBcOld   -- IMP_REDUCAOBC
      ,@impCstIpiOld      -- IMP_CSTIPI
      ,@impAliqIpiOld     -- IMP_ALIQIPI
      ,@impCstPisOld      -- IMP_CSTPIS
      ,@impAliqPisOld     -- IMP_ALIQPIS
      ,@impCstPisOld      -- IMP_CSTCOFINS
      ,@impAliqCofinsOld  -- IMP_ALIQCOFINS
      ,@impAliqStOld      -- IMP_ALIQST
      ,@impAlteraNfpOld   -- IMP_ALTERANFP
      ,@impCodFllOld      -- IMP_CODFLL
      ,@impCodEmpOld      -- IMP_CODEMP
      ,@impAtivoOld       -- IMP_ATIVO
      ,@impRegOld         -- IMP_REG
      ,@impCodUsrOld      -- IMP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPIMPOSTO_BUD ON dbo.BKPIMPOSTO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                    L O G R A D O U R O
--trglogradouro
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewLOGRADOURO_BI ON dbo.VLOGRADOURO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- LGR_CODIGO     | OK  |    |    | VC(5) NN PK        | Codigo informado pelo usuario
  -- LGR_NOME       | OK  |    |    | VC(20) NN          | 
  -- LGR_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- LGR_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- LGR_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D08      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(5) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20)  = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @lgrCodigoNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @lgrAtivoNew VARCHAR(1);
  DECLARE @lgrRegNew VARCHAR(1);
  DECLARE @lgrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @lgrCodigoNew      = dbo.fncTranslate(i.LGR_CODIGO,5)
         ,@lgrNomeNew       = dbo.fncTranslate(i.LGR_NOME,20)
         ,@lgrAtivoNew      = UPPER(i.LGR_ATIVO)
         ,@lgrRegNew        = UPPER(i.LGR_REG)
         ,@lgrCodUsrNew     = i.LGR_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New         = UP.UP_D08
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.LGR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@lgrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA INCLUIR NA TABELA LOGRADOURO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(LGR_CODIGO,'OK') FROM LOGRADOURO WHERE LGR_NOME=@lgrNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA LOGRADOURO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(LGR_NOME,'OK') FROM LOGRADOURO WHERE LGR_CODIGO=@lgrCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA LOGRADOURO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @lgrRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@lgrRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.LOGRADOURO( 
      LGR_CODIGO
      ,LGR_NOME
      ,LGR_ATIVO
      ,LGR_REG
      ,LGR_CODUSR) VALUES(
      @lgrCodigoNew     -- LGR_CODIGO
      ,@lgrNomeNew      -- LGR_NOME
      ,@lgrAtivoNew     -- LGR_ATIVO
      ,@lgrRegNew       -- LGR_REG
      ,@lgrCodUsrNew    -- LGR_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPLOGRADOURO(
      LGR_ACAO
      ,LGR_CODIGO
      ,LGR_NOME
      ,LGR_ATIVO
      ,LGR_REG
      ,LGR_CODUSR) VALUES(
      'I'                 -- LGR_ACAO
      ,@lgrCodigoNew      -- LGR_CODIGO
      ,@lgrNomeNew        -- LGR_NOME
      ,@lgrAtivoNew       -- LGR_ATIVO
      ,@lgrRegNew         -- LGR_REG
      ,@lgrCodUsrNew      -- LGR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewLOGRADOURO_BU ON dbo.VLOGRADOURO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(5) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @lgrCodigoNew VARCHAR(5);
  DECLARE @lgrNomeNew VARCHAR(20);
  DECLARE @lgrAtivoNew VARCHAR(1);
  DECLARE @lgrRegNew VARCHAR(1);
  DECLARE @lgrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @lgrCodigoNew    = dbo.fncTranslate(i.LGR_CODIGO,5)
         ,@lgrNomeNew     = dbo.fncTranslate(i.LGR_NOME,20)
         ,@lgrAtivoNew    = UPPER(i.LGR_ATIVO)
         ,@lgrRegNew      = UPPER(i.LGR_REG)
         ,@lgrCodUsrNew   = i.LGR_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New       = UP.UP_D08
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.LGR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@lgrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA ALTERAR NA TABELA LOGRADOURO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @lgrCodigoOld VARCHAR(5);
    DECLARE @lgrNomeOld VARCHAR(20);
    DECLARE @lgrAtivoOld VARCHAR(1);
    DECLARE @lgrRegOld VARCHAR(1);
    DECLARE @lgrCodUsrOld INTEGER;
    SELECT @lgrCodigoOld    = d.LGR_CODIGO
           ,@lgrNomeOld     = d.LGR_NOME
           ,@lgrAtivoOld    = d.LGR_ATIVO
           ,@lgrRegOld      = d.LGR_REG
           ,@lgrCodUsrOld   = d.LGR_CODUSR         
      FROM LOGRADOURO d WHERE d.LGR_CODIGO=@lgrCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @lgrCodigoOld<>@lgrCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @lgrNomeOld<>@lgrNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(LGR_CODIGO,'OK') FROM LOGRADOURO WHERE LGR_NOME=@lgrNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EVENTO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @lgrRegOld <> @lgrRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@lgrRegOld,@lgrRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.LOGRADOURO
       SET LGR_NOME       = @lgrNomeNew
          ,LGR_ATIVO      = @lgrAtivoNew
          ,LGR_REG        = @lgrRegNew
          ,LGR_CODUSR     = @lgrCodUsrNew
    WHERE LGR_CODIGO  = @lgrCodigoNew;     
    -- Gravando LOG
    IF( (@lgrNomeOld<>@lgrNomeNew) OR (@lgrAtivoOld<>@lgrAtivoNew) OR (@lgrRegOld<>@lgrRegNew) ) BEGIN
      INSERT INTO dbo.BKPLOGRADOURO(
        LGR_ACAO
        ,LGR_CODIGO
        ,LGR_NOME
        ,LGR_ATIVO
        ,LGR_REG
        ,LGR_CODUSR) VALUES(
        'A'               -- LGR_ACAO
        ,@lgrCodigoNew    -- LGR_CODIGO
        ,@lgrNomeNew      -- LGR_NOME
        ,@lgrAtivoNew     -- LGR_ATIVO
        ,@lgrRegNew       -- LGR_REG
        ,@lgrCodUsrNew    -- LGR_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewLOGRADOURO_BD ON dbo.VLOGRADOURO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntCnt INTEGER = 0; -- Para procurar campo foreign key int (CONTADOR)
  DECLARE @fkIntEmp INTEGER = 0; -- Para procurar campo foreign key int (EMPRESA)
  DECLARE @fkIntFll INTEGER = 0; -- Para procurar campo foreign key int (FILIAL)
  DECLARE @fkIntFvr INTEGER = 0; -- Para procurar campo foreign key int (FAVORECIDO)
  --DECLARE @fkIntTrn INTEGER = 0; -- Para procurar campo foreign key int (TRANSPORTADORA)
  DECLARE @erroOld VARCHAR(70);  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @lgrCodigoOld VARCHAR(5);
  DECLARE @lgrNomeOld VARCHAR(20);
  DECLARE @lgrAtivoOld VARCHAR(1);
  DECLARE @lgrRegOld VARCHAR(1);
  DECLARE @lgrCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD08Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @lgrCodigoOld    = d.LGR_CODIGO
         ,@lgrNomeOld     = d.LGR_NOME
         ,@lgrAtivoOld    = d.LGR_ATIVO
         ,@lgrRegOld      = d.LGR_REG
         ,@lgrCodUsrOld   = d.LGR_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08Old       = UP.UP_D08
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.LGR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@lgrCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD08Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA EXCLUIR NA TABELA LOGRADOURO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@lgrRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK CNT_CODLGR(CONTADOR)
      --                EMP_CODLGR(EMPRESA)
      --                FLL_CODLGR(FILIAL)
      --                FVR_CODLGR(FAVORECIDO)
      ------------------------------------------
    SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTADOR WHERE CNT_CODLGR=@lgrCodigoOld;
    IF( @fkIntCnt > 0 )
      RAISERROR('LOGRADOURO UTILIZADO NO CONTADOR %i',15,1,@fkIntCnt);
    SELECT TOP 1 @fkIntEmp=COALESCE(EMP_CODIGO,0) FROM EMPRESA WHERE EMP_CODLGR=@lgrCodigoOld;
    IF( @fkIntEmp > 0 )
      RAISERROR('LOGRADOURO UTILIZADO NA EMPRESA %i',15,1,@fkIntEmp);
    SELECT TOP 1 @fkIntFll=COALESCE(FLL_CODIGO,0) FROM FILIAL WHERE FLL_CODLGR=@lgrCodigoOld;
    IF( @fkIntFll > 0 )
      RAISERROR('LOGRADOURO UTILIZADO NA FILIAL %i',15,1,@fkIntFll);
    SELECT TOP 1 @fkIntFvr=COALESCE(FVR_CODIGO,0) FROM FAVORECIDO WHERE FVR_CODLGR=@lgrCodigoOld;
    IF( @fkIntFvr > 0 )
      RAISERROR('LOGRADOURO UTILIZADO NO FAVORECIDO %i',15,1,@fkIntFvr);
    --SELECT TOP 1 @fkIntTrn=COALESCE(TRB_CODIGO,0) FROM TRANSPORTADORA WHERE TRN_CODLGR=@lgrCodigoOld;
    --IF( @fkIntTrn > 0 )
    --  RAISERROR('LOGRADOURO UTILIZADO NA TRANSPORTADORA %i',15,1,@fkIntTrn);
    --
    DELETE FROM dbo.LOGRADOURO WHERE LGR_CODIGO=@lgrCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPLOGRADOURO(
      LGR_ACAO
      ,LGR_CODIGO
      ,LGR_NOME
      ,LGR_ATIVO
      ,LGR_REG
      ,LGR_CODUSR) VALUES(
      'E'               -- LGR_ACAO
      ,@lgrCodigoOld    -- LGR_CODIGO
      ,@lgrNomeOld      -- LGR_NOME
      ,@lgrAtivoOld     -- LGR_ATIVO
      ,@lgrRegOld       -- LGR_REG
      ,@lgrCodUsrOld    -- LGR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPLOGRADOURO_BUD ON dbo.BKPLOGRADOURO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                     M O E D A                             --
--trgmoeda                                                   --
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewMOEDA_BI ON dbo.VMOEDA
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- MOE_CODIGO     | PK  |    |    | VC(04) NN          |
  -- MOE_NOME       |     |    |    | VC(20) NN          |
  -- MOE_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- MOE_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- MOE_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D08         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(4) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @moeCodigoNew VARCHAR(4);
  DECLARE @moeNomeNew VARCHAR(20);
  DECLARE @moeAtivoNew VARCHAR(1);
  DECLARE @moeRegNew VARCHAR(1);
  DECLARE @moeCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @moeCodigoNew   = dbo.fncTranslate(i.MOE_CODIGO,4)
         ,@moeNomeNew    = dbo.fncTranslate(i.MOE_NOME,20)
         ,@moeAtivoNew   = UPPER(i.MOE_ATIVO)
         ,@moeRegNew     = UPPER(i.MOE_REG)
         ,@moeCodUsrNew  = i.MOE_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New      = UP.UP_D08
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.MOE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@moeCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA INCLUIR NA TABELA MOEDA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(MOE_CODIGO,'OK') FROM MOEDA WHERE MOE_NOME=@moeNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA MOEDA COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(MOE_NOME,'OK') FROM MOEDA WHERE MOE_CODIGO=@moeCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA MOEDA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @moeRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@moeRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.MOEDA( 
      MOE_CODIGO
      ,MOE_NOME
      ,MOE_ATIVO
      ,MOE_REG
      ,MOE_CODUSR) VALUES(
      @moeCodigoNew   -- MOE_CODIGO
      ,@moeNomeNew    -- MOE_NOME
      ,@moeAtivoNew   -- MOE_ATIVO
      ,@moeRegNew     -- MOE_REG
      ,@moeCodUsrNew  -- MOE_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPMOEDA(
      MOE_ACAO
      ,MOE_CODIGO
      ,MOE_NOME
      ,MOE_ATIVO
      ,MOE_REG
      ,MOE_CODUSR) VALUES(
      'I'                       -- MOE_ACAO
      ,@moeCodigoNew            -- MOE_CODIGO
      ,@moeNomeNew              -- MOE_NOME
      ,@moeAtivoNew             -- MOE_ATIVO
      ,@moeRegNew               -- MOE_REG
      ,@moeCodUsrNew            -- MOE_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewMOEDA_BU ON dbo.VMOEDA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(4) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @moeCodigoNew VARCHAR(4);
  DECLARE @moeNomeNew VARCHAR(20);
  DECLARE @moeAtivoNew VARCHAR(1);
  DECLARE @moeRegNew VARCHAR(1);
  DECLARE @moeCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @moeCodigoNew   = i.MOE_CODIGO
         ,@moeNomeNew    = dbo.fncTranslate(i.MOE_NOME,20)
         ,@moeAtivoNew   = UPPER(i.MOE_ATIVO)
         ,@moeRegNew     = UPPER(i.MOE_REG)
         ,@moeCodUsrNew  = i.MOE_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New      = UP.UP_D08
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.MOE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@moeCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA ALTERAR NA TABELA MOEDA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @moeCodigoOld VARCHAR(4);
    DECLARE @moeNomeOld VARCHAR(20);
    DECLARE @moeAtivoOld VARCHAR(1);
    DECLARE @moeRegOld VARCHAR(1);
    DECLARE @moeCodUsrOld INTEGER;
    SELECT @moeCodigoOld   = d.MOE_CODIGO
           ,@moeNomeOld    = d.MOE_NOME
           ,@moeAtivoOld   = d.MOE_ATIVO
           ,@moeRegOld     = d.MOE_REG
           ,@moeCodUsrOld  = d.MOE_CODUSR         
      FROM MOEDA d WHERE d.MOE_CODIGO=@moeCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @moeCodigoOld<>@moeCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @moeNomeOld<>@moeNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(MOE_CODIGO,'OK') FROM MOEDA WHERE MOE_NOME=@moeNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA MOEDA COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @moeRegOld <> @moeRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@moeRegOld,@moeRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.MOEDA
       SET MOE_NOME   = @moeNomeNew
          ,MOE_ATIVO  = @moeAtivoNew
          ,MOE_REG    = @moeRegNew
          ,MOE_CODUSR = @moeCodUsrNew
    WHERE MOE_CODIGO  = @moeCodigoNew;     
    -- Gravando LOG
    IF( (@moeNomeOld<>@moeNomeNew) OR (@moeAtivoOld<>@moeAtivoNew) OR (@moeRegOld<>@moeRegNew) ) BEGIN
      INSERT INTO dbo.BKPMOEDA(
        MOE_ACAO
        ,MOE_CODIGO
        ,MOE_NOME
        ,MOE_ATIVO
        ,MOE_REG
        ,MOE_CODUSR) VALUES(
        'A'             -- MOE_ACAO
        ,@moeCodigoNew  -- MOE_CODIGO
        ,@moeNomeNew    -- MOE_NOME
        ,@moeAtivoNew   -- MOE_ATIVO
        ,@moeRegNew     -- MOE_REG
        ,@moeCodUsrNew  -- MOE_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewMOEDA_BD ON dbo.VMOEDA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @moeCodigoOld VARCHAR(4);
  DECLARE @moeNomeOld VARCHAR(20);
  DECLARE @moeAtivoOld VARCHAR(1);
  DECLARE @moeRegOld VARCHAR(1);
  DECLARE @moeCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD08Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @moeCodigoOld   = d.MOE_CODIGO
         ,@moeNomeOld    = d.MOE_NOME
         ,@moeAtivoOld   = d.MOE_ATIVO
         ,@moeRegOld     = d.MOE_REG
         ,@moeCodUsrOld  = d.MOE_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08Old      = UP.UP_D08
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.MOE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@moeCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD08Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA EXCLUIR NA TABELA MOEDA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@moeRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@moeCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('MOEDA UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@moeCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('MOEDA UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.MOEDA WHERE MOE_CODIGO=@moeCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPMOEDA(
      MOE_ACAO
      ,MOE_CODIGO
      ,MOE_NOME
      ,MOE_ATIVO
      ,MOE_REG
      ,MOE_CODUSR) VALUES(
      'E'               -- MOE_ACAO
      ,@moeCodigoOld    -- MOE_CODIGO
      ,@moeNomeOld      -- MOE_NOME
      ,@moeAtivoOld     -- MOE_ATIVO
      ,@moeRegOld       -- MOE_REG
      ,@moeCodUsrOld    -- MOE_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPMOEDA_BUD ON dbo.BKPMOEDA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                       N A T U R E Z A O P E R A C A O                           --
--trgnaturezaoperacao                                                              --
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewNATUREZAOPERACAO_BI ON dbo.VNATUREZAOPERACAO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- NO_CODIGO      | PK  |    |    | VC(02) NN          |
  -- NO_NOME        |     |    |    | VC(30) NN          |
  -- NO_FINNFE      | CC  |    |    | VC(1) NN           | Finalidade da NFE
  --                                                     | 1- NFe Normal
  --                                                     | 2- NFe Complementar
  --                                                     | 3- NFe Ajuste
  --                                                     | 4- Devolucao/Retorno
  -- NO_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- NO_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- NO_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D14         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      

  -- UP_D08         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(30) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @noCodigoNew VARCHAR(2);
  DECLARE @noNomeNew VARCHAR(30);
  DECLARE @noFinNfeNew VARCHAR(1);  
  DECLARE @noAtivoNew VARCHAR(1);
  DECLARE @noRegNew VARCHAR(1);
  DECLARE @noCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @noCodigoNew   = dbo.fncTranslate(i.NO_CODIGO,2)
         ,@noNomeNew    = dbo.fncTranslate(i.NO_NOME,30)
         ,@noFinNfeNew  = UPPER(i.NO_FINNFE)         
         ,@noAtivoNew   = UPPER(i.NO_ATIVO)
         ,@noRegNew     = UPPER(i.NO_REG)
         ,@noCodUsrNew  = i.NO_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New      = UP.UP_D14
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.NO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@noCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA INCLUIR NA TABELA NATUREZAOPERACAO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(NO_CODIGO,'OK') FROM NATUREZAOPERACAO WHERE NO_NOME=@noNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA NATUREZAOPERACAO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(NO_NOME,'OK') FROM NATUREZAOPERACAO WHERE NO_CODIGO=@noCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA NATUREZAOPERACAO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @noRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@noRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.NATUREZAOPERACAO( 
      NO_CODIGO
      ,NO_NOME
      ,NO_FINNFE            
      ,NO_ATIVO
      ,NO_REG
      ,NO_CODUSR) VALUES(
      @noCodigoNew   -- NO_CODIGO
      ,@noNomeNew    -- NO_NOME
      ,@noFinNfeNew  -- NO_FINNFE      
      ,@noAtivoNew   -- NO_ATIVO
      ,@noRegNew     -- NO_REG
      ,@noCodUsrNew  -- NO_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPNATUREZAOPERACAO(
      NO_ACAO
      ,NO_CODIGO
      ,NO_NOME
      ,NO_FINNFE      
      ,NO_ATIVO
      ,NO_REG
      ,NO_CODUSR) VALUES(
      'I'                      -- NO_ACAO
      ,@noCodigoNew            -- NO_CODIGO
      ,@noNomeNew              -- NO_NOME
      ,@noFinNfeNew            -- NO_FINNFE      
      ,@noAtivoNew             -- NO_ATIVO
      ,@noRegNew               -- NO_REG
      ,@noCodUsrNew            -- NO_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewNATUREZAOPERACAO_BU ON dbo.VNATUREZAOPERACAO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @noCodigoNew VARCHAR(2);
  DECLARE @noNomeNew VARCHAR(30);
  DECLARE @noFinNfeNew VARCHAR(1);    
  DECLARE @noAtivoNew VARCHAR(1);
  DECLARE @noRegNew VARCHAR(1);
  DECLARE @noCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @noCodigoNew   = i.NO_CODIGO
         ,@noNomeNew    = dbo.fncTranslate(i.NO_NOME,30)
         ,@noFinNfeNew  = UPPER(i.NO_FINNFE)                  
         ,@noAtivoNew   = UPPER(i.NO_ATIVO)
         ,@noRegNew     = UPPER(i.NO_REG)
         ,@noCodUsrNew  = i.NO_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New      = UP.UP_D14
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.NO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@noCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA ALTERAR NA TABELA NATUREZAOPERACAO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @noCodigoOld VARCHAR(2);
    DECLARE @noNomeOld VARCHAR(30);
    DECLARE @noFinNfeOld VARCHAR(1);    
    DECLARE @noAtivoOld VARCHAR(1);
    DECLARE @noRegOld VARCHAR(1);
    DECLARE @noCodUsrOld INTEGER;
    SELECT @noCodigoOld   = d.NO_CODIGO
           ,@noNomeOld    = d.NO_NOME
           ,@noFinNfeOld  = d.NO_FINNFE
           ,@noAtivoOld   = d.NO_ATIVO
           ,@noRegOld     = d.NO_REG
           ,@noCodUsrOld  = d.NO_CODUSR         
      FROM NATUREZAOPERACAO d WHERE d.NO_CODIGO=@noCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @noCodigoOld<>@noCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @noNomeOld<>@noNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(NO_CODIGO,'OK') FROM NATUREZAOPERACAO WHERE NO_NOME=@noNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA NATUREZAOPERACAO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @noRegOld <> @noRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@noRegOld,@noRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.NATUREZAOPERACAO
       SET NO_NOME   = @noNomeNew
          ,NO_FINNFE = @noFinNfeNew       
          ,NO_ATIVO  = @noAtivoNew
          ,NO_REG    = @noRegNew
          ,NO_CODUSR = @noCodUsrNew
    WHERE NO_CODIGO  = @noCodigoNew;     
    -- Gravando LOG
    IF( (@noNomeOld<>@noNomeNew) OR (@noFinNfeOld<>@noFinNfeNew) OR (@noAtivoOld<>@noAtivoNew) OR (@noRegOld<>@noRegNew) ) BEGIN
      INSERT INTO dbo.BKPNATUREZAOPERACAO(
        NO_ACAO
        ,NO_CODIGO
        ,NO_NOME
        ,NO_FINNFE        
        ,NO_ATIVO
        ,NO_REG
        ,NO_CODUSR) VALUES(
        'A'            -- NO_ACAO
        ,@noCodigoNew  -- NO_CODIGO
        ,@noNomeNew    -- NO_NOME
        ,@noFinNfeNew  -- NO_FINNFE        
        ,@noAtivoNew   -- NO_ATIVO
        ,@noRegNew     -- NO_REG
        ,@noCodUsrNew  -- NO_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewNATUREZAOPERACAO_BD ON dbo.VNATUREZAOPERACAO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @noCodigoOld VARCHAR(2);
  DECLARE @noNomeOld VARCHAR(30);
  DECLARE @noFinNfeOld VARCHAR(1);  
  DECLARE @noAtivoOld VARCHAR(1);
  DECLARE @noRegOld VARCHAR(1);
  DECLARE @noCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD14Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @noCodigoOld   = d.NO_CODIGO
         ,@noNomeOld    = d.NO_NOME
         ,@noFinNfeOld  = d.NO_FINNFE
         ,@noAtivoOld   = d.NO_ATIVO
         ,@noRegOld     = d.NO_REG
         ,@noCodUsrOld  = d.NO_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14Old      = UP.UP_D14
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.NO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@noCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD14Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA EXCLUIR NA TABELA NATUREZAOPERACAO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@noRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@noCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('NATUREZAOPERACAO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@noCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('NATUREZAOPERACAO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.NATUREZAOPERACAO WHERE NO_CODIGO=@noCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPNATUREZAOPERACAO(
      NO_ACAO
      ,NO_CODIGO
      ,NO_NOME
      ,NO_FINNFE      
      ,NO_ATIVO
      ,NO_REG
      ,NO_CODUSR) VALUES(
      'E'              -- NO_ACAO
      ,@noCodigoOld    -- NO_CODIGO
      ,@noNomeOld      -- NO_NOME
      ,@noFinNfeOld    -- NO_FINNFE      
      ,@noAtivoOld     -- NO_ATIVO
      ,@noRegOld       -- NO_REG
      ,@noCodUsrOld    -- NO_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPNATUREZAOPERACAO_BUD ON dbo.BKPNATUREZAOPERACAO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                                    N C M                                        --
--trgncm
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewNCM_BI ON dbo.VNCM
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- NCM_CODIGO     | PK  |    |    | VC(10) NN          |
  -- NCM_NOME       |     |    |    | VC(60) NN          |
  -- NCM_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- NCM_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- NCM_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D14         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(10) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(60) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ncmCodigoNew VARCHAR(10);
  DECLARE @ncmNomeNew VARCHAR(60);
  DECLARE @ncmAtivoNew VARCHAR(1);
  DECLARE @ncmRegNew VARCHAR(1);
  DECLARE @ncmCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ncmCodigoNew   = i.NCM_CODIGO
         ,@ncmNomeNew    = dbo.fncTranslate(i.NCM_NOME,60)
         ,@ncmAtivoNew   = UPPER(i.NCM_ATIVO)
         ,@ncmRegNew     = UPPER(i.NCM_REG)
         ,@ncmCodUsrNew  = i.NCM_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New      = UP.UP_D14
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.NCM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ncmCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA INCLUIR NA TABELA NCM',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(NCM_CODIGO,'OK') FROM NCM WHERE NCM_NOME=@ncmNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA NCM COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(NCM_NOME,'OK') FROM NCM WHERE NCM_CODIGO=@ncmCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA NCM %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ncmRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ncmRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.NCM( 
      NCM_CODIGO
      ,NCM_NOME
      ,NCM_ATIVO
      ,NCM_REG
      ,NCM_CODUSR) VALUES(
      @ncmCodigoNew   -- NCM_CODIGO
      ,@ncmNomeNew    -- NCM_NOME
      ,@ncmAtivoNew   -- NCM_ATIVO
      ,@ncmRegNew     -- NCM_REG
      ,@ncmCodUsrNew  -- NCM_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPNCM(
      NCM_ACAO
      ,NCM_CODIGO
      ,NCM_NOME
      ,NCM_ATIVO
      ,NCM_REG
      ,NCM_CODUSR) VALUES(
      'I'                      -- NCM_ACAO
      ,@ncmCodigoNew            -- NCM_CODIGO
      ,@ncmNomeNew              -- NCM_NOME
      ,@ncmAtivoNew             -- NCM_ATIVO
      ,@ncmRegNew               -- NCM_REG
      ,@ncmCodUsrNew            -- NCM_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewNCM_BU ON dbo.VNCM
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(10) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ncmCodigoNew VARCHAR(10);
  DECLARE @ncmNomeNew VARCHAR(60);
  DECLARE @ncmAtivoNew VARCHAR(1);
  DECLARE @ncmRegNew VARCHAR(1);
  DECLARE @ncmCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD14New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ncmCodigoNew   = i.NCM_CODIGO
         ,@ncmNomeNew    = dbo.fncTranslate(i.NCM_NOME,60)
         ,@ncmAtivoNew   = UPPER(i.NCM_ATIVO)
         ,@ncmRegNew     = UPPER(i.NCM_REG)
         ,@ncmCodUsrNew  = i.NCM_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14New      = UP.UP_D14
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.NCM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ncmCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD14New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA ALTERAR NA TABELA NCM',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ncmCodigoOld VARCHAR(10);
    DECLARE @ncmNomeOld VARCHAR(60);
    DECLARE @ncmAtivoOld VARCHAR(1);
    DECLARE @ncmRegOld VARCHAR(1);
    DECLARE @ncmCodUsrOld INTEGER;
    SELECT @ncmCodigoOld   = d.NCM_CODIGO
           ,@ncmNomeOld    = d.NCM_NOME
           ,@ncmAtivoOld   = d.NCM_ATIVO
           ,@ncmRegOld     = d.NCM_REG
           ,@ncmCodUsrOld  = d.NCM_CODUSR         
      FROM NCM d WHERE d.NCM_CODIGO=@ncmCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ncmCodigoOld<>@ncmCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @ncmNomeOld<>@ncmNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(NCM_CODIGO,'OK') FROM NCM WHERE NCM_NOME=@ncmNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA NCM COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ncmRegOld <> @ncmRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ncmRegOld,@ncmRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.NCM
       SET NCM_NOME   = @ncmNomeNew
          ,NCM_ATIVO  = @ncmAtivoNew
          ,NCM_REG    = @ncmRegNew
          ,NCM_CODUSR = @ncmCodUsrNew
    WHERE NCM_CODIGO  = @ncmCodigoNew;     
    -- Gravando LOG
    IF( (@ncmNomeOld<>@ncmNomeNew) OR (@ncmAtivoOld<>@ncmAtivoNew) OR (@ncmRegOld<>@ncmRegNew) ) BEGIN
      INSERT INTO dbo.BKPNCM(
        NCM_ACAO
        ,NCM_CODIGO
        ,NCM_NOME
        ,NCM_ATIVO
        ,NCM_REG
        ,NCM_CODUSR) VALUES(
        'A'            -- NCM_ACAO
        ,@ncmCodigoNew  -- NCM_CODIGO
        ,@ncmNomeNew    -- NCM_NOME
        ,@ncmAtivoNew   -- NCM_ATIVO
        ,@ncmRegNew     -- NCM_REG
        ,@ncmCodUsrNew  -- NCM_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewNCM_BD ON dbo.VNCM
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ncmCodigoOld VARCHAR(10);
  DECLARE @ncmNomeOld VARCHAR(60);
  DECLARE @ncmAtivoOld VARCHAR(1);
  DECLARE @ncmRegOld VARCHAR(1);
  DECLARE @ncmCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD14Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ncmCodigoOld   = d.NCM_CODIGO
         ,@ncmNomeOld    = d.NCM_NOME
         ,@ncmAtivoOld   = d.NCM_ATIVO
         ,@ncmRegOld     = d.NCM_REG
         ,@ncmCodUsrOld  = d.NCM_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD14Old      = UP.UP_D14
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.NCM_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ncmCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD14Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 14 PARA EXCLUIR NA TABELA NCM',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ncmRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@ncmCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('NCM UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@ncmCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('NCM UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.NCM WHERE NCM_CODIGO=@ncmCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPNCM(
      NCM_ACAO
      ,NCM_CODIGO
      ,NCM_NOME
      ,NCM_ATIVO
      ,NCM_REG
      ,NCM_CODUSR) VALUES(
      'E'              -- NCM_ACAO
      ,@ncmCodigoOld    -- NCM_CODIGO
      ,@ncmNomeOld      -- NCM_NOME
      ,@ncmAtivoOld     -- NCM_ATIVO
      ,@ncmRegOld       -- NCM_REG
      ,@ncmCodUsrOld    -- NCM_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPNCM_BUD ON dbo.BKPNCM
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                                 O P E R A D O R A                               
--trgoperadora
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewOPERADORA_BI ON dbo.VOPERADORA
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS      |UPD |DEL | TIPO               | Obs
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------
  -- OPE_CODFVR     | SEL/PK  |    |    | INT                | Campo relacionado (FAVORECIDO)
  -- FVR_NOME       | SEL     |    |    | VC(60)             | Campo relacionado (FAVORECIDO)
  -- OPE_ATIVO      | CC      |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- OPE_REG        | FNC     |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- OPE_CODUSR     | OK      |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL     |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL     |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D33         | SEL     |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL     |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @opeCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @opeAtivoNew VARCHAR(1);
  DECLARE @opeRegNew VARCHAR(1);
  DECLARE @opeCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @opeCodFvrNew   = i.OPE_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@opeAtivoNew   = UPPER(i.OPE_ATIVO)
         ,@opeRegNew     = UPPER(i.OPE_REG)
         ,@opeCodUsrNew  = i.OPE_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.OPE_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.OPE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@opeCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@opeCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA INCLUIR NA TABELA OPERADORA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(OPE_CODFVR,0) FROM OPERADORA WHERE (OPE_CODFVR=@opeCodFvrNew);
    IF( @uicODIGO <> 0 )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA OPERADORA %s',15,1,@fvrNomeNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @opeRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@opeRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.OPERADORA( 
      OPE_CODFVR
      ,OPE_ATIVO
      ,OPE_REG
      ,OPE_CODUSR) VALUES(
      @opeCodFvrNew   -- OPE_CODFVR
      ,@opeAtivoNew   -- OPE_ATIVO
      ,@opeRegNew     -- OPE_REG
      ,@opeCodUsrNew  -- OPE_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPOPERADORA(
      OPE_ACAO
      ,OPE_CODFVR
      ,OPE_ATIVO
      ,OPE_REG
      ,OPE_CODUSR) VALUES(
      'I'                         -- OPE_ACAO
      ,@opeCodFvrNew              -- OPE_CODFVR
      ,@opeAtivoNew               -- OPE_ATIVO
      ,@opeRegNew                 -- OPE_REG
      ,@opeCodUsrNew              -- OPE_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewOPERADORA_BU ON dbo.VOPERADORA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @opeCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @opeAtivoNew VARCHAR(1);
  DECLARE @opeRegNew VARCHAR(1);
  DECLARE @opeCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @opeCodFvrNew   = i.OPE_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@opeAtivoNew   = UPPER(i.OPE_ATIVO)
         ,@opeRegNew     = UPPER(i.OPE_REG)
         ,@opeCodUsrNew  = i.OPE_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.OPE_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.OPE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@opeCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@opeCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA ALTERAR NA TABELA OPERADORA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @opeCodFvrOld INTEGER;
    DECLARE @opeAtivoOld VARCHAR(1);
    DECLARE @opeRegOld VARCHAR(1);
    DECLARE @opeCodUsrOld INTEGER;
    SELECT @opeCodFvrOld   = d.OPE_CODFVR
           ,@opeAtivoOld   = d.OPE_ATIVO
           ,@opeRegOld     = d.OPE_REG
           ,@opeCodUsrOld  = d.OPE_CODUSR         
      FROM OPERADORA d WHERE (d.OPE_CODFVR=@opeCodFvrNew);  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @opeCodFvrOld<>@opeCodFvrNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @opeRegOld <> @opeRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@opeRegOld,@opeRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.OPERADORA
       SET OPE_ATIVO  = @opeAtivoNew
          ,OPE_REG    = @opeRegNew
          ,OPE_CODUSR = @opeCodUsrNew
    WHERE OPE_CODFVR  = @opeCodFvrNew;     
    -- Gravando LOG
    IF( (@opeAtivoOld<>@opeAtivoNew) OR (@opeRegOld<>@opeRegNew) ) BEGIN
      INSERT INTO dbo.BKPOPERADORA(
        OPE_ACAO
        ,OPE_CODFVR
        ,OPE_ATIVO
        ,OPE_REG
        ,OPE_CODUSR) VALUES(
        'A'                         -- OPE_ACAO
        ,@opeCodFvrNew              -- OPE_CODFVR
        ,@opeAtivoNew               -- OPE_ATIVO
        ,@opeRegNew                 -- OPE_REG
        ,@opeCodUsrNew              -- OPE_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewOPERADORA_BD ON dbo.VOPERADORA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @opeCodFvrOld INTEGER;
  DECLARE @opeAtivoOld VARCHAR(1);
  DECLARE @opeRegOld VARCHAR(1);
  DECLARE @opeCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD33Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @opeCodFvrOld   = d.OPE_CODFVR
         ,@opeAtivoOld   = d.OPE_ATIVO
         ,@opeRegOld     = d.OPE_REG
         ,@opeCodUsrOld  = d.OPE_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33Old      = UP.UP_D33
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.OPE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@opeCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD33Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA EXCLUIR NA TABELA OPERADORA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@opeRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@opeCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('OPERADORA UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@opeCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('OPERADORA UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.OPERADORA WHERE (OPE_CODFVR=@opeCodFvrOld);
    -- Gravando LOG
    INSERT INTO dbo.BKPOPERADORA(
      OPE_ACAO
      ,OPE_CODFVR
      ,OPE_ATIVO
      ,OPE_REG
      ,OPE_CODUSR) VALUES(
      'E'                         -- OPE_ACAO
      ,@opeCodFvrOld              -- OPE_CODFVR
      ,@opeAtivoOld               -- OPE_ATIVO
      ,@opeRegOld                 -- OPE_REG
      ,@opeCodUsrOld              -- OPE_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPOPERADORA_BUD ON dbo.BKPOPERADORA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                        P A D R A O
--trgpadrao
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPADRAO_BI ON dbo.VPADRAO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|--------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS     |UPD |DEL | TIPO               | Obs
  -- ---------------|--------|----|----|--------------------|----------------------------------------------------------
  -- PDR_CODIGO     | PK     |    |    | INT                |  Auto incremento
  -- PDR_NOME       |        |    |    | VC(40) NN          |
  -- PDR_CODPTT     | CC/SEL |    |    | VC(1) NN           | Campor relacionado ( PAGARTITULO )
  -- PTT_NOME       | SEL    |    |    | VC(25) NN          | Campor relacionado ( PAGARTITULO )  
  -- PDR_ATIVO      | CC     |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PDR_REG        | FNC    |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PDR_CODUSR     | OK     |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL    |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL    |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D10         | SEL    |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL    |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|--------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @uiNome VARCHAR(40) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pdrCodigoNew INTEGER;
  DECLARE @pdrNomeNew VARCHAR(40);
  DECLARE @pdrCodPttNew VARCHAR(1);  
  DECLARE @pttNomeNew VARCHAR(25);    
  DECLARE @pdrAtivoNew VARCHAR(1);
  DECLARE @pdrRegNew VARCHAR(1);
  DECLARE @pdrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD10New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pdrCodigoNew   = i.PDR_CODIGO
         ,@pdrNomeNew    = dbo.fncTranslate(i.PDR_NOME,40)
         ,@pdrCodPttNew  = UPPER(i.PDR_CODPTT)
         ,@pttNomeNew    = COALESCE(PTT.PTT_NOME,'ERRO')         
         ,@pdrAtivoNew   = UPPER(i.PDR_ATIVO)
         ,@pdrRegNew     = UPPER(i.PDR_REG)
         ,@pdrCodUsrNew  = i.PDR_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10New      = UP.UP_D10
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN PAGARTITULO PTT ON i.PDR_CODPTT=PTT.PTT_CODIGO AND PTT.PTT_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.PDR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pdrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD10New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 10 PARA INCLUIR NA TABELA PADRAO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    -- Este pode por diferenciar CP e CR
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(PDR_CODIGO,0) FROM PADRAO WHERE PDR_NOME=@pdrNomeNew;
    --IF( @uiCodigo <> 0 )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PADRAO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(PDR_NOME,'OK') FROM PADRAO WHERE PDR_CODIGO=@pdrCodigoNew;
    IF( @uiNome IS NOT NULL ) BEGIN
      IF( @uiNome <> 'OK' )
        RAISERROR('CODIGO JA CADASTRADO NA TABELA PADRAO %s',15,1,@uiNome);
    END  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @pdrRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@pdrRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PADRAO( 
      PDR_NOME
      ,PDR_CODPTT      
      ,PDR_ATIVO
      ,PDR_REG
      ,PDR_CODUSR) VALUES(
      @pdrNomeNew     -- PDR_NOME
      ,@pdrCodPttNew  -- PDR_CODPTT
      ,@pdrAtivoNew   -- PDR_ATIVO
      ,@pdrRegNew     -- PDR_REG
      ,@pdrCodUsrNew  -- PDR_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPADRAO(
      PDR_ACAO
      ,PDR_CODIGO
      ,PDR_NOME
      ,PDR_CODPTT      
      ,PDR_ATIVO
      ,PDR_REG
      ,PDR_CODUSR) VALUES(
      'I'                         -- PDR_ACAO
      ,IDENT_CURRENT('PADRAO')    -- PDR_CODIGO
      ,@pdrNomeNew                -- PDR_NOME
      ,@pdrCodPttNew              -- PDR_CODPTT
      ,@pdrAtivoNew               -- PDR_ATIVO
      ,@pdrRegNew                 -- PDR_REG
      ,@pdrCodUsrNew              -- PDR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPADRAO_BU ON dbo.VPADRAO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @pdrCodigoNew INTEGER;
  DECLARE @pdrNomeNew VARCHAR(40);
  DECLARE @pdrCodPttNew VARCHAR(1);  
  DECLARE @pttNomeNew VARCHAR(25);    
  DECLARE @pdrAtivoNew VARCHAR(1);
  DECLARE @pdrRegNew VARCHAR(1);
  DECLARE @pdrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD10New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @pdrCodigoNew   = i.PDR_CODIGO
         ,@pdrNomeNew    = dbo.fncTranslate(i.PDR_NOME,40)
         ,@pdrCodPttNew  = UPPER(i.PDR_CODPTT)
         ,@pttNomeNew    = COALESCE(PTT.PTT_NOME,'ERRO')         
         ,@pdrAtivoNew   = UPPER(i.PDR_ATIVO)
         ,@pdrRegNew     = UPPER(i.PDR_REG)
         ,@pdrCodUsrNew  = i.PDR_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10New      = UP.UP_D10
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN PAGARTITULO PTT ON i.PDR_CODPTT=PTT.PTT_CODIGO AND PTT.PTT_ATIVO='S'        
    LEFT OUTER JOIN USUARIO USR ON i.PDR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pdrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD10New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA PADRAO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @pdrCodigoOld INTEGER;
    DECLARE @pdrNomeOld VARCHAR(40);
    DECLARE @pdrCodPttOld VARCHAR(1);  
    DECLARE @pttNomeOld VARCHAR(25);    
    DECLARE @pdrAtivoOld VARCHAR(1);
    DECLARE @pdrRegOld VARCHAR(1);
    DECLARE @pdrCodUsrOld INTEGER;
    SELECT @pdrCodigoOld   = d.PDR_CODIGO
           ,@pdrNomeOld    = d.PDR_NOME
           ,@pdrCodPttOld  = d.PDR_CODPTT
           ,@pdrAtivoOld   = d.PDR_ATIVO
           ,@pdrRegOld     = d.PDR_REG
           ,@pdrCodUsrOld  = d.PDR_CODUSR         
      FROM PADRAO d WHERE d.PDR_CODIGO=@pdrCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @pdrCodigoOld<>@pdrCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    -- Este pode por diferenciar CP e CR
    ---------------------------------------------------------------------
    --IF( @pdrNomeOld<>@pdrNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(PDR_CODIGO,0) FROM PADRAO WHERE PDR_NOME=@pdrNomeNew;
    --  IF( @uiCodigo <> 0 )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PADRAO COM CODIGO %i',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @pdrRegOld <> @pdrRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@pdrRegOld,@pdrRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PADRAO
       SET PDR_NOME   = @pdrNomeNew
          ,PDR_CODPTT = @pdrCodPttNew       
          ,PDR_ATIVO  = @pdrAtivoNew
          ,PDR_REG    = @pdrRegNew
          ,PDR_CODUSR = @pdrCodUsrNew
    WHERE PDR_CODIGO  = @pdrCodigoNew;     
    -- Gravando LOG
    IF( (@pdrNomeOld<>@pdrNomeNew) OR (@pdrCodPttOld<>@pdrCodPttNew) OR (@pdrAtivoOld<>@pdrAtivoNew) OR (@pdrRegOld<>@pdrRegNew) ) BEGIN
      INSERT INTO dbo.BKPPADRAO(
        PDR_ACAO
        ,PDR_CODIGO
        ,PDR_NOME
        ,PDR_CODPTT        
        ,PDR_ATIVO
        ,PDR_REG
        ,PDR_CODUSR) VALUES(
        'A'            -- PDR_ACAO
        ,@pdrCodigoNew  -- PDR_CODIGO
        ,@pdrNomeNew    -- PDR_NOME
        ,@pdrCodPttNew  -- PDR_CODPTT        
        ,@pdrAtivoNew   -- PDR_ATIVO
        ,@pdrRegNew     -- PDR_REG
        ,@pdrCodUsrNew  -- PDR_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPADRAO_BD ON dbo.VPADRAO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pdrCodigoOld INTEGER;
  DECLARE @pdrNomeOld VARCHAR(40);
  DECLARE @pdrCodPttOld VARCHAR(1);  
  DECLARE @pdrAtivoOld VARCHAR(1);
  DECLARE @pdrRegOld VARCHAR(1);
  DECLARE @pdrCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD10Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pdrCodigoOld   = d.PDR_CODIGO
         ,@pdrNomeOld    = d.PDR_NOME
         ,@pdrCodPttOld  = d.PDR_CODPTT
         ,@pdrAtivoOld   = d.PDR_ATIVO
         ,@pdrRegOld     = d.PDR_REG
         ,@pdrCodUsrOld  = d.PDR_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10Old      = UP.UP_D10
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PDR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pdrCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD10Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 10 PARA EXCLUIR NA TABELA PADRAO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@pdrRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@pdrCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('PADRAO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@pdrCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('PADRAO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.PADRAO WHERE PDR_CODIGO=@pdrCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPPADRAO(
      PDR_ACAO
      ,PDR_CODIGO
      ,PDR_NOME
      ,PDR_CODPTT      
      ,PDR_ATIVO
      ,PDR_REG
      ,PDR_CODUSR) VALUES(
      'E'               -- PDR_ACAO
      ,@pdrCodigoOld    -- PDR_CODIGO
      ,@pdrNomeOld      -- PDR_NOME
      ,@pdrCodPttOld    -- PDR_CODPTT      
      ,@pdrAtivoOld     -- PDR_ATIVO
      ,@pdrRegOld       -- PDR_REG
      ,@pdrCodUsrOld    -- PDR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPADRAO_BUD ON dbo.BKPPADRAO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                           P A D R A O G R U P O 
--trgpadraogrupo
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPADRAOGRUPO_BI ON dbo.VPADRAOGRUPO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS   |UPD |DEL | TIPO               | Obs
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------
  -- PG_CODPDR      |PK/SEL|    |    | INT NN             | Campo relacionado (PADRAO)
  -- PDR_NOME       |      |    |    | VC(40) NN          | Campo relacionado (PADRAO)   
  -- PG_CODPTP      |PK/SEL|    |    | VC(15) NN          | Campo relacionado (PAGARTIPO)
  -- PTP_NOME       | SEL  |    |    | VC(25) NN          | Campo relacionado (PAGARTIPO)   
  -- PG_INDICE      | SIS  |    |    | VC(5) NN           | Acelerador - Junta PG_CODPTP+PG_CODPDR
  -- PG_ATIVO       | CC   |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PG_REG         | FNC  |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PG_CODUSR      | OK   |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL  |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL  |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D10         | SEL  |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL  |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodPdr INTEGER     = 0;        -- Para procurar unique index
  --DECLARE @uiNome VARCHAR(40)   = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70)  = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pgCodPdrNew INTEGER;
  DECLARE @pdrNomeNew VARCHAR(40);
  DECLARE @pgCodPtpNew VARCHAR(2);
  DECLARE @ptpNomeNew VARCHAR(25);
  DECLARE @pgIndiceNew VARCHAR(5);
  DECLARE @pgAtivoNew VARCHAR(1);
  DECLARE @pgRegNew VARCHAR(1);
  DECLARE @pgCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD10New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pgCodPdrNew     = i.PG_CODPDR
         ,@pdrNomeNew     = COALESCE(PDR.PDR_NOME,'ERRO')
         ,@pgCodPtpNew    = i.PG_CODPTP
         ,@ptpNomeNew     = COALESCE(PTP.PTP_NOME,'ERRO')
         ,@pgAtivoNew     = UPPER(i.PG_ATIVO)
         ,@pgRegNew       = UPPER(i.PG_REG)
         ,@pgCodUsrNew    = i.PG_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10New       = UP.UP_D10
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN PADRAO PDR ON i.PG_CODPDR=PDR.PDR_CODIGO AND PDR.PDR_ATIVO='S'
    LEFT OUTER JOIN PAGARTIPO PTP ON i.PG_CODPTP=PTP.PTP_CODIGO AND PTP.PTP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.PG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    SET @pgIndiceNew=CONCAT(@pgCodPtpNew,CAST(@pgCodPdrNew AS VARCHAR(3)));
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pgCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD10New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 10 PARA INCLUIR NA TABELA PADRAOGRUPO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- PK
    ---------------------------------------------------------------------
    SELECT @uiCodPdr=COALESCE(PG_CODPDR,0) FROM PADRAOGRUPO WHERE (PG_INDICE=@pgIndiceNew);
    IF( @uiCodPdr<>0 )
      RAISERROR('REGISTRO JA CADASTRADO NESTA TABELA',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(PDR_COPDR,0) FROM PADRAOGRUPO WHERE PDR_NOME=@pdrNomeNew;
    --IF( @uiCodigo <> 0 )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PADRAOGRUPO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(PDR_NOME,'OK') FROM PADRAOGRUPO WHERE PDR_COPDR=@pgCodPdrNew;
    --IF( @uiNome IS NOT NULL ) BEGIN
    --  IF( @uiNome <> 'OK' )
    --    RAISERROR('CODIGO JA CADASTRADO NA TABELA PADRAOGRUPO %s',15,1,@uiNome);
    --END  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @pgRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@pgRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PADRAOGRUPO( 
      PG_CODPDR
      ,PG_CODPTP
      ,PG_INDICE
      ,PG_ATIVO
      ,PG_REG
      ,PG_CODUSR) VALUES(
      @pgCodPdrNew   -- PG_CODPDR
      ,@pgCodPtpNew  -- PG_CODPTP
      ,@pgIndiceNew  -- PG_INDICE
      ,@pgAtivoNew   -- PG_ATIVO
      ,@pgRegNew     -- PG_REG
      ,@pgCodUsrNew  -- PG_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPADRAOGRUPO(
      PG_ACAO
      ,PG_CODPDR
      ,PG_CODPTP
      ,PG_ATIVO
      ,PG_REG
      ,PG_CODUSR) VALUES(
      'I'             -- PG_ACAO
      ,@pgCodPdrNew   -- PG_CODPDR
      ,@pgCodPtpNew   -- PG_CODPTP
      ,@pgAtivoNew    -- PG_ATIVO
      ,@pgRegNew      -- PG_REG
      ,@pgCodUsrNew   -- PG_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPADRAOGRUPO_BU ON dbo.VPADRAOGRUPO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @pgCodPdrNew INTEGER;
  DECLARE @pdrNomeNew VARCHAR(40);
  DECLARE @pgCodPtpNew VARCHAR(2);
  DECLARE @ptpNomeNew VARCHAR(25);
  DECLARE @pgAtivoNew VARCHAR(1);
  DECLARE @pgRegNew VARCHAR(1);
  DECLARE @pgCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD10New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @pgCodPdrNew     = i.PG_CODPDR
         ,@pdrNomeNew     = COALESCE(PDR.PDR_NOME,'ERRO')
         ,@pgCodPtpNew    = i.PG_CODPTP
         ,@ptpNomeNew     = COALESCE(PTP.PTP_NOME,'ERRO')
         ,@pgAtivoNew     = UPPER(i.PG_ATIVO)
         ,@pgRegNew       = UPPER(i.PG_REG)
         ,@pgCodUsrNew    = i.PG_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10New       = UP.UP_D10
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN PADRAO PDR ON i.PG_CODPDR=PDR.PDR_CODIGO AND PDR.PDR_ATIVO='S'
    LEFT OUTER JOIN PAGARTIPO PTP ON i.PG_CODPTP=PTP.PTP_CODIGO AND PTP.PTP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.PG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pgCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD10New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 10 PARA ALTERAR NA TABELA PADRAOGRUPO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @pgCodPdrOld INTEGER;
    DECLARE @pgCodPtpOld VARCHAR(2);
    DECLARE @pgAtivoOld VARCHAR(1);
    DECLARE @pgRegOld VARCHAR(1);
    DECLARE @pgCodUsrOld INTEGER;

    SELECT @pgCodPdrOld     = d.PG_CODPDR
           ,@pgCodPtpOld    = d.PG_CODPTP
           ,@pgAtivoOld     = d.PG_ATIVO
           ,@pgRegOld       = d.PG_REG
           ,@pgCodUsrOld    = d.PG_CODUSR         
      FROM PADRAOGRUPO d WHERE ((d.PG_CODPDR=@pgCodPdrNew) AND (d.PG_CODPTP=@pgCodPtpNew));     
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @pgCodPdrOld<>@pgCodPdrNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @pgCodPtpOld<>@pgCodPtpNew )
      RAISERROR('CAMPO TIPO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @pdrNomeOld<>@pdrNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(PDR_COPDR,0) FROM PADRAOGRUPO WHERE PDR_NOME=@pdrNomeNew;
    --  IF( @uiCodigo <> 0 )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PADRAOGRUPO COM CODIGO %i',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @pgRegOld <> @pgRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@pgRegOld,@pgRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PADRAOGRUPO
       SET PG_ATIVO  = @pgAtivoNew
          ,PG_REG    = @pgRegNew
          ,PG_CODUSR = @pgCodUsrNew
    WHERE ((PG_CODPDR=@pgCodPdrNew) AND (PG_CODPTP=@pgCodPtpNew));     
    -- Gravando LOG
    IF( (@pgAtivoOld<>@pgAtivoNew) OR (@pgRegOld<>@pgRegNew) ) BEGIN
      INSERT INTO dbo.BKPPADRAOGRUPO(
        PG_ACAO
        ,PG_CODPDR
        ,PG_CODPTP
        ,PG_ATIVO
        ,PG_REG
        ,PG_CODUSR) VALUES(
        'A'             -- PG_ACAO
        ,@pgCodPdrNew   -- PG_CODPDR
        ,@pgCodPtpNew   -- PG_CODPTP
        ,@pgAtivoNew    -- PG_ATIVO
        ,@pgRegNew      -- PG_REG
        ,@pgCodUsrNew   -- PG_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPADRAOGRUPO_BD ON dbo.VPADRAOGRUPO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pgCodPdrOld INTEGER;
  DECLARE @pgCodPtpOld VARCHAR(2);
  DECLARE @pgAtivoOld VARCHAR(1);
  DECLARE @pgRegOld VARCHAR(1);
  DECLARE @pgCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD10Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pgCodPdrOld     = d.PG_CODPDR
         ,@pgCodPtpOld    = d.PG_CODPTP
         ,@pgAtivoOld     = d.PG_ATIVO
         ,@pgRegOld       = d.PG_REG
         ,@pgCodUsrOld    = d.PG_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10Old      = UP.UP_D10
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pgCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD10Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 10 PARA EXCLUIR NA TABELA PADRAOGRUPO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@pgRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@pgCodPdrOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('PADRAOGRUPO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@pgCodPdrOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('PADRAOGRUPO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.PADRAOGRUPO WHERE ((PG_CODPDR=@pgCodPdrOld) AND (PG_CODPTP=@pgCodPtpOld));     
    -- Gravando LOG
    INSERT INTO dbo.BKPPADRAOGRUPO(
      PG_ACAO
      ,PG_CODPDR
      ,PG_CODPTP
      ,PG_ATIVO
      ,PG_REG
      ,PG_CODUSR) VALUES(
      'E'             -- PG_ACAO
      ,@pgCodPdrOld   -- PG_CODPDR
      ,@pgCodPtpOld   -- PG_CODPTP
      ,@pgAtivoOld    -- PG_ATIVO
      ,@pgRegOld      -- PG_REG
      ,@pgCodUsrOld   -- PG_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPADRAOGRUPO_BUD ON dbo.BKPPADRAOGRUPO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                           P A D R A O T I T U L O                               --
--trgpadraotitulo
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPADRAOTITULO_BI ON dbo.VPADRAOTITULO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PT_CODIGO      | PK  |    |    | INT                |  Auto incremento
  -- PT_NOME        |     |    |    | VC(60) NN          |
  -- PT_CODTD       | SEL |    |    | VC(3) NN           | Campo relacionado (TIPODOCUMENTO)   
  -- TD_NOME        | SEL |    |    | VC(20) NN          | Campo relacionado (TIPODOCUMENTO)      
  -- PT_CODFC       | SEL |    |    | VC(3) NN           | Campo relacionado (FORMACOBRANCA)   
  -- FC_NOME        | SEL |    |    | VC(20) NN          | Campo relacionado (FORMACOBRANCA)      
  -- PT_DEBCRE      | CC  |    |    | VC(1) NN           |  
  -- PT_CODCC       | SEL |    |    | VC(15) NN          | Campo relacionado (CONTAGERENCIAL)
  -- CC_NOME        | SEL |    |    | VC(40) NN          | Campo relacionado (CONTAGERENCIAL)   
  -- PT_CODPDR      | SEL |    |    | INT NN             | Campo relacionado (PADRAO)
  -- PDR_NOME       | SEL |    |    | VC(40) NN          | Campo relacionado (PADRAO)   
  -- PT_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PT_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PT_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D10         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  --DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ptCodigoNew INTEGER;
  DECLARE @ptNomeNew VARCHAR(60);
  DECLARE @ptCodTdNew VARCHAR(3);
  DECLARE @tdNomeNew VARCHAR(20);
  DECLARE @ptCodFcNew VARCHAR(3);
  DECLARE @fcNomeNew VARCHAR(20);
  DECLARE @ptDebCreNew VARCHAR(1);
  DECLARE @ptCodCcNew VARCHAR(15);
  DECLARE @ccNomeNew VARCHAR(40);
  DECLARE @ptCodPdrNew INTEGER;
  DECLARE @pdrNomeNew VARCHAR(40);
  DECLARE @ptAtivoNew VARCHAR(1);
  DECLARE @ptRegNew VARCHAR(1);
  DECLARE @ptCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD10New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ptCodigoNew     = i.PT_CODIGO
         ,@ptNomeNew      = dbo.fncTranslate(i.PT_NOME,60)
         ,@ptCodTdNew     = dbo.fncTranslate(i.PT_CODTD,3)
         ,@tdNomeNew      = COALESCE(TD.TD_NOME,'ERRO')
         ,@ptCodFcNew     = dbo.fncTranslate(i.PT_CODFC,3)
         ,@fcNomeNew      = COALESCE(FC.FC_NOME,'ERRO')
         ,@ptDebCreNew    = UPPER(i.PT_DEBCRE)
         ,@ptCodCcNew     = dbo.fncTranslate(i.PT_CODCC,15)
         ,@ccNomeNew      = COALESCE(CC.CC_NOME,'ERRO')
         ,@ptCodPdrNew    = i.PT_CODPDR
         ,@pdrNomeNew     = COALESCE(PDR.PDR_NOME,'ERRO')
         ,@ptAtivoNew     = UPPER(i.PT_ATIVO)
         ,@ptRegNew       = UPPER(i.PT_REG)
         ,@ptCodUsrNew    = i.PT_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10New       = UP.UP_D10
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FORMACOBRANCA FC ON i.PT_CODFC=FC.FC_CODIGO AND FC.FC_ATIVO='S'    
    LEFT OUTER JOIN TIPODOCUMENTO TD ON i.PT_CODTD=TD.TD_CODIGO AND TD.TD_ATIVO='S'    
    LEFT OUTER JOIN PADRAO PDR ON i.PT_CODPDR=PDR.PDR_CODIGO AND PDR.PDR_ATIVO='S'    
    LEFT OUTER JOIN CONTACONTABIL CC ON i.PT_CODCC=CC.CC_CODIGO AND CC.CC_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.PT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @tdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO DE DOCUMENTO %s PARA ESTE REGISTRO',15,1,@ptCodTdNew);    
    IF( @fcNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO COBRANCA %s PARA ESTE REGISTRO',15,1,@ptCodFcNew);        
    IF( @ccNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CONTA CONTABIL %s PARA ESTE REGISTRO',15,1,@ptCodCcNew);        
    IF( @pdrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LANCTO PADRAO %i PARA ESTE REGISTRO',15,1,@ptCodPdrNew);        
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ptCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD10New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 10 PARA INCLUIR NA TABELA PADRAOTITULO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(PT_CODIGO,0) FROM PADRAOTITULO WHERE PT_NOME=@ptNomeNew;
    IF( @uiCodigo <> 0 )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PADRAOTITULO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(PT_NOME,'OK') FROM PADRAOTITULO WHERE PT_CODIGO=@ptCodigoNew;
    --IF( @uiNome <> 'OK' )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA PADRAOTITULO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ptRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ptRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PADRAOTITULO( 
      PT_NOME
      ,PT_CODTD
      ,PT_CODFC
      ,PT_DEBCRE
      ,PT_CODCC
      ,PT_CODPDR
      ,PT_ATIVO
      ,PT_REG
      ,PT_CODUSR) VALUES(
      @ptNomeNew      -- PT_NOME
      ,@ptCodTdNew    -- PT_CODTD
      ,@ptCodFcNew    -- PT_CODFC
      ,@ptDebCreNew   -- PT_DEBCRE
      ,@ptCodCcNew    -- PT_CODCC
      ,@ptCodPdrNew   -- PT_CODPDR
      ,@ptAtivoNew    -- PT_ATIVO
      ,@ptRegNew      -- PT_REG
      ,@ptCodUsrNew   -- PT_CODUSR         
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPADRAOTITULO(
      PT_ACAO
      ,PT_CODIGO
      ,PT_NOME
      ,PT_CODTD
      ,PT_CODFC
      ,PT_DEBCRE
      ,PT_CODCC
      ,PT_CODPDR
      ,PT_ATIVO
      ,PT_REG
      ,PT_CODUSR) VALUES(
      'I'                             -- PT_ACAO
      ,IDENT_CURRENT('PADRAOTITULO')  -- PT_CODIGO
      ,@ptNomeNew                     -- PT_NOME
      ,@ptCodTdNew                    -- PT_CODTD
      ,@ptCodFcNew                    -- PT_CODFC
      ,@ptDebCreNew                   -- PT_DEBCRE
      ,@ptCodCcNew                    -- PT_CODCC
      ,@ptCodPdrNew                   -- PT_CODPDR
      ,@ptAtivoNew                    -- PT_ATIVO
      ,@ptRegNew                      -- PT_REG
      ,@ptCodUsrNew                   -- PT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPADRAOTITULO_BU ON dbo.VPADRAOTITULO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER=0;    -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ptCodigoNew INTEGER;
  DECLARE @ptNomeNew VARCHAR(60);
  DECLARE @ptCodTdNew VARCHAR(3);
  DECLARE @tdNomeNew VARCHAR(20);
  DECLARE @ptCodFcNew VARCHAR(3);
  DECLARE @fcNomeNew VARCHAR(20);
  DECLARE @ptDebCreNew VARCHAR(1);
  DECLARE @ptCodCcNew VARCHAR(15);
  DECLARE @ccNomeNew VARCHAR(40);
  DECLARE @ptCodPdrNew INTEGER;
  DECLARE @pdrNomeNew VARCHAR(40);
  DECLARE @ptAtivoNew VARCHAR(1);
  DECLARE @ptRegNew VARCHAR(1);
  DECLARE @ptCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD10New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ptCodigoNew     = i.PT_CODIGO
         ,@ptNomeNew      = dbo.fncTranslate(i.PT_NOME,60)
         ,@ptCodTdNew     = dbo.fncTranslate(i.PT_CODTD,3)
         ,@tdNomeNew      = COALESCE(TD.TD_NOME,'ERRO')
         ,@ptCodFcNew     = dbo.fncTranslate(i.PT_CODFC,3)
         ,@fcNomeNew      = COALESCE(FC.FC_NOME,'ERRO')
         ,@ptDebCreNew    = UPPER(i.PT_DEBCRE)
         ,@ptCodCcNew     = dbo.fncTranslate(i.PT_CODCC,15)
         ,@ccNomeNew      = COALESCE(CC.CC_NOME,'ERRO')
         ,@ptCodPdrNew    = i.PT_CODPDR
         ,@pdrNomeNew     = COALESCE(PDR.PDR_NOME,'ERRO')
         ,@ptAtivoNew     = UPPER(i.PT_ATIVO)
         ,@ptRegNew       = UPPER(i.PT_REG)
         ,@ptCodUsrNew    = i.PT_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10New       = UP.UP_D10
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FORMACOBRANCA FC ON i.PT_CODFC=FC.FC_CODIGO AND FC.FC_ATIVO='S'    
    LEFT OUTER JOIN TIPODOCUMENTO TD ON i.PT_CODTD=TD.TD_CODIGO AND TD.TD_ATIVO='S'    
    LEFT OUTER JOIN PADRAO PDR ON i.PT_CODPDR=PDR.PDR_CODIGO AND PDR.PDR_ATIVO='S'    
    LEFT OUTER JOIN CONTACONTABIL CC ON i.PT_CODCC=CC.CC_CODIGO AND CC.CC_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.PT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @tdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO DE DOCUMENTO %s PARA ESTE REGISTRO',15,1,@ptCodTdNew);    
    IF( @fcNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO COBRANCA %s PARA ESTE REGISTRO',15,1,@ptCodFcNew);        
    IF( @ccNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CONTA CONTABIL %s PARA ESTE REGISTRO',15,1,@ptCodCcNew);        
    IF( @pdrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO LANCTO PADRAO %i PARA ESTE REGISTRO',15,1,@ptCodPdrNew);        
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ptCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD10New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 10 PARA ALTERAR NA TABELA PADRAOTITULO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ptCodigoOld INTEGER;
    DECLARE @ptNomeOld VARCHAR(60);
    DECLARE @ptCodTdOld VARCHAR(3);
    DECLARE @ptCodFcOld VARCHAR(3);
    DECLARE @ptDebCreOld VARCHAR(1);
    DECLARE @ptCodCcOld VARCHAR(15);
    DECLARE @ptCodPdrOld INTEGER;
    DECLARE @ptAtivoOld VARCHAR(1);
    DECLARE @ptRegOld VARCHAR(1);
    DECLARE @ptCodUsrOld INTEGER;
    
    SELECT @ptCodigoOld   = d.PT_CODIGO
           ,@ptNomeOld    = d.PT_NOME
           ,@ptCodTdOld   = d.PT_CODTD
           ,@ptCodFcOld   = d.PT_CODFC
           ,@ptDebCreOld  = d.PT_DEBCRE
           ,@ptCodCcOld   = d.PT_CODCC
           ,@ptCodPdrOld  = d.PT_CODPDR
           ,@ptAtivoOld   = d.PT_ATIVO
           ,@ptRegOld     = d.PT_REG
           ,@ptAtivoOld   = d.PT_ATIVO
           ,@ptRegOld     = d.PT_REG
           ,@ptCodUsrOld  = d.PT_CODUSR         
      FROM PADRAOTITULO d WHERE d.PT_CODIGO=@ptCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ptCodigoOld<>@ptCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @ptNomeOld<>@ptNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(PT_CODIGO,'OK') FROM PADRAOTITULO WHERE PT_NOME=@ptNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PADRAOTITULO COM CODIGO %s',15,1,@uiCodigo);
    --END   
    
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @ptNomeOld<>@ptNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(PT_CODIGO,0) FROM PADRAOTITULO WHERE PT_NOME=@ptNomeNew;
      IF( @uiCodigo <> 0 )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PADRAOTITULO COM CODIGO %i',15,1,@uiCodigo);
    END
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ptRegOld <> @ptRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ptRegOld,@ptRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PADRAOTITULO
       SET PT_NOME   = @ptNomeNew
          ,PT_CODTD  = @ptCodTdNew   
          ,PT_CODFC  = @ptCodFcNew   
          ,PT_DEBCRE = @ptDebCreNew   
          ,PT_CODCC  = @ptCodCcNew   
          ,PT_CODPDR = @ptCodPdrNew   
          ,PT_ATIVO  = @ptAtivoNew
          ,PT_REG    = @ptRegNew
          ,PT_CODUSR = @ptCodUsrNew
    WHERE PT_CODIGO  = @ptCodigoNew;     
    -- Gravando LOG
    IF( (@ptNomeOld<>@ptNomeNew) OR (@ptCodTdOld<>@ptCodTdNew) OR (@ptCodFcOld<>@ptCodFcNew) OR (@ptDebCreOld<>@ptDebCreNew) OR (@ptCodCcOld<>@ptCodCcNew)
     OR (@ptCodPdrOld<>@ptCodPdrNew) OR (@ptAtivoOld<>@ptAtivoNew) OR (@ptRegOld<>@ptRegNew) ) BEGIN
      INSERT INTO dbo.BKPPADRAOTITULO(
        PT_ACAO
        ,PT_CODIGO
        ,PT_NOME
        ,PT_CODTD
        ,PT_CODFC
        ,PT_DEBCRE
        ,PT_CODCC
        ,PT_CODPDR
        ,PT_ATIVO
        ,PT_REG
        ,PT_CODUSR) VALUES(
        'A'             -- PT_ACAO
        ,@ptCodigoNew   -- PT_CODIGO
        ,@ptNomeNew     -- PT_NOME
        ,@ptCodTdNew    -- PT_CODTD
        ,@ptCodFcNew    -- PT_CODFC
        ,@ptDebCreNew   -- PT_DEBCRE
        ,@ptCodCcNew    -- PT_CODCC
        ,@ptCodPdrNew   -- PT_CODPDR
        ,@ptAtivoNew    -- PT_ATIVO
        ,@ptRegNew      -- PT_REG
        ,@ptCodUsrNew   -- PT_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPADRAOTITULO_BD ON dbo.VPADRAOTITULO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ptCodigoOld INTEGER;
  DECLARE @ptNomeOld VARCHAR(60);
  DECLARE @ptCodTdOld VARCHAR(3);
  DECLARE @ptCodFcOld VARCHAR(3);
  DECLARE @ptDebCreOld VARCHAR(1);
  DECLARE @ptCodCcOld VARCHAR(15);
  DECLARE @ptCodPdrOld INTEGER;
  DECLARE @ptAtivoOld VARCHAR(1);
  DECLARE @ptRegOld VARCHAR(1);
  DECLARE @ptCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD10Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ptCodigoOld     = d.PT_CODIGO
         ,@ptNomeOld      = d.PT_NOME
         ,@ptCodTdOld     = d.PT_CODTD
         ,@ptCodFcOld     = d.PT_CODFC
         ,@ptDebCreOld    = d.PT_DEBCRE
         ,@ptCodCcOld     = d.PT_CODCC
         ,@ptCodPdrOld    = d.PT_CODPDR
         ,@ptAtivoOld     = d.PT_ATIVO
         ,@ptRegOld       = d.PT_REG
         ,@ptAtivoOld     = d.PT_ATIVO
         ,@ptRegOld       = d.PT_REG
         ,@ptCodUsrOld    = d.PT_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10Old       = UP.UP_D10
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ptCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD10Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 10 PARA EXCLUIR NA TABELA PADRAOTITULO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ptRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@ptCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('PADRAOTITULO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@ptCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('PADRAOTITULO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.PADRAOTITULO WHERE PT_CODIGO=@ptCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPPADRAOTITULO(
      PT_ACAO
      ,PT_CODIGO
      ,PT_NOME
      ,PT_CODTD
      ,PT_CODFC
      ,PT_DEBCRE
      ,PT_CODCC
      ,PT_CODPDR
      ,PT_ATIVO
      ,PT_REG
      ,PT_CODUSR) VALUES(
      'E'             -- PT_ACAO
      ,@ptCodigoOld   -- PT_CODIGO
      ,@ptNomeOld     -- PT_NOME
      ,@ptCodTdOld    -- PT_CODTD
      ,@ptCodFcOld    -- PT_CODFC
      ,@ptDebCreOld   -- PT_DEBCRE
      ,@ptCodCcOld    -- PT_CODCC
      ,@ptCodPdrOld   -- PT_CODPDR
      ,@ptAtivoOld    -- PT_ATIVO
      ,@ptRegOld      -- PT_REG
      ,@ptCodUsrOld   -- PT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPADRAOTITULO_BUD ON dbo.BKPPADRAOTITULO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                                  P A G A R
--trgpagar
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPAGAR_BI ON dbo.VPAGAR
INSTEAD OF INSERT 
AS
BEGIN
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO            |INS  |UPD |DEL | TIPO               | Obs
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PGR_LANCTO       | PK  |    |    | INT                | Auto incremento
  -- PGR_BLOQUEADO    | CC  |    |    | VC(1) NN           | S|N
  -- PGR_CHEQUE       |     |    |    | VC(10)             |
  -- PGR_CODBNC       |     |    |    | INT NN             | Campo relacionado (BANCO)
  -- BNC_NOME         | SEL |    |    | VC(40) NN          | Campo relacionado (BANCO)
  -- BNC_CODCC        | SEL |    |    | VC(15) NN          | Campo relacionado (BANCO)  
  -- PGR_CODFVR       |     |    |    | INT NN             | Campo relacionado (FAVORECIDO)  
  -- FVR_APELIDO      | SEL |    |    | VC(15) NN          | Campo relacionado (FAVORECIDO)  
  -- FVR_CTAATIVO     | SEL |    |    | VC(15) NN          | Campo relacionado (FAVORECIDO)    
  -- FVR_CTAPASSIVO   | SEL |    |    | VC(15) NN          | Campo relacionado (FAVORECIDO)      
  -- PGR_CODFC        |     |    |    | VC(3) NN           | Campo relacionado (FORMACOBRANCA)
  -- FC_NOME          |     |    |    | VC(20) NN          | Campo relacionado (FORMACOBRANCA)  
  -- PGR_CODTD        |     |    |    | VC(3) NN           | Campo relacionado (TIPODOCUMENTO)
  -- TD_NOME          |     |    |    | VC(20) NN          | Campo relacionado (TIPODOCUMENTO)    
  -- PGR_VENCTO       | CC  |    |    | DT NN              |
  -- PGR_DATAPAGA     |     |    |    | DT                 |
  -- PGR_DOCTO        |     |    |    | VC(12) NN          |
  -- PGR_DTDOCTO      | CC  |    |    | DT NN              |
  -- PGR_CODPTT       |     |    |    | VC(1) NN           | Campo relacionado (PAGARTITULO)
  -- PTT_NOME         |     |    |    | VC(25) NN          | Campo relacionado (PAGARTITULO)      
  -- PGR_MASTER       |     |    |    | INT NN             |
  -- PGR_OBSERVACAO   |     |    |    | VC(120) NN         |
  -- PGR_PARCELA      | CC  |    |    | INT NN             |
  -- PGR_CODPTP       |     |    |    | VC(2) NN           | Campo relacionado (PAGARTIPO)
  -- PTP_NOME         |     |    |    | VC(25) NN          | Campo relacionado (PAGARTIPO)        
  -- PTP_VALOR        |     |    |    | INT NN             | Campo relacionado (PAGARTIPO)          
  -- PGR_INDICE       |     |    |    | INT NN             | PAGARTIPO->PTP_VALOR
  -- PGR_CODPT        |     |    |    | INT NN             | Campo relacionado (PADRAOTITULO)
  -- PT_NOME          |     |    |    | VC(60) NN          | Campo relacionado (PADRAOTITULO)  
  -- PGR_VLRDESCONTO  | CC  |    |    | NUM(15,2) NN       |
  -- PGR_VLREVENTO    | CC  |    |    | NUM(15,2) NN       |
  -- PGR_VLRPARCELA   | CC  |    |    | NUM(15,2) NN       | Valor da parcela sem desc/multa/pis/cofins/csll
  -- PGR_VLRLIQUIDO   | CC  |    |    | NUM(15,2) NN       | Valor da parcela abatido os acrescido valores acima para pagamento ou recebimento
  -- PGR_VLRMULTA     | CC  |    |    | NUM(15,2) NN       |
  -- PGR_VLRBAIXA     |     |    |    | NUM(15,2) NN       | Usado para fazer conta qdo de baixa parcial/desconto total 
  -- PGR_VLRRETENCAO  | CC  |    |    | NUM(15,2) NN       |
  -- PGR_VLRPIS       | CC  |    |    | NUM(15,2) NN       |
  -- PGR_VLRCOFINS    | CC  |    |    | NUM(15,2) NN       |
  -- PGR_VLRCSLL      | CC  |    |    | NUM(15,2) NN       |
  -- PGR_CODCC        |     |    |    | VC(15) NN          | Campo relacionado(CONTACONTABIL) (CONTRAPARTIDA FAVORECIDO/BANCO)
  -- PGR_CODSNF       |     |    |    | INT NN             | Campo relacionado (SERIENF)
  -- SNF_ENTSAI       |     |    |    | VC(1) NN           | Campo relacionado (SERIENF)          
  -- PGR_DTMOVTO      | DEF |    |    | DT                 |
  -- PGR_APR          | CC  |    |    | VC(1) NN           |
  -- PGR_CODEMP       |     |    |    | INT NN             | Somente para facilitar os filtros  
  -- PGR_CODFLL       |     |    |    | INT NN             | Campo relacionado (FILIAL)
  -- FLL_APELIDO      |     |    |    | VC(15) NN          | Campo relacionado (FILIAL)    
  -- PGR_LOTECNAB     |     |    |    | INT NN             |
  -- PGR_VERDIREITO   | CC  |    |    | INT NN             | Como vem de NFP/NFS/CONTRATO aqui informo se vou olhar direito de usuario
  --                                                       | Aqui tb se pode baixar titulo financeiro  
  -- PGR_CODCNTT      |     |    |    | INT NN             | Codigo do contrato 
  -- PGR_CODALT       | CC  |    |    | INT NN             | FACILITADOR PARA TRIGGER UPDATE - Este campo numca eh atualizado(SEMPRE 0(zero))
  --                                                       | 01-Desconto CP
  --                                                       | 02-Desconto CR
  --                                                       | 03-Multa CP
  --                                                       | 04-Multa CR
  --                                                       | 05-Baixa total  
  --                                                       | 06-Baixa parcial  
  --                                                       | 07-Desmembramento
  --                                                       | 08-Alterar documento(pode passar para 7)
  -- PGR_CODCMP       | SEL |    |    | INT NN             | Campo referencia para RATEIO( checar validade da competencia )
  -- CMP_FECHAMENTO   | SEL |    |    | VC(1) NN           | Campo referencia para RATEIO( checar validade da competencia ) 
  -- PGR_REG          | CC  |    |    | VC(1) NN           |
  -- PGR_CODUSR       |     |    |    | INT NN             | Campo relacionado (USURARIO)
  -- USR_APELIDO      | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB       | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- USR_FECHAMENTO   | SEL |    |    | VC(1) NN           | Campo referencia para RATEIO( checar validade da competencia/em fechamento )   
  -- UP_D16           | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31           | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- -----------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  DECLARE @frdData DATE;                -- Olhando se eh um feriado/sabado/domingo
  DECLARE @frdPagar INTEGER;            -- Olhando se eh um feriado/sabado/domingo
  DECLARE @frdReceber INTEGER;          -- Olhando se eh um feriado/sabado/domingo
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pgrLanctoNew INTEGER;
  DECLARE @pgrBloqueadoNew VARCHAR(1);
  DECLARE @pgrChequeNew VARCHAR(10);
  DECLARE @pgrCodBncNew INTEGER;
  DECLARE @bncNomeNew VARCHAR(40);
  DECLARE @bncCodCcNew VARCHAR(15);
  DECLARE @bncSaldoNew NUMERIC(15,2);
  DECLARE @bncEntraFluxoNew VARCHAR(1);
  DECLARE @pgrCodFvrNew INTEGER;
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @fvrCtaAtivoNew VARCHAR(15);
  DECLARE @fvrCtaPassivoNew VARCHAR(15);
  DECLARE @pgrCodFcNew VARCHAR(3);
  DECLARE @fcNomeNew VARCHAR(20);
  DECLARE @pgrCodTdNew VARCHAR(3);
  DECLARE @tdNomeNew VARCHAR(20);
  DECLARE @pgrVenctoNew DATE;
  DECLARE @pgrDataPagaNew DATE;
  DECLARE @pgrDoctoNew VARCHAR(12);
  DECLARE @pgrDtDoctoNew DATE;
  DECLARE @pgrCodPttNew VARCHAR(1);
  DECLARE @pttNomeNew VARCHAR(25);
  DECLARE @pgrMasterNew INTEGER;
  DECLARE @pgrObservacaoNew VARCHAR(120);
  DECLARE @pgrCodPtpNew VARCHAR(2);
  DECLARE @ptpNomeNew VARCHAR(25);
  DECLARE @ptpValorNew INTEGER;
  DECLARE @pgrIndiceNew INTEGER;
  DECLARE @pgrCodPtNew INTEGER;
  DECLARE @ptNomeNew VARCHAR(60);
  DECLARE @pgrVlrDescontoNew NUMERIC(15,2);
  DECLARE @pgrVlrEventoNew NUMERIC(15,2);
  DECLARE @pgrVlrParcelaNew NUMERIC(15,2);
  DECLARE @pgrVlrLiquidoNew NUMERIC(15,2);
  DECLARE @pgrVlrMultaNew NUMERIC(15,2);
  DECLARE @pgrVlrRetencaoNew NUMERIC(15,2);
  DECLARE @pgrVlrPisNew NUMERIC(15,2);
  DECLARE @pgrVlrCofinsNew NUMERIC(15,2);
  DECLARE @pgrVlrCsllNew NUMERIC(15,2);
  DECLARE @pgrCodCcNew VARCHAR(15);
  DECLARE @pgrCodSnfNew INTEGER;
  DECLARE @snfEntSaiNew VARCHAR(1);
  DECLARE @pgrAprNew VARCHAR(1);
  DECLARE @pgrCodEmpNew INTEGER;
  DECLARE @pgrCodFllNew INTEGER;
  DECLARE @fllApelidoNew VARCHAR(15);
  DECLARE @pgrLoteCnabNew INTEGER;
  DECLARE @pgrCodCnttNew INTEGER;  
  DECLARE @pgrVerDireitoNew INTEGER;
  DECLARE @pgrCodCmpNew INTEGER;
  DECLARE @cmpFechamentoNew VARCHAR(1);
  DECLARE @pgrRegNew VARCHAR(1);
  DECLARE @pgrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @usrCodUpNew INTEGER;
  DECLARE @usrFechamentoNew VARCHAR(1);  
  DECLARE @upDireitoNew INTEGER=0;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pgrLanctoNew       = i.PGR_LANCTO
         ,@pgrBloqueadoNew   = UPPER(COALESCE(i.PGR_BLOQUEADO,'N'))
         ,@pgrChequeNew      = COALESCE(dbo.fncTranslate(i.PGR_CHEQUE,10),NULL)
         ,@pgrCodBncNew      = i.PGR_CODBNC
         ,@bncNomeNew        = COALESCE(BNC.BNC_NOME,'ERRO')
         ,@bncCodCcNew       = COALESCE(BNC.BNC_CODCC,'ERRO')
         ,@bncSaldoNew       = COALESCE(BNC.BNC_SALDO,0) 
         ,@bncEntraFluxoNew  = COALESCE(BNC.BNC_ENTRAFLUXO,'N')
         ,@pgrCodFvrNew      = i.PGR_CODFVR
         ,@fvrApelidoNew     = COALESCE(FVR.FVR_APELIDO,'ERRO')
         ,@fvrCtaAtivoNew    = COALESCE(FVR.FVR_CTAATIVO,'ERRO')
         ,@fvrCtaPassivoNew  = COALESCE(FVR.FVR_CTAPASSIVO,'ERRO')
         ,@pgrCodFcNew       = dbo.fncTranslate(i.PGR_CODFC,3)
         ,@fcNomeNew         = COALESCE(FC.FC_NOME,'ERRO')
         ,@pgrCodTdNew       = dbo.fncTranslate(i.PGR_CODTD,3)
         ,@tdNomeNew         = COALESCE(TD.TD_NOME,'ERRO')
         ,@pgrVenctoNew      = i.PGR_VENCTO
         ,@pgrDataPagaNew    = COALESCE(i.PGR_DATAPAGA,NULL)
         ,@pgrDoctoNew       = dbo.fncTranslate(i.PGR_DOCTO,12)
         ,@pgrDtDoctoNew     = i.PGR_DTDOCTO
         ,@pgrCodPttNew      = UPPER(i.PGR_CODPTT)
         ,@pttNomeNew        = COALESCE(PTT.PTT_NOME,'ERRO')
         ,@pgrMasterNew      = i.PGR_MASTER
         ,@pgrObservacaoNew  = dbo.fncTranslate(i.PGR_OBSERVACAO,120)
         ,@pgrCodPtpNew      = dbo.fncTranslate(i.PGR_CODPTP,2)
         ,@ptpNomeNew        = COALESCE(PTP.PTP_NOME,'ERRO')
         ,@ptpValorNew       = PTP.PTP_VALOR
         ,@pgrCodPtNew       = i.PGR_CODPT
         ,@ptNomeNew         = COALESCE(PT.PT_NOME,'ERRO')
         ,@pgrVlrDescontoNew = COALESCE(i.PGR_VLRDESCONTO,0)
         ,@pgrVlrEventoNew   = i.PGR_VLREVENTO
         ,@pgrVlrParcelaNew  = i.PGR_VLRPARCELA
         ,@pgrVlrMultaNew    = COALESCE(i.PGR_VLRMULTA,0)
         ,@pgrVlrRetencaoNew = COALESCE(i.PGR_VLRRETENCAO,0)
         ,@pgrVlrPisNew      = COALESCE(i.PGR_VLRPIS,0)
         ,@pgrVlrCofinsNew   = COALESCE(i.PGR_VLRCOFINS,0)
         ,@pgrVlrCsllNew     = COALESCE(i.PGR_VLRCSLL,0)
         ,@pgrCodCcNew       = i.PGR_CODCC
         ,@pgrCodSnfNew      = COALESCE(i.PGR_CODSNF,0)
         ,@snfEntSaiNew      = SNF.SNF_ENTSAI
         ,@pgrAprNew         = UPPER(COALESCE(i.PGR_APR,'S'))
         ,@pgrCodEmpNew      = i.PGR_CODEMP
         ,@pgrCodFllNew      = i.PGR_CODFLL
         ,@fllApelidoNew     = COALESCE(FLL.FLL_APELIDO,'ERRO')
         ,@pgrLoteCnabNew    = COALESCE(i.PGR_LOTECNAB,0)
         ,@pgrCodCnttNew     = COALESCE(i.PGR_CODCNTT,0)
         ,@pgrVerDireitoNew  = i.PGR_VERDIREITO
         ,@pgrCodCmpNew      = i.PGR_CODCMP
         ,@cmpFechamentoNew  = COALESCE(CMP.CMP_FECHAMENTO,'ERRO')
         ,@pgrRegNew         = UPPER(COALESCE(i.PGR_REG,'P'))
         ,@pgrCodUsrNew      = i.PGR_CODUSR
         ,@usrApelidoNew     = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew      = COALESCE(USR.USR_ADMPUB,'P')
         ,@usrCodUpNew       = COALESCE(USR.USR_CODUP,0)
         ,@usrFechamentoNew  = COALESCE(USR.USR_FECHAMENTO,'ERRO')         
         ,@upD31New          = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN BANCO BNC ON ((i.PGR_CODBNC=BNC.BNC_CODIGO) AND (BNC.BNC_ATIVO='S') AND (i.PGR_CODEMP=BNC.BNC_CODEMP))
    LEFT OUTER JOIN FAVORECIDO FVR ON ((i.PGR_CODFVR=FVR.FVR_CODIGO) AND (FVR.FVR_ATIVO='S'))
    LEFT OUTER JOIN FORMACOBRANCA FC ON ((i.PGR_CODFC=FC.FC_CODIGO) AND (FC.FC_ATIVO='S'))
    LEFT OUTER JOIN TIPODOCUMENTO TD ON ((i.PGR_CODTD=TD.TD_CODIGO) AND (TD.TD_ATIVO='S'))    
    LEFT OUTER JOIN PAGARTITULO PTT ON ((i.PGR_CODPTT=PTT.PTT_CODIGO) AND (PTT.PTT_ATIVO='S'))    
    LEFT OUTER JOIN PAGARTIPO PTP ON ((i.PGR_CODPTP=PTP.PTP_CODIGO) AND (PTP.PTP_ATIVO='S'))        
    LEFT OUTER JOIN PADRAOTITULO PT ON ((i.PGR_CODPT=PT.PT_CODIGO) AND (PT.PT_ATIVO='S'))            
    LEFT OUTER JOIN SERIENF SNF ON ((i.PGR_CODSNF=SNF.SNF_CODIGO) AND (SNF.SNF_ATIVO='S') AND (i.PGR_CODFLL=SNF.SNF_CODFLL))
    LEFT OUTER JOIN FILIAL FLL ON ((i.PGR_CODFLL=FLL.FLL_CODIGO) AND (FLL.FLL_ATIVO='S') AND (i.PGR_CODEMP=FLL.FLL_CODEMP))    
    LEFT OUTER JOIN COMPETENCIA CMP ON ((i.PGR_CODCMP=CMP.CMP_CODIGO) AND (CMP.CMP_ATIVO='S') AND (i.PGR_CODEMP=CMP.CMP_CODEMP))  --Aqui obrigatoria encontrar    
    LEFT OUTER JOIN USUARIO USR ON i.PGR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    ----------------------------------------------------------------------------------------------------------------
    -- A PRIMEIRA REGRA DE CADA LANCTO EH COLOCAR NA TABELA PAGARMASTER UM LANCTO UNICO COM O LANCTO INICIAL E FINAL
    -- MONTANDO UM CONTADOR DE PARCELAS, UM TITULO PARCELADO EH TRATADO COMO UM CONTRATO DE "N" PARCELAS
    -- A PARCELA FAZ PARTE DA PK PARA TTITULO DUPLICADO NO SISTEMA
    ----------------------------------------------------------------------------------------------------------------
    DECLARE @pmParcela INTEGER;
    SELECT @pmParcela=COALESCE(PM_PARCELA,NULL) FROM PAGARMASTER WHERE PM_MASTER=@pgrMasterNew;
    IF( @pmParcela IS NULL ) BEGIN
      INSERT INTO PAGARMASTER(PM_MASTER,PM_PARCELA,PM_LANCTOINI,PM_LANCTOFIM) VALUES(@pgrMasterNew,1,@pgrLanctoNew,@pgrLanctoNew);
      SET @pmParcela=1;
    END ELSE BEGIN
      UPDATE PAGARMASTER SET PM_PARCELA=(PM_PARCELA+1),PM_LANCTOFIM=@pgrLanctoNew WHERE PM_MASTER=@pgrMasterNew;
      SET @pmParcela=(@pmParcela+1);
    END    
    --  
    --
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pgrCodUsrNew);
    IF( @bncNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO BANCO %i PARA ESTE REGISTRO',15,1,@pgrCodBncNew);    
    IF( @fvrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@pgrCodFvrNew);        
    IF( @fcNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO COBRANCA %s PARA ESTE REGISTRO',15,1,@pgrCodFcNew);        
    IF( @tdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO DOCTO %s PARA ESTE REGISTRO',15,1,@pgrCodTdNew);        
    IF( @pttNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TITULO %s PARA ESTE REGISTRO',15,1,@pgrCodPttNew);            
    IF( @ptpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO FINANCEITO %s PARA ESTE REGISTRO',15,1,@pgrCodPtpNew);                
    ------------------------------------------------------------  
    -- Se naum tiver serie nf eh obrigatoria a operacao padrao 
    -- Todo titulo eh lancado por operacao padrao ou faturamento
    ------------------------------------------------------------  
    IF( @ptNomeNew='ERRO' ) BEGIN
      IF( @pgrCodSnfNew=0 )
        RAISERROR('NAO LOCALIZADO OPERACAO PADRAO %i PARA ESTE REGISTRO',15,1,@pgrCodPtNew);            
    END  
    IF( @cmpFechamentoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO COMPETENCIA %i PARA ESTE REGISTRO',15,1,@pgrCodCmpNew);            
    IF( @pgrCodSnfNew>0 ) BEGIN  
      IF( @snfEntSaiNew='ERRO' )
        RAISERROR('NAO LOCALIZADO SERIENF PADRAO %i PARA ESTE REGISTRO',15,1,@pgrCodSnfNew);                
    END    
    IF( @fllApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FILIAL %i PARA ESTE REGISTRO',15,1,@pgrCodFllNew);                
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -- Existem 3 direitos PAGAR/NFPRODUTO/NFSERVICO
    -------------------------------------------------------------
    IF( @pgrVerDireitoNew=26 )
      SELECT @upDireitoNew=COALESCE(UP_D26,0) FROM USUARIOPERFIL WHERE UP_CODIGO=@usrCodUpNew;
    IF( @pgrVerDireitoNew=27 )
      SELECT @upDireitoNew=COALESCE(UP_D27,0) FROM USUARIOPERFIL WHERE UP_CODIGO=@usrCodUpNew;
    IF( @pgrVerDireitoNew=28 )
      SELECT @upDireitoNew=COALESCE(UP_D28,0) FROM USUARIOPERFIL WHERE UP_CODIGO=@usrCodUpNew;
    IF( @upDireitoNew<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO %i PARA INCLUIR NA TABELA PAGAR',15,1,@usrApelidoNew,@upDireitoNew);
    --
    --  
    --------------------------------------------------
    -- VALIDANDO AQUI PARA NAO TER QUE FAZER NO RATEIO
    --------------------------------------------------
    IF( (@cmpFechamentoNew='S') AND (@usrFechamentoNew='N') )
      RAISERROR('COMPETENCIA %i EM FECHAMENTO, USUARIO NAO PODE NESTA DATA/COMPETENCIA!',15,1,@pgrCodCmpNew);     
    -------------------  
    -- Olhando as datas
    -------------------
    IF( @pgrDtDoctoNew>GETDATE() )  
      RAISERROR('DATA DO DOCUMENTO NAO PODE SER MAIOR QUE A DATA DE HOJE!',15,1);       
    IF( @pgrDtDoctoNew>@pgrVenctoNew )  
      RAISERROR('DATA DO DOCUMENTO NAO PODE SER MAIOR QUE A DATA DE VENCTO!',15,1);
    IF( @pgrDataPagaNew IS NOT NULL ) BEGIN
      IF( @pgrDataPagaNew>GETDATE() )  
        RAISERROR('DATA DA QUITAÇÃO NAO PODE SER MAIOR QUE A DATA DE HOJE!',15,1);       
      IF( @pgrDataPagaNew<@pgrDtDoctoNew )      
        RAISERROR('DATA DA QUITAÇÃO NAO PODE SER MENOR QUE A DATA DO DOCUMENTO!',15,1);
    END
    SELECT @frdData=COALESCE(FRD_CODIGO,NULL),@frdPagar=COALESCE(FRD_PAGAR,0),@frdReceber=COALESCE(FRD_RECEBER,0)
     FROM FERIADO WHERE ((FRD_CODIGO=@pgrVenctoNew) AND (FRD_CODEMP=@pgrCodEmpNew));
    IF( @frdData IS NOT NULL ) BEGIN
      IF( @ptpValorNew=-1 )
        SET @pgrVenctoNew=(select dateadd(day,@frdPagar,@pgrVenctoNew));
      IF( @ptpValorNew=1 )
        SET @pgrVenctoNew=(select dateadd(day,@frdReceber,@pgrVenctoNew));
    END    
    ------------------------------------------------------------------
    -- Campo bloqueado
    ------------------------------------------------------------------
    IF( (@pgrBloqueadoNew='S') AND (@pgrCodPtpNew<>'CP') )
      RAISERROR('SOMENTE TITULO CP PODE SER BLOQUEADO!',15,1);    
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @pgrRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@pgrRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END 
    -------------------------------------------------------------
    -- Vendo se o titulo eh a pagar ou receber 1=Receber -1=Pagar
    -------------------------------------------------------------
    SET @pgrIndiceNew=@ptpValorNew;
    IF( @pgrIndiceNew=0 )
      RAISERROR('TITULO FINANCEIRO NÃO PODE SER CADASTRADO SEM UM INDICE(Parametro de tipo)',15,1);
    ------------------------------------------------------------------
    -- Colocando a conta de ativo/passivo ou banco 
    ------------------------------------------------------------------
    IF( @pgrDataPagaNew IS NULL ) BEGIN
      IF( @pgrCodCcNew IS NULL )
        SET @pgrCodCcNew=CASE WHEN @pgrIndiceNew=1 THEN @fvrCtaAtivoNew ELSE @fvrCtaPassivoNew END;
    END ELSE BEGIN
      SET @pgrCodCcNew=@bncCodCcNew;
    END    
    ------------------------------------------------------------------
    -- Atualizando o valor PGR_VLRLIQUIDO
    -- Aqui naum pode ter o PGR_VLRBAIXA( Usado para desmembramento e baixa parcial )
    ------------------------------------------------------------------
    SET @pgrVlrLiquidoNew=((@pgrVlrParcelaNew-@pgrVlrDescontoNew+@pgrVlrMultaNew)-(@pgrVlrRetencaoNew+@pgrVlrPisNew+@pgrVlrCofinsNew+@pgrVlrCsllNew));
    --  
    INSERT INTO dbo.PAGAR( 
      PGR_LANCTO
      ,PGR_BLOQUEADO
      ,PGR_CHEQUE
      ,PGR_CODBNC
      ,PGR_CODFVR
      ,PGR_CODFC
      ,PGR_CODTD
      ,PGR_VENCTO
      ,PGR_DATAPAGA
      ,PGR_DOCTO
      ,PGR_DTDOCTO
      ,PGR_CODPTT
      ,PGR_MASTER
      ,PGR_OBSERVACAO
      ,PGR_PARCELA
      ,PGR_CODPTP
      ,PGR_INDICE
      ,PGR_CODPT
      ,PGR_VLRDESCONTO
      ,PGR_VLREVENTO
      ,PGR_VLRPARCELA
      ,PGR_VLRLIQUIDO
      ,PGR_VLRMULTA
      ,PGR_VLRBAIXA
      ,PGR_VLRRETENCAO
      ,PGR_VLRPIS
      ,PGR_VLRCOFINS
      ,PGR_VLRCSLL
      ,PGR_CODCC
      ,PGR_CODSNF
      ,PGR_APR
      ,PGR_CODEMP
      ,PGR_CODFLL
      ,PGR_LOTECNAB
      ,PGR_CODCNTT      
      ,PGR_VERDIREITO
      ,PGR_CODALT
      ,PGR_CODCMP
      ,PGR_REG
      ,PGR_CODUSR) VALUES(
      @pgrLanctoNew                 -- PGR_LANCTO
      ,@pgrBloqueadoNew             -- PGR_BLOQUEADO
      ,@pgrChequeNew                -- PGR_CHEQUE
      ,@pgrCodBncNew                -- PGR_CODBNC
      ,@pgrCodFvrNew                -- PGR_CODFVR
      ,@pgrCodFcNew                 -- PGR_CODFC
      ,@pgrCodTdNew                 -- PGR_CODTD
      ,@pgrVenctoNew                -- PGR_VENCTO
      ,@pgrDataPagaNew              -- PGR_DATAPAGA
      ,@pgrDoctoNew                 -- PGR_DOCTO
      ,@pgrDtDoctoNew               -- PGR_DTDOCTO
      ,@pgrCodPttNew                -- PGR_CODPTT
      ,@pgrMasterNew                -- PGR_MASTER
      ,@pgrObservacaoNew            -- PGR_OBSERVACAO
      ,@pmParcela                   -- PGR_PARCELA
      ,@pgrCodPtpNew                -- PGR_CODPTP
      ,@pgrIndiceNew                -- PGR_INDICE
      ,@pgrCodPtNew                 -- PGR_CODPT
      ,@pgrVlrDescontoNew           -- PGR_VLRDESCONTO
      ,@pgrVlrEventoNew             -- PGR_VLREVENTO
      ,@pgrVlrParcelaNew            -- PGR_VLRPARCELA
      ,@pgrVlrLiquidoNew            -- PGR_VLRLIQUIDO
      ,@pgrVlrMultaNew              -- PGR_VLRMULTA
      ,0                            -- PGR_VLRBAIXA
      ,@pgrVlrRetencaoNew           -- PGR_VLRRETENCAO
      ,@pgrVlrPisNew                -- PGR_VLRPIS
      ,@pgrVlrCofinsNew             -- PGR_VLRCOFINS
      ,@pgrVlrCsllNew               -- PGR_VLRCSLL
      ,@pgrCodCcNew                 -- PGR_CODCC
      ,@pgrCodSnfNew                -- PGR_CODSNF
      ,@pgrAprNew                   -- PGR_APR
      ,@pgrCodEmpNew                -- PGR_CODEMP
      ,@pgrCodFllNew                -- PGR_CODFLL
      ,@pgrLoteCnabNew              -- PGR_LOTECNAB
      ,@pgrCodCnttNew               -- PGR_CODCNTT
      ,@pgrVerDireitoNew            -- PGR_VERDIREITO
      ,0                            -- PGR_CODALT
      ,@pgrCodCmpNew                -- PGR_CODCMP
      ,@pgrRegNew                   -- PGR_REG
      ,@pgrCodUsrNew                -- PGR_CODUSR
    );
    -------------------------------  
    -- Atualizando a tabela EXTRATO
    -------------------------------  
    IF( @pgrDataPagaNew IS NOT NULL ) BEGIN
      IF( @bncEntraFluxoNew='S' ) BEGIN
        DECLARE @gravar INTEGER         = 0;
        DECLARE @debito NUMERIC(15,2)   = 0;
        DECLARE @credito NUMERIC(15,2)  = 0;
        DECLARE @saldo NUMERIC(15,2)    = 0;
        IF( @pgrIndiceNew=1 ) BEGIN
          SET @credito  = @pgrVlrLiquidoNew;
          SET @saldo    = (@bncSaldoNew+@credito);
          SET @gravar   = 1;
        END  
        IF( @pgrIndiceNew=-1 ) BEGIN
          SET @debito = @pgrVlrLiquidoNew;
          SET @saldo  = (@bncSaldoNew-@debito);
          SET @gravar = 1;
        END  
        IF( @gravar=1 ) BEGIN
          INSERT INTO EXTRATO(
            EXT_LANCTO
            ,EXT_CODBNC
            ,EXT_DEBITO
            ,EXT_CREDITO
            ,EXT_SALDO) VALUES(
            @pgrLanctoNew
            ,@pgrCodBncNew
            ,@debito
            ,@credito
            ,@saldo
          );
          UPDATE BANCO SET BNC_SALDO=@saldo WHERE BNC_CODIGO=@pgrCodBncNew;           
        END 
      END  
    END
    --  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPAGAR_BU ON dbo.VPAGAR
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);               -- Buscando retorno de erro para funcao
  DECLARE @ratVlrDebito NUMERIC(15,2)   = 0;  -- Pode ser usada em mais de uma opcao
  DECLARE @ratVlrCredito NUMERIC(15,2)  = 0;  -- Pode ser usada em mais de uma opcao
  
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @pgrLanctoNew INTEGER;
  DECLARE @pgrBloqueadoNew VARCHAR(1);
  DECLARE @pgrChequeNew VARCHAR(10);
  DECLARE @pgrCodBncNew INTEGER;
  DECLARE @bncNomeNew VARCHAR(40);
  DECLARE @bncCodCcNew VARCHAR(15);
  DECLARE @bncSaldoNew NUMERIC(15,2);
  DECLARE @bncEntraFluxoNew VARCHAR(1);
  DECLARE @pgrCodFvrNew INTEGER;
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @fvrCtaAtivoNew VARCHAR(15);
  DECLARE @fvrCtaPassivoNew VARCHAR(15);
  DECLARE @pgrCodFcNew VARCHAR(3);
  DECLARE @fcNomeNew VARCHAR(20);
  DECLARE @pgrCodTdNew VARCHAR(3);
  DECLARE @tdNomeNew VARCHAR(20);
  DECLARE @pgrVenctoNew DATE;
  DECLARE @pgrDataPagaNew DATE;
  DECLARE @pgrDoctoNew VARCHAR(12);
  DECLARE @pgrDtDoctoNew DATE;
  DECLARE @pgrCodPttNew VARCHAR(1);
  DECLARE @pttNomeNew VARCHAR(25);
  DECLARE @pgrMasterNew INTEGER;
  DECLARE @pgrObservacaoNew VARCHAR(120);
  DECLARE @pgrNumParNew INTEGER;
  DECLARE @pgrParcelaNew INTEGER;
  DECLARE @pgrCodPtpNew VARCHAR(2);
  DECLARE @ptpNomeNew VARCHAR(25);
  DECLARE @ptpValorNew INTEGER;
  DECLARE @ptpContabilNew VARCHAR(1);
  DECLARE @pgrIndiceNew INTEGER;
  DECLARE @pgrCodPtNew INTEGER;
  DECLARE @ptNomeNew VARCHAR(60);
  DECLARE @pgrVlrDescontoNew NUMERIC(15,2);
  DECLARE @pgrVlrEventoNew NUMERIC(15,2);
  DECLARE @pgrVlrParcelaNew NUMERIC(15,2);
  DECLARE @pgrVlrLiquidoNew NUMERIC(15,2);
  DECLARE @pgrVlrMultaNew NUMERIC(15,2);
  DECLARE @pgrVlrBaixaNew NUMERIC(15,2);
  DECLARE @pgrVlrRetencaoNew NUMERIC(15,2);
  DECLARE @pgrVlrPisNew NUMERIC(15,2);
  DECLARE @pgrVlrCofinsNew NUMERIC(15,2);
  DECLARE @pgrVlrCsllNew NUMERIC(15,2);
  DECLARE @pgrCodCcNew VARCHAR(15);
  DECLARE @pgrCodSnfNew INTEGER;
  DECLARE @snfEntSaiNew VARCHAR(1);
  DECLARE @pgrAprNew VARCHAR(1);
  DECLARE @pgrCodEmpNew INTEGER;
  DECLARE @pgrCodFllNew INTEGER;
  DECLARE @fllApelidoNew VARCHAR(15);
  DECLARE @pgrLoteCnabNew INTEGER;
  DECLARE @pgrCodCnttNew INTEGER;    
  DECLARE @pgrVerDireitoNew INTEGER;
  DECLARE @pgrCodCmpNew INTEGER;
  DECLARE @pgrCodAltNew INTEGER;  
  DECLARE @cmpFechamentoNew VARCHAR(1);
  DECLARE @pgrRegNew VARCHAR(1);
  DECLARE @pgrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @usrCodUpNew INTEGER;
  DECLARE @usrFechamentoNew VARCHAR(1);
  DECLARE @upDireitoNew INTEGER=0;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @pgrLanctoNew       = i.PGR_LANCTO
         ,@pgrBloqueadoNew   = UPPER(i.PGR_BLOQUEADO)
         ,@pgrChequeNew      = dbo.fncTranslate(i.PGR_CHEQUE,10)
         ,@pgrCodBncNew      = i.PGR_CODBNC
         ,@bncNomeNew        = COALESCE(BNC.BNC_NOME,'ERRO')
         ,@bncCodCcNew       = COALESCE(BNC.BNC_CODCC,'ERRO')
         ,@bncSaldoNew       = COALESCE(BNC.BNC_SALDO,0) 
         ,@bncEntraFluxoNew  = COALESCE(BNC.BNC_ENTRAFLUXO,'N')
         ,@pgrCodFvrNew      = i.PGR_CODFVR
         ,@fvrApelidoNew     = COALESCE(FVR.FVR_APELIDO,'ERRO')
         ,@fvrCtaAtivoNew    = COALESCE(FVR.FVR_CTAATIVO,'ERRO')
         ,@fvrCtaPassivoNew  = COALESCE(FVR.FVR_CTAPASSIVO,'ERRO')
         ,@pgrCodFcNew       = dbo.fncTranslate(i.PGR_CODFC,3)
         ,@fcNomeNew         = COALESCE(FC.FC_NOME,'ERRO')
         ,@pgrCodTdNew       = dbo.fncTranslate(i.PGR_CODTD,3)
         ,@tdNomeNew         = COALESCE(TD.TD_NOME,'ERRO')
         ,@pgrVenctoNew      = i.PGR_VENCTO
         ,@pgrDataPagaNew    = i.PGR_DATAPAGA
         ,@pgrDoctoNew       = dbo.fncTranslate(i.PGR_DOCTO,12)
         ,@pgrDtDoctoNew     = i.PGR_DTDOCTO
         ,@pgrCodPttNew      = UPPER(i.PGR_CODPTT)
         ,@pttNomeNew        = COALESCE(PTT.PTT_NOME,'ERRO')
         ,@pgrMasterNew      = i.PGR_MASTER
         ,@pgrObservacaoNew  = dbo.fncTranslate(i.PGR_OBSERVACAO,120)
         ,@pgrParcelaNew     = i.PGR_PARCELA
         ,@pgrCodPtpNew      = dbo.fncTranslate(i.PGR_CODPTP,2)
         ,@ptpNomeNew        = COALESCE(PTP.PTP_NOME,'ERRO')
         ,@ptpValorNew       = PTP.PTP_VALOR
         ,@ptpContabilNew    = UPPER(PTP.PTP_CONTABIL)
         ,@pgrCodPtNew       = i.PGR_CODPT
         ,@pgrIndiceNew      = i.PGR_INDICE
         ,@ptNomeNew         = COALESCE(PT.PT_NOME,'ERRO')
         ,@pgrVlrDescontoNew = i.PGR_VLRDESCONTO
         ,@pgrVlrEventoNew   = i.PGR_VLREVENTO
         ,@pgrVlrParcelaNew  = i.PGR_VLRPARCELA
         ,@pgrVlrMultaNew    = i.PGR_VLRMULTA
         ,@pgrVlrBaixaNew    = i.PGR_VLRBAIXA
         ,@pgrVlrRetencaoNew = i.PGR_VLRRETENCAO
         ,@pgrVlrPisNew      = i.PGR_VLRPIS
         ,@pgrVlrCofinsNew   = i.PGR_VLRCOFINS
         ,@pgrVlrCsllNew     = i.PGR_VLRCSLL
         ,@pgrCodCcNew       = i.PGR_CODCC
         ,@pgrCodSnfNew      = i.PGR_CODSNF
         ,@snfEntSaiNew      = SNF.SNF_ENTSAI
         ,@pgrAprNew         = UPPER(i.PGR_APR)
         ,@pgrCodEmpNew      = i.PGR_CODEMP
         ,@pgrCodFllNew      = i.PGR_CODFLL
         ,@fllApelidoNew     = COALESCE(FLL.FLL_APELIDO,'ERRO')
         ,@pgrLoteCnabNew    = i.PGR_LOTECNAB
         ,@pgrCodCnttNew     = COALESCE(i.PGR_CODCNTT,0)         
         ,@pgrVerDireitoNew  = i.PGR_VERDIREITO
         ,@pgrCodCmpNew      = i.PGR_CODCMP
         ,@pgrCodAltNew      = i.PGR_CODALT         
         ,@cmpFechamentoNew  = COALESCE(CMP.CMP_FECHAMENTO,'ERRO')
         ,@pgrRegNew         = UPPER(i.PGR_REG)
         ,@pgrCodUsrNew      = i.PGR_CODUSR
         ,@usrApelidoNew     = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew      = COALESCE(USR.USR_ADMPUB,'P')
         ,@usrCodUpNew       = COALESCE(USR.USR_CODUP,0)
         ,@usrFechamentoNew  = COALESCE(USR.USR_FECHAMENTO,'ERRO')
         ,@upD31New          = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN BANCO BNC ON ((i.PGR_CODBNC=BNC.BNC_CODIGO) AND (BNC.BNC_ATIVO='S') AND (i.PGR_CODEMP=BNC.BNC_CODEMP))
    LEFT OUTER JOIN FAVORECIDO FVR ON ((i.PGR_CODFVR=FVR.FVR_CODIGO) AND (FVR.FVR_ATIVO='S'))
    LEFT OUTER JOIN FORMACOBRANCA FC ON ((i.PGR_CODFC=FC.FC_CODIGO) AND (FC.FC_ATIVO='S'))
    LEFT OUTER JOIN TIPODOCUMENTO TD ON ((i.PGR_CODTD=TD.TD_CODIGO) AND (TD.TD_ATIVO='S'))    
    LEFT OUTER JOIN PAGARTITULO PTT ON ((i.PGR_CODPTT=PTT.PTT_CODIGO) AND (PTT.PTT_ATIVO='S'))    
    LEFT OUTER JOIN PAGARTIPO PTP ON ((i.PGR_CODPTP=PTP.PTP_CODIGO) AND (PTP.PTP_ATIVO='S'))        
    LEFT OUTER JOIN PADRAOTITULO PT ON ((i.PGR_CODPT=PT.PT_CODIGO) AND (PT.PT_ATIVO='S'))            
    LEFT OUTER JOIN SERIENF SNF ON ((i.PGR_CODSNF=SNF.SNF_CODIGO) AND (SNF.SNF_ATIVO='S') AND (i.PGR_CODFLL=SNF.SNF_CODFLL))
    LEFT OUTER JOIN FILIAL FLL ON ((i.PGR_CODFLL=FLL.FLL_CODIGO) AND (FLL.FLL_ATIVO='S') AND (i.PGR_CODEMP=FLL.FLL_CODEMP))    
    LEFT OUTER JOIN COMPETENCIA CMP ON ((i.PGR_CODCMP=CMP.CMP_CODIGO) AND (CMP.CMP_ATIVO='S') AND (i.PGR_CODEMP=CMP.CMP_CODEMP))    
    LEFT OUTER JOIN USUARIO USR ON i.PGR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pgrCodUsrNew);
    IF( @bncNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO BANCO %i PARA ESTE REGISTRO',15,1,@pgrCodBncNew);    
    IF( @fvrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@pgrCodFvrNew);        
    IF( @fcNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO COBRANCA %s PARA ESTE REGISTRO',15,1,@pgrCodFcNew);        
    IF( @tdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO DOCTO %s PARA ESTE REGISTRO',15,1,@pgrCodTdNew);        
    IF( @pttNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TITULO %s PARA ESTE REGISTRO',15,1,@pgrCodPttNew);            
    IF( @ptpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO FINANCEITO %s PARA ESTE REGISTRO',15,1,@pgrCodPtpNew); 
    ------------------------------------------------------------  
    -- Se naum tiver serie nf eh obrigatoria a operacao padrao 
    -- Todo titulo eh lancado por operacao padrao ou faturamento
    ------------------------------------------------------------  
    IF( @ptNomeNew='ERRO' ) BEGIN
      IF( @pgrCodSnfNew=0 )
        RAISERROR('NAO LOCALIZADO OPERACAO PADRAO %i PARA ESTE REGISTRO',15,1,@pgrCodPtNew);            
    END  
    IF( @cmpFechamentoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO COMPETENCIA %i PARA ESTE REGISTRO',15,1,@pgrCodCmpNew);            
    IF( @pgrCodSnfNew>0 ) BEGIN  
      IF( @snfEntSaiNew='ERRO' )
        RAISERROR('NAO LOCALIZADO SERIENF PADRAO %i PARA ESTE REGISTRO',15,1,@pgrCodSnfNew);                
    END    
    IF( @fllApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FILIAL %i PARA ESTE REGISTRO',15,1,@pgrCodFllNew);                
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -- Existem 3 direitos PAGAR/NFPRODUTO/NFSERVICO
    -- 34 = Se pode baixar titulo financeiro
    -------------------------------------------------------------
    IF( (@pgrVerDireitoNew=26) OR (@pgrVerDireitoNew=27) OR (@pgrVerDireitoNew=28) ) BEGIN
      IF( @pgrVerDireitoNew=26 )
        SELECT @upDireitoNew=COALESCE(UP_D26,0) FROM USUARIOPERFIL WHERE UP_CODIGO=@usrCodUpNew;
      IF( @pgrVerDireitoNew=27 )
        SELECT @upDireitoNew=COALESCE(UP_D27,0) FROM USUARIOPERFIL WHERE UP_CODIGO=@usrCodUpNew;
      IF( @pgrVerDireitoNew=28 )
        SELECT @upDireitoNew=COALESCE(UP_D28,0) FROM USUARIOPERFIL WHERE UP_CODIGO=@usrCodUpNew;
      IF( @upDireitoNew<2 )
        RAISERROR('USUARIO %s NAO POSSUI DIREITO %i PARA INCLUIR NA TABELA PAGAR',15,1,@usrApelidoNew,@upDireitoNew);
    END  
    -----------------------------
    -- BAIXA DE TITULO FINANCEIRO
    -----------------------------
    IF( @pgrVerDireitoNew=34 ) BEGIN
      SELECT @upDireitoNew=COALESCE(UP_D28,0) FROM USUARIOPERFIL WHERE UP_CODIGO=@usrCodUpNew;
      IF( @upDireitoNew<>4 )
        RAISERROR('USUARIO %s NAO POSSUI DIREITO %i PARA BAIXAR TITULO FINANCEIRO',15,1,@usrApelidoNew,@upDireitoNew);
    END  
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @pgrLanctoOld INTEGER;
    DECLARE @pgrBloqueadoOld VARCHAR(1);
    DECLARE @pgrChequeOld VARCHAR(10);
    DECLARE @pgrCodBncOld INTEGER;
    DECLARE @pgrCodFvrOld INTEGER;
    DECLARE @pgrCodFcOld VARCHAR(3);
    DECLARE @pgrCodTdOld VARCHAR(3);
    DECLARE @pgrVenctoOld DATE;
    DECLARE @pgrDataPagaOld DATE;
    DECLARE @pgrDoctoOld VARCHAR(12);
    DECLARE @pgrDtDoctoOld DATE;
    DECLARE @pgrCodPttOld VARCHAR(1);
    DECLARE @pttNomeOld VARCHAR(25);
    DECLARE @pgrMasterOld INTEGER;
    DECLARE @pgrObservacaoOld VARCHAR(120);
    DECLARE @pgrNumParOld INTEGER;
    DECLARE @pgrParcelaOld INTEGER;
    DECLARE @pgrCodPtpOld VARCHAR(2);
    DECLARE @pgrIndiceOld INTEGER;
    DECLARE @pgrCodPtOld INTEGER;
    DECLARE @pgrVlrDescontoOld NUMERIC(15,2);
    DECLARE @pgrVlrEventoOld NUMERIC(15,2);
    DECLARE @pgrVlrParcelaOld NUMERIC(15,2);
    DECLARE @pgrVlrBaixaOld NUMERIC(15,2);
    DECLARE @pgrVlrMultaOld NUMERIC(15,2);
    DECLARE @pgrVlrRetencaoOld NUMERIC(15,2);
    DECLARE @pgrVlrPisOld NUMERIC(15,2);
    DECLARE @pgrVlrCofinsOld NUMERIC(15,2);
    DECLARE @pgrVlrCsllOld NUMERIC(15,2);
    DECLARE @pgrCodCcOld VARCHAR(15);
    DECLARE @pgrCodSnfOld INTEGER;
    DECLARE @pgrAprOld VARCHAR(1);
    DECLARE @pgrCodEmpOld INTEGER;
    DECLARE @pgrCodFllOld INTEGER;
    DECLARE @pgrLoteCnabOld INTEGER;
    DECLARE @pgrCodCnttOld INTEGER;    
    DECLARE @pgrCodCmpOld INTEGER;    
    DECLARE @pgrRegOld VARCHAR(1);
    
    SELECT @pgrLanctoOld       = d.PGR_LANCTO              -- Campo naum pode ser alterado
           ,@pgrBloqueadoOld   = d.PGR_BLOQUEADO
           ,@pgrChequeOld      = d.PGR_CHEQUE
           ,@pgrCodBncOld      = d.PGR_CODBNC
           ,@pgrCodFvrOld      = d.PGR_CODFVR
           ,@pgrCodFcOld       = d.PGR_CODFC
           ,@pgrCodTdOld       = d.PGR_CODTD
           ,@pgrVenctoOld      = d.PGR_VENCTO
           ,@pgrDataPagaOld    = d.PGR_DATAPAGA
           ,@pgrDoctoOld       = d.PGR_DOCTO
           ,@pgrDtDoctoOld     = d.PGR_DTDOCTO
           ,@pgrCodPttOld      = d.PGR_CODPTT             -- Campo naum pode ser alterado
           ,@pgrMasterOld      = d.PGR_MASTER             -- Campo naum pode ser alterado
           ,@pgrObservacaoOld  = d.PGR_OBSERVACAO
           ,@pgrParcelaOld     = d.PGR_PARCELA
           ,@pgrCodPtpOld      = d.PGR_CODPTP
           ,@pgrCodPtOld       = d.PGR_CODPT              -- Campo naum pode ser alterado
           ,@pgrVlrDescontoOld = d.PGR_VLRDESCONTO
           ,@pgrVlrEventoOld   = d.PGR_VLREVENTO          -- Campo naum pode ser alterado
           ,@pgrVlrParcelaOld  = d.PGR_VLRPARCELA         -- Campo pode ser alterado devido desmembramento
           ,@pgrVlrBaixaOld    = d.PGR_VLRBAIXA           
           ,@pgrVlrMultaOld    = d.PGR_VLRMULTA
           ,@pgrVlrRetencaoOld = d.PGR_VLRRETENCAO
           ,@pgrVlrPisOld      = d.PGR_VLRPIS
           ,@pgrVlrCofinsOld   = d.PGR_VLRCOFINS
           ,@pgrVlrCsllOld     = d.PGR_VLRCSLL
           ,@pgrCodCcOld       = d.PGR_CODCC
           ,@pgrCodSnfOld      = d.PGR_CODSNF             -- Campo naum pode ser alterado
           ,@pgrAprOld         = d.PGR_APR
           ,@pgrCodEmpOld      = d.PGR_CODEMP             -- Campo naum pode ser alterado
           ,@pgrCodFllOld      = d.PGR_CODFLL             -- Campo naum pode ser alterado
           ,@pgrLoteCnabOld    = d.PGR_LOTECNAB
           ,@pgrCodCnttOld     = d.PGR_CODCNTT
           ,@pgrCodCmpOld      = d.PGR_CODCMP
           ,@pgrRegOld         = d.PGR_REG
      FROM PAGAR d WHERE d.PGR_LANCTO=@pgrLanctoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @pgrLanctoOld<>@pgrLanctoNew )
      RAISERROR('CAMPO LANCTO NAO PODE SER ALTERADO',15,1);  
    IF( @pgrMasterOld<>@pgrMasterNew )
      RAISERROR('CAMPO MASTER NAO PODE SER ALTERADO',15,1);  
    -----------------------------------------------------------------------------------------  
    -- O campo titulo soh pode ser alterado se existir uma baixa parcial ou um desmembramento
    -----------------------------------------------------------------------------------------  
    IF( @pgrCodPttOld<>@pgrCodPttNew ) BEGIN
      IF( @pgrCodAltNew=0 )
        RAISERROR('CAMPO TITULO NAO PODE SER ALTERADO',15,1);  
    END  
    IF( @pgrCodPtOld<>@pgrCodPtNew )
      RAISERROR('CAMPO LANCTO PADRÃO NAO PODE SER ALTERADO',15,1);  
    IF( @pgrVlrEventoOld<>@pgrVlrEventoNew )
      RAISERROR('CAMPO VALOR DO EVENTO NAO PODE SER ALTERADO',15,1);
    IF( @pgrVlrParcelaOld<>@pgrVlrParcelaNew )
      RAISERROR('CAMPO VALOR DA PARCELA NAO PODE SER ALTERADO',15,1);  
    IF( @pgrCodSnfOld<>@pgrCodSnfNew )
      RAISERROR('CAMPO VALOR DA PARCELA NAO PODE SER ALTERADO',15,1);  
    IF( @pgrCodEmpOld<>@pgrCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    IF( @pgrCodFllOld<>@pgrCodFllNew )
      RAISERROR('CAMPO FILIAL NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @pgrRegOld <> @pgrRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@pgrRegOld,@pgrRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    -------------------  
    -- Olhando as datas
    -------------------
    IF( @pgrDtDoctoOld<>@pgrDtDoctoNew ) BEGIN
      IF( @pgrDtDoctoNew>GETDATE() )  
        RAISERROR('DATA DO DOCUMENTO NAO PODE SER MAIOR QUE A DATA DE HOJE!',15,1);       
    END  
    IF( (@pgrDtDoctoOld<>@pgrDtDoctoNew) OR (@pgrVenctoOld<>@pgrVenctoNew) ) BEGIN
      IF( @pgrDtDoctoNew>@pgrVenctoNew )  
        RAISERROR('DATA DO DOCUMENTO NAO PODE SER MAIOR QUE A DATA DE VENCTO!',15,1);
    END    
    IF( @pgrDataPagaNew IS NOT NULL ) BEGIN
      IF( @pgrDataPagaNew>GETDATE() )  
        RAISERROR('DATA DA QUITAÇÃO NAO PODE SER MAIOR QUE A DATA DE HOJE!',15,1);       
      IF( @pgrDataPagaNew<@pgrDtDoctoNew )      
        RAISERROR('DATA DA QUITAÇÃO NAO PODE SER MENOR QUE A DATA DO DOCUMENTO!',15,1);
    END     
    IF( @pgrVenctoOld<>@pgrVenctoNew ) BEGIN
      DECLARE @frdData DATE;
      DECLARE @frdPagar INTEGER;
      DECLARE @frdReceber INTEGER;
      SELECT @frdData=COALESCE(FRD_CODIGO,NULL),@frdPagar=COALESCE(FRD_PAGAR,0),@frdReceber=COALESCE(FRD_RECEBER,0)
        FROM FERIADO WHERE ((FRD_CODIGO=@pgrVenctoNew) AND (FRD_CODEMP=@pgrCodEmpNew));
      IF( @frdData IS NOT NULL ) BEGIN
        IF( @ptpValorNew=-1 )
          SET @pgrVenctoNew=(select dateadd(day,@frdPagar,@pgrVenctoNew));
        IF( @ptpValorNew=1 )
          SET @pgrVenctoNew=(select dateadd(day,@frdReceber,@pgrVenctoNew));
      END    
    END
    ------------------------------------------------------------------
    -- Campo bloqueado
    ------------------------------------------------------------------
    IF( (@pgrBloqueadoOld<>@pgrBloqueadoNew) AND (@pgrBloqueadoNew='S') ) BEGIN   
      IF( @pgrCodPtpNew<>'CP' )
        RAISERROR('SOMENTE TITULO CP PODE SER BLOQUEADO!',15,1);    
    END    
    ------------------------------------------------------------------
    -- Colocando a conta de ativo/passivo ou banco 
    ------------------------------------------------------------------
    IF( ((@pgrDataPagaOld IS NULL) AND (@pgrDataPagaNew IS NOT NULL))
     OR ((@pgrDataPagaOld IS NOT NULL) AND (@pgrDataPagaNew IS NULL)) ) BEGIN    
      IF( @pgrDataPagaNew IS NULL ) BEGIN
        SET @pgrCodCcNew=CASE WHEN @pgrIndiceNew=1 THEN @fvrCtaAtivoNew ELSE @fvrCtaPassivoNew END;
      END ELSE BEGIN
        SET @pgrCodCcNew=@bncCodCcNew;
      END    
    END
    -----------------------------------------------------------------------------------------
    --Aqui eh quando da preguiça de colocar a conta no php, resgato a ultima que esta correta
    -----------------------------------------------------------------------------------------
    IF( @pgrCodCcNew IS NULL )
      SET @pgrCodCcNew=@pgrCodCcOld;
    ------------------------------------------------------------------
    -- Atualizando o valor PGR_VLRLIQUIDO
    -- Aqui tem o PGR_VLRBAIXA( Usado para desmembramento e baixa parcial )
    ------------------------------------------------------------------
    SET @pgrVlrLiquidoNew=((@pgrVlrParcelaNew-@pgrVlrDescontoNew+@pgrVlrMultaNew-@pgrVlrBaixaNew)-(@pgrVlrRetencaoNew+@pgrVlrPisNew+@pgrVlrCofinsNew+@pgrVlrCsllNew));
    --  
    --  
    UPDATE dbo.PAGAR
       SET PGR_BLOQUEADO    = @pgrBloqueadoNew
           ,PGR_CHEQUE      = @pgrChequeNew
           ,PGR_CODBNC      = @pgrCodBncNew
           ,PGR_CODFVR      = @pgrCodFvrNew
           ,PGR_CODFC       = @pgrCodFcNew
           ,PGR_CODTD       = @pgrCodTdNew
           ,PGR_VENCTO      = @pgrVenctoNew
           ,PGR_DATAPAGA    = @pgrDataPagaNew
           ,PGR_DOCTO       = @pgrDoctoNew
           ,PGR_DTDOCTO     = @pgrDtDoctoNew
           ,PGR_OBSERVACAO  = @pgrObservacaoNew
           ,PGR_PARCELA     = @pgrParcelaNew
           ,PGR_CODPTP      = @pgrCodPtpNew
           ,PGR_VLRBAIXA    = (@pgrVlrBaixaOld+@pgrVlrBaixaNew)
           ,PGR_VLRDESCONTO = @pgrVlrDescontoNew
           ,PGR_VLRMULTA    = @pgrVlrMultaNew
           ,PGR_VLRRETENCAO = @pgrVlrRetencaoNew
           ,PGR_VLRPIS      = @pgrVlrPisNew
           ,PGR_VLRCOFINS   = @pgrVlrCofinsNew
           ,PGR_VLRCSLL     = @pgrVlrCsllNew
           ,PGR_VLRLIQUIDO  = @pgrVlrLiquidoNew           
           ,PGR_CODCC       = @pgrCodCcNew
           ,PGR_APR         = @pgrAprNew
           ,PGR_LOTECNAB    = @pgrLoteCnabNew
           ,PGR_CODCNTT     = @pgrCodCnttNew           
           ,PGR_CODCMP      = @pgrCodCmpNew
           ,PGR_CODALT      = 0
           ,PGR_REG         = @pgrRegNew
           ,PGR_CODUSR      = @pgrCodUsrNew
    WHERE PGR_LANCTO = @pgrLanctoNew;
    ----------------------------------------------
    -- Olhando o campo PGR_CODALT - Desconto/Multa
    ----------------------------------------------
    IF( (@pgrCodAltNew=1) OR (@pgrCodAltNew=2) OR (@pgrCodAltNew=3) OR (@pgrCodAltNew=4) ) BEGIN
      DECLARE @ratCodCc VARCHAR(15)         = '4.01.01.01.0073'
      SET @ratVlrDebito  = 0;
      SET @ratVlrCredito = 0;
      
      IF( @pgrCodAltNew=1 )
        SET @ratVlrCredito = @pgrVlrDescontoNew;

      IF( @pgrCodAltNew=2 )
        SET @ratVlrDebito = @pgrVlrDescontoNew;
        
      IF( @pgrCodAltNew=3 ) BEGIN
        SET @ratCodCc     = '4.01.01.01.0072';
        SET @ratVlrDebito = @pgrVlrMultaNew;
      END  

      IF( @pgrCodAltNew=4 ) BEGIN
        SET @ratCodCc     = '4.01.01.01.0065';
        SET @ratVlrCredito = @pgrVlrMultaNew;
      END  
      
      INSERT INTO VRATEIO(
        RAT_LANCTO
        ,RAT_CODCC
        ,RAT_DEBITO
        ,RAT_CREDITO
        ,RAT_CODEMP
        ,RAT_CODCMP
        ,RAT_CONTABIL
        ,RAT_CODUSR) VALUES(
        @pgrLanctoNew       -- RAT_LANCTO
        ,@ratCodCc          -- RAT_CODCC
        ,@ratVlrDebito      -- RAT_DEBITO
        ,@ratVlrCredito     -- RAT_CREDITO
        ,@pgrCodEmpNew      -- RAT_CODEMP
        ,@pgrCodCmpNew      -- RAT_CODCMP
        ,@ptpContabilNew    -- RAT_CONTABIL
        ,@pgrCodUsrNew      -- RAT_CODUSR
      );  
    END
    ----------------------------------------------
    -- Olhando o campo PGR_CODALT - Baixa parcial
    -- Atualizando o lancto em rateio
    ----------------------------------------------
    IF( @pgrCodAltNew=6 ) BEGIN
      DECLARE @prCodIni INTEGER;
      DECLARE @boleano INTEGER=0; --Iniciando como false pois eh obrigatorio atualizar rateio
      
      SELECT @prCodIni=COALESCE(PR_CODINI,0) FROM PAGARRATEIO WHERE PR_LANCTO=@pgrLanctoNew;
      IF( @prCodIni=0 )
        RAISERROR('NÃO LOCALIZADO CONTABILIZAÇÃO PARA ATUALIZAÇÃO DESTA BAIXA!',15,1);

      SET @ratVlrDebito  = 0;
      SET @ratVlrCredito = 0;
      SELECT @ratVlrDebito=RAT_DEBITO,@ratVlrCredito=RAT_CREDITO FROM RATEIO WHERE RAT_CODIGO=@prCodIni;
      IF((@ratVlrDebito>0) AND (@ratVlrCredito=0)) BEGIN
        UPDATE RATEIO SET RAT_DEBITO=@pgrVlrLiquidoNew WHERE RAT_CODIGO=@prCodIni;
        SET @boleano=1;
      END
      IF((@ratVlrDebito=0) AND (@ratVlrCredito>0)) BEGIN
        UPDATE RATEIO SET RAT_CREDITO=@pgrVlrLiquidoNew WHERE RAT_CODIGO=@prCodIni;
        SET @boleano=1;
      END
      
      IF( @boleano=0 )
        RAISERROR('NÃO ATUALIZADO VALOR CONTABIL!',15,1);        
    END
    -------------------------------  
    -- Atualizando a tabela EXTRATO
    -- Quitando um titulo
    -------------------------------  
    DECLARE @gravar INTEGER         = 0;
    DECLARE @debito NUMERIC(15,2)   = 0;
    DECLARE @credito NUMERIC(15,2)  = 0;
    DECLARE @saldo NUMERIC(15,2)    = 0;
    IF( (@pgrDataPagaNew IS NOT NULL) AND (@pgrDataPagaOld IS NULL) ) BEGIN
      IF( @bncEntraFluxoNew='S' ) BEGIN
        IF( @pgrIndiceNew=1 ) BEGIN
          SET @credito  = @pgrVlrLiquidoNew;
          SET @saldo    = (@bncSaldoNew+@credito);
          SET @gravar   = 1;
        END  
        IF( @pgrIndiceNew=-1 ) BEGIN
          SET @debito = @pgrVlrLiquidoNew;
          SET @saldo  = (@bncSaldoNew-@debito);
          SET @gravar = 1;
        END  
        IF( @gravar=1 ) BEGIN
          INSERT INTO EXTRATO(
            EXT_LANCTO
            ,EXT_CODBNC
            ,EXT_DEBITO
            ,EXT_CREDITO
            ,EXT_SALDO) VALUES(
            @pgrLanctoNew
            ,@pgrCodBncNew
            ,@debito
            ,@credito
            ,@saldo
          );
          UPDATE BANCO SET BNC_SALDO=@saldo WHERE BNC_CODIGO=@pgrCodBncNew;           
        END 
      END  
    END
    -------------------------------  
    -- Atualizando a tabela EXTRATO
    -- Excluindo uma quitacao
    -------------------------------  
    IF( (@pgrDataPagaNew IS NULL) AND (@pgrDataPagaOld IS NOT NULL) ) BEGIN
      IF( @bncEntraFluxoNew='S' ) BEGIN
        IF( @pgrIndiceNew=1 ) BEGIN
          SET @debito   = @pgrVlrLiquidoNew;
          SET @saldo    = (@bncSaldoNew-@debito);
          SET @gravar   = 1;
        END  
        IF( @pgrIndiceNew=-1 ) BEGIN
          SET @credito  = @pgrVlrLiquidoNew;
          SET @saldo    = (@bncSaldoNew+@credito);
          SET @gravar   = 1;
        END  
        IF( @gravar=1 ) BEGIN
          INSERT INTO EXTRATO(
            EXT_LANCTO
            ,EXT_CODBNC
            ,EXT_DEBITO
            ,EXT_CREDITO
            ,EXT_SALDO) VALUES(
            @pgrLanctoNew
            ,@pgrCodBncNew
            ,@debito
            ,@credito
            ,@saldo
          );
          UPDATE BANCO SET BNC_SALDO=@saldo WHERE BNC_CODIGO=@pgrCodBncNew;           
        END 
      END  
    END
    --
    --
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
-------------------------------------------------------------------------------------
--                              P A G A R T I P O
--trgpagartipo
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPAGARTIPO_BI ON dbo.VPAGARTIPO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PTP_CODIGO     | PK  |    |    | VC(02) NN          |
  -- PTP_NOME       |     |    |    | VC(25) NN          |
  -- PTP_VALOR      |     |    |    | INT NN             | CP/PP/PR -1 senao 1
  -- PTP_CNAB       | CC  |    |    | VC(1) NN           | Se aceita pagamento/recebimento por cnab 
  -- PTP_CONTABIL   | CC  |    |    | VC(1) NN           | Se entra no contabil -> RAT_SNGER
  -- PTP_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PTP_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PTP_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D25         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(25) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ptpCodigoNew VARCHAR(2);
  DECLARE @ptpNomeNew VARCHAR(25);
  DECLARE @ptpValorNew INTEGER;
  DECLARE @ptpCnabNew VARCHAR(1);
  DECLARE @ptpContabilNew VARCHAR(1);
  DECLARE @ptpAtivoNew VARCHAR(1);
  DECLARE @ptpRegNew VARCHAR(1);
  DECLARE @ptpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ptpCodigoNew    = dbo.fncTranslate(i.PTP_CODIGO,2)
         ,@ptpNomeNew     = dbo.fncTranslate(i.PTP_NOME,25)
         ,@ptpAtivoNew    = UPPER(i.PTP_ATIVO)
         ,@ptpValorNew    = i.PTP_VALOR
         ,@ptpCnabNew     = UPPER(i.PTP_CNAB)
         ,@ptpContabilNew = UPPER(i.PTP_CONTABIL)
         ,@ptpRegNew      = UPPER(i.PTP_REG)
         ,@ptpCodUsrNew   = i.PTP_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New       = UP.UP_D25
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PTP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ptpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA INCLUIR NA TABELA PAGARTIPO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(PTP_CODIGO,'OK') FROM PAGARTIPO WHERE PTP_NOME=@ptpNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PAGARTIPO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(PTP_NOME,'OK') FROM PAGARTIPO WHERE PTP_CODIGO=@ptpCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA PAGARTIPO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @ptpRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@ptpRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PAGARTIPO( 
      PTP_CODIGO
      ,PTP_NOME
      ,PTP_VALOR
      ,PTP_CNAB
      ,PTP_CONTABIL      
      ,PTP_ATIVO
      ,PTP_REG
      ,PTP_CODUSR) VALUES(
      @ptpCodigoNew     -- PTP_CODIGO
      ,@ptpNomeNew      -- PTP_NOME
      ,@ptpValorNew     -- PTP_VALOR
      ,@ptpCnabNew      -- PTP_CNAB
      ,@ptpContabilNew  -- PTP_CONTABIL
      ,@ptpAtivoNew     -- PTP_ATIVO
      ,@ptpRegNew       -- PTP_REG
      ,@ptpCodUsrNew    -- PTP_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPAGARTIPO(
      PTP_ACAO
      ,PTP_CODIGO
      ,PTP_NOME
      ,PTP_VALOR
      ,PTP_CNAB
      ,PTP_CONTABIL
      ,PTP_ATIVO
      ,PTP_REG
      ,PTP_CODUSR) VALUES(
      'I'               -- PTP_ACAO
      ,@ptpCodigoNew    -- PTP_CODIGO
      ,@ptpNomeNew      -- PTP_NOME
      ,@ptpValorNew     -- PTP_VALOR
      ,@ptpCnabNew      -- PTP_CNAB
      ,@ptpContabilNew  -- PTP_CONTABIL
      ,@ptpAtivoNew     -- PTP_ATIVO
      ,@ptpRegNew       -- PTP_REG
      ,@ptpCodUsrNew    -- PTP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPAGARTIPO_BU ON dbo.VPAGARTIPO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @ptpCodigoNew VARCHAR(2);
  DECLARE @ptpNomeNew VARCHAR(25);
  DECLARE @ptpValorNew INTEGER;
  DECLARE @ptpCnabNew VARCHAR(1);
  DECLARE @ptpContabilNew VARCHAR(1);  
  DECLARE @ptpAtivoNew VARCHAR(1);
  DECLARE @ptpRegNew VARCHAR(1);
  DECLARE @ptpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @ptpCodigoNew    = dbo.fncTranslate(i.PTP_CODIGO,2)
         ,@ptpNomeNew     = dbo.fncTranslate(i.PTP_NOME,25)
         ,@ptpValorNew    = i.PTP_VALOR
         ,@ptpCnabNew     = UPPER(i.PTP_CNAB)
         ,@ptpContabilNew = UPPER(i.PTP_CONTABIL)         
         ,@ptpAtivoNew    = UPPER(i.PTP_ATIVO)
         ,@ptpRegNew      = UPPER(i.PTP_REG)
         ,@ptpCodUsrNew   = i.PTP_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New       = UP.UP_D25
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PTP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ptpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA ALTERAR NA TABELA PAGARTIPO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @ptpCodigoOld VARCHAR(2);
    DECLARE @ptpNomeOld VARCHAR(25);
    DECLARE @ptpValorOld INTEGER;
    DECLARE @ptpCnabOld VARCHAR(1);
    DECLARE @ptpContabilOld VARCHAR(1);
    DECLARE @ptpAtivoOld VARCHAR(1);
    DECLARE @ptpRegOld VARCHAR(1);
    DECLARE @ptpCodUsrOld INTEGER;
    SELECT @ptpCodigoOld    = d.PTP_CODIGO
           ,@ptpNomeOld     = d.PTP_NOME
           ,@ptpValorOld    = d.PTP_VALOR
           ,@ptpCnabOld     = d.PTP_CNAB
           ,@ptpContabilOld = d.PTP_CONTABIL
           ,@ptpAtivoOld    = d.PTP_ATIVO
           ,@ptpRegOld      = d.PTP_REG
           ,@ptpCodUsrOld   = d.PTP_CODUSR         
      FROM PAGARTIPO d WHERE d.PTP_CODIGO=@ptpCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @ptpCodigoOld<>@ptpCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @ptpNomeOld<>@ptpNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(PTP_CODIGO,'OK') FROM PAGARTIPO WHERE PTP_NOME=@ptpNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PAGARTIPO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @ptpRegOld <> @ptpRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@ptpRegOld,@ptpRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PAGARTIPO
       SET PTP_NOME     = @ptpNomeNew
          ,PTP_VALOR    = @ptpValorNew
          ,PTP_CNAB     = @ptpCnabNew
          ,PTP_CONTABIL = @ptpContabilNew          
          ,PTP_ATIVO    = @ptpAtivoNew
          ,PTP_REG      = @ptpRegNew
          ,PTP_CODUSR   = @ptpCodUsrNew
    WHERE PTP_CODIGO    = @ptpCodigoNew;     
    -- Gravando LOG
    IF( (@ptpNomeOld<>@ptpNomeNew) OR (@ptpValorOld<>@ptpValorNew) OR (@ptpCnabOld<>@ptpCnabNew) OR (@ptpContabilOld<>@ptpContabilNew)
    OR (@ptpAtivoOld<>@ptpAtivoNew) OR (@ptpRegOld<>@ptpRegNew) ) BEGIN
      INSERT INTO dbo.BKPPAGARTIPO(
        PTP_ACAO
        ,PTP_CODIGO
        ,PTP_NOME
        ,PTP_VALOR
        ,PTP_CNAB
        ,PTP_CONTABIL        
        ,PTP_ATIVO
        ,PTP_REG
        ,PTP_CODUSR) VALUES(
        'A'               -- PTP_ACAO
        ,@ptpCodigoNew    -- PTP_CODIGO
        ,@ptpNomeNew      -- PTP_NOME
        ,@ptpValorNew     -- PTP_VALOR
        ,@ptpCnabNew      -- PTP_CNAB
        ,@ptpContabilNew  -- PTP_CONTABIL        
        ,@ptpAtivoNew     -- PTP_ATIVO
        ,@ptpRegNew       -- PTP_REG
        ,@ptpCodUsrNew    -- PTP_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPAGARTIPO_BD ON dbo.VPAGARTIPO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntPg INTEGER      = 0;    -- Para procurar campo foreign key int (PADRAOGRUPO)
  DECLARE @fkStrErr VARCHAR(6)  = NULL; -- Para procurar campo foreign key str (CNABERRO) 
  DECLARE @erroOld VARCHAR(70);         -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ptpCodigoOld VARCHAR(2);
  DECLARE @ptpNomeOld VARCHAR(25);
  DECLARE @ptpValorOld INTEGER;
  DECLARE @ptpCnabOld VARCHAR(1);
  DECLARE @ptpContabilOld VARCHAR(1);  
  DECLARE @ptpAtivoOld VARCHAR(1);
  DECLARE @ptpRegOld VARCHAR(1);
  DECLARE @ptpCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD25Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ptpCodigoOld    = d.PTP_CODIGO
         ,@ptpNomeOld     = d.PTP_NOME
         ,@ptpValorOld    = d.PTP_VALOR
         ,@ptpCnabOld     = d.PTP_CNAB
         ,@ptpContabilOld = d.PTP_CONTABIL
         ,@ptpAtivoOld    = d.PTP_ATIVO
         ,@ptpRegOld      = d.PTP_REG
         ,@ptpCodUsrOld   = d.PTP_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25Old       = UP.UP_D25
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PTP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ptpCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD25Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA EXCLUIR NA TABELA PAGARTIPO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@ptpRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK PG_CODPTP(PADRAOGRUPO)
    --                 ERR_CODPTP(CNABERRO)
    --------------------------------------
    SELECT TOP 1 @fkIntPg=COALESCE(PG_CODPDR,0) FROM PADRAOGRUPO WHERE PG_CODPTP=@ptpCodigoOld;
    IF( @fkIntPg > 0 )
      RAISERROR('TIPO UTILIZADO EM PADRAO GRUPO %i',15,1,@fkIntPg);
    SELECT TOP 1 @fkStrErr=COALESCE(ERR_CODBCD,NULL) FROM CNABERRO WHERE ERR_CODPTP=@ptpCodigoOld;
    IF( @fkStrErr IS NOT NULL )
      RAISERROR('TIPO UTILIZADO EM CNAB_ERRO %s',15,1,@fkStrErr);
    --
    --
    DELETE FROM dbo.PAGARTIPO WHERE PTP_CODIGO=@ptpCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPPAGARTIPO(
      PTP_ACAO
      ,PTP_CODIGO
      ,PTP_NOME
      ,PTP_VALOR
      ,PTP_CNAB
      ,PTP_CONTABIL      
      ,PTP_ATIVO
      ,PTP_REG
      ,PTP_CODUSR) VALUES(
      'E'               -- PTP_ACAO
      ,@ptpCodigoOld    -- PTP_CODIGO
      ,@ptpNomeOld      -- PTP_NOME
      ,@ptpValorOld     -- PTP_VALOR
      ,@ptpCnabOld      -- PTP_CNAB
      ,@ptpContabilOld  -- PTP_CONTABIL      
      ,@ptpAtivoOld     -- PTP_ATIVO
      ,@ptpRegOld       -- PTP_REG
      ,@ptpCodUsrOld    -- PTP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPAGARTIPO_BUD ON dbo.BKPPAGARTIPO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                           P A G A R T I T U L O                                 --
--trgpagartitulo
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPAGARTITULO_BI ON dbo.VPAGARTITULO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PTT_CODIGO     | PK  |    |    | VC(01) NN          |
  -- PTT_NOME       |     |    |    | VC(25) NN          |
  -- PTT_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PTT_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PTT_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D25         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      

  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(25) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pttCodigoNew VARCHAR(1);
  DECLARE @pttNomeNew VARCHAR(25);
  DECLARE @pttAtivoNew VARCHAR(1);
  DECLARE @pttRegNew VARCHAR(1);
  DECLARE @pttCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pttCodigoNew   = i.PTT_CODIGO
         ,@pttNomeNew    = dbo.fncTranslate(i.PTT_NOME,25)
         ,@pttAtivoNew   = UPPER(i.PTT_ATIVO)
         ,@pttRegNew     = UPPER(i.PTT_REG)
         ,@pttCodUsrNew  = i.PTT_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PTT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pttCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA INCLUIR NA TABELA PAGARTITULO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(PTT_CODIGO,'OK') FROM PAGARTITULO WHERE PTT_NOME=@pttNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PAGARTITULO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(PTT_NOME,'OK') FROM PAGARTITULO WHERE PTT_CODIGO=@pttCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA PAGARTITULO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @pttRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@pttRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PAGARTITULO( 
      PTT_CODIGO
      ,PTT_NOME
      ,PTT_ATIVO
      ,PTT_REG
      ,PTT_CODUSR) VALUES(
      @pttCodigoNew   -- PTT_CODIGO
      ,@pttNomeNew    -- PTT_NOME
      ,@pttAtivoNew   -- PTT_ATIVO
      ,@pttRegNew     -- PTT_REG
      ,@pttCodUsrNew  -- PTT_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPAGARTITULO(
      PTT_ACAO
      ,PTT_CODIGO
      ,PTT_NOME
      ,PTT_ATIVO
      ,PTT_REG
      ,PTT_CODUSR) VALUES(
      'I'                       -- PTT_ACAO
      ,@pttCodigoNew            -- PTT_CODIGO
      ,@pttNomeNew              -- PTT_NOME
      ,@pttAtivoNew             -- PTT_ATIVO
      ,@pttRegNew               -- PTT_REG
      ,@pttCodUsrNew            -- PTT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPAGARTITULO_BU ON dbo.VPAGARTITULO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @pttCodigoNew VARCHAR(1);
  DECLARE @pttNomeNew VARCHAR(25);
  DECLARE @pttAtivoNew VARCHAR(1);
  DECLARE @pttRegNew VARCHAR(1);
  DECLARE @pttCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD25New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @pttCodigoNew   = i.PTT_CODIGO
         ,@pttNomeNew    = dbo.fncTranslate(i.PTT_NOME,25)
         ,@pttAtivoNew   = UPPER(i.PTT_ATIVO)
         ,@pttRegNew     = UPPER(i.PTT_REG)
         ,@pttCodUsrNew  = i.PTT_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25New      = UP.UP_D25
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PTT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pttCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD25New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA ALTERAR NA TABELA PAGARTITULO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @pttCodigoOld VARCHAR(1);
    DECLARE @pttNomeOld VARCHAR(25);
    DECLARE @pttAtivoOld VARCHAR(1);
    DECLARE @pttRegOld VARCHAR(1);
    DECLARE @pttCodUsrOld INTEGER;
    SELECT @pttCodigoOld   = d.PTT_CODIGO
           ,@pttNomeOld    = d.PTT_NOME
           ,@pttAtivoOld   = d.PTT_ATIVO
           ,@pttRegOld     = d.PTT_REG
           ,@pttCodUsrOld  = d.PTT_CODUSR         
      FROM PAGARTITULO d WHERE d.PTT_CODIGO=@pttCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @pttCodigoOld<>@pttCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @pttNomeOld<>@pttNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(PTT_CODIGO,'OK') FROM PAGARTITULO WHERE PTT_NOME=@pttNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PAGARTITULO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @pttRegOld <> @pttRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@pttRegOld,@pttRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PAGARTITULO
       SET PTT_NOME   = @pttNomeNew
          ,PTT_ATIVO  = @pttAtivoNew
          ,PTT_REG    = @pttRegNew
          ,PTT_CODUSR = @pttCodUsrNew
    WHERE PTT_CODIGO  = @pttCodigoNew;     
    -- Gravando LOG
    IF( (@pttNomeOld<>@pttNomeNew) OR (@pttAtivoOld<>@pttAtivoNew) OR (@pttRegOld<>@pttRegNew) ) BEGIN
      INSERT INTO dbo.BKPPAGARTITULO(
        PTT_ACAO
        ,PTT_CODIGO
        ,PTT_NOME
        ,PTT_ATIVO
        ,PTT_REG
        ,PTT_CODUSR) VALUES(
        'A'             -- PTT_ACAO
        ,@pttCodigoNew  -- PTT_CODIGO
        ,@pttNomeNew    -- PTT_NOME
        ,@pttAtivoNew   -- PTT_ATIVO
        ,@pttRegNew     -- PTT_REG
        ,@pttCodUsrNew  -- PTT_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPAGARTITULO_BD ON dbo.VPAGARTITULO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntPgr INTEGER = 0;  -- Para procurar campo foreign key int (PAGAR)
  DECLARE @fkIntPdr INTEGER = 0;  -- Para procurar campo foreign key int (PADRAO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @pttCodigoOld VARCHAR(1);
  DECLARE @pttNomeOld VARCHAR(25);
  DECLARE @pttAtivoOld VARCHAR(1);
  DECLARE @pttRegOld VARCHAR(1);
  DECLARE @pttCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD25Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @pttCodigoOld   = d.PTT_CODIGO
         ,@pttNomeOld    = d.PTT_NOME
         ,@pttAtivoOld   = d.PTT_ATIVO
         ,@pttRegOld     = d.PTT_REG
         ,@pttCodUsrOld  = d.PTT_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD25Old      = UP.UP_D25
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PTT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@pttCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD25Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 25 PARA EXCLUIR NA TABELA PAGARTITULO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@pttRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK PDR_CODPTT(PADRAO)
    --                 PGR_CODPTT(PAGAR)
    --------------------------------------
    SELECT TOP 1 @fkIntPdr=COALESCE(PDR_CODIGO,0) FROM PADRAO WHERE PDR_CODPTT=@pttCodigoOld;
    IF( @fkIntPdr > 0 )
      RAISERROR('PADRAO UTILIZADO NO IMPUT %i',15,1,@fkIntPdr);
    SELECT TOP 1 @fkIntPgr=COALESCE(PGR_LANCTO,0) FROM PAGAR WHERE PGR_CODPTT=@pttCodigoOld;
    IF( @fkIntPgr > 0 )
      RAISERROR('PADRAO UTILIZADO NO FINANCEIRO LANCTO %i',15,1,@fkIntPgr);
    --
    --
    DELETE FROM dbo.PAGARTITULO WHERE PTT_CODIGO=@pttCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPPAGARTITULO(
      PTT_ACAO
      ,PTT_CODIGO
      ,PTT_NOME
      ,PTT_ATIVO
      ,PTT_REG
      ,PTT_CODUSR) VALUES(
      'E'               -- PTT_ACAO
      ,@pttCodigoOld    -- PTT_CODIGO
      ,@pttNomeOld      -- PTT_NOME
      ,@pttAtivoOld     -- PTT_ATIVO
      ,@pttRegOld       -- PTT_REG
      ,@pttCodUsrOld    -- PTT_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPAGARTITULO_BUD ON dbo.BKPPAGARTITULO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                           P A I S
--trgpais
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPAIS_BI ON dbo.VPAIS
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PAI_CODIGO     | OK  |    |    | INT NN PK          | Codigo informado pelo usuario
  -- PAI_NOME       | OK  |    |    | VC(30) NN          | 
  -- PAI_DDI        | OK  |    |    | INT NN             | 
  -- PAI_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PAI_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- PAI_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D08      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela 
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema      
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER     = 0;      -- Para procurar unique index
  DECLARE @uiNome VARCHAR(30)   = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70)  = 'OK';   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @paiCodigoNew INTEGER;
  DECLARE @paiNomeNew VARCHAR(30);
  DECLARE @paiDdiNew INTEGER;
  DECLARE @paiAtivoNew VARCHAR(1);
  DECLARE @paiRegNew VARCHAR(1);
  DECLARE @paiCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @paiCodigoNew   = i.PAI_CODIGO
         ,@paiNomeNew    = dbo.fncTranslate(i.PAI_NOME,30)
         ,@paiDdiNew     = i.PAI_DDI
         ,@paiAtivoNew   = UPPER(i.PAI_ATIVO)
         ,@paiRegNew     = UPPER(i.PAI_REG)
         ,@paiCodUsrNew  = i.PAI_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New      = UP.UP_D08
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PAI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@paiCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 26 PARA INCLUIR NA TABELA PAIS',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(PAI_CODIGO,0) FROM PAIS WHERE PAI_NOME=@paiNomeNew;
    IF( @uiCodigo <> 0 )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PAIS COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(PAI_NOME,'OK') FROM PAIS WHERE PAI_CODIGO=@paiCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA PAIS %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @paiRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@paiRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PAIS( 
      PAI_CODIGO
      ,PAI_NOME
      ,PAI_DDI
      ,PAI_ATIVO
      ,PAI_REG
      ,PAI_CODUSR) VALUES(
      @paiCodigoNew   -- PAI_CODIGO
      ,@paiNomeNew    -- PAI_NOME
      ,@paiDdiNew     -- PAI_DDI
      ,@paiAtivoNew   -- PAI_ATIVO
      ,@paiRegNew     -- PAI_REG
      ,@paiCodUsrNew  -- PAI_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPAIS(
      PAI_ACAO
      ,PAI_CODIGO
      ,PAI_NOME
      ,PAI_DDI
      ,PAI_ATIVO
      ,PAI_REG
      ,PAI_CODUSR) VALUES(
      'I'                       -- PAI_ACAO
      ,@paiCodigoNew            -- PAI_CODIGO
      ,@paiNomeNew              -- PAI_NOME
      ,@paiDdiNew               -- PAI_DDI
      ,@paiAtivoNew             -- PAI_ATIVO
      ,@paiRegNew               -- PAI_REG
      ,@paiCodUsrNew            -- PAI_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPAIS_BU ON dbo.VPAIS
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @paiCodigoNew INTEGER;
  DECLARE @paiNomeNew VARCHAR(30);
  DECLARE @paiDdiNew INTEGER;
  DECLARE @paiAtivoNew VARCHAR(1);
  DECLARE @paiRegNew VARCHAR(1);
  DECLARE @paiCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @paiCodigoNew   = i.PAI_CODIGO
         ,@paiNomeNew    = dbo.fncTranslate(i.PAI_NOME,30)
         ,@paiDdiNew     = i.PAI_DDI         
         ,@paiAtivoNew   = UPPER(i.PAI_ATIVO)
         ,@paiRegNew     = UPPER(i.PAI_REG)
         ,@paiCodUsrNew  = i.PAI_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New      = UP.UP_D08
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PAI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@paiCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 26 PARA ALTERAR NA TABELA PAIS',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @paiCodigoOld INTEGER;
    DECLARE @paiNomeOld VARCHAR(30);
    DECLARE @paiDdiOld INTEGER;  
    DECLARE @paiAtivoOld VARCHAR(1);
    DECLARE @paiRegOld VARCHAR(1);
    DECLARE @paiCodUsrOld INTEGER;
    SELECT @paiCodigoOld   = d.PAI_CODIGO
           ,@paiNomeOld    = d.PAI_NOME
           ,@paiDdiOld     = d.PAI_DDI         
           ,@paiAtivoOld   = d.PAI_ATIVO
           ,@paiRegOld     = d.PAI_REG
           ,@paiCodUsrOld  = d.PAI_CODUSR         
      FROM PAIS d WHERE d.PAI_CODIGO=@paiCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @paiCodigoOld<>@paiCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @paiNomeOld<>@paiNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(PAI_CODIGO,0) FROM PAIS WHERE PAI_NOME=@paiNomeNew;
      IF( @uiCodigo <> 0 )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PAIS COM CODIGO %i',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @paiRegOld <> @paiRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@paiRegOld,@paiRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PAIS
       SET PAI_NOME   = @paiNomeNew
          ,PAI_DDI    = @paiDdiNew
          ,PAI_ATIVO  = @paiAtivoNew
          ,PAI_REG    = @paiRegNew
          ,PAI_CODUSR = @paiCodUsrNew
    WHERE PAI_CODIGO  = @paiCodigoNew;     
    -- Gravando LOG
    IF( (@paiNomeOld<>@paiNomeNew) OR (@paiDdiOld<>@paiDdiNew) OR (@paiAtivoOld<>@paiAtivoNew) OR (@paiRegOld<>@paiRegNew) ) BEGIN
      INSERT INTO dbo.BKPPAIS(
        PAI_ACAO
        ,PAI_CODIGO
        ,PAI_NOME
        ,PAI_DDI
        ,PAI_ATIVO
        ,PAI_REG
        ,PAI_CODUSR) VALUES(
        'A'             -- PAI_ACAO
        ,@paiCodigoNew  -- PAI_CODIGO
        ,@paiNomeNew    -- PAI_NOME
        ,@paiDdiNew     -- PAI_DDI
        ,@paiAtivoNew   -- PAI_ATIVO
        ,@paiRegNew     -- PAI_REG
        ,@paiCodUsrNew  -- PAI_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPAIS_BD ON dbo.VPAIS
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkStrReg VARCHAR(5) = 'OK';  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @erroOld VARCHAR(70);         -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @paiCodigoOld INTEGER;
  DECLARE @paiNomeOld VARCHAR(30);
  DECLARE @paiDdiOld INTEGER;
  DECLARE @paiAtivoOld VARCHAR(1);
  DECLARE @paiRegOld VARCHAR(1);
  DECLARE @paiCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD08Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @paiCodigoOld   = d.PAI_CODIGO
         ,@paiNomeOld    = d.PAI_NOME
         ,@paiDdiOld     = d.PAI_DDI
         ,@paiAtivoOld   = d.PAI_ATIVO
         ,@paiRegOld     = d.PAI_REG
         ,@paiCodUsrOld  = d.PAI_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08Old      = UP.UP_D08
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PAI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@paiCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD08Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 26 PARA EXCLUIR NA TABELA PAIS',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@paiRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK REG_CODPAI(REGIAO)
    --------------------------------------
    SELECT TOP 1 @fkStrReg=COALESCE(REG_CODIGO,'OK') FROM REGIAO WHERE REG_CODPAI=@paiCodigoOld;
    IF( @fkStrReg <> 'OK' )
      RAISERROR('PAIS UTILIZADO NA REGIAO %s',15,1,@fkStrReg);
    --
    DELETE FROM dbo.PAIS WHERE PAI_CODIGO=@paiCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPPAIS(
      PAI_ACAO
      ,PAI_CODIGO
      ,PAI_NOME
      ,PAI_DDI
      ,PAI_ATIVO
      ,PAI_REG
      ,PAI_CODUSR) VALUES(
      'E'               -- PAI_ACAO
      ,@paiCodigoOld    -- PAI_CODIGO
      ,@paiNomeOld      -- PAI_NOME
      ,@paiDdiOld       -- PAI_DDI
      ,@paiAtivoOld     -- PAI_ATIVO
      ,@paiRegOld       -- PAI_REG
      ,@paiCodUsrOld    -- PAI_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPAIS_BUD ON dbo.BKPPAIS
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  --------------------------------------------------------------
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido 
  --------------------------------------------------------------
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END 
-------------------------------------------------------------------------------------
--                           P O N T O E S T O Q U E
--trgpontoestoque
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPONTOESTOQUE_BI ON dbo.VPONTOESTOQUE
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PE_CODIGO      | PK  |    |    | VC(03) NN          |
  -- PE_NOME        |     |    |    | VC(20) NN          |
  -- PE_ESTOQUE     | OK  |    |    | INT NN             | Total de favorecidos na tabela PONTOESTOQUEFAVORECIDO
  -- PE_SUCATA      | CC  |    |    | VC(1) NN           | S|N     Se pode ser alterado para sucata
  -- PE_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PE_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PE_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D33         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @peCodigoNew VARCHAR(3);
  DECLARE @peNomeNew VARCHAR(20);
  DECLARE @peSucataNew VARCHAR(1);
  DECLARE @peAtivoNew VARCHAR(1);
  DECLARE @peRegNew VARCHAR(1);
  DECLARE @peCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @peCodigoNew   = dbo.fncTranslate(i.PE_CODIGO,3)
         ,@peNomeNew    = dbo.fncTranslate(i.PE_NOME,20)
         ,@peSucataNew  = UPPER(i.PE_SUCATA)         
         ,@peAtivoNew   = UPPER(i.PE_ATIVO)
         ,@peRegNew     = UPPER(i.PE_REG)
         ,@peCodUsrNew  = i.PE_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@peCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA INCLUIR NA TABELA PONTOESTOQUE',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(PE_CODIGO,'OK') FROM PONTOESTOQUE WHERE PE_NOME=@peNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PONTOESTOQUE COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(PE_NOME,'OK') FROM PONTOESTOQUE WHERE PE_CODIGO=@peCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA PONTOESTOQUE %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @peRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@peRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PONTOESTOQUE( 
      PE_CODIGO
      ,PE_NOME
      ,PE_SUCATA      
      ,PE_ESTOQUE      
      ,PE_ATIVO
      ,PE_REG
      ,PE_CODUSR) VALUES(
      @peCodigoNew   -- PE_CODIGO
      ,@peNomeNew    -- PE_NOME
      ,@peSucataNew  -- PE_SUCATA
      ,0             -- PE_ESTOQUE
      ,@peAtivoNew   -- PE_ATIVO
      ,@peRegNew     -- PE_REG
      ,@peCodUsrNew  -- PE_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPONTOESTOQUE(
      PE_ACAO
      ,PE_CODIGO
      ,PE_NOME
      ,PE_SUCATA
      ,PE_ATIVO
      ,PE_REG
      ,PE_CODUSR) VALUES(
      'I'             -- PE_ACAO
      ,@peCodigoNew   -- PE_CODIGO
      ,@peNomeNew     -- PE_NOME
      ,@peSucataNew   -- PE_SUCATA      
      ,@peAtivoNew    -- PE_ATIVO
      ,@peRegNew      -- PE_REG
      ,@peCodUsrNew   -- PE_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPONTOESTOQUE_BU ON dbo.VPONTOESTOQUE
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @peCodigoNew VARCHAR(3);
  DECLARE @peNomeNew VARCHAR(20);
  DECLARE @peSucataNew VARCHAR(1);  
  DECLARE @peAtivoNew VARCHAR(1);
  DECLARE @peRegNew VARCHAR(1);
  DECLARE @peCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @peCodigoNew   = i.PE_CODIGO
         ,@peNomeNew    = dbo.fncTranslate(i.PE_NOME,20)
         ,@peSucataNew  = UPPER(i.PE_SUCATA)                  
         ,@peAtivoNew   = UPPER(i.PE_ATIVO)
         ,@peRegNew     = UPPER(i.PE_REG)
         ,@peCodUsrNew  = i.PE_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    --------------------------------------------------
    -- ESTE PRODUTO EH CHAVE PARA A ENTRADA EM ESTOQUE
    --------------------------------------------------
    IF( @peCodigoNew='EST' )
      RAISERROR('REGISTRO RESERVADO DO SISTEMA PARA ENTRADA EM ESTOQUE',15,1);
    --------------------------------------------------
    -- ESTE PRODUTO EH CHAVE PARA BAIXA EM ESTOQUE
    --------------------------------------------------
    IF( @peCodigoNew='SUC' )
      RAISERROR('REGISTRO RESERVADO DO SISTEMA PARA BAIXA EM ESTOQUE',15,1);
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@peCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA ALTERAR NA TABELA PONTOESTOQUE',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @peCodigoOld VARCHAR(3);
    DECLARE @peNomeOld VARCHAR(20);
    DECLARE @peSucataOld VARCHAR(1);
    DECLARE @peAtivoOld VARCHAR(1);
    DECLARE @peRegOld VARCHAR(1);
    DECLARE @peCodUsrOld INTEGER;
    SELECT @peCodigoOld   = d.PE_CODIGO
           ,@peNomeOld    = d.PE_NOME
           ,@peSucataOld  = d.PE_SUCATA
           ,@peAtivoOld   = d.PE_ATIVO
           ,@peRegOld     = d.PE_REG
           ,@peCodUsrOld  = d.PE_CODUSR         
      FROM PONTOESTOQUE d WHERE d.PE_CODIGO=@peCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @peCodigoOld<>@peCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @peNomeOld<>@peNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(PE_CODIGO,'OK') FROM PONTOESTOQUE WHERE PE_NOME=@peNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PONTOESTOQUE COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @peRegOld <> @peRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@peRegOld,@peRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PONTOESTOQUE
       SET PE_NOME   = @peNomeNew
          ,PE_SUCATA = @peSucataNew       
          ,PE_ATIVO  = @peAtivoNew
          ,PE_REG    = @peRegNew
          ,PE_CODUSR = @peCodUsrNew
    WHERE PE_CODIGO  = @peCodigoNew;     
    -- Gravando LOG
    IF( (@peNomeOld<>@peNomeNew) OR (@peSucataOld<>@peSucataNew) OR (@peAtivoOld<>@peAtivoNew) OR (@peRegOld<>@peRegNew) ) BEGIN
      INSERT INTO dbo.BKPPONTOESTOQUE(
        PE_ACAO
        ,PE_CODIGO
        ,PE_NOME
        ,PE_SUCATA        
        ,PE_ATIVO
        ,PE_REG
        ,PE_CODUSR) VALUES(
        'A'            -- PE_ACAO
        ,@peCodigoNew  -- PE_CODIGO
        ,@peNomeNew    -- PE_NOME
        ,@peSucataNew  -- PE_SUCATA
        ,@peAtivoNew   -- PE_ATIVO
        ,@peRegNew     -- PE_REG
        ,@peCodUsrNew  -- PE_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPONTOESTOQUE_BD ON dbo.VPONTOESTOQUE
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @peCodigoOld VARCHAR(3);
  DECLARE @peNomeOld VARCHAR(20);
  DECLARE @peSucataOld VARCHAR(1);  
  DECLARE @peAtivoOld VARCHAR(1);
  DECLARE @peRegOld VARCHAR(1);
  DECLARE @peCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD33Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @peCodigoOld   = d.PE_CODIGO
         ,@peNomeOld    = d.PE_NOME
         ,@peSucataOld  = d.PE_SUCATA
         ,@peAtivoOld   = d.PE_ATIVO
         ,@peRegOld     = d.PE_REG
         ,@peCodUsrOld  = d.PE_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33Old      = UP.UP_D33
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PE_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    ----------------------------------------------------------------------
    -- ESTES PRODUTOS SAO CHAVE PARA A ENTRADA EM ESTOQUE/BAIXA EM ESTOQUE
    ----------------------------------------------------------------------
    IF( (@peCodigoOld='EST') OR (@peCodigoOld='SUC') )
      RAISERROR('REGISTRO RESERVADO DO SISTEMA PARA ENTRADA/BAIXA EM ESTOQUE',15,1);
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@peCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD33Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA EXCLUIR NA TABELA PONTOESTOQUE',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@peRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --  
    DELETE FROM dbo.PONTOESTOQUE WHERE PE_CODIGO=@peCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPPONTOESTOQUE(
      PE_ACAO
      ,PE_CODIGO
      ,PE_NOME
      ,PE_SUCATA      
      ,PE_ATIVO
      ,PE_REG
      ,PE_CODUSR) VALUES(
      'E'              -- PE_ACAO
      ,@peCodigoOld    -- PE_CODIGO
      ,@peNomeOld      -- PE_NOME
      ,@peSucataOld    -- PE_SUCATA
      ,@peAtivoOld     -- PE_ATIVO
      ,@peRegOld       -- PE_REG
      ,@peCodUsrOld    -- PE_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPONTOESTOQUE_BUD ON dbo.BKPPONTOESTOQUE
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                        P O N T O E S T O Q U E I N D
--trgpontoestoqueind
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPONTOESTOQUEIND_BI ON dbo.VPONTOESTOQUEIND
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS      |UPD |DEL | TIPO               | Obs
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------
  -- PEI_CODFVR     | SEL/PK  |    |    | INT                | Campo relacionado (FAVORECIDO)
  -- FVR_NOME       | SEL     |    |    | VC(60)             | Campo relacionado (FAVORECIDO)
  -- PEI_CODPE      | PK      |    |    | VC(3)              | Campo relacionado (PONTOESTOQUE)
  -- PEI_ATIVO      | CC      |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PEI_REG        | FNC     |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PEI_CODUSR     | OK      |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL     |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL     |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D33         | SEL     |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL     |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER    = 0;     -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @peiCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @peiCodPeNew VARCHAR(3)
  DECLARE @peNomeNew VARCHAR(20);
  DECLARE @peiAtivoNew VARCHAR(1);
  DECLARE @peiRegNew VARCHAR(1);
  DECLARE @peiCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @peiCodFvrNew   = i.PEI_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@peiCodPeNew   = dbo.fncTranslate(i.PEI_CODPE,3)
         ,@peNomeNew     = COALESCE(PE.PE_NOME,'ERRO')
         ,@peiAtivoNew   = UPPER(i.PEI_ATIVO)
         ,@peiRegNew     = UPPER(i.PEI_REG)
         ,@peiCodUsrNew  = i.PEI_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.PEI_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN PONTOESTOQUE PE ON i.PEI_CODPE=PE.PE_CODIGO AND PE.PE_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.PEI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @peNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO %s PARA ESTE REGISTRO',15,1,@peiCodPeNew);
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@peiCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@peiCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @usrApelidoNew<>'SISTEMA' ) BEGIN
      IF( @upD33New<2 )
        RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA INCLUIR NA TABELA PONTOESTOQUEIND',15,1,@usrApelidoNew);
    END  
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(PEI_CODFVR,0) FROM PONTOESTOQUEIND WHERE ((PEI_CODFVR=@peiCodFvrNew) AND (PEI_CODPE=@peiCodPeNew));
    IF( @uicODIGO <> 0 )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA PONTOESTOQUEIND %s',15,1,@fvrNomeNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @peiRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@peiRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PONTOESTOQUEIND( 
      PEI_CODFVR
      ,PEI_CODPE
      ,PEI_ATIVO
      ,PEI_REG
      ,PEI_CODUSR) VALUES(
      @peiCodFvrNew   -- PEI_CODFVR
      ,@peiCodPeNew  -- PEI_CODPE
      ,@peiAtivoNew   -- PEI_ATIVO
      ,@peiRegNew     -- PEI_REG
      ,@peiCodUsrNew  -- PEI_CODUSR
    );
    --------------------------------------------------------------------------
    -- Gravando endereco para contrato pois pode ser cliente/terceiro/parceiro
    --------------------------------------------------------------------------
    SELECT @uiCodigo=CNTE_CODIGO FROM CONTRATOENDERECO WHERE CNTE_CODFVR=@peiCodFvrNew;
    IF( @@rowcount=0 ) BEGIN
      DECLARE @fvrCodcdd VARCHAR(7);
      DECLARE @fvrEndereco VARCHAR(60);
      DECLARE @fvrNumero VARCHAR(10);
      DECLARE @fvrCep VARCHAR(8);
      DECLARE @fvrBairro VARCHAR(15);
      DECLARE @fvrFone VARCHAR(10);
      DECLARE @fvrEmail VARCHAR(60);
      DECLARE @fvrComplemento VARCHAR(60);
      DECLARE @fvrCodlgr VARCHAR(5);
      DECLARE @fvrAtivo VARCHAR(1);
      DECLARE @fvrReg VARCHAR(1);
      --
      SELECT @fvrCodcdd       = FVR_CODCDD
             ,@fvrEndereco    = FVR_ENDERECO
             ,@fvrNumero      = FVR_NUMERO
             ,@fvrCep         = FVR_CEP
             ,@fvrBairro      = FVR_BAIRRO
             ,@fvrFone        = FVR_FONE
             ,@fvrEmail       = FVR_EMAIL
             ,@fvrComplemento = FVR_COMPLEMENTO
             ,@fvrCodlgr      = FVR_CODLGR
             ,@fvrAtivo       = FVR_ATIVO
             ,@fvrReg         = FVR_REG
        FROM FAVORECIDO WHERE FVR_CODIGO=@peiCodFvrNew;
      --  
      INSERT INTO CONTRATOENDERECO(
        CNTE_CODFVR
        ,CNTE_BAIRRO
        ,CNTE_CEP
        ,CNTE_CODCDD
        ,CNTE_ENDERECO
        ,CNTE_FONE
        ,CNTE_EMAIL
        ,CNTE_COMPLEMENTO
        ,CNTE_NUMERO
        ,CNTE_CODLGR
        ,CNTE_ATIVO
        ,CNTE_REG
        ,CNTE_CODUSR) VALUES(
        @peiCodFvrNew            -- CNTE_CODFVR
        ,@fvrBairro              -- CNTE_BAIRRO
        ,@fvrCep                 -- CNTE_CEP
        ,@fvrCodcdd              -- CNTE_CODCDD
        ,@fvrEndereco            -- CNTE_ENDERECO
        ,@fvrFone                -- CNTE_FONE
        ,@fvrEmail               -- CNTE_EMAIL
        ,@fvrComplemento         -- CNTE_COMPLEMENTO
        ,@fvrNumero              -- CNTE_NUMERO
        ,@fvrCodlgr              -- CNTE_CODLGR
        ,@fvrAtivo               -- CNTE_ATIVO
        ,@fvrReg                 -- CNTE_REG
        ,2                       -- CNTE_CODUSR
      );
    END
    ---------------
    -- Gravando LOG
    ---------------
    INSERT INTO dbo.BKPPONTOESTOQUEIND(
      PEI_ACAO
      ,PEI_CODFVR
      ,PEI_CODPE
      ,PEI_ATIVO
      ,PEI_REG
      ,PEI_CODUSR) VALUES(
      'I'               -- PEI_ACAO
      ,@peiCodFvrNew    -- PEI_CODFVR
      ,@peiCodPeNew     -- PEI_CODPE
      ,@peiAtivoNew     -- PEI_ATIVO
      ,@peiRegNew       -- PEI_REG
      ,@peiCodUsrNew    -- PEI_CODUSR
    );
    ------------------------------------
    -- Atualizando a tabela PONTOESTOQUE
    ------------------------------------
    UPDATE PONTOESTOQUE SET PE_ESTOQUE=(PE_ESTOQUE+1) WHERE PE_CODIGO=@peiCodPeNew;
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPONTOESTOQUEIND_BU ON dbo.VPONTOESTOQUEIND
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @peiCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @peiCodPeNew VARCHAR(3)
  DECLARE @peNomeNew VARCHAR(20);
  DECLARE @peiAtivoNew VARCHAR(1);
  DECLARE @peiRegNew VARCHAR(1);
  DECLARE @peiCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD33New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @peiCodFvrNew   = i.PEI_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@peiCodPeNew  = dbo.fncTranslate(i.PEI_CODPE,3)
         ,@peNomeNew    = COALESCE(PE.PE_NOME,'ERRO')
         ,@peiAtivoNew   = UPPER(i.PEI_ATIVO)
         ,@peiRegNew     = UPPER(i.PEI_REG)
         ,@peiCodUsrNew  = i.PEI_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33New      = UP.UP_D33
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.PEI_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN PONTOESTOQUE PE ON i.PEI_CODPE=PE.PE_CODIGO AND PE.PE_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.PEI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @peNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO %s PARA ESTE REGISTRO',15,1,@peiCodPeNew);
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@peiCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@peiCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD33New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA ALTERAR NA TABELA PONTOESTOQUEIND',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @peiCodFvrOld INTEGER;
    DECLARE @peiCodPeOld VARCHAR(3);    
    DECLARE @peiAtivoOld VARCHAR(1);
    DECLARE @peiRegOld VARCHAR(1);
    DECLARE @peiCodUsrOld INTEGER;
    SELECT @peiCodFvrOld   = d.PEI_CODFVR
           ,@peiCodPeOld  = d.PEI_CODPE
           ,@peiAtivoOld   = d.PEI_ATIVO
           ,@peiRegOld     = d.PEI_REG
           ,@peiCodUsrOld  = d.PEI_CODUSR         
      FROM PONTOESTOQUEIND d WHERE ((d.PEI_CODFVR=@peiCodFvrNew) AND (d.PEI_CODPE=@peiCodPeNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @peiCodFvrOld<>@peiCodFvrNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @peiCodPeOld<>@peiCodPeNew )
      RAISERROR('CAMPO GRUPO NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @peiRegOld <> @peiRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@peiRegOld,@peiRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PONTOESTOQUEIND
       SET PEI_ATIVO  = @peiAtivoNew
          ,PEI_REG    = @peiRegNew
          ,PEI_CODUSR = @peiCodUsrNew
    WHERE PEI_CODFVR  = @peiCodFvrNew;     
    -- Gravando LOG
    IF( (@peiAtivoOld<>@peiAtivoNew) OR (@peiRegOld<>@peiRegNew) ) BEGIN
      INSERT INTO dbo.BKPPONTOESTOQUEIND(
        PEI_ACAO
        ,PEI_CODFVR
        ,PEI_CODPE
        ,PEI_ATIVO
        ,PEI_REG
        ,PEI_CODUSR) VALUES(
        'A'                 -- PEI_ACAO
        ,@peiCodFvrNew      -- PEI_CODFVR
        ,@peiCodPeNew      -- PEI_CODPE
        ,@peiAtivoNew       -- PEI_ATIVO
        ,@peiRegNew         -- PEI_REG
        ,@peiCodUsrNew      -- PEI_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPONTOESTOQUEIND_BD ON dbo.VPONTOESTOQUEIND
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);     -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @peiCodFvrOld INTEGER;
  DECLARE @peiCodPeOld VARCHAR(3);
  DECLARE @peiAtivoOld VARCHAR(1);
  DECLARE @peiRegOld VARCHAR(1);
  DECLARE @peiCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD33Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @peiCodFvrOld   = d.PEI_CODFVR
         ,@peiCodPeOld  = d.PEI_CODPE
         ,@peiAtivoOld   = d.PEI_ATIVO
         ,@peiRegOld     = d.PEI_REG
         ,@peiCodUsrOld  = d.PEI_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD33Old      = UP.UP_D33
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PEI_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@peiCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD33Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 33 PARA EXCLUIR NA TABELA PONTOESTOQUEIND',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@peiRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@peiCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('PONTOESTOQUEIND UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@peiCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('PONTOESTOQUEIND UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    ------------------------------------
    -- Atualizando a tabela PONTOESTOQUE
    ------------------------------------
    UPDATE PONTOESTOQUE SET PE_ESTOQUE=(PE_ESTOQUE-1) WHERE PE_CODIGO=@peiCodPeOld;
    --
    --    
    DELETE FROM dbo.PONTOESTOQUEIND WHERE ((PEI_CODFVR=@peiCodFvrOld) AND (PEI_CODPE=@peiCodPeOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPPONTOESTOQUEIND(
      PEI_ACAO
      ,PEI_CODFVR
      ,PEI_CODPE
      ,PEI_ATIVO
      ,PEI_REG
      ,PEI_CODUSR) VALUES(
      'E'                         -- PEI_ACAO
      ,@peiCodFvrOld              -- PEI_CODFVR
      ,@peiCodPeOld               -- PEI_CODPE
      ,@peiAtivoOld               -- PEI_ATIVO
      ,@peiRegOld                 -- PEI_REG
      ,@peiCodUsrOld              -- PEI_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPONTOESTOQUEIND_BUD ON dbo.BKPPONTOESTOQUEIND
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                    P R O D U T O
--trgproduto
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPRODUTO_BI ON dbo.VPRODUTO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PRD_CODIGO     | PK  |    |    | VC(15) NN          |
  -- PRD_CODEMP     | PK  |    |    | INT NN             | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- PRD_NOME       |     |    |    | VC(60) NN          |
  -- PRD_CODNCM     | SEL |    |    | VC(10) NN          | Campo relacionado (NCM)   
  -- NCM_NOME       | SEL |    |    | VC(60) NN          | Campo relacionado (ESTADO)   
  -- PRD_ST         | CC  |    |    | VC(1) NN           |  
  -- PRD_ALIQICMS   |     |    |    | NUM(6,2) NN        |
  -- PRD_REDUCAOBC  |     |    |    | NUM(6,2) NN        |
  -- PRD_IPI        | CC  |    |    | VC(1) NN           |  
  -- PRD_ALIQIPI    |     |    |    | NUM(6,2) NN        |
  -- PRD_CSTIPI     | SEL |    |    | VC(3) NN           | Campo relacionado (CSTIPI)
  -- IPI_NOME       | SEL |    |    | VC(60) NN          | Campo relacionado (CSTIPI)   
  -- PRD_CODEMB     | SEL |    |    | VC(3) NN           | Campo relacionado (EMBALAGEM)   
  -- EMB_NOME       | SEL |    |    | VC(30) NN          | Campo relacionado (EMBALAGEM)      
  -- PRD_VLRVENDA   |     |    |    | NUM(15,2) NN       |
  -- PRD_CODPO      | SEL |    |    | VC(1) NN           | Campo relacionado (PRODUTOORIGEM)   
  -- PO_NOME        | SEL |    |    | VC(30) NN          | Campo relacionado (PRODUTOORIGEM)      
  -- PRD_CODBARRAS  |     |    |    | VC(20)             |
  -- PRD_PESOBRUTO  |     |    |    | NUM(15,4) NN       |
  -- PRD_PESOLIQUIDO|     |    |    | NUM(15,4) NN       |
  -- PRD_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PRD_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PRD_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D09         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @prdCodigoNew VARCHAR(15);          -- PRD_CODIGO
  DECLARE @prdCodEmpNew INTEGER;              -- PRD_CODEMP
  DECLARE @empApelidoNew VARCHAR(15);         -- EMP_APELIDO
  DECLARE @prdNomeNew VARCHAR(60);            -- PRD_NOME
  DECLARE @prdCodNcmNew VARCHAR(10);          -- PRD_CODNCM
  DECLARE @ncmNomeNew VARCHAR(60);            -- NCM_NOME
  DECLARE @prdStNew VARCHAR(1);               -- PRD_ST
  DECLARE @prdAliqIcmsNew NUMERIC(6,2);       -- PRD_ALIQICMS
  DECLARE @prdReducaoBcNew NUMERIC(6,2);      -- PRD_REDUCAOBC
  DECLARE @prdIpiNew VARCHAR(1);              -- PRD_IPI
  DECLARE @prdAliqIpiNew NUMERIC(6,2);        -- PRD_ALIQIPI
  DECLARE @prdCstIpiNew VARCHAR(3);           -- PRD_CSTIPI
  DECLARE @ipiNomeNew VARCHAR(60);            -- IPI_NOME
  DECLARE @prdCodEmbNew VARCHAR(3);           -- PRD_CODEMB
  DECLARE @embNomeNew VARCHAR(30);            -- EMB_NOME
  DECLARE @prdVlrVendaNew NUMERIC(15,2);      -- PRD_VLRVENDA
  DECLARE @prdCodPoNew VARCHAR(1);            -- PRD_CODPO
  DECLARE @poNomeNew VARCHAR(30);             -- PO_NOME
  DECLARE @prdCodBarrasNew VARCHAR(20);       -- PRD_CODBARRAS
  DECLARE @prdPesoBrutoNew NUMERIC(15,4);     -- PRD_PESOBRUTO
  DECLARE @prdPesoLiquidoNew NUMERIC(15,4);   -- PRD_PESOLIQUIDO
  DECLARE @prdAtivoNew VARCHAR(1);            -- PRD_ATIVO
  DECLARE @prdRegNew VARCHAR(1);              -- PRD_REG
  DECLARE @prdCodUsrNew INTEGER;              -- PRD_CODUSR
  DECLARE @usrApelidoNew VARCHAR(15);         -- USR_APELIDO
  DECLARE @usrAdmPubNew VARCHAR(1);           -- USR_ADMPUB
  DECLARE @upD09New INTEGER;                  -- UP_D09
  DECLARE @upD31New INTEGER;                  -- UP_D31
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @prdCodigoNew        = dbo.fncTranslate(i.PRD_CODIGO,15)
         ,@prdCodEmpNew       = i.PRD_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@prdNomeNew         = dbo.fncTranslate(i.PRD_NOME,60)
         ,@prdCodNcmNew       = dbo.fncTranslate(i.PRD_CODNCM,10)
         ,@ncmNomeNew         = COALESCE(NCM.NCM_NOME,'ERRO')
         ,@prdStNew           = UPPER(i.PRD_ST)
         ,@prdAliqIcmsNew     = i.PRD_ALIQICMS
         ,@prdReducaoBcNew    = i.PRD_REDUCAOBC
         ,@prdIpiNew          = UPPER(i.PRD_IPI)
         ,@prdAliqIpiNew      = i.PRD_ALIQIPI
         ,@prdCstIpiNew       = dbo.fncTranslate(i.PRD_CSTIPI,3)
         ,@ipiNomeNew         = COALESCE(IPI.IPI_NOME,'ERRO')
         ,@prdCodEmbNew       = dbo.fncTranslate(i.PRD_CODEMB,3)
         ,@embNomeNew         = COALESCE(EMB.EMB_NOME,'ERRO')
         ,@prdVlrVendaNew     = i.PRD_VLRVENDA
         ,@prdCodPoNew        = dbo.fncTranslate(i.PRD_CODPO,1)
         ,@poNomeNew          = COALESCE(PO.PO_NOME,'ERRO')
         ,@prdCodBarrasNew    = dbo.fncTranslate(i.PRD_CODBARRAS,20)
         ,@prdPesoBrutoNew    = i.PRD_PESOBRUTO
         ,@prdPesoLiquidoNew  = i.PRD_PESOLIQUIDO
         ,@prdAtivoNew        = UPPER(i.PRD_ATIVO)
         ,@prdRegNew          = UPPER(i.PRD_REG)
         ,@prdCodUsrNew       = i.PRD_CODUSR
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD09New           = UP.UP_D09
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.PRD_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN NCM NCM ON i.PRD_CODNCM=NCM.NCM_CODIGO AND NCM.NCM_ATIVO='S'
    LEFT OUTER JOIN CSTIPI IPI ON i.PRD_CSTIPI=IPI.IPI_CODIGO AND IPI.IPI_ATIVO='S'
    LEFT OUTER JOIN EMBALAGEM EMB ON i.PRD_CODEMB=EMB.EMB_CODIGO AND EMB.EMB_ATIVO='S'
    LEFT OUTER JOIN PRODUTOORIGEM PO ON i.PRD_CODPO=PO.PO_CODIGO AND PO.PO_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.PRD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@prdCodEmpNew);
    IF( @ncmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO NCM %s PARA ESTE REGISTRO',15,1,@prdCodNcmNew);
    IF( @ipiNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CODIGO IPI %s PARA ESTE REGISTRO',15,1,@prdCstIpiNew);
    IF( @embNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMBALAGEM %s PARA ESTE REGISTRO',15,1,@prdCodEmbNew);
    IF( @poNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO ORIGEM %s PARA ESTE REGISTRO',15,1,@prdCodPoNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@prdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD09New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 09 PARA INCLUIR NA TABELA AGENDA',15,1,@usrApelidoNew);
    IF( @prdRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@prdRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PRODUTO( 
      PRD_CODIGO
      ,PRD_CODEMP
      ,PRD_NOME
      ,PRD_CODNCM
      ,PRD_ST
      ,PRD_ALIQICMS
      ,PRD_REDUCAOBC
      ,PRD_IPI
      ,PRD_ALIQIPI
      ,PRD_CSTIPI
      ,PRD_CODEMB
      ,PRD_VLRVENDA
      ,PRD_CODPO
      ,PRD_CODBARRAS
      ,PRD_PESOBRUTO
      ,PRD_PESOLIQUIDO
      ,PRD_ATIVO
      ,PRD_REG
      ,PRD_CODUSR) VALUES(
      @prdCodigoNew         -- PRD_CODIGO                                       
      ,@prdCodEmpNew        -- PRD_CODEMP
      ,@prdNomeNew          -- PRD_NOME
      ,@prdCodNcmNew        -- PRD_CODNCM
      ,@prdStNew            -- PRD_ST
      ,@prdAliqIcmsNew      -- PRD_ALIQICMS
      ,@prdReducaoBcNew     -- PRD_REDUCAOBC
      ,@prdIpiNew           -- PRD_IPI
      ,@prdAliqIpiNew       -- PRD_ALIQIPI
      ,@prdCstIpiNew        -- PRD_CSTIPI
      ,@prdCodEmbNew        -- PRD_CODEMB
      ,@prdVlrVendaNew      -- PRD_VLRVENDA
      ,@prdCodPoNew         -- PRD_CODPO
      ,@prdCodBarrasNew     -- PRD_CODBARRAS
      ,@prdPesoBrutoNew     -- PRD_PESOBRUTO
      ,@prdPesoLiquidoNew   -- PRD_PESOLIQUIDO
      ,@prdAtivoNew         -- PRD_ATIVO
      ,@prdRegNew           -- PRD_REG
      ,@prdCodUsrNew        -- PRD_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPRODUTO( 
      PRD_ACAO    
      ,PRD_CODIGO
      ,PRD_CODEMP
      ,PRD_NOME
      ,PRD_CODNCM
      ,PRD_ST
      ,PRD_ALIQICMS
      ,PRD_REDUCAOBC
      ,PRD_IPI
      ,PRD_ALIQIPI
      ,PRD_CSTIPI
      ,PRD_CODEMB
      ,PRD_VLRVENDA
      ,PRD_CODPO
      ,PRD_CODBARRAS
      ,PRD_PESOBRUTO
      ,PRD_PESOLIQUIDO
      ,PRD_ATIVO
      ,PRD_REG
      ,PRD_CODUSR) VALUES(
      'I'
      ,@prdCodigoNew        -- PRD_CODIGO
      ,@prdCodEmpNew        -- PRD_CODEMP
      ,@prdNomeNew          -- PRD_NOME
      ,@prdCodNcmNew        -- PRD_CODNCM
      ,@prdStNew            -- PRD_ST
      ,@prdAliqIcmsNew      -- PRD_ALIQICMS
      ,@prdReducaoBcNew     -- PRD_REDUCAOBC
      ,@prdIpiNew           -- PRD_IPI
      ,@prdAliqIpiNew       -- PRD_ALIQIPI
      ,@prdCstIpiNew        -- PRD_CSTIPI
      ,@prdCodEmbNew        -- PRD_CODEMB
      ,@prdVlrVendaNew      -- PRD_VLRVENDA
      ,@prdCodPoNew         -- PRD_CODPO
      ,@prdCodBarrasNew     -- PRD_CODBARRAS
      ,@prdPesoBrutoNew     -- PRD_PESOBRUTO
      ,@prdPesoLiquidoNew   -- PRD_PESOLIQUIDO
      ,@prdAtivoNew         -- PRD_ATIVO
      ,@prdRegNew           -- PRD_REG
      ,@prdCodUsrNew        -- PRD_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @errorMessage NVARCHAR(4000);
    DECLARE @errorSeverity INT;
    DECLARE @errorState INT;
    SELECT @errorMessage=ERROR_MESSAGE(),@errorSeverity=ERROR_SEVERITY(),@errorState=ERROR_STATE();
    RAISERROR(@errorMessage, @errorSeverity, @errorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPRODUTO_BU ON dbo.VPRODUTO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @prdCodigoNew VARCHAR(15);          -- PRD_CODIGO
  DECLARE @prdCodEmpNew INTEGER;              -- PRD_CODEMP
  DECLARE @empApelidoNew VARCHAR(15);         -- EMP_APELIDO
  DECLARE @prdNomeNew VARCHAR(60);            -- PRD_NOME
  DECLARE @prdCodNcmNew VARCHAR(10);          -- PRD_CODNCM
  DECLARE @ncmNomeNew VARCHAR(60);            -- NCM_NOME
  DECLARE @prdStNew VARCHAR(1);               -- PRD_ST
  DECLARE @prdAliqIcmsNew NUMERIC(6,2);       -- PRD_ALIQICMS
  DECLARE @prdReducaoBcNew NUMERIC(6,2);      -- PRD_REDUCAOBC
  DECLARE @prdIpiNew VARCHAR(1);              -- PRD_IPI
  DECLARE @prdAliqIpiNew NUMERIC(6,2);        -- PRD_ALIQIPI
  DECLARE @prdCstIpiNew VARCHAR(3);           -- PRD_CSTIPI
  DECLARE @ipiNomeNew VARCHAR(60);            -- IPI_NOME
  DECLARE @prdCodEmbNew VARCHAR(3);           -- PRD_CODEMB
  DECLARE @embNomeNew VARCHAR(30);            -- EMB_NOME
  DECLARE @prdVlrVendaNew NUMERIC(15,2);      -- PRD_VLRVENDA
  DECLARE @prdCodPoNew VARCHAR(1);            -- PRD_CODPO
  DECLARE @poNomeNew VARCHAR(30);             -- PO_NOME
  DECLARE @prdCodBarrasNew VARCHAR(20);       -- PRD_CODBARRAS
  DECLARE @prdPesoBrutoNew NUMERIC(15,4);     -- PRD_PESOBRUTO
  DECLARE @prdPesoLiquidoNew NUMERIC(15,4);   -- PRD_PESOLIQUIDO
  DECLARE @prdAtivoNew VARCHAR(1);            -- PRD_ATIVO
  DECLARE @prdRegNew VARCHAR(1);              -- PRD_REG
  DECLARE @prdCodUsrNew INTEGER;              -- PRD_CODUSR
  DECLARE @usrApelidoNew VARCHAR(15);         -- USR_APELIDO
  DECLARE @usrAdmPubNew VARCHAR(1);           -- USR_ADMPUB
  DECLARE @upD09New INTEGER;                  -- UP_D09
  DECLARE @upD31New INTEGER;                  -- UP_D31
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @prdCodigoNew        = dbo.fncTranslate(i.PRD_CODIGO,15)
         ,@prdCodEmpNew       = i.PRD_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@prdNomeNew         = dbo.fncTranslate(i.PRD_NOME,60)
         ,@prdCodNcmNew       = dbo.fncTranslate(i.PRD_CODNCM,10)
         ,@ncmNomeNew         = COALESCE(NCM.NCM_NOME,'ERRO')
         ,@prdStNew           = UPPER(i.PRD_ST)
         ,@prdAliqIcmsNew     = i.PRD_ALIQICMS
         ,@prdReducaoBcNew    = i.PRD_REDUCAOBC
         ,@prdIpiNew          = UPPER(i.PRD_IPI)
         ,@prdAliqIpiNew      = i.PRD_ALIQIPI
         ,@prdCstIpiNew       = dbo.fncTranslate(i.PRD_CSTIPI,3)
         ,@ipiNomeNew         = COALESCE(IPI.IPI_NOME,'ERRO')
         ,@prdCodEmbNew       = dbo.fncTranslate(i.PRD_CODEMB,3)
         ,@embNomeNew         = COALESCE(EMB.EMB_NOME,'ERRO')
         ,@prdVlrVendaNew     = i.PRD_VLRVENDA
         ,@prdCodPoNew        = dbo.fncTranslate(i.PRD_CODPO,1)
         ,@poNomeNew          = COALESCE(PO.PO_NOME,'ERRO')
         ,@prdCodBarrasNew    = dbo.fncTranslate(i.PRD_CODBARRAS,20)
         ,@prdPesoBrutoNew    = i.PRD_PESOBRUTO
         ,@prdPesoLiquidoNew  = i.PRD_PESOLIQUIDO
         ,@prdAtivoNew        = UPPER(i.PRD_ATIVO)
         ,@prdRegNew          = UPPER(i.PRD_REG)
         ,@prdCodUsrNew       = i.PRD_CODUSR
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD09New           = UP.UP_D09
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.PRD_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN NCM NCM ON i.PRD_CODNCM=NCM.NCM_CODIGO AND NCM.NCM_ATIVO='S'
    LEFT OUTER JOIN CSTIPI IPI ON i.PRD_CSTIPI=IPI.IPI_CODIGO AND IPI.IPI_ATIVO='S'
    LEFT OUTER JOIN EMBALAGEM EMB ON i.PRD_CODEMB=EMB.EMB_CODIGO AND EMB.EMB_ATIVO='S'
    LEFT OUTER JOIN PRODUTOORIGEM PO ON i.PRD_CODPO=PO.PO_CODIGO AND PO.PO_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.PRD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@prdCodEmpNew);
    IF( @ncmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO NCM %s PARA ESTE REGISTRO',15,1,@prdCodNcmNew);
    IF( @ipiNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CODIGO IPI %s PARA ESTE REGISTRO',15,1,@prdCstIpiNew);
    IF( @embNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMBALAGEM %s PARA ESTE REGISTRO',15,1,@prdCodEmbNew);
    IF( @poNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO ORIGEM %s PARA ESTE REGISTRO',15,1,@prdCodPoNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@prdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD09New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 09 PARA ALTERAR NA TABELA VENDEDOR',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @prdCodigoOld VARCHAR(15);          
    DECLARE @prdCodEmpOld INTEGER;              
    DECLARE @prdNomeOld VARCHAR(60);            
    DECLARE @prdCodNcmOld VARCHAR(10);          
    DECLARE @prdStOld VARCHAR(1);               
    DECLARE @prdAliqIcmsOld NUMERIC(6,2);       
    DECLARE @prdReducaoBcOld NUMERIC(6,2);      
    DECLARE @prdIpiOld VARCHAR(1);              
    DECLARE @prdAliqIpiOld NUMERIC(6,2);        
    DECLARE @prdCstIpiOld VARCHAR(3);           
    DECLARE @prdCodEmbOld VARCHAR(3);           
    DECLARE @prdVlrVendaOld NUMERIC(15,2);      
    DECLARE @prdCodPoOld VARCHAR(1);            
    DECLARE @prdCodBarrasOld VARCHAR(20);       
    DECLARE @prdPesoBrutoOld NUMERIC(15,4);     
    DECLARE @prdPesoLiquidoOld NUMERIC(15,4);   
    DECLARE @prdAtivoOld VARCHAR(1);            
    DECLARE @prdRegOld VARCHAR(1);              
    DECLARE @prdCodUsrOld INTEGER;              

    SELECT @prdCodigoOld        = d.PRD_CODIGO
           ,@prdCodEmpOld       = d.PRD_CODEMP
           ,@prdNomeOld         = d.PRD_NOME
           ,@prdCodNcmOld       = d.PRD_CODNCM
           ,@prdStOld           = d.PRD_ST
           ,@prdAliqIcmsOld     = d.PRD_ALIQICMS
           ,@prdReducaoBcOld    = d.PRD_REDUCAOBC
           ,@prdIpiOld          = d.PRD_IPI
           ,@prdAliqIpiOld      = d.PRD_ALIQIPI
           ,@prdCstIpiOld       = d.PRD_CSTIPI
           ,@prdCodEmbOld       = d.PRD_CODEMB
           ,@prdVlrVendaOld     = d.PRD_VLRVENDA
           ,@prdCodPoOld        = d.PRD_CODPO
           ,@prdCodBarrasOld    = d.PRD_CODBARRAS
           ,@prdPesoBrutoOld    = d.PRD_PESOBRUTO
           ,@prdPesoLiquidoOld  = d.PRD_PESOLIQUIDO
           ,@prdAtivoOld        = d.PRD_ATIVO
           ,@prdRegOld          = d.PRD_REG
           ,@prdCodUsrOld       = d.PRD_CODUSR
      FROM PRODUTO d WHERE ((d.PRD_CODIGO=@prdCodigoNew) AND (d.PRD_CODEMP=@prdCodEmpNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @prdCodigoOld<>@prdCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @prdCodEmpOld<>@prdCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @prdRegOld <> @prdRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@prdRegOld,@prdRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.VPRODUTO
       SET PRD_NOME         = @prdNomeNew
           ,PRD_CODNCM      = @prdCodNcmNew
           ,PRD_ST          = @prdStNew
           ,PRD_ALIQICMS    = @prdAliqIcmsNew
           ,PRD_REDUCAOBC   = @prdReducaoBcNew
           ,PRD_IPI         = @prdIpiNew
           ,PRD_ALIQIPI     = @prdAliqIpiNew
           ,PRD_CSTIPI      = @prdCstIpiNew
           ,PRD_CODEMB      = @prdCodEmbNew
           ,PRD_VLRVENDA    = @prdVlrVendaNew
           ,PRD_CODPO       = @prdCodPoNew
           ,PRD_CODBARRAS   = @prdCodBarrasNew
           ,PRD_PESOBRUTO   = @prdPesoBrutoNew
           ,PRD_PESOLIQUIDO = @prdPesoLiquidoNew
           ,PRD_ATIVO       = @prdAtivoNew
           ,PRD_REG         = @prdRegNew
           ,PRD_CODUSR      = @prdCodUsrNew
      WHERE ((PRD_CODIGO=@prdCodigoNew) AND (PRD_CODEMP=@prdCodEmpNew));      
    -- Gravando LOG
    IF( (@prdNomeOld<>@prdNomeNew) OR (@prdCodNcmOld<>@prdCodNcmNew) OR (@prdStOld<>@prdStNew) OR (@prdAliqIcmsOld<>@prdAliqIcmsNew) 
    OR (@prdReducaoBcOld<>@prdReducaoBcNew) OR (@prdIpiOld<> @prdIpiNew) OR (@prdAliqIpiOld<> @prdAliqIpiNew) OR (@prdCstIpiOld<>@prdCstIpiNew) 
    OR (@prdCodEmbOld<>@prdCodEmbNew) OR (@prdVlrVendaOld<>@prdVlrVendaNew) OR (@prdCodPoOld<> @prdCodPoNew) OR (@prdCodBarrasOld<> @prdCodBarrasNew) 
    OR (@prdPesoBrutoOld<> @prdPesoBrutoNew) OR (@prdPesoLiquidoOld<> @prdPesoLiquidoNew) OR (@prdAtivoOld<> @prdAtivoNew) OR (@prdRegOld<> @prdRegNew) 
    OR (@prdCodUsrOld<>@prdCodUsrNew) ) BEGIN
      INSERT INTO dbo.BKPPRODUTO( 
        PRD_ACAO    
        ,PRD_CODIGO
        ,PRD_CODEMP
        ,PRD_NOME
        ,PRD_CODNCM
        ,PRD_ST
        ,PRD_ALIQICMS
        ,PRD_REDUCAOBC
        ,PRD_IPI
        ,PRD_ALIQIPI
        ,PRD_CSTIPI
        ,PRD_CODEMB
        ,PRD_VLRVENDA
        ,PRD_CODPO
        ,PRD_CODBARRAS
        ,PRD_PESOBRUTO
        ,PRD_PESOLIQUIDO
        ,PRD_ATIVO
        ,PRD_REG
        ,PRD_CODUSR) VALUES(
        'A'
        ,@prdCodigoNew        -- PRD_CODIGO
        ,@prdCodEmpNew        -- PRD_CODEMP
        ,@prdNomeNew          -- PRD_NOME
        ,@prdCodNcmNew        -- PRD_CODNCM
        ,@prdStNew            -- PRD_ST
        ,@prdAliqIcmsNew      -- PRD_ALIQICMS
        ,@prdReducaoBcNew     -- PRD_REDUCAOBC
        ,@prdIpiNew           -- PRD_IPI
        ,@prdAliqIpiNew       -- PRD_ALIQIPI
        ,@prdCstIpiNew        -- PRD_CSTIPI
        ,@prdCodEmbNew        -- PRD_CODEMB
        ,@prdVlrVendaNew      -- PRD_VLRVENDA
        ,@prdCodPoNew         -- PRD_CODPO
        ,@prdCodBarrasNew     -- PRD_CODBARRAS
        ,@prdPesoBrutoNew     -- PRD_PESOBRUTO
        ,@prdPesoLiquidoNew   -- PRD_PESOLIQUIDO
        ,@prdAtivoNew         -- PRD_ATIVO
        ,@prdRegNew           -- PRD_REG
        ,@prdCodUsrNew        -- PRD_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPRODUTO_BD ON dbo.VPRODUTO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @prdCodigoOld VARCHAR(15);          
  DECLARE @prdCodEmpOld INTEGER;              
  DECLARE @prdNomeOld VARCHAR(60);            
  DECLARE @prdCodNcmOld VARCHAR(10);          
  DECLARE @prdStOld VARCHAR(1);               
  DECLARE @prdAliqIcmsOld NUMERIC(6,2);       
  DECLARE @prdReducaoBcOld NUMERIC(6,2);      
  DECLARE @prdIpiOld VARCHAR(1);              
  DECLARE @prdAliqIpiOld NUMERIC(6,2);        
  DECLARE @prdCstIpiOld VARCHAR(3);           
  DECLARE @prdCodEmbOld VARCHAR(3);           
  DECLARE @prdVlrVendaOld NUMERIC(15,2);      
  DECLARE @prdCodPoOld VARCHAR(1);            
  DECLARE @prdCodBarrasOld VARCHAR(20);       
  DECLARE @prdPesoBrutoOld NUMERIC(15,4);     
  DECLARE @prdPesoLiquidoOld NUMERIC(15,4);   
  DECLARE @prdAtivoOld VARCHAR(1);            
  DECLARE @prdRegOld VARCHAR(1);              
  DECLARE @prdCodUsrOld INTEGER;              
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD09Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @prdCodigoOld        = d.PRD_CODIGO
         ,@prdCodEmpOld       = d.PRD_CODEMP
         ,@prdNomeOld         = d.PRD_NOME
         ,@prdCodNcmOld       = d.PRD_CODNCM
         ,@prdStOld           = d.PRD_ST
         ,@prdAliqIcmsOld     = d.PRD_ALIQICMS
         ,@prdReducaoBcOld    = d.PRD_REDUCAOBC
         ,@prdIpiOld          = d.PRD_IPI
         ,@prdAliqIpiOld      = d.PRD_ALIQIPI
         ,@prdCstIpiOld       = d.PRD_CSTIPI
         ,@prdCodEmbOld       = d.PRD_CODEMB
         ,@prdVlrVendaOld     = d.PRD_VLRVENDA
         ,@prdCodPoOld        = d.PRD_CODPO
         ,@prdCodBarrasOld    = d.PRD_CODBARRAS
         ,@prdPesoBrutoOld    = d.PRD_PESOBRUTO
         ,@prdPesoLiquidoOld  = d.PRD_PESOLIQUIDO
         ,@prdAtivoOld        = d.PRD_ATIVO
         ,@prdRegOld          = d.PRD_REG
         ,@prdCodUsrOld       = d.PRD_CODUSR
         ,@usrApelidoOld      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD09Old           = UP.UP_D09
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PRD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@prdCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD09Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 09 PARA EXCLUIR NA TABELA VENDEDOR',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@prdRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@vndCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('VENDEDOR UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@vndCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('VENDEDOR UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.PRODUTO WHERE ((PRD_CODIGO=@prdCodigoOld) AND (PRD_CODEMP=@prdCodEmpOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPPRODUTO( 
      PRD_ACAO    
      ,PRD_CODIGO
      ,PRD_CODEMP
      ,PRD_NOME
      ,PRD_CODNCM
      ,PRD_ST
      ,PRD_ALIQICMS
      ,PRD_REDUCAOBC
      ,PRD_IPI
      ,PRD_ALIQIPI
      ,PRD_CSTIPI
      ,PRD_CODEMB
      ,PRD_VLRVENDA
      ,PRD_CODPO
      ,PRD_CODBARRAS
      ,PRD_PESOBRUTO
      ,PRD_PESOLIQUIDO
      ,PRD_ATIVO
      ,PRD_REG
      ,PRD_CODUSR) VALUES(
      'E'
      ,@prdCodigoOld        -- PRD_CODIGO
      ,@prdCodEmpOld        -- PRD_CODEMP
      ,@prdNomeOld          -- PRD_NOME
      ,@prdCodNcmOld        -- PRD_CODNCM
      ,@prdStOld            -- PRD_ST
      ,@prdAliqIcmsOld      -- PRD_ALIQICMS
      ,@prdReducaoBcOld     -- PRD_REDUCAOBC
      ,@prdIpiOld           -- PRD_IPI
      ,@prdAliqIpiOld       -- PRD_ALIQIPI
      ,@prdCstIpiOld        -- PRD_CSTIPI
      ,@prdCodEmbOld        -- PRD_CODEMB
      ,@prdVlrVendaOld      -- PRD_VLRVENDA
      ,@prdCodPoOld         -- PRD_CODPO
      ,@prdCodBarrasOld     -- PRD_CODBARRAS
      ,@prdPesoBrutoOld     -- PRD_PESOBRUTO
      ,@prdPesoLiquidoOld   -- PRD_PESOLIQUIDO
      ,@prdAtivoOld         -- PRD_ATIVO
      ,@prdRegOld           -- PRD_REG
      ,@prdCodUsrOld        -- PRD_CODUSR
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
-------------------------------------------------------------------------------------
--                       G R U P O M O D E L O P R O D U T O                       --
--trggrupomodeloproduto
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELOPRODUTO_BI ON dbo.VGRUPOMODELOPRODUTO
INSTEAD OF INSERT 
AS
BEGIN
  -- -----------------|---------|----|----|--------------------|---------|------------------------------------------------   
  -- CAMPO            |INS      |UPD |DEL | TIPO               | TBL     | Obs
  -- -----------------|---------|----|----|--------------------|---------|------------------------------------------------
  -- GMP_CODIGO       | FNC     |    |    | INT NN             | PRD-AUT |
  -- GMP_CODCNTT      |         |    |    | INT NN             | PRD-AUT | Codigo do contrato(CONTRATO), nasce 0(zero)
  -- GMP_CODGM        |         |    |    | INT NN             | PRD-AUT | Campo relacionado (GRUPOMODELO)
  -- GM_NOME          |         |    |    | VC(20) NN          | PRD-AUT | Campo relacionado (GRUPOMODELO)  
  -- GMP_CODGP        |         |    |    | VC(3) NN           | PRD-AUT | Campo relacionado (GRUPOPRODUTO)
  -- GP_NOME          |         |    |    | VC(20) NN          | PRD-AUT | Campo relacionado (GRUPOPRODUTO)    
  -- GMP_CODPE        |         |    |    | VC(3) NN           | PRD-AUT | Campo relacionado (PONTOESTOQUE)
  -- PE_NOME          |         |    |    | VC(20) NN          | PRD-AUT | Campo relacionado (PONTOESTOQUE)  
  -- GMP_CODFVR       |         |    |    | INT NN             | PRD-AUT | FAVORECIDO  
  -- GMP_CODFBR       |         |    |    | INT NN             | PRD     | FABRICANTE
  -- GMP_CODAUT       |         |    |    | INT NN             | PRD     | CODIGO DO AUTO ONDE PRODUTO FOI INSTALADO
  -- GMP_NUMSERIE     |         |    |    | VC(20) NN          | PRD-AUT |
  -- GMP_SINCARD      |         |    |    | VC(20) NN          | PRD     |
  -- GMP_OPERADORA    |         |    |    | VC(10) NN          | PRD     |
  -- GMP_FONE         |         |    |    | VC(15) NN          | PRD     |
  -- GMP_CONTRATO     |         |    |    | VC(10) NN          | PRD     |
  -- GMP_CODGML       |         |    |    | INT NN             | PRD-AUT | GRUPOMODELOLOTE
  -- GMP_DTCONFIGURADO|         |    |    | DAT                |         | Data da configuracao
  -- GMP_DTEMPENHO    |         |    |    | DAT                |         | Data do empenho(retirado do estoque para futura instalacao)
  -- GMP_PLACACHASSI  |         |    |    | VC(20) NN          | AUT     | Placa ou chassi
  -- GMP_COMPOSICAO   |         |    |    | INT NN             | AUT     | Qtdade de produtos usados para gerar o auto
  -- USR_APELIDO      | SEL     |    |    | VC(15) NN          | PRD-AUT | Campo relacionado (USUARIO)
  -- USR_ADMPUB       | SEL     |    |    | VC(1) NN           | PRD-AUT | Retornar se o usuario eh PUB/ADM
  -- UP_D35           | SEL     |    |    | INT NN             | PRD-AUT | Recupera o direito de usuario para esta tabela
  -- UP_D31           | SEL     |    |    | INT NN             | PRD-AUT | Recupera o direito se pode transformar registro do sistema
  -- O direito de usuario esta em GRUPOMODELOLOTE(D35)
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  DECLARE @duplicidade VARCHAR(30);     -- Duplicidade no numero de serie/sincard
  DECLARE @dupCodigo VARCHAR(30);       -- Campo chave em DUPLICIDADEGMP
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gmpCodigoNew INTEGER;
  DECLARE @gmpCodCnttNew INTEGER;
  DECLARE @gmpCodGmNew INTEGER;
  DECLARE @gmNomeNew VARCHAR(20);
  DECLARE @gmpCodGpNew VARCHAR(3);
  DECLARE @gpNomeNew VARCHAR(20);
  DECLARE @gmpCodPeNew VARCHAR(3);
  DECLARE @peNomeNew VARCHAR(20);
  DECLARE @gmpCodFvrNew INTEGER;
  DECLARE @gmpCodFbrNew INTEGER;
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @gmpNumSerieNew VARCHAR(20);
  DECLARE @gmpSincardNew VARCHAR(20);
  DECLARE @gmpOperadoraNew VARCHAR(15);
  DECLARE @gmpFoneNew VARCHAR(15);
  DECLARE @gmpContratoNew VARCHAR(10);
  DECLARE @gmpCodGmlNew INTEGER;
  DECLARE @gmpDtConfiguradoNew DATE;
  DECLARE @gmpDtEmpenhoNew DATE;  
  DECLARE @gmpPlacaChassiNew VARCHAR(20);
  DECLARE @gmpComposicaoNew INTEGER;
  DECLARE @gmpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD35New INTEGER;
  --DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gmpCodigoNew        = i.GMP_CODIGO   
         ,@gmpCodCnttNew      = COALESCE(i.GMP_CODCNTT,0)
         ,@gmpCodGmNew        = i.GMP_CODGM    
         ,@gmNomeNew          = COALESCE(GM.GM_NOME,'ERRO')         
         ,@gmpCodGpNew        = dbo.fncTranslate(i.GMP_CODGP,3)
         ,@gpNomeNew          = COALESCE(GP.GP_NOME,'ERRO')         
         ,@gmpCodPeNew        = dbo.fncTranslate(i.GMP_CODPE,3)
         ,@peNomeNew          = COALESCE(PE.PE_NOME,'ERRO')
         ,@gmpCodFvrNew       = i.GMP_CODFVR   
         ,@gmpCodFbrNew       = i.GMP_CODFBR   
         ,@fvrApelidoNew      = COALESCE(FVR.FVR_APELIDO,'ERRO')
         ,@gmpNumSerieNew     = dbo.fncTranslate(i.GMP_NUMSERIE,20) 
         ,@gmpSincardNew      = dbo.fncTranslate(i.GMP_SINCARD,20)  
         ,@gmpOperadoraNew    = dbo.fncTranslate(i.GMP_OPERADORA,15)
         ,@gmpFoneNew         = dbo.fncTranslate(i.GMP_FONE,15)
         ,@gmpContratoNew     = dbo.fncTranslate(i.GMP_CONTRATO,10) 
         ,@gmpCodGmlNew       = i.GMP_CODGML 
         ,@gmpPlacaChassiNew  = dbo.fncTranslate(i.GMP_PLACACHASSI,20)
         ,@gmpComposicaoNew   = i.GMP_COMPOSICAO
         ,@gmpCodUsrNew       = i.GMP_CODUSR
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD35New           = UP.UP_D35
    FROM inserted i
    LEFT OUTER JOIN GRUPOMODELO GM ON i.GMP_CODGM=GM.GM_CODIGO AND GM.GM_ATIVO='S'
    LEFT OUTER JOIN GRUPOPRODUTO GP ON i.GMP_CODGP=GP.GP_CODIGO AND GP.GP_ATIVO='S'    
    LEFT OUTER JOIN PONTOESTOQUE PE ON i.GMP_CODPE=PE.PE_CODIGO AND PE.PE_ATIVO='S'    
    LEFT OUTER JOIN FABRICANTE FBR ON i.GMP_CODFBR=FBR.FBR_CODFVR AND FBR.FBR_ATIVO='S'    
    LEFT OUTER JOIN FAVORECIDO FVR ON FBR.FBR_CODFVR=FVR.FVR_CODIGO
    LEFT OUTER JOIN USUARIO USR ON i.GMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmpCodUsrNew);
    IF( @gmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO_MODELO %s PARA ESTE REGISTRO',15,1,@gmpCodGmNew);
    IF( @gpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO_PRODUTO %s PARA ESTE REGISTRO',15,1,@gmpCodGpNew);
    IF( @peNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO PONTO_ESTOQUE %s PARA ESTE REGISTRO',15,1,@gmpCodPeNew);
    ---------------------------  
    -- Auto naum tem fabricante
    ---------------------------  
    IF( @gmpCodGpNew <> 'AUT' ) BEGIN  
      IF( @fvrApelidoNew='ERRO' )
        RAISERROR('NAO LOCALIZADO FABRICANTE %i PARA ESTE REGISTRO',15,1,@gmpCodFbrNew);
    END  
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD35New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 35 PARA INCLUIR NA TABELA PRODUTO',15,1,@usrApelidoNew);
    --  
    ------------------------------------------
    -- CHECANDO A DUPLICIDADE DE SERIE/SINCARD
    ------------------------------------------
    IF( @gmpNumSerieNew<>'NSA' ) BEGIN
      SET @duplicidade=CONCAT('SER',CAST(@gmpCodFbrNew AS VARCHAR(6)),@gmpNumSerieNew);    
      SET @dupCodigo=NULL;
      SELECT @dupCodigo=COALESCE(DUP_CODIGO,NULL) FROM DUPLICIDADEGMP WHERE DUP_CODIGO=@duplicidade;
      IF( @dupCodigo IS NULL ) BEGIN
        INSERT INTO DUPLICIDADEGMP(DUP_CODIGO,DUP_CODGMP) VALUES(@duplicidade,@gmpCodigoNew);
      END ELSE BEGIN
        RAISERROR('SERIE %s PARA ESTE FABRICANTE JA CADASTRADA NO PRODUTO %i',15,1,@gmpNumSerieNew,@gmpCodigoNew);
      END
    END
    --
    IF( @gmpSincardNew<>'NSA' ) BEGIN
      SET @duplicidade=CONCAT('SIN',CAST(@gmpCodFbrNew AS VARCHAR(6)),@gmpSincardNew);    
      SET @dupCodigo=NULL;
      SELECT @dupCodigo=COALESCE(DUP_CODIGO,NULL) FROM DUPLICIDADEGMP WHERE DUP_CODIGO=@duplicidade;
      IF( @dupCodigo IS NULL ) BEGIN
        INSERT INTO DUPLICIDADEGMP(DUP_CODIGO,DUP_CODGMP) VALUES(@duplicidade,@gmpCodigoNew);
      END ELSE BEGIN
        RAISERROR('SERIE %s PARA ESTE FABRICANTE JA CADASTRADA NO PRODUTO %i',15,1,@gmpSincardNew,@gmpCodigoNew);
      END
    END
    --  
    INSERT INTO dbo.GRUPOMODELOPRODUTO( 
      GMP_CODIGO
      ,GMP_CODCNTT      
      ,GMP_CODGM
      ,GMP_CODGP
      ,GMP_CODPE
      ,GMP_CODFVR
      ,GMP_CODFBR
      ,GMP_CODAUT      
      ,GMP_NUMSERIE
      ,GMP_SINCARD
      ,GMP_OPERADORA
      ,GMP_FONE
      ,GMP_CONTRATO
      ,GMP_CODGML
      ,GMP_DTCONFIGURADO
      ,GMP_DTEMPENHO      
      ,GMP_PLACACHASSI
      ,GMP_COMPOSICAO
      ,GMP_CODUSR) VALUES(
      @gmpCodigoNew          -- GMP_CODIGO         
      ,@gmpCodCnttNew        -- GMP_CODCNTT
      ,@gmpCodGmNew          -- GMP_CODGM         
      ,@gmpCodGpNew          -- GMP_CODGP
      ,@gmpCodPeNew          -- GMP_CODPE
      ,@gmpCodFvrNew         -- GMP_CODFVR        
      ,@gmpCodFbrNew         -- GMP_CODFBR        
      ,0                     -- GMP_CODAUT
      ,@gmpNumSerieNew       -- GMP_NUMSERIE
      ,@gmpSincardNew        -- GMP_SINCARD
      ,@gmpOperadoraNew      -- GMP_OPERADORA
      ,@gmpFoneNew           -- GMP_FONE
      ,@gmpContratoNew       -- GMP_CONTRATO
      ,@gmpCodGmlNew         -- GMP_CODGML 
      ,NULL                  -- GMP_DTCONFIGURADO
      ,NULL                  -- GMP_DTEMPENHO
      ,@gmpPlacaChassiNew    -- GMP_PLACACHASSI
      ,@gmpComposicaoNew     -- GMP_COMPOSICAO
      ,@gmpCodUsrNew         -- GMP_CODUSR        
    );
    UPDATE GRUPOMODELO SET GM_ESTOQUE=(GM_ESTOQUE+1) WHERE GM_CODIGO=@gmpCodGmNew;
    UPDATE PONTOESTOQUE SET PE_ESTOQUE=(PE_ESTOQUE+1) WHERE PE_CODIGO=@gmpCodPeNew;
    
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOMODELOPRODUTO(
      GMP_ACAO
      ,GMP_CODIGO
      ,GMP_CODCNTT      
      ,GMP_CODGM
      ,GMP_CODGP
      ,GMP_CODPE
      ,GMP_CODFVR
      ,GMP_CODFBR
      ,GMP_CODAUT              
      ,GMP_NUMSERIE
      ,GMP_SINCARD
      ,GMP_OPERADORA
      ,GMP_FONE
      ,GMP_CONTRATO
      ,GMP_CODGML
      ,GMP_DTCONFIGURADO
      ,GMP_DTEMPENHO      
      ,GMP_PLACACHASSI
      ,GMP_COMPOSICAO
      ,GMP_CODUSR) VALUES(
      'I'                    -- GMP_ACAO
      ,@gmpCodigoNew         -- GMP_CODIGO         
      ,@gmpCodCnttNew        -- GMP_CODCNTT      
      ,@gmpCodGmNew          -- GMP_CODGM         
      ,@gmpCodGpNew          -- GMP_CODGP
      ,@gmpCodPeNew          -- GMP_CODPE
      ,@gmpCodFvrNew         -- GMP_CODFVR        
      ,@gmpCodFbrNew         -- GMP_CODFBR
      ,0                     -- GMP_CODAUT
      ,@gmpNumSerieNew       -- GMP_NUMSERIE
      ,@gmpSincardNew        -- GMP_SINCARD
      ,@gmpOperadoraNew      -- GMP_OPERADORA
      ,@gmpFoneNew           -- GMP_FONE
      ,@gmpContratoNew       -- GMP_CONTRATO
      ,@gmpCodGmlNew         -- GMP_CODGML        
      ,NULL                  -- GMP_DTCONFIGURADO
      ,NULL                  -- GMP_DTEMPENHO      
      ,@gmpPlacaChassiNew    -- GMP_PLACACHASSI
      ,@gmpComposicaoNew     -- GMP_COMPOSICAO
      ,@gmpCodUsrNew         -- GMP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELOPRODUTO_BU ON dbo.VGRUPOMODELOPRODUTO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao  
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gmpCodigoNew INTEGER;
  DECLARE @gmpCodCnttNew INTEGER;  
  DECLARE @gmpCodGmNew INTEGER;
  DECLARE @gmNomeNew VARCHAR(20);
  DECLARE @gmpCodGpNew VARCHAR(3);
  DECLARE @gpNomeNew VARCHAR(20);
  DECLARE @gmpCodPeNew VARCHAR(3);
  DECLARE @peNomeNew VARCHAR(20);
  DECLARE @gmpCodFvrNew INTEGER;
  DECLARE @gmpCodFbrNew INTEGER;
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @gmpCodAutNew INTEGER;    
  DECLARE @gmpNumSerieNew VARCHAR(20);
  DECLARE @gmpSincardNew VARCHAR(20);
  DECLARE @gmpOperadoraNew VARCHAR(15);
  DECLARE @gmpFoneNew VARCHAR(15);
  DECLARE @gmpContratoNew VARCHAR(10);
  DECLARE @gmpCodGmlNew INTEGER;
  DECLARE @gmpDtConfiguradoNew DATE;
  DECLARE @gmpDtEmpenhoNew DATE;  
  DECLARE @gmpPlacaChassiNew VARCHAR(20);
  DECLARE @gmpComposicaoNew INTEGER;
  DECLARE @gmpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD35New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gmpCodigoNew          = i.GMP_CODIGO   
         ,@gmpCodCnttNew        = i.GMP_CODCNTT
         ,@gmpCodGmNew          = i.GMP_CODGM    
         ,@gmNomeNew            = COALESCE(GM.GM_NOME,'ERRO')         
         ,@gmpCodGpNew          = dbo.fncTranslate(i.GMP_CODGP,3)
         ,@gpNomeNew            = COALESCE(GP.GP_NOME,'ERRO')         
         ,@gmpCodPeNew          = dbo.fncTranslate(i.GMP_CODPE,3)
         ,@peNomeNew            = COALESCE(PE.PE_NOME,'ERRO')
         ,@gmpCodFvrNew         = i.GMP_CODFVR   
         ,@gmpCodFbrNew         = i.GMP_CODFBR   
         ,@fvrApelidoNew        = COALESCE(FVR.FVR_APELIDO,'ERRO')
         ,@gmpCodAutNew         = i.GMP_CODAUT         
         ,@gmpNumSerieNew       = dbo.fncTranslate(i.GMP_NUMSERIE,20) 
         ,@gmpSincardNew        = dbo.fncTranslate(i.GMP_SINCARD,20)  
         ,@gmpOperadoraNew      = dbo.fncTranslate(i.GMP_OPERADORA,15)
         ,@gmpFoneNew           = dbo.fncTranslate(i.GMP_FONE,15)
         ,@gmpContratoNew       = dbo.fncTranslate(i.GMP_CONTRATO,10) 
         ,@gmpCodGmlNew         = i.GMP_CODGML   
         ,@gmpDtConfiguradoNew  = i.GMP_DTCONFIGURADO
         ,@gmpDtEmpenhoNew      = i.GMP_DTEMPENHO
         ,@gmpPlacaChassiNew    = dbo.fncTranslate(i.GMP_PLACACHASSI,20)
         ,@gmpComposicaoNew     = i.GMP_COMPOSICAO
         ,@gmpCodUsrNew         = i.GMP_CODUSR
         ,@usrApelidoNew        = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew         = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD35New             = UP.UP_D35
    FROM inserted i
    LEFT OUTER JOIN GRUPOMODELO GM ON i.GMP_CODGM=GM.GM_CODIGO AND GM.GM_ATIVO='S'
    LEFT OUTER JOIN GRUPOPRODUTO GP ON i.GMP_CODGP=GP.GP_CODIGO AND GP.GP_ATIVO='S'    
    LEFT OUTER JOIN PONTOESTOQUE PE ON i.GMP_CODPE=PE.PE_CODIGO AND PE.PE_ATIVO='S'    
    LEFT OUTER JOIN FABRICANTE FBR ON i.GMP_CODFBR=FBR.FBR_CODFVR AND FBR.FBR_ATIVO='S'    
    LEFT OUTER JOIN FAVORECIDO FVR ON FBR.FBR_CODFVR=FVR.FVR_CODIGO
    LEFT OUTER JOIN USUARIO USR ON i.GMP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY        
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@gmpCodUsrNew);
    IF( @gmNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO_MODELO %s PARA ESTE REGISTRO',15,1,@gmpCodGmNew);
    IF( @gpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO GRUPO_PRODUTO %s PARA ESTE REGISTRO',15,1,@gmpCodGpNew);
    IF( @peNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO PONTO_ESTOQUE %s PARA ESTE REGISTRO',15,1,@gmpCodPeNew);
    ---------------------------  
    -- Auto naum tem fabricante
    ---------------------------  
    IF( @gmpCodGpNew <> 'AUT' ) BEGIN  
      IF( @fvrApelidoNew='ERRO' )
        RAISERROR('NAO LOCALIZADO FABRICANTE %i PARA ESTE REGISTRO',15,1,@gmpCodFbrNew);
    END  
      
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD35New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 35 PARA ALTERAR NA TABELA PRODUTO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @gmpCodigoOld INTEGER;
    DECLARE @gmpCodCnttOld INTEGER;
    DECLARE @gmpCodGmOld INTEGER;
    DECLARE @gmpCodGpOld VARCHAR(3);
    DECLARE @gmpCodPeOld VARCHAR(3);
    DECLARE @gmpCodFvrOld INTEGER;
    DECLARE @gmpCodFbrOld INTEGER;
    DECLARE @gmpCodAutOld INTEGER;    
    DECLARE @gmpNumSerieOld VARCHAR(20);
    DECLARE @gmpSincardOld VARCHAR(20);
    DECLARE @peSucataOld VARCHAR(1);
    DECLARE @gmpOperadoraOld VARCHAR(15);
    DECLARE @gmpFoneOld VARCHAR(15);
    DECLARE @gmpContratoOld VARCHAR(10);
    DECLARE @gmpCodGmlOld INTEGER;
    DECLARE @gmpDtConfiguradoOld DATE;
    DECLARE @gmpDtEmpenhoOld DATE;    
    DECLARE @gmpPlacaChassiOld VARCHAR(20);
    DECLARE @gmpComposicaoOld INTEGER;
    DECLARE @gmpCodUsrOld INTEGER;
    
    SELECT @gmpCodigoOld          = d.GMP_CODIGO   
           ,@gmpCodCnttOld        = d.GMP_CODCNTT
           ,@gmpCodGmOld          = d.GMP_CODGM    
           ,@gmpCodGpOld          = d.GMP_CODGP
           ,@gmpCodPeOld          = d.GMP_CODPE
           ,@peSucataOld          = COALESCE(PE.PE_SUCATA,'N')
           ,@gmpCodFvrOld         = d.GMP_CODFVR   
           ,@gmpCodFbrOld         = d.GMP_CODFBR   
           ,@gmpCodAutOld         = d.GMP_CODAUT                    
           ,@gmpNumSerieOld       = d.GMP_NUMSERIE
           ,@gmpSincardOld        = d.GMP_SINCARD
           ,@gmpOperadoraOld      = d.GMP_OPERADORA
           ,@gmpFoneOld           = d.GMP_FONE
           ,@gmpContratoOld       = d.GMP_CONTRATO
           ,@gmpCodGmlOld         = d.GMP_CODGML   
           ,@gmpDtConfiguradoOld  = d.GMP_DTCONFIGURADO
           ,@gmpDtEmpenhoOld      = d.GMP_DTEMPENHO
           ,@gmpPlacaChassiOld    = d.GMP_PLACACHASSI
           ,@gmpComposicaoOld     = d.GMP_COMPOSICAO
           ,@gmpCodUsrOld         = d.GMP_CODUSR
      FROM GRUPOMODELOPRODUTO d 
      LEFT OUTER JOIN PONTOESTOQUE PE ON d.GMP_CODPE=PE.PE_CODIGO
     WHERE d.GMP_CODIGO=@gmpCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @gmpCodigoOld<>@gmpCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @gmpCodGmOld<>@gmpCodGmNew )
      RAISERROR('CAMPO MODELO NAO PODE SER ALTERADO',15,1);  
    IF( @gmpCodGpOld<>@gmpCodGpNew )
      RAISERROR('CAMPO GRUPO NAO PODE SER ALTERADO',15,1);  
    IF( @gmpCodFbrOld<>@gmpCodFbrNew )
      RAISERROR('CAMPO FABRICANTE NAO PODE SER ALTERADO',15,1);  
    IF( @gmpCodGmlOld<>@gmpCodGmlNew )
      RAISERROR('CAMPO LOTE NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Validacao na tabela
    ---------------------------------------------------------------------
    IF( @gmpCodPeOld <> @gmpCodPeNew ) BEGIN
      IF( (@gmpCodPeNew='SUC') AND (@peSucataOld='N') )
        RAISERROR('ESTOQUE %s NAO ACEITA TRANSFERENCIA PARA SUCATA!',15,1,@gmpCodPeOld);
      -------------------------------------------------  
      -- Quando se esta empenhando um produto o PE muda
      -------------------------------------------------  
      IF( (@gmpCodAutNew>0) AND (@gmpCodPeNew<>'EMP') )
        RAISERROR('PRODUTO COM AUTO NAO PODE SER TRANSFERIDO!',15,1);
      UPDATE PONTOESTOQUE SET PE_ESTOQUE=(PE_ESTOQUE+1) WHERE PE_CODIGO=@gmpCodPeNew;
      UPDATE PONTOESTOQUE SET PE_ESTOQUE=(PE_ESTOQUE-1) WHERE PE_CODIGO=@gmpCodPeOld;      
    END
    --  
    UPDATE dbo.GRUPOMODELOPRODUTO
       SET GMP_CODCNTT        = @gmpCodCnttNew    
           ,GMP_CODPE         = @gmpCodPeNew           
           ,GMP_CODFVR        = @gmpCodFvrNew   
           ,GMP_CODAUT        = @gmpCodAutNew            
           ,GMP_NUMSERIE      = @gmpNumSerieNew 
           ,GMP_SINCARD       = @gmpSincardNew  
           ,GMP_OPERADORA     = @gmpOperadoraNew
           ,GMP_FONE          = @gmpFoneNew     
           ,GMP_CONTRATO      = @gmpContratoNew 
           ,GMP_DTCONFIGURADO = @gmpDtConfiguradoNew
           ,GMP_DTEMPENHO     = @gmpDtEmpenhoNew           
           ,GMP_PLACACHASSI   = @gmpPlacaChassiNew
           ,GMP_COMPOSICAO    = @gmpComposicaoNew
           ,GMP_CODUSR        = @gmpCodUsrNew   
    WHERE GMP_CODIGO = @gmpCodigoNew;     
    -- Gravando LOG
   IF( (@gmpCodCnttOld<>@gmpCodCnttNew) OR (@gmpCodPeOld<>@gmpCodPeNew) OR (@gmpCodFvrOld<>@gmpCodFvrNew) OR (@gmpCodAutOld<>@gmpCodAutNew) 
    OR (@gmpNumSerieOld<>@gmpNumSerieNew) OR (@gmpSincardOld<>@gmpSincardNew) OR (@gmpOperadoraOld<>@gmpOperadoraNew) OR (@gmpFoneOld<>@gmpFoneNew) 
    OR (@gmpContratoOld<>@gmpContratoNew) 
    OR ((@gmpDtConfiguradoOld IS NULL) AND (@gmpDtConfiguradoNew IS NOT NULL))
    OR ((@gmpDtConfiguradoOld IS NOT NULL) AND (@gmpDtConfiguradoNew IS NULL))
    OR ((@gmpDtEmpenhoOld IS NULL) AND (@gmpDtEmpenhoNew IS NOT NULL))
    OR ((@gmpDtEmpenhoOld IS NOT NULL) AND (@gmpDtEmpenhoNew IS NULL))
    OR (@gmpPlacaChassiOld<>@gmpPlacaChassiNew) OR (@gmpComposicaoOld<>@gmpComposicaoNew)
    OR (@gmpCodUsrOld<>@gmpCodUsrNew) ) BEGIN
      INSERT INTO dbo.BKPGRUPOMODELOPRODUTO(
        GMP_ACAO
        ,GMP_CODIGO
        ,GMP_CODCNTT        
        ,GMP_CODGM
        ,GMP_CODGP
        ,GMP_CODPE
        ,GMP_CODFVR
        ,GMP_CODAUT
        ,GMP_CODFBR
        ,GMP_NUMSERIE
        ,GMP_SINCARD
        ,GMP_OPERADORA
        ,GMP_FONE
        ,GMP_CONTRATO
        ,GMP_CODGML
        ,GMP_DTCONFIGURADO
        ,GMP_DTEMPENHO        
        ,GMP_PLACACHASSI
        ,GMP_COMPOSICAO
        ,GMP_CODUSR) VALUES(
        'A'                    -- GMP_ACAO
        ,@gmpCodigoNew         -- GMP_CODIGO         
        ,@gmpCodCnttNew        -- GMP_CODCNTT        
        ,@gmpCodGmNew          -- GMP_CODGM         
        ,@gmpCodGpNew          -- GMP_CODGP
        ,@gmpCodPeNew          -- GMP_CODPE
        ,@gmpCodFvrNew         -- GMP_CODFVR        
        ,@gmpCodFbrNew         -- GMP_CODFBR        
        ,@gmpCodAutNew         -- GMP_CODAUT
        ,@gmpNumSerieNew       -- GMP_NUMSERIE
        ,@gmpSincardNew        -- GMP_SINCARD
        ,@gmpOperadoraNew      -- GMP_OPERADORA
        ,@gmpFoneNew           -- GMP_FONE
        ,@gmpContratoNew       -- GMP_CONTRATO
        ,@gmpCodGmlNew         -- GMP_CODGML        
        ,@gmpDtConfiguradoNew  -- GMP_DTCONFIGURADO
        ,@gmpDtEmpenhoNew      -- GMP_DTEMPENHO
        ,@gmpPlacaChassiNew    -- GMP_PLACACHASSI
        ,@gmpComposicaoNew     -- GMP_COMPOSICAO
        ,@gmpCodUsrNew         -- GMP_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewGRUPOMODELOPRODUTO_BD ON dbo.VGRUPOMODELOPRODUTO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroOld VARCHAR(70);     -- Buscando retorno de erro para funcao
  DECLARE @duplicidade VARCHAR(30); -- Duplicidade no numero de serie/sincard
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @gmpCodigoOld INTEGER;
  DECLARE @gmpCodCnttOld INTEGER;  
  DECLARE @gmpCodGmOld INTEGER;
  DECLARE @gmpCodGpOld VARCHAR(3);
  DECLARE @gmpCodPeOld VARCHAR(3);
  DECLARE @gmpCodFvrOld INTEGER;
  DECLARE @gmpCodFbrOld INTEGER;
  DECLARE @gmpCodAutOld INTEGER;
  DECLARE @gmpNumSerieOld VARCHAR(20);
  DECLARE @gmpSincardOld VARCHAR(20);
  DECLARE @gmpOperadoraOld VARCHAR(15);
  DECLARE @gmpFoneOld VARCHAR(15);
  DECLARE @gmpContratoOld VARCHAR(10);
  DECLARE @gmpCodGmlOld INTEGER;
  DECLARE @gmpDtConfiguradoOld DATE;
  DECLARE @gmpDtEmpenhoOld DATE;  
  DECLARE @gmpPlacaChassiOld VARCHAR(20);
  DECLARE @gmpComposicaoOld INTEGER;
  DECLARE @gmpCodUsrOld INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @gmpCodigoOld          = d.GMP_CODIGO   
         ,@gmpCodCnttOld        = d.GMP_CODCNTT  
         ,@gmpCodGmOld          = d.GMP_CODGM    
         ,@gmpCodGpOld          = d.GMP_CODGP
         ,@gmpCodPeOld          = d.GMP_CODPE
         ,@gmpCodFvrOld         = d.GMP_CODFVR   
         ,@gmpCodFbrOld         = d.GMP_CODFBR   
         ,@gmpCodAutOld         = d.GMP_CODAUT
         ,@gmpNumSerieOld       = d.GMP_NUMSERIE
         ,@gmpSincardOld        = d.GMP_SINCARD
         ,@gmpOperadoraOld      = d.GMP_OPERADORA
         ,@gmpFoneOld           = d.GMP_FONE
         ,@gmpContratoOld       = d.GMP_CONTRATO
         ,@gmpCodGmlOld         = d.GMP_CODGML   
         ,@gmpDtConfiguradoOld  = d.GMP_DTCONFIGURADO
         ,@gmpDtEmpenhoOld      = d.GMP_DTEMPENHO
         ,@gmpPlacaChassiOld    = d.GMP_PLACACHASSI
         ,@gmpComposicaoOld     = d.GMP_COMPOSICAO
         ,@gmpCodUsrOld         = d.GMP_CODUSR
    FROM deleted d
  BEGIN TRY    
    IF( @gmpCodPeOld <> 'EST' )
      RAISERROR('PRODUTO %i DEVE ESTAR NO PONTO DE ESTOQUE "EST"',15,1,@gmpCodigoOld);    
    --
    -------------------------------------------
    -- EXCLUINDO A DUPLICIDADE DE SERIE/SINCARD
    -------------------------------------------
    IF( @gmpNumSerieOld<>'NSA' ) BEGIN
      SET @duplicidade=CONCAT('SER',CAST(@gmpCodFbrOld AS VARCHAR(6)),@gmpNumSerieOld);    
      DELETE FROM DUPLICIDADEGMP WHERE DUP_CODIGO=@duplicidade;
    END
    IF( @gmpSincardOld<>'NSA' ) BEGIN
      SET @duplicidade=CONCAT('SIN',CAST(@gmpCodFbrOld AS VARCHAR(6)),@gmpSincardOld);    
      DELETE FROM DUPLICIDADEGMP WHERE DUP_CODIGO=@duplicidade;
    END
    --
    --
    UPDATE GRUPOMODELO SET GM_ESTOQUE=(GM_ESTOQUE-1) WHERE GM_CODIGO=@gmpCodGmOld;
    DELETE FROM dbo.GRUPOMODELOPRODUTO WHERE GMP_CODIGO=@gmpCodigoOld;
    --
    -- Gravando LOG
    INSERT INTO dbo.BKPGRUPOMODELOPRODUTO(
      GMP_ACAO
      ,GMP_CODIGO
      ,GMP_CODCNTT      
      ,GMP_CODGM
      ,GMP_CODGP
      ,GMP_CODPE
      ,GMP_CODFVR
      ,GMP_CODAUT
      ,GMP_CODFBR
      ,GMP_NUMSERIE
      ,GMP_SINCARD
      ,GMP_OPERADORA
      ,GMP_FONE
      ,GMP_CONTRATO
      ,GMP_CODGML
      ,GMP_DTCONFIGURADO
      ,GMP_DTEMPENHO
      ,GMP_PLACACHASSI
      ,GMP_COMPOSICAO
      ,GMP_CODUSR) VALUES(
      'E'                    -- GMP_ACAO
      ,@gmpCodigoOld         -- GMP_CODIGO         
      ,@gmpCodCnttOld        -- GMP_CODCNTT      
      ,@gmpCodGmOld          -- GMP_CODGM         
      ,@gmpCodGpOld          -- GMP_CODGP
      ,@gmpCodPeOld          -- GMP_CODPE
      ,@gmpCodFvrOld         -- GMP_CODFVR        
      ,@gmpCodFbrOld         -- GMP_CODFBR        
      ,@gmpCodAutOld         -- GMP_CODAUT
      ,@gmpNumSerieOld       -- GMP_NUMSERIE
      ,@gmpSincardOld        -- GMP_SINCARD
      ,@gmpOperadoraOld      -- GMP_OPERADORA
      ,@gmpFoneOld           -- GMP_FONE
      ,@gmpContratoOld       -- GMP_CONTRATO
      ,@gmpCodGmlOld         -- GMP_CODGML        
      ,@gmpDtConfiguradoOld  -- GMP_DTCONFIGURADO
      ,@gmpDtEmpenhoOld      -- GMP_DTEMPENHO
      ,@gmpPlacaChassiOld    -- GMP_PLACACHASSI
      ,@gmpComposicaoOld     -- GMP_COMPOSICAO
      ,@gmpCodUsrOld         -- GMP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPGRUPOMODELOPRODUTO_BUD ON dbo.BKPGRUPOMODELOPRODUTO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                            P R O D U T O O R I G E M                            --
--trgprodutoorigem
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewPRODUTOORIGEM_BI ON dbo.VPRODUTOORIGEM
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- PO_CODIGO      | PK  |    |    | VC(01) NN          |
  -- PO_NOME        |     |    |    | VC(30) NN          |
  -- PO_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- PO_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- PO_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D09         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(25) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @poCodigoNew VARCHAR(1);
  DECLARE @poNomeNew VARCHAR(30);
  DECLARE @poAtivoNew VARCHAR(1);
  DECLARE @poRegNew VARCHAR(1);
  DECLARE @poCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD09New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @poCodigoNew   = i.PO_CODIGO
         ,@poNomeNew    = dbo.fncTranslate(i.PO_NOME,30)
         ,@poAtivoNew   = UPPER(i.PO_ATIVO)
         ,@poRegNew     = UPPER(i.PO_REG)
         ,@poCodUsrNew  = i.PO_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD09New      = UP.UP_D09
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@poCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD09New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 09 PARA INCLUIR NA TABELA PRODUTOORIGEM',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(PO_CODIGO,'OK') FROM PRODUTOORIGEM WHERE PO_NOME=@poNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PRODUTOORIGEM COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(PO_NOME,'OK') FROM PRODUTOORIGEM WHERE PO_CODIGO=@poCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA PRODUTOORIGEM %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @poRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@poRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.PRODUTOORIGEM( 
      PO_CODIGO
      ,PO_NOME
      ,PO_ATIVO
      ,PO_REG
      ,PO_CODUSR) VALUES(
      @poCodigoNew   -- PO_CODIGO
      ,@poNomeNew    -- PO_NOME
      ,@poAtivoNew   -- PO_ATIVO
      ,@poRegNew     -- PO_REG
      ,@poCodUsrNew  -- PO_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPPRODUTOORIGEM(
      PO_ACAO
      ,PO_CODIGO
      ,PO_NOME
      ,PO_ATIVO
      ,PO_REG
      ,PO_CODUSR) VALUES(
      'I'                       -- PO_ACAO
      ,@poCodigoNew            -- PO_CODIGO
      ,@poNomeNew              -- PO_NOME
      ,@poAtivoNew             -- PO_ATIVO
      ,@poRegNew               -- PO_REG
      ,@poCodUsrNew            -- PO_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPRODUTOORIGEM_BU ON dbo.VPRODUTOORIGEM
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @poCodigoNew VARCHAR(1);
  DECLARE @poNomeNew VARCHAR(30);
  DECLARE @poAtivoNew VARCHAR(1);
  DECLARE @poRegNew VARCHAR(1);
  DECLARE @poCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD09New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @poCodigoNew   = i.PO_CODIGO
         ,@poNomeNew    = dbo.fncTranslate(i.PO_NOME,30)
         ,@poAtivoNew   = UPPER(i.PO_ATIVO)
         ,@poRegNew     = UPPER(i.PO_REG)
         ,@poCodUsrNew  = i.PO_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD09New      = UP.UP_D09
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.PO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@poCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD09New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 09 PARA ALTERAR NA TABELA PRODUTOORIGEM',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @poCodigoOld VARCHAR(1);
    DECLARE @poNomeOld VARCHAR(30);
    DECLARE @poAtivoOld VARCHAR(1);
    DECLARE @poRegOld VARCHAR(1);
    DECLARE @poCodUsrOld INTEGER;
    SELECT @poCodigoOld   = d.PO_CODIGO
           ,@poNomeOld    = d.PO_NOME
           ,@poAtivoOld   = d.PO_ATIVO
           ,@poRegOld     = d.PO_REG
           ,@poCodUsrOld  = d.PO_CODUSR         
      FROM PRODUTOORIGEM d WHERE d.PO_CODIGO=@poCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @poCodigoOld<>@poCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @poNomeOld<>@poNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(PO_CODIGO,'OK') FROM PRODUTOORIGEM WHERE PO_NOME=@poNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA PRODUTOORIGEM COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @poRegOld <> @poRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@poRegOld,@poRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.PRODUTOORIGEM
       SET PO_NOME   = @poNomeNew
          ,PO_ATIVO  = @poAtivoNew
          ,PO_REG    = @poRegNew
          ,PO_CODUSR = @poCodUsrNew
    WHERE PO_CODIGO  = @poCodigoNew;     
    -- Gravando LOG
    IF( (@poNomeOld<>@poNomeNew) OR (@poAtivoOld<>@poAtivoNew) OR (@poRegOld<>@poRegNew) ) BEGIN
      INSERT INTO dbo.BKPPRODUTOORIGEM(
        PO_ACAO
        ,PO_CODIGO
        ,PO_NOME
        ,PO_ATIVO
        ,PO_REG
        ,PO_CODUSR) VALUES(
        'A'             -- PO_ACAO
        ,@poCodigoNew  -- PO_CODIGO
        ,@poNomeNew    -- PO_NOME
        ,@poAtivoNew   -- PO_ATIVO
        ,@poRegNew     -- PO_REG
        ,@poCodUsrNew  -- PO_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewPRODUTOORIGEM_BD ON dbo.VPRODUTOORIGEM
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @poCodigoOld VARCHAR(1);
  DECLARE @poNomeOld VARCHAR(30);
  DECLARE @poAtivoOld VARCHAR(1);
  DECLARE @poRegOld VARCHAR(1);
  DECLARE @poCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD09Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @poCodigoOld   = d.PO_CODIGO
         ,@poNomeOld    = d.PO_NOME
         ,@poAtivoOld   = d.PO_ATIVO
         ,@poRegOld     = d.PO_REG
         ,@poCodUsrOld  = d.PO_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD09Old      = UP.UP_D09
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.PO_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@poCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD09Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 09 PARA EXCLUIR NA TABELA PRODUTOORIGEM',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@poRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@poCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('PRODUTOORIGEM UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@poCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('PRODUTOORIGEM UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.PRODUTOORIGEM WHERE PO_CODIGO=@poCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPPRODUTOORIGEM(
      PO_ACAO
      ,PO_CODIGO
      ,PO_NOME
      ,PO_ATIVO
      ,PO_REG
      ,PO_CODUSR) VALUES(
      'E'               -- PO_ACAO
      ,@poCodigoOld    -- PO_CODIGO
      ,@poNomeOld      -- PO_NOME
      ,@poAtivoOld     -- PO_ATIVO
      ,@poRegOld       -- PO_REG
      ,@poCodUsrOld    -- PO_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPPRODUTOORIGEM_BUD ON dbo.BKPPRODUTOORIGEM
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                         Q U A L I F I C A C A O C O N T                         --
--trgqualificacaocont
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewQUALIFICACAOCONT_BI ON dbo.VQUALIFICACAOCONT
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- QC_CODIGO      | PK  |    |    | VC(04) NN          |
  -- QC_NOME        |     |    |    | VC(70) NN          |
  -- QC_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- QC_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- QC_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D03         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(4) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @qcCodigoNew VARCHAR(4);
  DECLARE @qcNomeNew VARCHAR(70);
  DECLARE @qcAtivoNew VARCHAR(1);
  DECLARE @qcRegNew VARCHAR(1);
  DECLARE @qcCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD03New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @qcCodigoNew   = dbo.fncTranslate(i.QC_CODIGO,4)
         ,@qcNomeNew    = dbo.fncTranslate(i.QC_NOME,70)
         ,@qcAtivoNew   = UPPER(i.QC_ATIVO)
         ,@qcRegNew     = UPPER(i.QC_REG)
         ,@qcCodUsrNew  = i.QC_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03New      = UP.UP_D03
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.QC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@qcCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD03New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA INCLUIR NA TABELA QUALIFICACAOCONT',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(QC_CODIGO,'OK') FROM QUALIFICACAOCONT WHERE QC_NOME=@qcNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA QUALIFICACAOCONT COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(QC_NOME,'OK') FROM QUALIFICACAOCONT WHERE QC_CODIGO=@qcCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA QUALIFICACAOCONT %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @qcRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@qcRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.QUALIFICACAOCONT( 
      QC_CODIGO
      ,QC_NOME
      ,QC_ATIVO
      ,QC_REG
      ,QC_CODUSR) VALUES(
      @qcCodigoNew   -- QC_CODIGO
      ,@qcNomeNew    -- QC_NOME
      ,@qcAtivoNew   -- QC_ATIVO
      ,@qcRegNew     -- QC_REG
      ,@qcCodUsrNew  -- QC_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPQUALIFICACAOCONT(
      QC_ACAO
      ,QC_CODIGO
      ,QC_NOME
      ,QC_ATIVO
      ,QC_REG
      ,QC_CODUSR) VALUES(
      'I'                       -- QC_ACAO
      ,@qcCodigoNew            -- QC_CODIGO
      ,@qcNomeNew              -- QC_NOME
      ,@qcAtivoNew             -- QC_ATIVO
      ,@qcRegNew               -- QC_REG
      ,@qcCodUsrNew            -- QC_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewQUALIFICACAOCONT_BU ON dbo.VQUALIFICACAOCONT
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(4) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @qcCodigoNew VARCHAR(4);
  DECLARE @qcNomeNew VARCHAR(70);
  DECLARE @qcAtivoNew VARCHAR(1);
  DECLARE @qcRegNew VARCHAR(1);
  DECLARE @qcCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD03New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @qcCodigoNew   = i.QC_CODIGO
         ,@qcNomeNew    = dbo.fncTranslate(i.QC_NOME,70)
         ,@qcAtivoNew   = UPPER(i.QC_ATIVO)
         ,@qcRegNew     = UPPER(i.QC_REG)
         ,@qcCodUsrNew  = i.QC_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03New      = UP.UP_D03
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.QC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@qcCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD03New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA ALTERAR NA TABELA QUALIFICACAOCONT',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @qcCodigoOld VARCHAR(4);
    DECLARE @qcNomeOld VARCHAR(70);
    DECLARE @qcAtivoOld VARCHAR(1);
    DECLARE @qcRegOld VARCHAR(1);
    DECLARE @qcCodUsrOld INTEGER;
    SELECT @qcCodigoOld   = d.QC_CODIGO
           ,@qcNomeOld    = d.QC_NOME
           ,@qcAtivoOld   = d.QC_ATIVO
           ,@qcRegOld     = d.QC_REG
           ,@qcCodUsrOld  = d.QC_CODUSR         
      FROM QUALIFICACAOCONT d WHERE d.QC_CODIGO=@qcCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @qcCodigoOld<>@qcCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @qcNomeOld<>@qcNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(QC_CODIGO,'OK') FROM QUALIFICACAOCONT WHERE QC_NOME=@qcNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA QUALIFICACAOCONT COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @qcRegOld <> @qcRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@qcRegOld,@qcRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.QUALIFICACAOCONT
       SET QC_NOME   = @qcNomeNew
          ,QC_ATIVO  = @qcAtivoNew
          ,QC_REG    = @qcRegNew
          ,QC_CODUSR = @qcCodUsrNew
    WHERE QC_CODIGO  = @qcCodigoNew;     
    -- Gravando LOG
    IF( (@qcNomeOld<>@qcNomeNew) OR (@qcAtivoOld<>@qcAtivoNew) OR (@qcRegOld<>@qcRegNew) ) BEGIN
      INSERT INTO dbo.BKPQUALIFICACAOCONT(
        QC_ACAO
        ,QC_CODIGO
        ,QC_NOME
        ,QC_ATIVO
        ,QC_REG
        ,QC_CODUSR) VALUES(
        'A'             -- QC_ACAO
        ,@qcCodigoNew  -- QC_CODIGO
        ,@qcNomeNew    -- QC_NOME
        ,@qcAtivoNew   -- QC_ATIVO
        ,@qcRegNew     -- QC_REG
        ,@qcCodUsrNew  -- QC_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewQUALIFICACAOCONT_BD ON dbo.VQUALIFICACAOCONT
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @qcCodigoOld VARCHAR(4);
  DECLARE @qcNomeOld VARCHAR(70);
  DECLARE @qcAtivoOld VARCHAR(1);
  DECLARE @qcRegOld VARCHAR(1);
  DECLARE @qcCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD03Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @qcCodigoOld   = d.QC_CODIGO
         ,@qcNomeOld    = d.QC_NOME
         ,@qcAtivoOld   = d.QC_ATIVO
         ,@qcRegOld     = d.QC_REG
         ,@qcCodUsrOld  = d.QC_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD03Old      = UP.UP_D03
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.QC_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@qcCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD03Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 03 PARA EXCLUIR NA TABELA QUALIFICACAOCONT',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@qcRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@qcCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('QUALIFICACAOCONT UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@qcCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('QUALIFICACAOCONT UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.QUALIFICACAOCONT WHERE QC_CODIGO=@qcCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPQUALIFICACAOCONT(
      QC_ACAO
      ,QC_CODIGO
      ,QC_NOME
      ,QC_ATIVO
      ,QC_REG
      ,QC_CODUSR) VALUES(
      'E'               -- QC_ACAO
      ,@qcCodigoOld    -- QC_CODIGO
      ,@qcNomeOld      -- QC_NOME
      ,@qcAtivoOld     -- QC_ATIVO
      ,@qcRegOld       -- QC_REG
      ,@qcCodUsrOld    -- QC_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPQUALIFICACAOCONT_BUD ON dbo.BKPQUALIFICACAOCONT
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                             R A T E I O
--trgrateio
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewRATEIO_BI ON dbo.VRATEIO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- RAT_CODIGO     | PK  |    |    | INT                | Auto incremento
  -- RAT_CODCC      | SEL |    |    | VC(15) NN          | Campo relacionado (CONTAGERENCIAL)
  -- CC_NOME        | SEL |    |    | VC(40) NN          | Campo relacionado (CONTAGERENCIAL)   
  -- RAT_LANCTO     |     |    |    | INT NN             |    
  -- RAT_DEBITO     |     |    |    | NUM(15,2) NN       |    
  -- RAT_CREDITO    |     |    |    | NUM(15,2) NN       |  
  -- RAT_DATA       | DEF |    |    | DAT NN             | Automatico pelo default
  -- RAT_CODCMP     | SEL |    |    | INT NN             | Campo relacionado (COMPETENCIA)
  -- CMP_NOME       | SEL |    |    | VC(6) NN           | Campo relacionado (COMPETENCIA)        
  -- RAT_CONTABIL   | CC  |    |    | VC(1) NN           | Se entra no contabil/balanco/razao   
  -- RAT_CODEMP     | SEL |    |    | INT NN             | Campo relacionado (EMPRESA) - Somente para facilitar os filtros 
  -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- RAT_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- RAT_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D28         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @ratCodigoNew INTEGER;
  DECLARE @ratCodCcNew VARCHAR(15);
  DECLARE @ratLanctoNew INTEGER;
  DECLARE @ratDebitoNew NUMERIC(15,2);
  DECLARE @ratCreditoNew NUMERIC(15,2);
  DECLARE @ratCodEmpNew INTEGER;
  DECLARE @ratCodCmpNew INTEGER;
  DECLARE @ratContabilNew VARCHAR(1);
  DECLARE @ratCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD10New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @ratCodigoNew    = i.RAT_CODIGO
         ,@ratCodCcNew    = i.RAT_CODCC
         ,@ratLanctoNew   = i.RAT_LANCTO
         ,@ratDebitoNew   = i.RAT_DEBITO
         ,@ratCreditoNew  = i.RAT_CREDITO
         ,@ratCodEmpNew   = i.RAT_CODEMP
         ,@ratCodCmpNew   = i.RAT_CODCMP
         ,@ratContabilNew = UPPER(i.RAT_CONTABIL)
         ,@ratCodUsrNew   = i.RAT_CODUSR
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD10New      = UP.UP_D10
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.RAT_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@ratCodUsrNew);
    --
    IF( (@ratDebitoNew=0) AND (@ratCreditoNew=0) )  
      RAISERROR('LANCTO NÃO ACEITA DEBITO E CREDITO COM VALOR 0(ZERO)',15,1);
    IF( (@ratDebitoNew>0) AND (@ratCreditoNew>0) )  
      RAISERROR('LANCTO NÃO ACEITA DEBITO E CREDITO COM VALOR MAIOR QUE 0(ZERO)',15,1);
      
    --
    INSERT INTO dbo.RATEIO( 
      RAT_CODCC
      ,RAT_LANCTO
      ,RAT_DEBITO
      ,RAT_CREDITO
      ,RAT_CODEMP
      ,RAT_CODCMP
      ,RAT_CONTABIL
      ,RAT_CODUSR) VALUES(
      @ratCodCcNew
      ,@ratLanctoNew
      ,@ratDebitoNew
      ,@ratCreditoNew
      ,@ratCodEmpNew
      ,@ratCodCmpNew
      ,@ratContabilNew
      ,@ratCodUsrNew
    ); 
    -----------------------------------------------------------------------------------------------------
    -- Pegando o lancamento principal do rateio olhando para o LANCTO para desmembramento e baixa parcial
    -----------------------------------------------------------------------------------------------------
    DECLARE @prLancto INTEGER;
    SELECT @prLancto=COALESCE(PR_LANCTO,NULL) FROM PAGARRATEIO WHERE PR_LANCTO=@ratLanctoNew;
    IF( @prLancto IS NULL ) BEGIN
      INSERT INTO PAGARRATEIO(
        PR_LANCTO
        ,PR_CODINI
        ,PR_CODFIM        
        ,PR_CODCC
        ,PR_DEBCRE) VALUES(
        @ratLanctoNew
        ,IDENT_CURRENT('RATEIO')
        ,IDENT_CURRENT('RATEIO')
        ,@ratCodCcNew
        ,(CASE WHEN @ratDebitoNew>0 THEN 'D' ELSE 'C' END)
      );
    END ELSE BEGIN
      UPDATE PAGARRATEIO SET PR_CODFIM=IDENT_CURRENT('RATEIO') WHERE PR_LANCTO=@ratLanctoNew;
    END    
    --
    --
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
---------------------------------------------------------------
--                    R E G I A O
--trgregiao
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewREGIAO_BI ON dbo.VREGIAO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- REG_CODIGO     | OK  |    |    | VC(5) NN PK        | Codigo informado pelo usuario
  -- REG_NOME       | OK  |    |    | VC(20) NN          | 
  -- REG_CODPAI     | SEL |    |    | INT NN             | Campo relacionado (PAIS)
  -- PAI_NOME       | SEL |    |    | VC(30) NN          | Campo relacionado (PAIS)     
  -- REG_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- REG_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- REG_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D08      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(5) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20)  = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @regCodigoNew VARCHAR(5);
  DECLARE @regNomeNew VARCHAR(20);
  DECLARE @regAtivoNew VARCHAR(1);
  DECLARE @regCodPaiNew INTEGER;
  DECLARE @paiNomeNew VARCHAR(30);
  DECLARE @regRegNew VARCHAR(1);
  DECLARE @regCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @regCodigoNew      = dbo.fncTranslate(i.REG_CODIGO,5)
         ,@regNomeNew       = dbo.fncTranslate(i.REG_NOME,20)
         ,@regCodPaiNew     = i.REG_CODPAI
         ,@paiNomeNew       = COALESCE(PAI.PAI_NOME,'ERRO')
         ,@regAtivoNew      = UPPER(i.REG_ATIVO)
         ,@regRegNew        = UPPER(i.REG_REG)
         ,@regCodUsrNew     = i.REG_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New         = UP.UP_D08
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN PAIS PAI ON i.REG_CODPAI=PAI.PAI_CODIGO AND PAI.PAI_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.REG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @paiNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO PAIS %i PARA ESTE REGISTRO',15,1,@regCodPaiNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@regCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA INCLUIR NA TABELA REGIAO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(REG_CODIGO,'OK') FROM REGIAO WHERE REG_NOME=@regNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA REGIAO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(REG_NOME,'OK') FROM REGIAO WHERE REG_CODIGO=@regCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA REGIAO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @regRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@regRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.REGIAO( 
      REG_CODIGO
      ,REG_NOME
      ,REG_CODPAI
      ,REG_ATIVO
      ,REG_REG
      ,REG_CODUSR) VALUES(
      @regCodigoNew     -- REG_CODIGO
      ,@regNomeNew      -- REG_NOME
      ,@regCodPaiNew    -- REG_CODPAI
      ,@regAtivoNew     -- REG_ATIVO
      ,@regRegNew       -- REG_REG
      ,@regCodUsrNew    -- REG_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPREGIAO(
      REG_ACAO
      ,REG_CODIGO
      ,REG_NOME
      ,REG_CODPAI      
      ,REG_ATIVO
      ,REG_REG
      ,REG_CODUSR) VALUES(
      'I'                 -- REG_ACAO
      ,@regCodigoNew      -- REG_CODIGO
      ,@regNomeNew        -- REG_NOME
      ,@regCodPaiNew      -- REG_CODPAI      
      ,@regAtivoNew       -- REG_ATIVO
      ,@regRegNew         -- REG_REG
      ,@regCodUsrNew      -- REG_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewREGIAO_BU ON dbo.VREGIAO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(5) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @regCodigoNew VARCHAR(5);
  DECLARE @regNomeNew VARCHAR(20);
  DECLARE @regCodPaiNew INTEGER;
  DECLARE @paiNomeNew VARCHAR(30);
  DECLARE @regAtivoNew VARCHAR(1);
  DECLARE @regRegNew VARCHAR(1);
  DECLARE @regCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD08New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @regCodigoNew    = dbo.fncTranslate(i.REG_CODIGO,5)
         ,@regNomeNew     = dbo.fncTranslate(i.REG_NOME,20)
         ,@regCodPaiNew   = i.REG_CODPAI
         ,@paiNomeNew     = COALESCE(PAI.PAI_NOME,'ERRO')
         ,@regAtivoNew    = UPPER(i.REG_ATIVO)
         ,@regRegNew      = UPPER(i.REG_REG)
         ,@regCodUsrNew   = i.REG_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08New       = UP.UP_D08
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN PAIS PAI ON i.REG_CODPAI=PAI.PAI_CODIGO AND PAI.PAI_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.REG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @paiNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO PAIS %i PARA ESTE REGISTRO',15,1,@regCodPaiNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@regCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD08New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA ALTERAR NA TABELA REGIAO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @regCodigoOld VARCHAR(5);
    DECLARE @regNomeOld VARCHAR(20);
    DECLARE @regCodPaiOld INTEGER;    
    DECLARE @regAtivoOld VARCHAR(1);
    DECLARE @regRegOld VARCHAR(1);
    DECLARE @regCodUsrOld INTEGER;
    SELECT @regCodigoOld    = d.REG_CODIGO
           ,@regNomeOld     = d.REG_NOME
           ,@regCodPaiOld   = d.REG_CODPAI           
           ,@regAtivoOld    = d.REG_ATIVO
           ,@regRegOld      = d.REG_REG
           ,@regCodUsrOld   = d.REG_CODUSR         
      FROM REGIAO d WHERE d.REG_CODIGO=@regCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @regCodigoOld<>@regCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @regNomeOld<>@regNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(REG_CODIGO,'OK') FROM REGIAO WHERE REG_NOME=@regNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA EVENTO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @regRegOld <> @regRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@regRegOld,@regRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.REGIAO
       SET REG_NOME       = @regNomeNew
          ,REG_CODPAI     = @regCodPaiNew
          ,REG_ATIVO      = @regAtivoNew
          ,REG_REG        = @regRegNew
          ,REG_CODUSR     = @regCodUsrNew
    WHERE REG_CODIGO  = @regCodigoNew;     
    -- Gravando LOG
    IF( (@regNomeOld<>@regNomeNew) OR (@regCodPaiOld<>@regCodPaiNew) OR (@regAtivoOld<>@regAtivoNew) OR (@regRegOld<>@regRegNew) ) BEGIN
      INSERT INTO dbo.BKPREGIAO(
        REG_ACAO
        ,REG_CODIGO
        ,REG_NOME
        ,REG_CODPAI        
        ,REG_ATIVO
        ,REG_REG
        ,REG_CODUSR) VALUES(
        'A'               -- REG_ACAO
        ,@regCodigoNew    -- REG_CODIGO
        ,@regNomeNew      -- REG_NOME
        ,@regCodPaiNew    -- REG_CODPAI        
        ,@regAtivoNew     -- REG_ATIVO
        ,@regRegNew       -- REG_REG
        ,@regCodUsrNew    -- REG_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewREGIAO_BD ON dbo.VREGIAO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkStrEst VARCHAR(3) = 'OK'; -- Para procurar campo foreign key str (ESTADO)
  DECLARE @erroOld VARCHAR(70);        -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @regCodigoOld VARCHAR(5);
  DECLARE @regNomeOld VARCHAR(20);
  DECLARE @regCodPaiOld INTEGER;      
  DECLARE @regAtivoOld VARCHAR(1);
  DECLARE @regRegOld VARCHAR(1);
  DECLARE @regCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD08Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @regCodigoOld    = d.REG_CODIGO
         ,@regNomeOld     = d.REG_NOME
         ,@regCodPaiOld   = d.REG_CODPAI                    
         ,@regAtivoOld    = d.REG_ATIVO
         ,@regRegOld      = d.REG_REG
         ,@regCodUsrOld   = d.REG_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD08Old       = UP.UP_D08
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.REG_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@regCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD08Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 08 PARA EXCLUIR NA TABELA REGIAO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@regRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
      ------------------------------------------
      --  Checando a FK EST_CODREG(ESTADO)
      ------------------------------------------
    SELECT TOP 1 @fkStrEst=COALESCE(EST_CODIGO,'OK') FROM ESTADO WHERE EST_CODREG=@regCodigoOld;
    IF( @fkStrEst <> 'OK' )
      RAISERROR('REGIAO UTILIZADA NO ESTADO %s',15,1,@fkStrEst);
    --
    DELETE FROM dbo.REGIAO WHERE REG_CODIGO=@regCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPREGIAO(
      REG_ACAO
      ,REG_CODIGO
      ,REG_NOME
      ,REG_CODPAI
      ,REG_ATIVO
      ,REG_REG
      ,REG_CODUSR) VALUES(
      'E'               -- REG_ACAO
      ,@regCodigoOld    -- REG_CODIGO
      ,@regNomeOld      -- REG_NOME
      ,@regCodPaiOld    -- REG_CODPAI
      ,@regAtivoOld     -- REG_ATIVO
      ,@regRegOld       -- REG_REG
      ,@regCodUsrOld    -- REG_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPREGIAO_BUD ON dbo.BKPREGIAO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                             S E R I E N F
--trgserienf
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewSERIENF_BI ON dbo.VSERIENF
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- SNF_CODIGO     | PK  |    |    | INT                | Auto incremento
  -- SNF_SERIE      |     |    |    | VC(4) NN           | 
  -- SNF_ENTSAI     | CC  |    |    | VC(1) NN           |    
  -- SNF_CODTD      | SEL |    |    | VC(3) NN           | Campo relacionado (TIPODOCUMENTO)   
  -- TD_NOME        | SEL |    |    | VC(20) NN          | Campo relacionado (TIPODOCUMENTO)      
  -- SNF_INFORMARNF | CC  |    |    | VC(1) NN           |    
  -- SNF_NFINICIO   |     |    |    | INT NN             |
  -- SNF_NFFIM      |     |    |    | INT NN             |   
  -- SNF_IDF        |     |    |    | VC(20) NN          |   
  -- SNF_MODELO     |     |    |    | VC(5) NN           | 
  -- SNF_INDICE     |     |    |    | VC(12) NN          | Facilitador(SNF_ENTSAI+SNF_CODTD+SNF_CODFLL+SNF_ATIVO) Naum pode ter dois ativos  
  -- SNF_LIVRO      | CC  |    |    | VC(1) NN           | Se entra no livro fiscal     
  -- SNF_ENVIO      | CC  |    |    | VC(1) NN           | Se envia para [P]refeitura, [S]efaz ou [N]ao envia
  -- SNF_CODFLL     | SEL |    |    | INT NN             | Campo relacionado (FILIAL)   
  -- FLL_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (FILIAL)      
  -- SNF_CODEMP     | SEL |    |    | INT NN             | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (EMPRESA)     
  -- SNF_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- SNF_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- SNF_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D22         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  DECLARE @uiCodigoNew INTEGER = NULL;  -- Para verificar o campo SNF_INDICE
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @snfCodigoNew INTEGER;
  DECLARE @snfSerieNew VARCHAR(4);
  DECLARE @snfEntSaiNew VARCHAR(1);
  DECLARE @snfCodTdNew VARCHAR(3);
  DECLARE @tdNomeNew VARCHAR(20);
  DECLARE @snfInformarNfNew VARCHAR(1);
  DECLARE @snfNfInicioNew INTEGER;
  DECLARE @snfNfFimNew INTEGER;
  DECLARE @snfIdfNew VARCHAR(20);
  DECLARE @snfModeloNew VARCHAR(5);
  DECLARE @snfIndiceNew VARCHAR(12);
  DECLARE @snfLivroNew VARCHAR(1);  
  DECLARE @snfEnvioNew VARCHAR(1);    
  DECLARE @snfCodFllNew INTEGER;
  DECLARE @fllApelidoNew VARCHAR(15);
  DECLARE @snfCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @snfAtivoNew VARCHAR(1);
  DECLARE @snfRegNew VARCHAR(1);
  DECLARE @snfCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD22New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @snfCodigoNew      = i.SNF_CODIGO
         ,@snfSerieNew      = dbo.fncTranslate(i.SNF_SERIE,4)
         ,@snfEntSaiNew     = UPPER(i.SNF_ENTSAI)
         ,@snfCodTdNew      = UPPER(i.SNF_CODTD)
         ,@tdNomeNew        = COALESCE(TD.TD_NOME,'ERRO')
         ,@snfInformarNfNew = UPPER(i.SNF_INFORMARNF)
         ,@snfNfInicioNew   = i.SNF_NFINICIO
         ,@snfNfFimNew      = i.SNF_NFFIM
         ,@snfIdfNew        = dbo.fncTranslate(i.SNF_IDF,20)
         ,@snfModeloNew     = dbo.fncTranslate(i.SNF_MODELO,5)
         ,@snfLivroNew      = UPPER(i.SNF_LIVRO)
         ,@snfEnvioNew      = UPPER(i.SNF_ENVIO)
         ,@snfCodFllNew     = i.SNF_CODFLL
         ,@fllApelidoNew    = COALESCE(FLL.FLL_APELIDO,'ERRO')
         ,@snfCodEmpNew     = i.SNF_CODEMP
         ,@empApelidoNew    = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@snfAtivoNew      = UPPER(i.SNF_ATIVO)
         ,@snfRegNew        = UPPER(i.SNF_REG)
         ,@snfCodUsrNew     = i.SNF_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD22New         = UP.UP_D22
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN TIPODOCUMENTO TD ON i.SNF_CODTD=TD.TD_CODIGO AND TD.TD_ATIVO='S'
    LEFT OUTER JOIN FILIAL FLL ON ((i.SNF_CODFLL=FLL.FLL_CODIGO) AND (FLL_ATIVO='S') AND (i.SNF_CODEMP=FLL.FLL_CODEMP))
    LEFT OUTER JOIN EMPRESA EMP ON i.SNF_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.SNF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    ---------------------------------------------------------------------------------------------------------------------------
    -- O CAMPO INDICE NAO PERMITE DOIS REGISTROS ATIVOS( SNF_ATIVO ) PARA OS CAMPOS (SNF_ENTSAI+SNF_CODTD+SNF_CODFLL+SNF_ATIVO)
    ---------------------------------------------------------------------------------------------------------------------------
    SET @snfIndiceNew=CONCAT(@snfEntSaiNew,@snfCodTdNew,CAST(@snfCodFllNew AS VARCHAR(5)),@snfAtivoNew);
    SELECT @uiCodigoNew=COALESCE(SNF_CODIGO,NULL) FROM SERIENF WHERE SNF_INDICE=@snfIndiceNew;
    IF( @uiCodigoNew IS NOT NULL )
      RAISERROR('JA EXISTE O TALONARIO CODIGO %i PARA ESTA FILIAL/TIPO DOCUMENTO',15,1,@uiCodigoNew);
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@snfCodUsrNew);
    IF( @tdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO DOCUMENTO %s PARA ESTE REGISTRO',15,1,@snfCodTdNew);
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@snfCodEmpNew);      
    IF( @fllApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FILIAL %i PARA ESTE REGISTRO',15,1,@snfCodFllNew);      
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD22New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 22 PARA INCLUIR NA TABELA SERIENF',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(SNF_CODIGO,0) FROM SERIENF WHERE SNF_NOME=@snfNomeNew;
    --IF( @uiCodigo <> 0 )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA SERIENF COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(SNF_NOME,'OK') FROM SERIENF WHERE SNF_CODIGO=@snfCodigoNew;
    --IF( @uiNome IS NOT NULL ) BEGIN
    --  IF( @uiNome <> 'OK' )
    --    RAISERROR('CODIGO JA CADASTRADO NA TABELA SERIENF %s',15,1,@uiNome);
    --END  
    ------------------------------------------------------------------
    -- NF tem que ter a logica inicial sempre menor ou igual a final
    ------------------------------------------------------------------
    IF( @snfNfInicioNew<@snfNfFimNew )
      RAISERROR('NF INICIAL %i NAO PODE SER MAIOR QUE A NF FINAL %i',15,1,@snfNfInicioNew,@snfNfFimNew);    
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @snfRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@snfRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.SERIENF( 
      SNF_SERIE
      ,SNF_ENTSAI
      ,SNF_CODTD
      ,SNF_INFORMARNF
      ,SNF_NFINICIO
      ,SNF_NFFIM
      ,SNF_IDF
      ,SNF_MODELO
      ,SNF_INDICE      
      ,SNF_LIVRO
      ,SNF_ENVIO
      ,SNF_CODFLL      
      ,SNF_CODEMP
      ,SNF_ATIVO
      ,SNF_REG
      ,SNF_CODUSR) VALUES(
      @snfSerieNew        -- SNF_SERIE
      ,@snfEntSaiNew      -- SNF_ENTSAI
      ,@snfCodTdNew       -- SNF_CODTD
      ,@snfInformarNfNew  -- SNF_INFORMARNF
      ,@snfNfInicioNew    -- SNF_NFINICIO
      ,@snfNfFimNew       -- SNF_NFFIM
      ,@snfIdfNew         -- SNF_IDF
      ,@snfModeloNew      -- SNF_MODELO
      ,@snfIndiceNew      -- SNF_INDICE
      ,@snfLivroNew       -- SNF_LIVRO
      ,@snfEnvioNew       -- SNF_ENVIO
      ,@snfCodFllNew      -- SNF_CODFLL
      ,@snfCodEmpNew      -- SNF_CODEMP
      ,@snfAtivoNew       -- SNF_ATIVO
      ,@snfRegNew         -- SNF_REG
      ,@snfCodUsrNew      -- SNF_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPSERIENF(
      SNF_ACAO
      ,SNF_CODIGO
      ,SNF_SERIE
      ,SNF_ENTSAI
      ,SNF_CODTD
      ,SNF_INFORMARNF
      ,SNF_NFINICIO
      ,SNF_NFFIM
      ,SNF_IDF
      ,SNF_MODELO
      ,SNF_INDICE      
      ,SNF_LIVRO
      ,SNF_ENVIO
      ,SNF_CODFLL      
      ,SNF_CODEMP
      ,SNF_ATIVO
      ,SNF_REG
      ,SNF_CODUSR) VALUES(
      'I'                       -- SNF_ACAO
      ,IDENT_CURRENT('SERIENF') -- SNF_CODIGO
      ,@snfSerieNew             -- SNF_SERIE
      ,@snfEntSaiNew            -- SNF_ENTSAI
      ,@snfCodTdNew             -- SNF_CODTD
      ,@snfInformarNfNew        -- SNF_INFORMARNF
      ,@snfNfInicioNew          -- SNF_NFINICIO
      ,@snfNfFimNew             -- SNF_NFFIM
      ,@snfIdfNew               -- SNF_IDF
      ,@snfModeloNew            -- SNF_MODELO
      ,@snfIndiceNew            -- SNF_INDICE
      ,@snfLivroNew             -- SNF_LIVRO
      ,@snfEnvioNew             -- SNF_ENVIO
      ,@snfCodFllNew            -- SNF_CODFLL      
      ,@snfCodEmpNew            -- SNF_CODEMP
      ,@snfAtivoNew             -- SNF_ATIVO
      ,@snfRegNew               -- SNF_REG
      ,@snfCodUsrNew            -- SNF_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewSERIENF_BU ON dbo.VSERIENF
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigoNew INTEGER = NULL;  -- Para procurar unique index SNF_INDICE
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @snfCodigoNew INTEGER;
  DECLARE @snfSerieNew VARCHAR(4);
  DECLARE @snfEntSaiNew VARCHAR(1);
  DECLARE @snfCodTdNew VARCHAR(3);
  DECLARE @tdNomeNew VARCHAR(20);
  DECLARE @snfInformarNfNew VARCHAR(1);
  DECLARE @snfNfInicioNew INTEGER;
  DECLARE @snfNfFimNew INTEGER;
  DECLARE @snfIdfNew VARCHAR(20);
  DECLARE @snfModeloNew VARCHAR(5);
  DECLARE @snfIndiceNew VARCHAR(12);
  DECLARE @snfLivroNew VARCHAR(1);  
  DECLARE @snfEnvioNew VARCHAR(1);    
  DECLARE @snfCodFllNew INTEGER;
  DECLARE @fllApelidoNew VARCHAR(15);
  DECLARE @snfCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @snfAtivoNew VARCHAR(1);
  DECLARE @snfRegNew VARCHAR(1);
  DECLARE @snfCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD22New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @snfCodigoNew      = i.SNF_CODIGO
         ,@snfSerieNew      = dbo.fncTranslate(i.SNF_SERIE,4)
         ,@snfEntSaiNew     = UPPER(i.SNF_ENTSAI)
         ,@snfCodTdNew      = UPPER(i.SNF_CODTD)
         ,@tdNomeNew        = COALESCE(TD.TD_NOME,'ERRO')
         ,@snfInformarNfNew = UPPER(i.SNF_INFORMARNF)
         ,@snfNfInicioNew   = i.SNF_NFINICIO
         ,@snfNfFimNew      = i.SNF_NFFIM
         ,@snfIdfNew        = dbo.fncTranslate(i.SNF_IDF,20)
         ,@snfModeloNew     = dbo.fncTranslate(i.SNF_MODELO,5)
         ,@snfLivroNew      = UPPER(i.SNF_LIVRO)
         ,@snfEnvioNew      = UPPER(i.SNF_ENVIO)
         ,@snfCodFllNew     = i.SNF_CODFLL
         ,@fllApelidoNew    = COALESCE(FLL.FLL_APELIDO,'ERRO')
         ,@snfCodEmpNew     = i.SNF_CODEMP
         ,@empApelidoNew    = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@snfAtivoNew      = UPPER(i.SNF_ATIVO)
         ,@snfRegNew        = UPPER(i.SNF_REG)
         ,@snfCodUsrNew     = i.SNF_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD22New         = UP.UP_D22
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN TIPODOCUMENTO TD ON i.SNF_CODTD=TD.TD_CODIGO AND TD.TD_ATIVO='S'        
    LEFT OUTER JOIN FILIAL FLL ON ((i.SNF_CODFLL=FLL.FLL_CODIGO) AND (FLL_ATIVO='S') AND (i.SNF_CODEMP=FLL.FLL_CODEMP))    
    LEFT OUTER JOIN EMPRESA EMP ON i.SNF_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.SNF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@snfCodUsrNew);
    IF( @tdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO DOCUMENTO %s PARA ESTE REGISTRO',15,1,@snfCodTdNew);
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@snfCodEmpNew);      
    IF( @fllApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FILIAL %i PARA ESTE REGISTRO',15,1,@snfCodFllNew);      
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD22New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA SERIENF',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @snfCodigoOld INTEGER;
    DECLARE @snfSerieOld VARCHAR(4);
    DECLARE @snfEntSaiOld VARCHAR(1);
    DECLARE @snfCodTdOld VARCHAR(3);
    DECLARE @tdNomeOld VARCHAR(20);
    DECLARE @snfInformarNfOld VARCHAR(1);
    DECLARE @snfNfInicioOld INTEGER;
    DECLARE @snfNfFimOld INTEGER;
    DECLARE @snfIdfOld VARCHAR(20);
    DECLARE @snfModeloOld VARCHAR(5);
    DECLARE @snfLivroOld VARCHAR(1);  
    DECLARE @snfEnvioOld VARCHAR(1);    
    DECLARE @snfCodFllOld INTEGER;    
    DECLARE @snfCodEmpOld INTEGER;
    DECLARE @empApelidoOld VARCHAR(15);
    DECLARE @snfAtivoOld VARCHAR(1);
    DECLARE @snfRegOld VARCHAR(1);
    DECLARE @snfCodUsrOld INTEGER;
    
    SELECT @snfCodigoOld      = d.SNF_CODIGO
           ,@snfSerieOld      = d.SNF_SERIE
           ,@snfEntSaiOld     = d.SNF_ENTSAI
           ,@snfCodTdOld      = d.SNF_CODTD
           ,@snfInformarNfOld = d.SNF_INFORMARNF
           ,@snfNfInicioOld   = d.SNF_NFINICIO
           ,@snfNfFimOld      = d.SNF_NFFIM
           ,@snfIdfOld        = d.SNF_IDF
           ,@snfModeloOld     = d.SNF_MODELO
           ,@snfLivroOld      = d.SNF_LIVRO
           ,@snfEnvioOld      = d.SNF_ENVIO
           ,@snfCodFllOld     = d.SNF_CODFLL
           ,@snfCodEmpOld     = d.SNF_CODEMP
           ,@snfAtivoOld      = d.SNF_ATIVO
           ,@snfRegOld        = d.SNF_REG
           ,@snfCodUsrOld     = d.SNF_CODUSR         
      FROM SERIENF d WHERE d.SNF_CODIGO=@snfCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @snfCodigoOld<>@snfCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @snfCodEmpOld<>@snfCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    IF( @snfCodFllOld<>@snfCodFllNew )
      RAISERROR('CAMPO FILIAL NAO PODE SER ALTERADO',15,1); 
    IF( @snfEntSaiOld<>@snfEntSaiNew )
      RAISERROR('CAMPO ENTRADA_SAIDA NAO PODE SER ALTERADO',15,1); 
    IF( @snfSerieOld<>@snfSerieNew )  
      RAISERROR('CAMPO SERIE NAO PODE SER ALTERADO',15,1);     
    IF( @snfCodTdOld<>@snfCodTdNew )  
      RAISERROR('CAMPO TIPO_DOCTO NAO PODE SER ALTERADO',15,1);     
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @snfNomeOld<>@snfNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(SNF_CODIGO,0) FROM SERIENF WHERE SNF_NOME=@snfNomeNew;
    --  IF( @uiCodigo <> 0 )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA SERIENF COM CODIGO %i',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @snfRegOld <> @snfRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@snfRegOld,@snfRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END 
    ---------------------------------------------------------------------------------------------------------------------------
    -- O CAMPO INDICE NAO PERMITE DOIS REGISTROS ATIVOS( SNF_ATIVO ) PARA OS CAMPOS (SNF_ENTSAI+SNF_CODTD+SNF_CODFLL+SNF_ATIVO)
    -- AQUI SOH INTERESSA SE O CAMPO ATIVO ESTAVA 'N' E VIROU 'S'
    ---------------------------------------------------------------------------------------------------------------------------
    SET @snfIndiceNew=CONCAT(@snfEntSaiNew,@snfCodTdNew,CAST(@snfCodFllNew AS VARCHAR(5)),@snfAtivoNew);
    IF( (@snfAtivoOld<>@snfAtivoNew) AND (@snfAtivoNew='S') ) BEGIN
      SELECT @uiCodigoNew=COALESCE(SNF_CODIGO,NULL) FROM SERIENF WHERE SNF_INDICE=@snfIndiceNew;
      IF( @uiCodigoNew IS NOT NULL )
        RAISERROR('JA EXISTE O TALONARIO CODIGO %i PARA ESTA FILIAL/TIPO DOCUMENTO',15,1,@uiCodigoNew);
    END
    --  
    UPDATE dbo.SERIENF
       SET --SNF_SERIE       = @snfSerieNew
           --,SNF_ENTSAI     = @snfEntSaiNew
           --,SNF_CODTD      = @snfCodTdNew
           SNF_INFORMARNF  = @snfInformarNfNew
           ,SNF_NFINICIO   = @snfNfInicioNew
           ,SNF_NFFIM      = @snfNfFimNew
           ,SNF_IDF        = @snfIdfNew
           ,SNF_MODELO     = @snfModeloNew
           ,SNF_INDICE     = @snfIndiceNew
           ,SNF_LIVRO      = @snfLivroNew
           ,SNF_ENVIO      = @snfEnvioNew
           ,SNF_ATIVO      = @snfAtivoNew
           ,SNF_REG        = @snfRegNew
           ,SNF_CODUSR     = @snfCodUsrNew
    WHERE SNF_CODIGO=@snfCodigoNew;     
    -- Gravando LOG
    IF( (@snfSerieOld<>@snfSerieNew) OR (@snfEntSaiOld<>@snfEntSaiNew) OR (@snfCodTdOld<>@snfCodTdNew) OR (@snfInformarNfOld<>@snfInformarNfNew) 
     OR (@snfNfInicioOld<>@snfNfInicioNew) OR (@snfNfFimOld<>@snfNfFimNew) OR (@snfIdfOld<>@snfIdfNew) OR (@snfModeloOld<>@snfModeloNew) 
     OR (@snfLivroOld<>@snfLivroNew) OR (@snfEnvioOld<>@snfEnvioNew) OR (@snfAtivoOld<>@snfAtivoNew) OR (@snfRegOld<>@snfRegNew) ) BEGIN
      INSERT INTO dbo.BKPSERIENF(
        SNF_ACAO
        ,SNF_CODIGO
        ,SNF_SERIE
        ,SNF_ENTSAI
        ,SNF_CODTD
        ,SNF_INFORMARNF
        ,SNF_NFINICIO
        ,SNF_NFFIM
        ,SNF_IDF
        ,SNF_MODELO
        ,SNF_INDICE        
        ,SNF_LIVRO
        ,SNF_ENVIO
        ,SNF_CODFLL        
        ,SNF_CODEMP
        ,SNF_ATIVO
        ,SNF_REG
        ,SNF_CODUSR) VALUES(
        'A'                       -- SNF_ACAO
        ,@snfCodigoNew            -- SNF_CODIGO
        ,@snfSerieNew             -- SNF_SERIE
        ,@snfEntSaiNew            -- SNF_ENTSAI
        ,@snfCodTdNew             -- SNF_CODTD
        ,@snfInformarNfNew        -- SNF_INFORMARNF
        ,@snfNfInicioNew          -- SNF_NFINICIO
        ,@snfNfFimNew             -- SNF_NFFIM
        ,@snfIdfNew               -- SNF_IDF
        ,@snfModeloNew            -- SNF_MODELO
        ,@snfIndiceNew            -- SNF_INDICE
        ,@snfLivroNew             -- SNF_LIVRO
        ,@snfEnvioNew             -- SNF_ENVIO
        ,@snfCodFllNew            -- SNF_CODFLL        
        ,@snfCodEmpNew            -- SNF_CODEMP
        ,@snfAtivoNew             -- SNF_ATIVO
        ,@snfRegNew               -- SNF_REG
        ,@snfCodUsrNew            -- SNF_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewSERIENF_BD ON dbo.VSERIENF
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @snfCodigoOld INTEGER;
  DECLARE @snfSerieOld VARCHAR(4);
  DECLARE @snfEntSaiOld VARCHAR(1);
  DECLARE @snfCodTdOld VARCHAR(3);
  DECLARE @tdNomeOld VARCHAR(20);
  DECLARE @snfInformarNfOld VARCHAR(1);
  DECLARE @snfNfInicioOld INTEGER;
  DECLARE @snfNfFimOld INTEGER;
  DECLARE @snfIdfOld VARCHAR(20);
  DECLARE @snfModeloOld VARCHAR(5);
  DECLARE @snfIndiceOld VARCHAR(12);
  DECLARE @snfLivroOld VARCHAR(1);  
  DECLARE @snfEnvioOld VARCHAR(1);    
  DECLARE @snfCodFllOld INTEGER;      
  DECLARE @snfCodEmpOld INTEGER;
  DECLARE @empApelidoOld VARCHAR(15);
  DECLARE @snfAtivoOld VARCHAR(1);
  DECLARE @snfRegOld VARCHAR(1);
  DECLARE @snfCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD22Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @snfCodigoOld      = d.SNF_CODIGO
         ,@snfSerieOld      = d.SNF_SERIE
         ,@snfEntSaiOld     = d.SNF_ENTSAI
         ,@snfCodTdOld      = d.SNF_CODTD
         ,@snfInformarNfOld = d.SNF_INFORMARNF
         ,@snfNfInicioOld   = d.SNF_NFINICIO
         ,@snfNfFimOld      = d.SNF_NFFIM
         ,@snfIdfOld        = d.SNF_IDF
         ,@snfModeloOld     = d.SNF_MODELO
         ,@snfIndiceOld     = d.SNF_INDICE
         ,@snfLivroOld      = d.SNF_LIVRO
         ,@snfEnvioOld      = d.SNF_ENVIO
         ,@snfCodFllOld     = d.SNF_CODFLL
         ,@snfCodEmpOld     = d.SNF_CODEMP
         ,@snfAtivoOld      = d.SNF_ATIVO
         ,@snfRegOld        = d.SNF_REG
         ,@snfCodUsrOld     = d.SNF_CODUSR         
         ,@usrApelidoOld    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD22Old         = UP.UP_D22
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.SNF_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@snfCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD22Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 22 PARA EXCLUIR NA TABELA SERIENF',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@snfRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@snfCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('SERIENF UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@snfCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('SERIENF UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.SERIENF WHERE SNF_CODIGO=@snfCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPSERIENF(
      SNF_ACAO
      ,SNF_CODIGO
      ,SNF_SERIE
      ,SNF_ENTSAI
      ,SNF_CODTD
      ,SNF_INFORMARNF
      ,SNF_NFINICIO
      ,SNF_NFFIM
      ,SNF_IDF
      ,SNF_MODELO
      ,SNF_INDICE      
      ,SNF_LIVRO
      ,SNF_ENVIO
      ,SNF_CODFLL      
      ,SNF_CODEMP
      ,SNF_ATIVO
      ,SNF_REG
      ,SNF_CODUSR) VALUES(
      'E'                       -- SNF_ACAO
      ,@snfCodigoOld            -- SNF_CODIGO
      ,@snfSerieOld             -- SNF_SERIE
      ,@snfEntSaiOld            -- SNF_ENTSAI
      ,@snfCodTdOld             -- SNF_CODTD
      ,@snfInformarNfOld        -- SNF_INFORMARNF
      ,@snfNfInicioOld          -- SNF_NFINICIO
      ,@snfNfFimOld             -- SNF_NFFIM
      ,@snfIdfOld               -- SNF_IDF
      ,@snfModeloOld            -- SNF_MODELO
      ,@snfIndiceOld            -- SNF_INDICE
      ,@snfLivroOld             -- SNF_LIVRO
      ,@snfEnvioOld             -- SNF_ENVIO
      ,@snfCodFllOld            -- SNF_CODFLL      
      ,@snfCodEmpOld            -- SNF_CODEMP
      ,@snfAtivoOld             -- SNF_ATIVO
      ,@snfRegOld               -- SNF_REG
      ,@snfCodUsrOld            -- SNF_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPSERIENF_BUD ON dbo.BKPSERIENF
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                             S E R V I C O
--trgservico
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewSERVICO_BI ON dbo.VSERVICO
INSTEAD OF INSERT 
AS
BEGIN
  -- -----------------|-----|----|----|------------------|----------------------------------------------------------   
  -- CAMPO            |INS  |UPD |DEL | TIPO             | Obs
  -- -----------------|-----|----|----|------------------|----------------------------------------------------------
  -- SRV_CODIGO       | PK  |    |    | INT              |  Auto incremento
  -- SRV_NOME         |     |    |    | VC(60) NN        |
  -- SRV_ENTSAI       | CC  |    |    | VC(1) NN         |    
  -- SRV_INSS         | CC  |    |    | VC(1) NN         |      
  -- SRV_INSSALIQ     |     |    |    | NUM(6,2) NN      |   
  -- SRV_INSSBASECALC |     |    |    | NUM(6,2) NN      |   
  -- SRV_IRRF         | CC  |    |    | VC(1) NN         |      
  -- SRV_IRRFALIQ     |     |    |    | NUM(6,2) NN      |   
  -- SRV_PIS          | CC  |    |    | VC(1) NN         |      
  -- SRV_PISALIQ      |     |    |    | NUM(6,2) NN      |      
  -- SRV_COFINS       | CC  |    |    | VC(1) NN         |      
  -- SRV_COFINSALIQ   |     |    |    | NUM(6,2) NN      |      
  -- SRV_CSLL         | CC  |    |    | VC(1) NN         |      
  -- SRV_CSLLALIQ     |     |    |    | NUM(6,2) NN      |      
  -- SRV_ISS          | CC  |    |    | VC(1) NN         |      
  -- SRV_CODCC        | SEL |    |    | VC(15) NN        | Campo relacionado (CONTAGERENCIAL)
  -- CC_NOME          | SEL |    |    | VC(40) NN        | Campo relacionado (CONTAGERENCIAL)   
  -- SRV_CODSPR       | SEL |    |    | VC(10) NN        | Campo relacionado (SERVICOPREFEITURA)
  -- SPR_NOME         | SEL |    |    | VC(60) NN        | Campo relacionado (SERVICOPREFEITURA)   
  -- SRV_CODPRD       |     |    |    | VC(15)           | Codigo do produto se existir
  -- SRV_CODEMP       | SEL |    |    | INT NN           | Campo relacionado (EMPRESA)  
  -- EMP_APELIDO      | SEL |    |    | VC(15) NN        | Campo relacionado (EMPRESA)     
  -- SRV_PODEVENDA    | CC  |    |    | VC(1) NN         | S|N     Se pode entrar no pedido quando este for venda/locacao
  -- SRV_PODELOCACAO  | CC  |    |    | VC(1) NN         | S|N     Se pode entrar no pedido quando este for venda/locacao  
  -- SRV_ATIVO        | CC  |    |    | VC(1) NN         | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- SRV_REG          | FNC |    |    | VC(1) NN         | P|A|S   P=Publico  A=Administrador S=Sistema
  -- SRV_CODUSR       | OK  |    |    | INT NN           | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO      | SEL |    |    | VC(15) NN        | Campo relacionado (USUARIO)
  -- USR_ADMPUB       | SEL |    |    | VC(1) NN         | Retornar se o usuario eh PUB/ADM
  -- UP_D04           | SEL |    |    | INT NN           | Recupera o direito de usuario para esta tabela
  -- UP_D31           | SEL |    |    | INT NN           | Recupera o direito se pode transformar registro do sistema
  -- -----------------|-----|----|----|------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @uiNome VARCHAR(40) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @srvCodigoNew INTEGER;
  DECLARE @srvNomeNew VARCHAR(40);
  DECLARE @srvEntSaiNew VARCHAR(1);
  DECLARE @srvInssNew VARCHAR(1);
  DECLARE @srvInssAliqNew NUMERIC(6,2);
  DECLARE @srvInssBaseCalcNew NUMERIC(6,2);
  DECLARE @srvIrrfNew VARCHAR(1);
  DECLARE @srvIrrfAliqNew NUMERIC(6,2);
  DECLARE @srvPisNew VARCHAR(1);
  DECLARE @srvPisAliqNew NUMERIC(6,2);
  DECLARE @srvCofinsNew VARCHAR(1);
  DECLARE @srvCofinsAliqNew NUMERIC(6,2);
  DECLARE @srvCsllNew VARCHAR(1);
  DECLARE @srvCsllAliqNew NUMERIC(6,2);
  DECLARE @srvIssNew VARCHAR(1);
  DECLARE @srvCodCcNew VARCHAR(15);
  DECLARE @ccNomeNew VARCHAR(40);
  DECLARE @srvCodSprNew VARCHAR(10);
  DECLARE @sprNomeNew VARCHAR(60);
  --DECLARE @srvCodPrdNew VARCHAR(15);
  DECLARE @srvCodEmpNew  INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @srvPodeVendaNew VARCHAR(1);  
  DECLARE @srvPodeLocacaoNew VARCHAR(1);    
  DECLARE @srvAtivoNew VARCHAR(1);
  DECLARE @srvRegNew VARCHAR(1);
  DECLARE @srvCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD04New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @srvCodigoNew        = i.SRV_CODIGO
         ,@srvNomeNew         = dbo.fncTranslate(i.SRV_NOME,40)
         ,@srvEntSaiNew       = UPPER(i.SRV_ENTSAI)
         ,@srvInssNew         = UPPER(i.SRV_INSS)
         ,@srvInssAliqNew     = i.SRV_INSSALIQ
         ,@srvInssBaseCalcNew = i.SRV_INSSBASECALC
         ,@srvIrrfNew         = UPPER(i.SRV_IRRF)
         ,@srvIrrfAliqNew     = i.SRV_IRRFALIQ
         ,@srvPisNew          = UPPER(i.SRV_PIS)
         ,@srvPisAliqNew      = i.SRV_PISALIQ
         ,@srvCofinsNew       = UPPER(i.SRV_COFINS)
         ,@srvCofinsAliqNew   = i.SRV_COFINSALIQ
         ,@srvCsllNew         = UPPER(i.SRV_CSLL)
         ,@srvCsllAliqNew     = i.SRV_CSLLALIQ
         ,@srvIssNew          = UPPER(i.SRV_ISS)
         ,@srvCodSprNew       = dbo.fncTranslate(i.SRV_CODSPR,10)
         ,@sprNomeNew         = COALESCE(SPR.SPR_NOME,'ERRO')
         --,@srvCodPrdNew       = dbo.fncTranslate(i.SRV_CODPRD,15)
         ,@srvCodEmpNew       = i.SRV_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@srvPodeVendaNew    = UPPER(i.SRV_PODEVENDA)
         ,@srvPodeLocacaoNew  = UPPER(i.SRV_PODELOCACAO)
         ,@srvAtivoNew        = UPPER(i.SRV_ATIVO)
         ,@srvRegNew          = UPPER(i.SRV_REG)
         ,@srvCodUsrNew       = i.SRV_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD04New           = UP.UP_D04
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.SRV_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'        
    LEFT OUTER JOIN SERVICOPREFEITURA SPR ON i.SRV_CODSPR=SPR.SPR_CODIGO AND SPR.SPR_ATIVO='S'        
    LEFT OUTER JOIN USUARIO USR ON i.SRV_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@srvCodUsrNew);
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@srvCodEmpNew);      
    IF( @sprNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO SERVICO PREFEITURA %s PARA ESTE REGISTRO',15,1,@srvCodSprNew);      
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD04New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 04 PARA INCLUIR NA TABELA SERVICO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(SRV_CODIGO,0) FROM SERVICO WHERE SRV_NOME=@srvNomeNew;
    IF( @uiCodigo <> 0 )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA SERVICO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(SRV_NOME,'OK') FROM SERVICO WHERE SRV_CODIGO=@srvCodigoNew;
    --IF( @uiNome IS NOT NULL ) BEGIN
    --  IF( @uiNome <> 'OK' )
    --    RAISERROR('CODIGO JA CADASTRADO NA TABELA SERVICO %s',15,1,@uiNome);
    --END  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @srvRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@srvRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END 
    -----------------------------------------------------------------
    --  Aqui vou cadastrar a conta contabil para servico
    -----------------------------------------------------------------
    DECLARE @seekConta VARCHAR(15)= NULL;
    DECLARE @intConta INTEGER     = 2;
    WHILE( @intConta<9999 ) BEGIN
      SET @srvCodCcNew = CONCAT('5.01.01.01.',RIGHT('0000' + CAST(@intConta AS VARCHAR(4)),4));
      SET @seekConta   = NULL;
      SELECT @seekConta=COALESCE(CC_CODIGO,NULL) FROM CONTACONTABIL WHERE CC_CODIGO=@srvCodCcNew;
      IF( @seekConta IS NULL ) BEGIN
        SET @ccNomeNew=SUBSTRING(@srvNomeNew,1,40);
        INSERT INTO CONTACONTABIL(
          CC_CODIGO
          ,CC_NOME
          ,CC_LANCTO
          ,CC_CODCTR
          ,CC_F10          
          ,CC_ATIVO
          ,CC_REG
          ,CC_CODUSR) VALUES(
          @srvCodCcNew          -- CC_CODIGO
          ,@ccNomeNew           -- CC_NOME
          ,'S'                  -- CC_LANCTO
          ,'5.01.0001'          -- CC_CODCTR
          ,'N'                  -- CC_F10          
          ,'S'                  -- CC_ATIVO
          ,'P'                  -- CC_REG
          ,@srvCodUsrNew        -- CC_CODUSR
        );
        -- Gravando LOG
        INSERT INTO dbo.BKPCONTACONTABIL(
          CC_ACAO
          ,CC_CODIGO
          ,CC_NOME
          ,CC_LANCTO
          ,CC_CODCTR
          ,CC_F10          
          ,CC_ATIVO
          ,CC_REG
          ,CC_CODUSR) VALUES(
          'I'                      -- CC_ACAO
          ,@srvCodCcNew            -- CC_CODIGO
          ,@ccNomeNew              -- CC_NOME
          ,'S'                     -- CC_LANCTO
          ,'5.01.0001'             -- CC_CODCTR
          ,'N'                     -- CC_F10          
          ,'S'                     -- CC_ATIVO
          ,'P'                     -- CC_REG
          ,@srvCodUsrNew           -- CC_CODUSR
        );  
        --
        --
        INSERT INTO BALANCO(
          BLN_CODIGO
          ,BLN_NOME
          ,BLN_CODSPD
          ,BLN_ATIVO
          ,BLN_REG
          ,BLN_CODUSR) VALUES(
          @srvCodCcNew      -- BLN_CODIGO        
          ,@ccNomeNew       -- BLN_NOME
          ,'**'             -- BLN_CODSPD
          ,'S'              -- BLN_ATIVO
          ,'P'              -- BLN_REG
          ,@srvCodUsrNew    -- BLN_CODUSR
        );
        -- Gravando LOG
        INSERT INTO dbo.BKPBALANCO(
          BLN_ACAO
          ,BLN_CODIGO
          ,BLN_NOME
          ,BLN_CODSPD      
          ,BLN_ATIVO
          ,BLN_REG
          ,BLN_CODUSR) VALUES(
          'I'                       -- BLN_ACAO
          ,@srvCodCcNew             -- BLN_CODIGO
          ,@ccNomeNew               -- BLN_NOME
          ,'**'                     -- BLN_CODSPD      
          ,'S'                      -- BLN_ATIVO
          ,'P'                      -- BLN_REG
          ,@srvCodUsrNew            -- BLN_CODUSR
        );  
        BREAK;
      END
      SET @intConta=(@intConta+1);  
    END
    --  
    --
    INSERT INTO dbo.SERVICO( 
      SRV_NOME
      ,SRV_ENTSAI
      ,SRV_INSS
      ,SRV_INSSALIQ
      ,SRV_INSSBASECALC
      ,SRV_IRRF
      ,SRV_IRRFALIQ
      ,SRV_PIS
      ,SRV_PISALIQ
      ,SRV_COFINS
      ,SRV_COFINSALIQ
      ,SRV_CSLL
      ,SRV_CSLLALIQ
      ,SRV_ISS
      ,SRV_CODCC
      ,SRV_CODSPR
      ,SRV_CODPRD
      ,SRV_CODEMP
      ,SRV_PODEVENDA
      ,SRV_PODELOCACAO
      ,SRV_ATIVO
      ,SRV_REG
      ,SRV_CODUSR) VALUES(
      @srvNomeNew           -- SRV_NOME
      ,@srvEntSaiNew        -- SRV_ENTSAI
      ,@srvInssNew          -- SRV_INSS
      ,@srvInssAliqNew      -- SRV_INSSALIQ
      ,@srvInssBaseCalcNew  -- SRV_INSSBASECALC
      ,@srvIrrfNew          -- SRV_IRRF
      ,@srvIrrfAliqNew      -- SRV_IRRFALIQ
      ,@srvPisNew           -- SRV_PIS
      ,@srvPisAliqNew       -- SRV_PISALIQ
      ,@srvCofinsNew        -- SRV_COFINS
      ,@srvCofinsAliqNew    -- SRV_COFINSALIQ
      ,@srvCsllNew          -- SRV_CSLL
      ,@srvCsllAliqNew      -- SRV_CSLLALIQ
      ,@srvIssNew           -- SRV_ISS
      ,@srvCodCcNew         -- SRV_CODCC
      ,@srvCodSprNew        -- SRV_CODSPR
      ,'NSA'                -- SRV_CODPRD
      ,@srvCodEmpNew        -- SRV_CODEMP
      ,@srvPodeVendaNew     -- SRV_PODEVENDA
      ,@srvPodeLocacaoNew   -- SRV_PODELOCACAO
      ,@srvAtivoNew         -- SRV_ATIVO
      ,@srvRegNew           -- SRV_REG
      ,@srvCodUsrNew        -- SRV_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPSERVICO(
      SRV_ACAO
      ,SRV_CODIGO
      ,SRV_NOME
      ,SRV_ENTSAI
      ,SRV_INSS
      ,SRV_INSSALIQ
      ,SRV_INSSBASECALC
      ,SRV_IRRF
      ,SRV_IRRFALIQ
      ,SRV_PIS
      ,SRV_PISALIQ
      ,SRV_COFINS
      ,SRV_COFINSALIQ
      ,SRV_CSLL
      ,SRV_CSLLALIQ
      ,SRV_ISS
      ,SRV_CODCC
      ,SRV_CODSPR
      ,SRV_CODPRD
      ,SRV_CODEMP
      ,SRV_PODEVENDA
      ,SRV_PODELOCACAO
      ,SRV_ATIVO
      ,SRV_REG
      ,SRV_CODUSR) VALUES(
      'I'                         -- SRV_ACAO
      ,IDENT_CURRENT('SERVICO')   -- SRV_CODIGO
      ,@srvNomeNew                -- SRV_NOME
      ,@srvEntSaiNew              -- SRV_ENTSAI
      ,@srvInssNew                -- SRV_INSS
      ,@srvInssAliqNew            -- SRV_INSSALIQ
      ,@srvInssBaseCalcNew        -- SRV_INSSBASECALC
      ,@srvIrrfNew                -- SRV_IRRF
      ,@srvIrrfAliqNew            -- SRV_IRRFALIQ
      ,@srvPisNew                 -- SRV_PIS
      ,@srvPisAliqNew             -- SRV_PISALIQ
      ,@srvCofinsNew              -- SRV_COFINS
      ,@srvCofinsAliqNew          -- SRV_COFINSALIQ
      ,@srvCsllNew                -- SRV_CSLL
      ,@srvCsllAliqNew            -- SRV_CSLLALIQ
      ,@srvIssNew                 -- SRV_ISS
      ,@srvCodCcNew               -- SRV_CODCC
      ,@srvCodSprNew              -- SRV_CODSPR
      ,'NSA'                      -- SRV_CODPRD
      ,@srvCodEmpNew              -- SRV_CODEMP
      ,@srvPodeVendaNew           -- SRV_PODEVENDA
      ,@srvPodeLocacaoNew         -- SRV_PODELOCACAO
      ,@srvAtivoNew               -- SRV_ATIVO
      ,@srvRegNew                 -- SRV_REG
      ,@srvCodUsrNew              -- SRV_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewSERVICO_BU ON dbo.VSERVICO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @srvCodigoNew INTEGER;
  DECLARE @srvNomeNew VARCHAR(40);
  DECLARE @srvEntSaiNew VARCHAR(1);
  DECLARE @srvInssNew VARCHAR(1);
  DECLARE @srvInssAliqNew NUMERIC(6,2);
  DECLARE @srvInssBaseCalcNew NUMERIC(6,2);
  DECLARE @srvIrrfNew VARCHAR(1);
  DECLARE @srvIrrfAliqNew NUMERIC(6,2);
  DECLARE @srvPisNew VARCHAR(1);
  DECLARE @srvPisAliqNew NUMERIC(6,2);
  DECLARE @srvCofinsNew VARCHAR(1);
  DECLARE @srvCofinsAliqNew NUMERIC(6,2);
  DECLARE @srvCsllNew VARCHAR(1);
  DECLARE @srvCsllAliqNew NUMERIC(6,2);
  DECLARE @srvIssNew VARCHAR(1);
  DECLARE @srvCodCcNew VARCHAR(15);
  DECLARE @srvCodSprNew VARCHAR(10);
  DECLARE @sprNomeNew VARCHAR(60);
  --DECLARE @srvCodPrdNew VARCHAR(15);
  DECLARE @srvCodEmpNew  INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @srvPodeVendaNew VARCHAR(1);  
  DECLARE @srvPodeLocacaoNew VARCHAR(1);    
  DECLARE @srvAtivoNew VARCHAR(1);
  DECLARE @srvRegNew VARCHAR(1);
  DECLARE @srvCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD04New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @srvCodigoNew        = i.SRV_CODIGO
         ,@srvNomeNew         = dbo.fncTranslate(i.SRV_NOME,40)
         ,@srvEntSaiNew       = UPPER(i.SRV_ENTSAI)
         ,@srvInssNew         = UPPER(i.SRV_INSS)
         ,@srvInssAliqNew     = i.SRV_INSSALIQ
         ,@srvInssBaseCalcNew = i.SRV_INSSBASECALC
         ,@srvIrrfNew         = UPPER(i.SRV_IRRF)
         ,@srvIrrfAliqNew     = i.SRV_IRRFALIQ
         ,@srvPisNew          = UPPER(i.SRV_PIS)
         ,@srvPisAliqNew      = i.SRV_PISALIQ
         ,@srvCofinsNew       = UPPER(i.SRV_COFINS)
         ,@srvCofinsAliqNew   = i.SRV_COFINSALIQ
         ,@srvCsllNew         = UPPER(i.SRV_CSLL)
         ,@srvCsllAliqNew     = i.SRV_CSLLALIQ
         ,@srvIssNew          = UPPER(i.SRV_ISS)
         ,@srvCodCcNew        = i.SRV_CODCC
         ,@srvCodSprNew       = dbo.fncTranslate(i.SRV_CODSPR,10)
         ,@sprNomeNew         = COALESCE(SPR.SPR_NOME,'ERRO')
         --,@srvCodPrdNew       = dbo.fncTranslate(i.SRV_CODPRD,15)
         ,@srvCodEmpNew       = i.SRV_CODEMP
         ,@empApelidoNew      = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@srvPodeVendaNew    = UPPER(i.SRV_PODEVENDA)
         ,@srvPodeLocacaoNew  = UPPER(i.SRV_PODELOCACAO)
         ,@srvAtivoNew        = UPPER(i.SRV_ATIVO)
         ,@srvRegNew          = UPPER(i.SRV_REG)
         ,@srvCodUsrNew       = i.SRV_CODUSR         
         ,@usrApelidoNew      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD04New           = UP.UP_D04
         ,@upD31New           = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN EMPRESA EMP ON i.SRV_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'        
    LEFT OUTER JOIN SERVICOPREFEITURA SPR ON i.SRV_CODSPR=SPR.SPR_CODIGO AND SPR.SPR_ATIVO='S'        
    LEFT OUTER JOIN USUARIO USR ON i.SRV_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@srvCodUsrNew);
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@srvCodEmpNew);      
    IF( @sprNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO SERVICO PREFEITURA %s PARA ESTE REGISTRO',15,1,@srvCodSprNew);      
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD04New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA SERVICO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @srvCodigoOld INTEGER;
    DECLARE @srvNomeOld VARCHAR(40);
    DECLARE @srvEntSaiOld VARCHAR(1);
    DECLARE @srvInssOld VARCHAR(1);
    DECLARE @srvInssAliqOld NUMERIC(6,2);
    DECLARE @srvInssBaseCalcOld NUMERIC(6,2);
    DECLARE @srvIrrfOld VARCHAR(1);
    DECLARE @srvIrrfAliqOld NUMERIC(6,2);
    DECLARE @srvPisOld VARCHAR(1);
    DECLARE @srvPisAliqOld NUMERIC(6,2);
    DECLARE @srvCofinsOld VARCHAR(1);
    DECLARE @srvCofinsAliqOld NUMERIC(6,2);
    DECLARE @srvCsllOld VARCHAR(1);
    DECLARE @srvCsllAliqOld NUMERIC(6,2);
    DECLARE @srvIssOld VARCHAR(1);
    DECLARE @srvCodCcOld VARCHAR(15);
    DECLARE @srvCodSprOld VARCHAR(10);
    --DECLARE @srvCodPrdOld VARCHAR(15);
    DECLARE @srvCodEmpOld  INTEGER;
    DECLARE @srvPodeVendaOld VARCHAR(1);  
    DECLARE @srvPodeLocacaoOld VARCHAR(1);    
    DECLARE @srvAtivoOld VARCHAR(1);
    DECLARE @srvRegOld VARCHAR(1);
    DECLARE @srvCodUsrOld INTEGER;
    
    SELECT @srvCodigoOld        = d.SRV_CODIGO
           ,@srvNomeOld         = d.SRV_NOME
           ,@srvEntSaiOld       = d.SRV_ENTSAI
           ,@srvInssOld         = d.SRV_INSS
           ,@srvInssAliqOld     = d.SRV_INSSALIQ
           ,@srvInssBaseCalcOld = d.SRV_INSSBASECALC
           ,@srvIrrfOld         = d.SRV_IRRF
           ,@srvIrrfAliqOld     = d.SRV_IRRFALIQ
           ,@srvPisOld          = d.SRV_PIS
           ,@srvPisAliqOld      = d.SRV_PISALIQ
           ,@srvCofinsOld       = d.SRV_COFINS
           ,@srvCofinsAliqOld   = d.SRV_COFINSALIQ
           ,@srvCsllOld         = d.SRV_CSLL
           ,@srvCsllAliqOld     = d.SRV_CSLLALIQ
           ,@srvIssOld          = d.SRV_ISS
           ,@srvCodCcOld        = d.SRV_CODCC
           ,@srvCodSprOld       = d.SRV_CODSPR
           --,@srvCodPrdOld       = d.SRV_CODPRD
           ,@srvCodEmpOld       = d.SRV_CODEMP
           ,@srvPodeVendaOld    = d.SRV_PODEVENDA
           ,@srvPodeLocacaoOld  = d.SRV_PODELOCACAO
           ,@srvAtivoOld        = d.SRV_ATIVO
           ,@srvRegOld          = d.SRV_REG
           ,@srvCodUsrOld       = d.SRV_CODUSR         
      FROM SERVICO d WHERE d.SRV_CODIGO=@srvCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @srvCodigoOld<>@srvCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @srvCodEmpOld<>@srvCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    IF( @srvCodCcOld<>@srvCodCcNew )
      RAISERROR('CAMPO CONTABIL NAO PODE SER ALTERADO',15,1);  
      
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @srvNomeOld<>@srvNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(SRV_CODIGO,0) FROM SERVICO WHERE SRV_NOME=@srvNomeNew;
      IF( @uiCodigo <> 0 )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA SERVICO COM CODIGO %i',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @srvRegOld <> @srvRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@srvRegOld,@srvRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.SERVICO
       SET SRV_NOME          = @srvNomeNew
           ,SRV_ENTSAI       = @srvEntSaiNew
           ,SRV_INSS         = @srvInssNew
           ,SRV_INSSALIQ     = @srvInssAliqNew
           ,SRV_INSSBASECALC = @srvInssBaseCalcNew
           ,SRV_IRRF         = @srvIrrfNew
           ,SRV_IRRFALIQ     = @srvIrrfAliqNew
           ,SRV_PIS          = @srvPisNew
           ,SRV_PISALIQ      = @srvPisAliqNew
           ,SRV_COFINS       = @srvCofinsNew
           ,SRV_COFINSALIQ   = @srvCofinsAliqNew
           ,SRV_CSLL         = @srvCsllNew
           ,SRV_CSLLALIQ     = @srvCsllAliqNew
           ,SRV_ISS          = @srvIssNew
           ,SRV_CODSPR       = @srvCodSprNew
           --,SRV_CODPRD       = @srvCodPrdNew
           ,SRV_ATIVO        = @srvAtivoNew
           ,SRV_PODEVENDA    = @srvPodeVendaNew  
           ,SRV_PODELOCACAO  = @srvPodeLocacaoNew
           ,SRV_REG          = @srvRegNew
           ,SRV_CODUSR       = @srvCodUsrNew
    WHERE SRV_CODIGO=@srvCodigoNew;     
    -- Gravando LOG
    IF( (@srvNomeOld<>@srvNomeNew) OR (@srvEntSaiOld<>@srvEntSaiNew) OR (@srvInssOld<>@srvInssNew) OR (@srvInssAliqOld<>@srvInssAliqNew) 
     OR (@srvInssBaseCalcOld<>@srvInssBaseCalcNew) OR (@srvIrrfOld<>@srvIrrfNew) OR (@srvIrrfAliqOld<>@srvIrrfAliqNew) 
     OR (@srvPisOld<>@srvPisNew) OR (@srvPisAliqOld<>@srvPisAliqNew) OR (@srvCofinsOld<>@srvCofinsNew) OR (@srvCofinsAliqOld<>@srvCofinsAliqNew) 
     OR (@srvCsllOld<>@srvCsllNew) OR (@srvCsllAliqOld<>@srvCsllAliqNew) OR (@srvIssOld<>@srvIssNew) OR (@srvCodSprOld<>@srvCodSprNew) 
     OR (@srvPodeVendaOld<>@srvPodeVendaNew) OR (@srvPodeLocacaoOld<>@srvPodeLocacaoNew)
     OR (@srvAtivoOld<>@srvAtivoNew) OR (@srvRegOld<>@srvRegNew) ) BEGIN
      INSERT INTO dbo.BKPSERVICO(
        SRV_ACAO
        ,SRV_CODIGO
        ,SRV_NOME
        ,SRV_ENTSAI
        ,SRV_INSS
        ,SRV_INSSALIQ
        ,SRV_INSSBASECALC
        ,SRV_IRRF
        ,SRV_IRRFALIQ
        ,SRV_PIS
        ,SRV_PISALIQ
        ,SRV_COFINS
        ,SRV_COFINSALIQ
        ,SRV_CSLL
        ,SRV_CSLLALIQ
        ,SRV_ISS
        ,SRV_CODCC
        ,SRV_CODSPR
        ,SRV_CODPRD
        ,SRV_CODEMP
        ,SRV_PODEVENDA
        ,SRV_PODELOCACAO
        ,SRV_ATIVO
        ,SRV_REG
        ,SRV_CODUSR) VALUES(
        'A'                         -- SRV_ACAO
        ,@srvCodigoNew              -- SRV_CODIGO
        ,@srvNomeNew                -- SRV_NOME
        ,@srvEntSaiNew              -- SRV_ENTSAI
        ,@srvInssNew                -- SRV_INSS
        ,@srvInssAliqNew            -- SRV_INSSALIQ
        ,@srvInssBaseCalcNew        -- SRV_INSSBASECALC
        ,@srvIrrfNew                -- SRV_IRRF
        ,@srvIrrfAliqNew            -- SRV_IRRFALIQ
        ,@srvPisNew                 -- SRV_PIS
        ,@srvPisAliqNew             -- SRV_PISALIQ
        ,@srvCofinsNew              -- SRV_COFINS
        ,@srvCofinsAliqNew          -- SRV_COFINSALIQ
        ,@srvCsllNew                -- SRV_CSLL
        ,@srvCsllAliqNew            -- SRV_CSLLALIQ
        ,@srvIssNew                 -- SRV_ISS
        ,@srvCodCcNew               -- SRV_CODCC
        ,@srvCodSprNew              -- SRV_CODSPR
        ,'NSA'                      -- SRV_CODPRD
        ,@srvCodEmpNew              -- SRV_CODEMP
        ,@srvPodeVendaNew           -- SRV_PODEVENDA
        ,@srvPodeLocacaoNew         -- SRV_PODELOCACAO
        ,@srvAtivoNew               -- SRV_ATIVO
        ,@srvRegNew                 -- SRV_REG
        ,@srvCodUsrNew              -- SRV_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewSERVICO_BD ON dbo.VSERVICO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @srvCodigoOld INTEGER;
  DECLARE @srvNomeOld VARCHAR(40);
  DECLARE @srvEntSaiOld VARCHAR(1);
  DECLARE @srvInssOld VARCHAR(1);
  DECLARE @srvInssAliqOld NUMERIC(6,2);
  DECLARE @srvInssBaseCalcOld NUMERIC(6,2);
  DECLARE @srvIrrfOld VARCHAR(1);
  DECLARE @srvIrrfAliqOld NUMERIC(6,2);
  DECLARE @srvPisOld VARCHAR(1);
  DECLARE @srvPisAliqOld NUMERIC(6,2);
  DECLARE @srvCofinsOld VARCHAR(1);
  DECLARE @srvCofinsAliqOld NUMERIC(6,2);
  DECLARE @srvCsllOld VARCHAR(1);
  DECLARE @srvCsllAliqOld NUMERIC(6,2);
  DECLARE @srvIssOld VARCHAR(1);
  DECLARE @srvCodCcOld VARCHAR(15);
  DECLARE @srvCodSprOld VARCHAR(10);
  --DECLARE @srvCodPrdOld VARCHAR(15);
  DECLARE @srvCodEmpOld  INTEGER;
  DECLARE @srvPodeVendaOld VARCHAR(1);  
  DECLARE @srvPodeLocacaoOld VARCHAR(1);    
  DECLARE @srvAtivoOld VARCHAR(1);
  DECLARE @srvRegOld VARCHAR(1);
  DECLARE @srvCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD04Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @srvCodigoOld        = d.SRV_CODIGO
         ,@srvNomeOld         = d.SRV_NOME
         ,@srvEntSaiOld       = d.SRV_ENTSAI
         ,@srvInssOld         = d.SRV_INSS
         ,@srvInssAliqOld     = d.SRV_INSSALIQ
         ,@srvInssBaseCalcOld = d.SRV_INSSBASECALC
         ,@srvIrrfOld         = d.SRV_IRRF
         ,@srvIrrfAliqOld     = d.SRV_IRRFALIQ
         ,@srvPisOld          = d.SRV_PIS
         ,@srvPisAliqOld      = d.SRV_PISALIQ
         ,@srvCofinsOld       = d.SRV_COFINS
         ,@srvCofinsAliqOld   = d.SRV_COFINSALIQ
         ,@srvCsllOld         = d.SRV_CSLL
         ,@srvCsllAliqOld     = d.SRV_CSLLALIQ
         ,@srvIssOld          = d.SRV_ISS
         ,@srvCodCcOld        = d.SRV_CODCC
         ,@srvCodSprOld       = d.SRV_CODSPR
         --,@srvCodPrdOld       = d.SRV_CODPRD
         ,@srvCodEmpOld       = d.SRV_CODEMP
         ,@srvPodeVendaOld    = d.SRV_PODEVENDA
         ,@srvPodeLocacaoOld  = d.SRV_PODELOCACAO
         ,@srvAtivoOld        = d.SRV_ATIVO
         ,@srvRegOld          = d.SRV_REG
         ,@srvCodUsrOld       = d.SRV_CODUSR         
         ,@usrApelidoOld      = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld       = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD04Old           = UP.UP_D04
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.SRV_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@srvCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD04Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 04 PARA EXCLUIR NA TABELA SERVICO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@srvRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@srvCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('SERVICO UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@srvCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('SERVICO UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.SERVICO WHERE SRV_CODIGO=@srvCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPSERVICO(
      SRV_ACAO
      ,SRV_CODIGO
      ,SRV_NOME
      ,SRV_ENTSAI
      ,SRV_INSS
      ,SRV_INSSALIQ
      ,SRV_INSSBASECALC
      ,SRV_IRRF
      ,SRV_IRRFALIQ
      ,SRV_PIS
      ,SRV_PISALIQ
      ,SRV_COFINS
      ,SRV_COFINSALIQ
      ,SRV_CSLL
      ,SRV_CSLLALIQ
      ,SRV_ISS
      ,SRV_CODCC
      ,SRV_CODSPR
      ,SRV_CODPRD
      ,SRV_CODEMP
      ,SRV_PODEVENDA
      ,SRV_PODELOCACAO
      ,SRV_ATIVO
      ,SRV_REG
      ,SRV_CODUSR) VALUES(
      'E'                         -- SRV_ACAO
      ,@srvCodigoOld              -- SRV_CODIGO
      ,@srvNomeOld                -- SRV_NOME
      ,@srvEntSaiOld              -- SRV_ENTSAI
      ,@srvInssOld                -- SRV_INSS
      ,@srvInssAliqOld            -- SRV_INSSALIQ
      ,@srvInssBaseCalcOld        -- SRV_INSSBASECALC
      ,@srvIrrfOld                -- SRV_IRRF
      ,@srvIrrfAliqOld            -- SRV_IRRFALIQ
      ,@srvPisOld                 -- SRV_PIS
      ,@srvPisAliqOld             -- SRV_PISALIQ
      ,@srvCofinsOld              -- SRV_COFINS
      ,@srvCofinsAliqOld          -- SRV_COFINSALIQ
      ,@srvCsllOld                -- SRV_CSLL
      ,@srvCsllAliqOld            -- SRV_CSLLALIQ
      ,@srvIssOld                 -- SRV_ISS
      ,@srvCodCcOld               -- SRV_CODCC
      ,@srvCodSprOld              -- SRV_CODSPR
      ,'NSA'                      -- SRV_CODPRD
      ,@srvCodEmpOld              -- SRV_CODEMP
      ,@srvPodeVendaOld           -- SRV_PODEVENDA
      ,@srvPodeLocacaoOld         -- SRV_PODELOCACAO
      ,@srvAtivoOld               -- SRV_ATIVO
      ,@srvRegOld                 -- SRV_REG
      ,@srvCodUsrOld              -- SRV_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPSERVICO_BUD ON dbo.BKPSERVICO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                       S E R V I C O P R E F E I T U R A                         --
--trgservicoprefeitura
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewSERVICOPREFEITURA_BI ON dbo.SERVICOPREFEITURA
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- SPR_CODIGO     | PK  |    |    | VC(10) NN          | Campo informado 
  -- SPR_CODCDD     | SEL |    |    | VC(7) NN           | Campo relacionado (CIDADE)   
  -- CDD_NOME       | SEL |    |    | VC(30) NN          | Campo relacionado (CIDADE)      
  -- SPR_NOME       |     |    |    | VC(60) NN          |
  -- SPR_CODFEDERAL |     |    |    | VC(10) NN          |
  -- SPR_ALIQUOTA   |     |    |    | NUM(6,2) NN        |
  -- SPR_RETIDO     | CC  |    |    | VC(1) NN           |      
  -- SPR_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- SPR_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- SPR_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D04         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(10) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(60)   = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70)  = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @sprCodigoNew VARCHAR(10);
  DECLARE @sprCodCddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @sprNomeNew VARCHAR(60);
  DECLARE @sprCodFederalNew VARCHAR(10);  
  DECLARE @sprAliquotaNew NUMERIC(6,2);  
  DECLARE @sprRetidoNew VARCHAR(1);  
  DECLARE @sprAtivoNew VARCHAR(1);
  DECLARE @sprRegNew VARCHAR(1);
  DECLARE @sprCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD04New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @sprCodigoNew      = i.SPR_CODIGO
         ,@sprCodCddNew     = dbo.fncTranslate(i.SPR_CODCDD,7)
         ,@cddNomeNew       = COALESCE(CDD.CDD_NOME,'ERRO')
         ,@sprNomeNew       = dbo.fncTranslate(i.SPR_NOME,60)
         ,@sprCodFederalNew = dbo.fncTranslate(i.SPR_CODFEDERAL,10)
         ,@sprAliquotaNew   = i.SPR_ALIQUOTA
         ,@sprRetidoNew     = UPPER(i.SPR_RETIDO)
         ,@sprAtivoNew      = UPPER(i.SPR_ATIVO)
         ,@sprRegNew        = UPPER(i.SPR_REG)
         ,@sprCodUsrNew     = i.SPR_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD04New         = UP.UP_D04
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN CIDADE CDD ON i.SPR_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.SPR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@sprCodUsrNew);
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@sprCodCddNew);    
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD04New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 04 PARA INCLUIR NA TABELA SERVICOPREFEITURA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(SPR_CODIGO,'OK') FROM SERVICOPREFEITURA WHERE SPR_NOME=@sprNomeNew;
    --IF( @uiCodigo <> 'OK' )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA SERVICOPREFEITURA COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(SPR_NOME,'OK') FROM SERVICOPREFEITURA WHERE SPR_CODIGO=@sprCodigoNew AND SPR_CODCDD=@sprCodCddNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA SERVICOPREFEITURA %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @sprRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@sprRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.SERVICOPREFEITURA( 
      SPR_CODIGO
      ,SPR_CODCDD      
      ,SPR_NOME
      ,SPR_CODFEDERAL
      ,SPR_ALIQUOTA
      ,SPR_RETIDO
      ,SPR_ATIVO
      ,SPR_REG
      ,SPR_CODUSR) VALUES(
      @sprCodigoNew       -- SPR_CODIGO
      ,@sprCodCddNew      -- SPR_CODCDD
      ,@sprNomeNew        -- SPR_NOME
      ,@sprCodFederalNew  -- SPR_CODFEDERAL
      ,@sprAliquotaNew    -- SPR_ALIQUOTA
      ,@sprRetidoNew      -- SPR_RETIDO
      ,@sprAtivoNew       -- SPR_ATIVO
      ,@sprRegNew         -- SPR_REG
      ,@sprCodUsrNew      -- SPR_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPSERVICOPREFEITURA(
      SPR_ACAO
      ,SPR_CODIGO
      ,SPR_CODCDD      
      ,SPR_NOME
      ,SPR_CODFEDERAL
      ,SPR_ALIQUOTA
      ,SPR_RETIDO
      ,SPR_ATIVO
      ,SPR_REG
      ,SPR_CODUSR) VALUES(
      'I'                   -- SPR_ACAO
      ,@sprCodigoNew        -- SPR_CODIGO
      ,@sprCodCddNew        -- SPR_CODCDD      
      ,@sprNomeNew          -- SPR_NOME
      ,@sprCodFederalNew    -- SPR_CODFEDERAL
      ,@sprAliquotaNew      -- SPR_ALIQUOTA
      ,@sprRetidoNew        -- SPR_RETIDO
      ,@sprAtivoNew         -- SPR_ATIVO
      ,@sprRegNew           -- SPR_REG
      ,@sprCodUsrNew        -- SPR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewSERVICOPREFEITURA_BU ON dbo.VSERVICOPREFEITURA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(10) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);           -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @sprCodigoNew VARCHAR(10);
  DECLARE @sprCodCddNew VARCHAR(7);
  DECLARE @cddNomeNew VARCHAR(30);
  DECLARE @sprNomeNew VARCHAR(60);
  DECLARE @sprCodFederalNew VARCHAR(10);  
  DECLARE @sprAliquotaNew NUMERIC(6,2);  
  DECLARE @sprRetidoNew VARCHAR(1);  
  DECLARE @sprAtivoNew VARCHAR(1);
  DECLARE @sprRegNew VARCHAR(1);
  DECLARE @sprCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD04New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @sprCodigoNew      = i.SPR_CODIGO
         ,@sprCodCddNew     = dbo.fncTranslate(i.SPR_CODCDD,7)
         ,@cddNomeNew       = COALESCE(CDD.CDD_NOME,'ERRO')
         ,@sprNomeNew       = dbo.fncTranslate(i.SPR_NOME,60)
         ,@sprCodFederalNew = dbo.fncTranslate(i.SPR_CODFEDERAL,10)
         ,@sprAliquotaNew   = i.SPR_ALIQUOTA
         ,@sprRetidoNew     = UPPER(i.SPR_RETIDO)
         ,@sprAtivoNew      = UPPER(i.SPR_ATIVO)
         ,@sprRegNew        = UPPER(i.SPR_REG)
         ,@sprCodUsrNew     = i.SPR_CODUSR         
         ,@usrApelidoNew    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD04New         = UP.UP_D04
         ,@upD31New         = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN CIDADE CDD ON i.SPR_CODCDD=CDD.CDD_CODIGO AND CDD.CDD_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.SPR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@sprCodUsrNew);
    IF( @cddNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CIDADE %s PARA ESTE REGISTRO',15,1,@sprCodCddNew);    
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD04New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 04 PARA ALTERAR NA TABELA SERVICOPREFEITURA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @sprCodigoOld VARCHAR(10);
    DECLARE @sprCodCddOld VARCHAR(7);
    DECLARE @sprNomeOld VARCHAR(60);
    DECLARE @sprCodFederalOld VARCHAR(10);  
    DECLARE @sprAliquotaOld NUMERIC(6,2);  
    DECLARE @sprRetidoOld VARCHAR(1);  
    DECLARE @sprAtivoOld VARCHAR(1);
    DECLARE @sprRegOld VARCHAR(1);
    DECLARE @sprCodUsrOld INTEGER;
    
    SELECT @sprCodigoOld      = d.SPR_CODIGO
           ,@sprCodCddOld     = d.SPR_CODCDD
           ,@sprNomeOld       = d.SPR_NOME
           ,@sprCodFederalOld = d.SPR_CODFEDERAL
           ,@sprAliquotaOld   = d.SPR_ALIQUOTA
           ,@sprRetidoOld     = d.SPR_RETIDO
           ,@sprAtivoOld      = d.SPR_ATIVO
           ,@sprRegOld        = d.SPR_REG
           ,@sprCodUsrOld     = d.SPR_CODUSR         
      FROM SERVICOPREFEITURA d WHERE (d.SPR_CODIGO=@sprCodigoNew) AND (d.SPR_CODCDD=@sprCodCddNew);  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @sprCodigoOld<>@sprCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @sprCodCddOld<>@sprCodCddNew )
      RAISERROR('CAMPO CIDADE NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @sprNomeOld<>@sprNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(SPR_CODIGO,'OK') FROM SERVICOPREFEITURA WHERE SPR_NOME=@sprNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA SERVICOPREFEITURA COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @sprRegOld <> @sprRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@sprRegOld,@sprRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.SERVICOPREFEITURA
       SET SPR_NOME       = @sprNomeNew
          ,SPR_CODFEDERAL = @sprCodFederalNew
          ,SPR_ALIQUOTA   = @sprAliquotaNew
          ,SPR_RETIDO     = @sprRetidoNew
          ,SPR_ATIVO      = @sprAtivoNew
          ,SPR_REG        = @sprRegNew
          ,SPR_CODUSR     = @sprCodUsrNew
    WHERE ((SPR_CODIGO=@sprCodigoNew) AND (SPR_CODCDD=@sprCodCddNew));     
    -- Gravando LOG
    IF( (@sprNomeOld<>@sprNomeNew) OR (@sprCodFederalOld<>@sprCodFederalNew) OR (@sprAliquotaOld<>@sprAliquotaNew) 
     OR (@sprRetidoOld<>@sprRetidoNew) OR (@sprAtivoOld<>@sprAtivoNew) OR (@sprRegOld<>@sprRegNew) ) BEGIN
      INSERT INTO dbo.BKPSERVICOPREFEITURA(
        SPR_ACAO
        ,SPR_CODIGO
        ,SPR_CODCDD      
        ,SPR_NOME
        ,SPR_CODFEDERAL
        ,SPR_ALIQUOTA
        ,SPR_RETIDO
        ,SPR_ATIVO
        ,SPR_REG
        ,SPR_CODUSR) VALUES(
        'A'                   -- SPR_ACAO
        ,@sprCodigoNew        -- SPR_CODIGO
        ,@sprCodCddNew        -- SPR_CODCDD      
        ,@sprNomeNew          -- SPR_NOME
        ,@sprCodFederalNew    -- SPR_CODFEDERAL
        ,@sprAliquotaNew      -- SPR_ALIQUOTA
        ,@sprRetidoNew        -- SPR_RETIDO
        ,@sprAtivoNew         -- SPR_ATIVO
        ,@sprRegNew           -- SPR_REG
        ,@sprCodUsrNew        -- SPR_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewSERVICOPREFEITURA_BD ON dbo.VSERVICOPREFEITURA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntSrv INTEGER = 0;  -- Para procurar campo foreign key int (SERVICO)
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @sprCodigoOld VARCHAR(10);
  DECLARE @sprCodCddOld VARCHAR(7);
  DECLARE @sprNomeOld VARCHAR(60);
  DECLARE @sprCodFederalOld VARCHAR(10);  
  DECLARE @sprAliquotaOld NUMERIC(6,2);  
  DECLARE @sprRetidoOld VARCHAR(1);  
  DECLARE @sprAtivoOld VARCHAR(1);
  DECLARE @sprRegOld VARCHAR(1);
  DECLARE @sprCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD04Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @sprCodigoOld      = d.SPR_CODIGO
         ,@sprCodCddOld     = d.SPR_CODCDD
         ,@sprNomeOld       = d.SPR_NOME
         ,@sprCodFederalOld = d.SPR_CODFEDERAL
         ,@sprAliquotaOld   = d.SPR_ALIQUOTA
         ,@sprRetidoOld     = d.SPR_RETIDO
         ,@sprAtivoOld      = d.SPR_ATIVO
         ,@sprRegOld        = d.SPR_REG
         ,@sprCodUsrOld     = d.SPR_CODUSR         
         ,@usrApelidoOld    = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld     = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD04Old         = UP.UP_D04
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.SPR_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@sprCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD04Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 04 PARA EXCLUIR NA TABELA SERVICOPREFEITURA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@sprRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK SRV_CODSPR(SERVICO)
    --------------------------------------
    SELECT TOP 1 @fkIntSrv=COALESCE(SRV_CODIGO,0) FROM SERVICO WHERE SRV_CODSPR=@sprCodigoOld;
    IF( @fkIntSrv > 0 )
      RAISERROR('SERVICOPREFEITURA UTILIZADO NO SERVICO %i',15,1,@fkIntSrv);
    --
    --
    DELETE FROM dbo.SERVICOPREFEITURA WHERE ((SPR_CODIGO=@sprCodigoOld) AND (SPR_CODCDD=@sprCodCddOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPSERVICOPREFEITURA(
      SPR_ACAO
      ,SPR_CODIGO
      ,SPR_CODCDD      
      ,SPR_NOME
      ,SPR_CODFEDERAL
      ,SPR_ALIQUOTA
      ,SPR_RETIDO
      ,SPR_ATIVO
      ,SPR_REG
      ,SPR_CODUSR) VALUES(
      'E'                   -- SPR_ACAO
      ,@sprCodigoOld        -- SPR_CODIGO
      ,@sprCodCddOld        -- SPR_CODCDD      
      ,@sprNomeOld          -- SPR_NOME
      ,@sprCodFederalOld    -- SPR_CODFEDERAL
      ,@sprAliquotaOld      -- SPR_ALIQUOTA
      ,@sprRetidoOld        -- SPR_RETIDO
      ,@sprAtivoOld         -- SPR_ATIVO
      ,@sprRegOld           -- SPR_REG
      ,@sprCodUsrOld        -- SPR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPSPR_BUD ON dbo.BKPSERVICOPREFEITURA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                           S P E D
-- trgsped
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewSPED_BI ON dbo.VSPED
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- SPD_CODIGO     | OK  |    |    | VC(3) NN PK        | Codigo informado pelo usuario
  -- SPD_NOME       | OK  |    |    | VC(20) NN          | 
  -- SPD_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- SPD_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
  -- SPD_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D12      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema   
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @spdCodigoNew VARCHAR(2);
  DECLARE @spdNomeNew VARCHAR(20);
  DECLARE @spdAtivoNew VARCHAR(1);
  DECLARE @spdRegNew VARCHAR(1);
  DECLARE @spdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD12New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @spdCodigoNew   = i.SPD_CODIGO
         ,@spdNomeNew    = dbo.fncTranslate(i.SPD_NOME,20)
         ,@spdAtivoNew   = UPPER(i.SPD_ATIVO)
         ,@spdRegNew     = UPPER(i.SPD_REG)
         ,@spdCodUsrNew  = i.SPD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD12New      = UP.UP_D12
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.SPD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@spdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD12New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 12 PARA INCLUIR NA TABELA SPED',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(SPD_CODIGO,'OK') FROM SPED WHERE SPD_NOME=@spdNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA SPED COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(SPD_NOME,'OK') FROM SPED WHERE SPD_CODIGO=@spdCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA SPED %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @spdRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@spdRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.SPED( 
      SPD_CODIGO
      ,SPD_NOME
      ,SPD_ATIVO
      ,SPD_REG
      ,SPD_CODUSR) VALUES(
      @spdCodigoNew   -- SPD_CODIGO
      ,@spdNomeNew    -- SPD_NOME
      ,@spdAtivoNew   -- SPD_ATIVO
      ,@spdRegNew     -- SPD_REG
      ,@spdCodUsrNew  -- SPD_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPSPED(
      SPD_ACAO
      ,SPD_CODIGO
      ,SPD_NOME
      ,SPD_ATIVO
      ,SPD_REG
      ,SPD_CODUSR) VALUES(
      'I'                       -- SPD_ACAO
      ,@spdCodigoNew            -- SPD_CODIGO
      ,@spdNomeNew              -- SPD_NOME
      ,@spdAtivoNew             -- SPD_ATIVO
      ,@spdRegNew               -- SPD_REG
      ,@spdCodUsrNew            -- SPD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewSPED_BU ON dbo.VSPED
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(2) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @spdCodigoNew VARCHAR(2);
  DECLARE @spdNomeNew VARCHAR(20);
  DECLARE @spdAtivoNew VARCHAR(1);
  DECLARE @spdRegNew VARCHAR(1);
  DECLARE @spdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD12New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @spdCodigoNew   = i.SPD_CODIGO
         ,@spdNomeNew    = dbo.fncTranslate(i.SPD_NOME,20)
         ,@spdAtivoNew   = UPPER(i.SPD_ATIVO)
         ,@spdRegNew     = UPPER(i.SPD_REG)
         ,@spdCodUsrNew  = i.SPD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD12New      = UP.UP_D12
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.SPD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@spdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD12New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 12 PARA ALTERAR NA TABELA SPED',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @spdCodigoOld VARCHAR(2);
    DECLARE @spdNomeOld VARCHAR(20);
    DECLARE @spdAtivoOld VARCHAR(1);
    DECLARE @spdRegOld VARCHAR(1);
    DECLARE @spdCodUsrOld INTEGER;
    SELECT @spdCodigoOld   = d.SPD_CODIGO
           ,@spdNomeOld    = d.SPD_NOME
           ,@spdAtivoOld   = d.SPD_ATIVO
           ,@spdRegOld     = d.SPD_REG
           ,@spdCodUsrOld  = d.SPD_CODUSR         
      FROM SPED d WHERE d.SPD_CODIGO=@spdCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @spdCodigoOld<>@spdCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @spdNomeOld<>@spdNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(SPD_CODIGO,'OK') FROM SPED WHERE SPD_NOME=@spdNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA SPED COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @spdRegOld <> @spdRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@spdRegOld,@spdRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.SPED
       SET SPD_NOME   = @spdNomeNew
          ,SPD_ATIVO  = @spdAtivoNew
          ,SPD_REG    = @spdRegNew
          ,SPD_CODUSR = @spdCodUsrNew
    WHERE SPD_CODIGO  = @spdCodigoNew;     
    -- Gravando LOG
    IF( (@spdNomeOld<>@spdNomeNew) OR (@spdAtivoOld<>@spdAtivoNew) OR (@spdRegOld<>@spdRegNew) ) BEGIN
      INSERT INTO dbo.BKPSPED(
        SPD_ACAO
        ,SPD_CODIGO
        ,SPD_NOME
        ,SPD_ATIVO
        ,SPD_REG
        ,SPD_CODUSR) VALUES(
        'A'             -- SPD_ACAO
        ,@spdCodigoNew  -- SPD_CODIGO
        ,@spdNomeNew    -- SPD_NOME
        ,@spdAtivoNew   -- SPD_ATIVO
        ,@spdRegNew     -- SPD_REG
        ,@spdCodUsrNew  -- SPD_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewSPED_BD ON dbo.VSPED
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0;         -- Para procurar campo foreign key int (USUARIO)
  DECLARE @fkStrBln VARCHAR(15) = 'OK';  -- Para procurar campo foreign key str (BALANCO) 
  DECLARE @erroOld VARCHAR(70);          -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @spdCodigoOld VARCHAR(2);
  DECLARE @spdNomeOld VARCHAR(20);
  DECLARE @spdAtivoOld VARCHAR(1);
  DECLARE @spdRegOld VARCHAR(1);
  DECLARE @spdCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD12Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @spdCodigoOld   = d.SPD_CODIGO
         ,@spdNomeOld    = d.SPD_NOME
         ,@spdAtivoOld   = d.SPD_ATIVO
         ,@spdRegOld     = d.SPD_REG
         ,@spdCodUsrOld  = d.SPD_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD12Old      = UP.UP_D12
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.SPD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@spdCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD12Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 12 PARA EXCLUIR NA TABELA SPED',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@spdRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK BLN_CODSPD(BALANCO)
    --------------------------------------
    SELECT TOP 1 @fkStrBln=COALESCE(BLN_CODIGO,'OK') FROM BALANCO WHERE BLN_CODSPD=@spdCodigoOld;
    IF( @fkStrBln <> 'OK' )
      RAISERROR('CODIGO UTILIZADO NA CONTA BALANCO %s',15,1,@fkStrBln);
    --
    DELETE FROM dbo.SPED WHERE SPD_CODIGO=@spdCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPSPED(
      SPD_ACAO
      ,SPD_CODIGO
      ,SPD_NOME
      ,SPD_ATIVO
      ,SPD_REG
      ,SPD_CODUSR) VALUES(
      'E'               -- SPD_ACAO
      ,@spdCodigoOld    -- SPD_CODIGO
      ,@spdNomeOld      -- SPD_NOME
      ,@spdAtivoOld     -- SPD_ATIVO
      ,@spdRegOld       -- SPD_REG
      ,@spdCodUsrOld    -- SPD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPSPED_BUD ON dbo.BKPSPED
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                         T I P O D O C U M E N T O                               --
--trgtipodocumento
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewTIPODOCUMENTO_BI ON dbo.VTIPODOCUMENTO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- TD_CODIGO      | PK  |    |    | VC(03) NN          |
  -- TD_NOME        |     |    |    | VC(20) NN          |
  -- TD_SERIENF     | CC  |    |    | VC(1) NN           | P|S|N   Informa na tabela de serienf se eh Produto/Servico/Nenhum
  -- TD_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- TD_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- TD_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D20         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @tdCodigoNew VARCHAR(3);
  DECLARE @tdNomeNew VARCHAR(20);
  DECLARE @tdSerieNfNew VARCHAR(1);  
  DECLARE @tdAtivoNew VARCHAR(1);
  DECLARE @tdRegNew VARCHAR(1);
  DECLARE @tdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD20New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @tdCodigoNew   = dbo.fncTranslate(i.TD_CODIGO,3)
         ,@tdNomeNew    = dbo.fncTranslate(i.TD_NOME,20)
         ,@tdSerieNfNew = UPPER(i.TD_SERIENF)
         ,@tdAtivoNew   = UPPER(i.TD_ATIVO)
         ,@tdRegNew     = UPPER(i.TD_REG)
         ,@tdCodUsrNew  = i.TD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20New      = UP.UP_D20
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.TD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@tdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD20New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA INCLUIR NA TABELA TIPODOCUMENTO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(TD_CODIGO,'OK') FROM TIPODOCUMENTO WHERE TD_NOME=@tdNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA TIPODOCUMENTO COM CODIGO %s',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(TD_NOME,'OK') FROM TIPODOCUMENTO WHERE TD_CODIGO=@tdCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA TIPODOCUMENTO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @tdRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@tdRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.TIPODOCUMENTO( 
      TD_CODIGO
      ,TD_NOME
      ,TD_SERIENF      
      ,TD_ATIVO
      ,TD_REG
      ,TD_CODUSR) VALUES(
      @tdCodigoNew   -- TD_CODIGO
      ,@tdNomeNew    -- TD_NOME
      ,@tdSerieNfNew -- TD_SERIENF
      ,@tdAtivoNew   -- TD_ATIVO
      ,@tdRegNew     -- TD_REG
      ,@tdCodUsrNew  -- TD_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPTIPODOCUMENTO(
      TD_ACAO
      ,TD_CODIGO
      ,TD_NOME
      ,TD_SERIENF
      ,TD_ATIVO
      ,TD_REG
      ,TD_CODUSR) VALUES(
      'I'                      -- TD_ACAO
      ,@tdCodigoNew            -- TD_CODIGO
      ,@tdNomeNew              -- TD_NOME
      ,@tdSerieNfNew           -- TD_SERIENF      
      ,@tdAtivoNew             -- TD_ATIVO
      ,@tdRegNew               -- TD_REG
      ,@tdCodUsrNew            -- TD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewTIPODOCUMENTO_BU ON dbo.VTIPODOCUMENTO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @tdCodigoNew VARCHAR(3);
  DECLARE @tdNomeNew VARCHAR(20);
  DECLARE @tdSerieNfNew VARCHAR(1);    
  DECLARE @tdAtivoNew VARCHAR(1);
  DECLARE @tdRegNew VARCHAR(1);
  DECLARE @tdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD20New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @tdCodigoNew   = i.TD_CODIGO
         ,@tdNomeNew    = dbo.fncTranslate(i.TD_NOME,20)
         ,@tdSerieNfNew = UPPER(i.TD_SERIENF)         
         ,@tdAtivoNew   = UPPER(i.TD_ATIVO)
         ,@tdRegNew     = UPPER(i.TD_REG)
         ,@tdCodUsrNew  = i.TD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20New      = UP.UP_D20
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.TD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@tdCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD20New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA ALTERAR NA TABELA TIPODOCUMENTO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @tdCodigoOld VARCHAR(3);
    DECLARE @tdNomeOld VARCHAR(20);
    DECLARE @tdSerieNfOld VARCHAR(1);      
    DECLARE @tdAtivoOld VARCHAR(1);
    DECLARE @tdRegOld VARCHAR(1);
    DECLARE @tdCodUsrOld INTEGER;
    SELECT @tdCodigoOld   = d.TD_CODIGO
           ,@tdNomeOld    = d.TD_NOME
           ,@tdSerieNfOld = d.TD_SERIENF
           ,@tdAtivoOld   = d.TD_ATIVO
           ,@tdRegOld     = d.TD_REG
           ,@tdCodUsrOld  = d.TD_CODUSR         
      FROM TIPODOCUMENTO d WHERE d.TD_CODIGO=@tdCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @tdCodigoOld<>@tdCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @tdNomeOld<>@tdNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(TD_CODIGO,'OK') FROM TIPODOCUMENTO WHERE TD_NOME=@tdNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA TIPODOCUMENTO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @tdRegOld <> @tdRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@tdRegOld,@tdRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.TIPODOCUMENTO
       SET TD_NOME    = @tdNomeNew
          ,TD_SERIENF = @tdSerieNfNew       
          ,TD_ATIVO   = @tdAtivoNew
          ,TD_REG     = @tdRegNew
          ,TD_CODUSR  = @tdCodUsrNew
    WHERE TD_CODIGO   = @tdCodigoNew;     
    -- Gravando LOG
    IF( (@tdNomeOld<>@tdNomeNew) OR (@tdSerieNfOld<>@tdSerieNfNew) OR (@tdAtivoOld<>@tdAtivoNew) OR (@tdRegOld<>@tdRegNew) ) BEGIN
      INSERT INTO dbo.BKPTIPODOCUMENTO(
        TD_ACAO
        ,TD_CODIGO
        ,TD_NOME
        ,TD_SERIENF        
        ,TD_ATIVO
        ,TD_REG
        ,TD_CODUSR) VALUES(
        'A'            -- TD_ACAO
        ,@tdCodigoNew  -- TD_CODIGO
        ,@tdNomeNew    -- TD_NOME
        ,@tdSerieNfNew -- TD_SERIENF
        ,@tdAtivoNew   -- TD_ATIVO
        ,@tdRegNew     -- TD_REG
        ,@tdCodUsrNew  -- TD_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewTIPODOCUMENTO_BD ON dbo.VTIPODOCUMENTO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntPt INTEGER = 0;   -- Para procurar campo foreign key int (PADRAOTITULO)
  DECLARE @fkIntSnf INTEGER = 0;  -- Para procurar campo foreign key int (SERIENF) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @tdCodigoOld VARCHAR(3);
  DECLARE @tdNomeOld VARCHAR(20);
  DECLARE @tdSerieNfOld VARCHAR(1);  
  DECLARE @tdAtivoOld VARCHAR(1);
  DECLARE @tdRegOld VARCHAR(1);
  DECLARE @tdCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD20Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @tdCodigoOld   = d.TD_CODIGO
         ,@tdNomeOld    = d.TD_NOME
         ,@tdSerieNfOld = d.TD_SERIENF
         ,@tdAtivoOld   = d.TD_ATIVO
         ,@tdRegOld     = d.TD_REG
         ,@tdCodUsrOld  = d.TD_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD20Old      = UP.UP_D20
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.TD_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@tdCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD20Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 20 PARA EXCLUIR NA TABELA TIPODOCUMENTO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@tdRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    -----------------------------------------
    --   Checando a FK SNF_CODTD(SERIENF)
    --                 PT_CODTD(PADRAOTITULO)
    -----------------------------------------
    SELECT TOP 1 @fkIntSnf=COALESCE(SNF_CODIGO,0) FROM SERIENF WHERE SNF_CODTD=@tdCodigoOld;
    IF( @fkIntSnf > 0 )
      RAISERROR('TIPO DE DOCUMENTO UTILIZADO EM SERIE NF %i',15,1,@fkIntSnf);
    SELECT TOP 1 @fkIntPt=COALESCE(PT_CODIGO,0) FROM PADRAOTITULO WHERE PT_CODTD=@tdCodigoOld;
    IF( @fkIntPt > 0 )
      RAISERROR('TIPO DE DOCUMENTO UTILIZADO EM PADRAO TITULO %i',15,1,@fkIntPt);
    --
    --
    DELETE FROM dbo.TIPODOCUMENTO WHERE TD_CODIGO=@tdCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPTIPODOCUMENTO(
      TD_ACAO
      ,TD_CODIGO
      ,TD_NOME
      ,TD_SERIENF      
      ,TD_ATIVO
      ,TD_REG
      ,TD_CODUSR) VALUES(
      'E'              -- TD_ACAO
      ,@tdCodigoOld    -- TD_CODIGO
      ,@tdNomeOld      -- TD_NOME
      ,@tdSerieNfOld   -- TD_SERIENF
      ,@tdAtivoOld     -- TD_ATIVO
      ,@tdRegOld       -- TD_REG
      ,@tdCodUsrOld    -- TD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPTIPODOCUMENTO_BUD ON dbo.BKPTIPODOCUMENTO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                         T R A N S P O R T A D O R A                             --
--trgtransportadora
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewTRANSPORTADORA_BI ON dbo.VTRANSPORTADORA
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS      |UPD |DEL | TIPO               | Obs
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------
  -- TRN_CODFVR     | SEL/PK  |    |    | INT                | Campo relacionado (FAVORECIDO)
  -- FVR_NOME       | SEL     |    |    | VC(60)             | Campo relacionado (FAVORECIDO)
  -- TRN_CODEMP     | PK      |    |    | INT                | Codigo da empresa
  -- TRN_ATIVO      | CC      |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- TRN_REG        | FNC     |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- TRN_CODUSR     | OK      |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL     |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL     |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D21         | SEL     |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL     |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @trnCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @trnCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @trnAtivoNew VARCHAR(1);
  DECLARE @trnRegNew VARCHAR(1);
  DECLARE @trnCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD21New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @trnCodFvrNew   = i.TRN_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@trnCodEmpNew  = i.TRN_CODEMP
         ,@empApelidoNew = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@trnAtivoNew   = UPPER(i.TRN_ATIVO)
         ,@trnRegNew     = UPPER(i.TRN_REG)
         ,@trnCodUsrNew  = i.TRN_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD21New      = UP.UP_D21
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.TRN_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.TRN_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.TRN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@trnCodEmpNew);
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@trnCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@trnCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD21New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 21 PARA INCLUIR NA TABELA TRANSPORTADORA',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(TRN_CODFVR,0) FROM TRANSPORTADORA WHERE ((TRN_CODFVR=@trnCodFvrNew) AND (TRN_CODEMP=@trnCodEmpNew));
    IF( @uicODIGO <> 0 )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA TRANSPORTADORA %s',15,1,@fvrNomeNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @trnRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@trnRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.TRANSPORTADORA( 
      TRN_CODFVR
      ,TRN_CODEMP
      ,TRN_ATIVO
      ,TRN_REG
      ,TRN_CODUSR) VALUES(
      @trnCodFvrNew   -- TRN_CODFVR
      ,@trnCodEmpNew  -- TRN_CODEMP
      ,@trnAtivoNew   -- TRN_ATIVO
      ,@trnRegNew     -- TRN_REG
      ,@trnCodUsrNew  -- TRN_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPTRANSPORTADORA(
      TRN_ACAO
      ,TRN_CODFVR
      ,TRN_CODEMP
      ,TRN_ATIVO
      ,TRN_REG
      ,TRN_CODUSR) VALUES(
      'I'                         -- TRN_ACAO
      ,@trnCodFvrNew              -- TRN_CODFVR
      ,@trnCodEmpNew              -- TRN_CODEMP
      ,@trnAtivoNew               -- TRN_ATIVO
      ,@trnRegNew                 -- TRN_REG
      ,@trnCodUsrNew              -- TRN_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewTRANSPORTADORA_BU ON dbo.VTRANSPORTADORA
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @trnCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @trnCodEmpNew INTEGER;  
  DECLARE @empApelidoNew VARCHAR(15);  
  DECLARE @trnAtivoNew VARCHAR(1);
  DECLARE @trnRegNew VARCHAR(1);
  DECLARE @trnCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD21New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @trnCodFvrNew   = i.TRN_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@trnCodEmpNew  = i.TRN_CODEMP
         ,@empApelidoNew = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@trnAtivoNew   = UPPER(i.TRN_ATIVO)
         ,@trnRegNew     = UPPER(i.TRN_REG)
         ,@trnCodUsrNew  = i.TRN_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD21New      = UP.UP_D21
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.TRN_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.TRN_CODEMP=EMP.EMP_CODIGO AND EMP.EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.TRN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@trnCodEmpNew);
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@trnCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@trnCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD21New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 21 PARA ALTERAR NA TABELA TRANSPORTADORA',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @trnCodFvrOld INTEGER;
    DECLARE @trnCodEmpOld INTEGER;
    DECLARE @trnAtivoOld VARCHAR(1);
    DECLARE @trnRegOld VARCHAR(1);
    DECLARE @trnCodUsrOld INTEGER;
    SELECT @trnCodFvrOld   = d.TRN_CODFVR
           ,@trnCodEmpOld  = d.TRN_CODEMP
           ,@trnAtivoOld   = d.TRN_ATIVO
           ,@trnRegOld     = d.TRN_REG
           ,@trnCodUsrOld  = d.TRN_CODUSR         
      FROM TRANSPORTADORA d WHERE ((d.TRN_CODFVR=@trnCodFvrNew) AND (d.TRN_CODEMP=@trnCodEmpNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @trnCodFvrOld<>@trnCodFvrNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @trnCodEmpOld<>@trnCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @trnRegOld <> @trnRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@trnRegOld,@trnRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.TRANSPORTADORA
       SET TRN_ATIVO  = @trnAtivoNew
          ,TRN_REG    = @trnRegNew
          ,TRN_CODUSR = @trnCodUsrNew
    WHERE TRN_CODFVR  = @trnCodFvrNew;     
    -- Gravando LOG
    IF( (@trnAtivoOld<>@trnAtivoNew) OR (@trnRegOld<>@trnRegNew) ) BEGIN
      INSERT INTO dbo.BKPTRANSPORTADORA(
        TRN_ACAO
        ,TRN_CODFVR
        ,TRN_CODEMP
        ,TRN_ATIVO
        ,TRN_REG
        ,TRN_CODUSR) VALUES(
        'A'                         -- TRN_ACAO
        ,@trnCodFvrNew              -- TRN_CODFVR
        ,@trnCodEmpNew              -- TRN_CODEMP
        ,@trnAtivoNew               -- TRN_ATIVO
        ,@trnRegNew                 -- TRN_REG
        ,@trnCodUsrNew              -- TRN_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewTRANSPORTADORA_BD ON dbo.VTRANSPORTADORA
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @trnCodFvrOld INTEGER;
  DECLARE @trnCodEmpOld INTEGER;
  DECLARE @trnAtivoOld VARCHAR(1);
  DECLARE @trnRegOld VARCHAR(1);
  DECLARE @trnCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD21Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @trnCodFvrOld   = d.TRN_CODFVR
         ,@trnCodEmpOld  = d.TRN_CODEMP
         ,@trnAtivoOld   = d.TRN_ATIVO
         ,@trnRegOld     = d.TRN_REG
         ,@trnCodUsrOld  = d.TRN_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD21Old      = UP.UP_D21
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.TRN_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@trnCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD21Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 21 PARA EXCLUIR NA TABELA TRANSPORTADORA',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@trnRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@trnCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('TRANSPORTADORA UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@trnCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('TRANSPORTADORA UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.TRANSPORTADORA WHERE ((TRN_CODFVR=@trnCodFvrOld) AND (TRN_CODEMP=@trnCodEmpOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPTRANSPORTADORA(
      TRN_ACAO
      ,TRN_CODFVR
      ,TRN_CODEMP
      ,TRN_ATIVO
      ,TRN_REG
      ,TRN_CODUSR) VALUES(
      'E'                         -- TRN_ACAO
      ,@trnCodFvrOld              -- TRN_CODFVR
      ,@trnCodEmpOld              -- TRN_CODEMP
      ,@trnAtivoOld               -- TRN_ATIVO
      ,@trnRegOld                 -- TRN_REG
      ,@trnCodUsrOld              -- TRN_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPTRANSPORTADORA_BUD ON dbo.BKPTRANSPORTADORA
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                      U S U A R I O
--trgusuario
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewUSUARIO_BI ON dbo.VUSUARIO
INSTEAD OF INSERT 
AS
BEGIN
  -- -------------------|-----|----|----|--------------------|----------------------------------------------------------
  -- CAMPO              |INS  |UPD |DEL | TIPO               | Obs
  -- -------------------|-----|----|----|--------------------|----------------------------------------------------------
  -- USR_CODIGO         |     |    |    | INT NN             | Auto incremento
  -- USR_CPF            | OK  |    |    | VC(11) NN          | Indice unico
  -- USR_APELIDO        |     |    |    | VC(15) NN          |
  -- USR_CODUP          | SEL |    |    | NT NN              | Campo relacionado (USUARIOPERFIL)
  -- UP_NOME            | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIOPERFIL)
  -- USR_CODCRG         | SEL |    |    | VC(3) NN           | Campo relacionado (CARGO)
  -- CRG_NOME           | SEL |    |    | VC(20) NN          | Campo relacionado (CARGO)   
  -- USR_EMAIL          |     |    |    | VC(60) NN          |
  -- USR_SENHA          |     |    |    | VC(15) NN          |
  -- USR_ATIVO          | CC  |    |    | VC(1) NN           |
  -- USR_REG            | CC  |    |    | VC(1) NN           |
  -- USR_ADMPUB         | CC  |    |    | VC(1) NN           |
  -- USR_VENCTO         |     |    |    | DATE               | Data que expira a senha 
  -- USR_PRIMEIROACESSO | CC  |    |    | VC(1) NN           | Apenas para mensagem
  --                                                         | Se "S" Primeiro acesso necessario alterar sua senha  
  --                                                         | Se "N" Senha expirada, favor alterar
  -- USR_FECHAMENTO     | CC  |    |    | VC(1) NN           | Se usuario esta em fechamento contabil
  -- USR_CODUSR         |     |    |    | INT NN             |
  -- USR_ADMPUB         | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP.UP_D01          | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela   
  -- -------------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- -------------------|-----|----|----|--------------------|----------------------------------------------------------   
  SET NOCOUNT ON;  
  DECLARE @uiCpf INTEGER     = 0;       -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @usrCodigoNew INTEGER;
  DECLARE @usrCpfNew VARCHAR(11);
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrCodUpNew INTEGER;
  DECLARE @upNomeNew VARCHAR(15);
  DECLARE @usrCodCrgNew VARCHAR(60);
  DECLARE @crgNomeNew VARCHAR(20);
  DECLARE @usrEmailNew VARCHAR(60);
  DECLARE @usrSenhaNew VARCHAR(15);
  DECLARE @usrAtivoNew VARCHAR(1);
  DECLARE @usrRegNew VARCHAR(1);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @usrFechamentoNew VARCHAR(1);
  DECLARE @usrCodUsrNew INTEGER;
  DECLARE @upD01New INTEGER;
  DECLARE @usrDireito31 INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @usrCodigoNew      = i.USR_CODIGO
         ,@usrCpfNew        = dbo.fncTranslate(i.USR_CPF,11)
         ,@usrApelidoNew    = dbo.fncTranslate(i.USR_APELIDO,15)
         ,@usrCodUpNew      = i.USR_CODUP
         ,@upNomeNew        = COALESCE(UP.UP_NOME,'ERRO')
         ,@usrCodCrgNew     = dbo.fncTranslate(i.USR_CODCRG,3)
         ,@crgNomeNew       = COALESCE(CRG.CRG_NOME,'ERRO')
         ,@usrEmailNew      = LOWER(dbo.fncTranslate(i.USR_EMAIL,60))
         ,@usrSenhaNew      = dbo.fncTranslate(i.USR_SENHA,15)
         ,@usrAtivoNew      = UPPER(i.USR_ATIVO)
         ,@usrRegNew        = UPPER(i.USR_REG)
         ,@usrAdmPubNew     = UPPER(i.USR_ADMPUB)
         ,@usrFechamentoNew = UPPER(i.USR_FECHAMENTO)
         ,@usrCodUsrNew     = i.USR_CODUSR
         ,@usrAdmPubNew     = UPPER(i.USR_ADMPUB)
         ,@upD01New         = UP.UP_D01
         ,@usrDireito31     = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIOPERFIL UP ON i.USR_CODUP=UP.UP_CODIGO
    LEFT OUTER JOIN CARGO CRG ON i.USR_CODCRG=CRG.CRG_CODIGO AND CRG.CRG_ATIVO='S';
  BEGIN TRY    
    -------------------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -- Naum olha se o usuario for SISTEMA
    -------------------------------------
    IF( @usrCodUsrNew <> 2 ) BEGIN
      IF( @upNomeNew='ERRO' )
        RAISERROR('NAO LOCALIZADO USUARIOPERFIL %i PARA ESTE REGISTRO',15,1,@usrCodUpNew);
      IF( @crgNomeNew='ERRO' )
        RAISERROR('NAO LOCALIZADO CARGO %s PARA ESTE REGISTRO',15,1,@usrCodCrgNew);
      -------------------------------------------------------------
      -- Checando se o usuario tem direito de cadastro nesta tabela
      -------------------------------------------------------------
      IF( @upD01New<2 )
        RAISERROR('USUARIO %s NAO POSSUI DIREITO 01 PARA INCLUIR NA TABELA USUARIO',15,1,@usrApelidoNew);
      ---------------------------------------------------------------------
      -- Campo CPF deve ser unico da tabela
      ---------------------------------------------------------------------
      SELECT @uiCpf=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CPF=@usrCpfNew;
      IF( @uiCpf <> 0 )
        RAISERROR('CPF JA CADASTRADO NA TABELA USUARIO COM CODIGO %i',15,1,@uiCpf);
      ------------------------------------------------------------------
      -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
      ------------------------------------------------------------------
      IF( @usrRegNew <> 'P' ) BEGIN
        SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@usrRegNew,@usrDireito31 );
        IF( @erroNew != 'OK' )
          RAISERROR(@erroNew,15,1);
      END    
    END  
    -- 
    INSERT INTO dbo.USUARIO(
      USR_CPF     
      ,USR_APELIDO 
      ,USR_CODUP   
      ,USR_CODCRG  
      ,USR_EMAIL   
      ,USR_SENHA   
      ,USR_ATIVO   
      ,USR_REG     
      ,USR_PRIMEIROACESSO     
      ,USR_FECHAMENTO      
      ,USR_CODUSR  
      ,USR_ADMPUB) VALUES(
      @usrCpfNew          -- USR_CPF     
      ,@usrApelidoNew     -- USR_APELIDO 
      ,@usrCodUpNew       -- USR_CODUP   
      ,@usrCodCrgNew      -- USR_CODCRG  
      ,@usrEmailNew       -- USR_EMAIL   
      ,@usrSenhaNew       -- USR_SENHA   
      ,@usrAtivoNew       -- USR_ATIVO   
      ,@usrRegNew         -- USR_REG     
      ,'S'                -- USR_PRIMEIROACESSO
      ,@usrFechamentoNew  -- USR_FECHAMENTO
      ,@usrCodUsrNew      -- USR_CODUSR  
      ,@usrAdmPubNew      -- USR_ADMPUB  
    );
    INSERT INTO dbo.USUARIOSISTEMA(    
      US_CODIGO
      ,US_CPF
      ,US_APELIDO
      ,US_DTINCLUSAO) VALUES(
      IDENT_CURRENT('USUARIO')    -- US_CODIGO
      ,@usrCpfNew                 -- US_CPF
      ,@usrApelidoNew             -- US_APELIDO
      ,GETDATE()                  -- US_DTINCLUSAO
    );
    ----------------------------------------------------------------------------
    -- O usuario ADMIN cria o primeiro perfil para sistema devido relacionamento
    -- Como nao passa pelo trigger VUSUARIOPERFIL tem q cadastrar PP    
    ----------------------------------------------------------------------------
    IF( @usrApelidoNew='ADMIN' ) BEGIN
      INSERT INTO dbo.USUARIOPERFIL(
        UP_NOME	
        ,UP_D01,UP_D02,UP_D03,UP_D04,UP_D05,UP_D06,UP_D07,UP_D08,UP_D09,UP_D10,UP_D11,UP_D12,UP_D13,UP_D14,UP_D15,UP_D16,UP_D17,UP_D18,UP_D19,UP_D20
        ,UP_D21,UP_D22,UP_D23,UP_D24,UP_D25,UP_D26,UP_D27,UP_D28,UP_D29,UP_D30,UP_D31,UP_D32,UP_D33,UP_D34,UP_D35,UP_D36,UP_D37,UP_D38,UP_D39,UP_D40
        ,UP_D41,UP_D42,UP_D43,UP_D44,UP_D45,UP_D46,UP_D47,UP_D48,UP_D49,UP_D50
        ,UP_ATIVO	
        ,UP_REG
        ,UP_CODUSR) VALUES(
        'ADMINIST'   
        ,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
        ,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,4,4,4
        ,4,4,4,4,4,4,4,4,4,4
        ,'S'          
        ,'P'          
        ,1            
      );
      INSERT INTO dbo.BKPUSUARIOPERFIL(
        UP_ACAO
        ,UP_CODIGO
        ,UP_NOME	
        ,UP_D01,UP_D02,UP_D03,UP_D04,UP_D05,UP_D06,UP_D07,UP_D08,UP_D09,UP_D10,UP_D11,UP_D12,UP_D13,UP_D14,UP_D15,UP_D16,UP_D17,UP_D18,UP_D19,UP_D20
        ,UP_D21,UP_D22,UP_D23,UP_D24,UP_D25,UP_D26,UP_D27,UP_D28,UP_D29,UP_D30,UP_D31,UP_D32,UP_D33,UP_D34,UP_D35,UP_D36,UP_D37,UP_D38,UP_D39,UP_D40
        ,UP_D41,UP_D42,UP_D43,UP_D44,UP_D45,UP_D46,UP_D47,UP_D48,UP_D49,UP_D50
        ,UP_ATIVO	
        ,UP_REG
        ,UP_CODUSR) VALUES(
        'I'
        ,IDENT_CURRENT('USUARIOPERFIL')
        ,'ADMINIST'   
        ,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
        ,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,4,4,4
        ,4,4,4,4,4,4,4,4,4,4
        ,'S'          
        ,'P'          
        ,1            
      );
    END
    -----------------------------------------------------------------------------
    -- PARA CADA NOVO USUARIO(MENOS ADMIN)
    -- -Cadastro o usuario para todas empresas
    -- SE CADASTRAR UMA NOVA EMPRESA A ROTINA É A MESMA
    -----------------------------------------------------------------------------
    DECLARE @codemp INTEGER;
    DECLARE @ativo VARCHAR(1)='N';
    --IF( @usrApelidoNew = 'ADMIN' )
      SET @ativo='S';
    -- Declarando o nome do cursor e guardando o select dentro de crsrEmp
    DECLARE crsrEmp CURSOR FOR SELECT EMP_CODIGO FROM EMPRESA WHERE EMP_ATIVO='S'
    OPEN crsrEmp
    -- posicionar o ponteiro do cursor na primeira linha do resultado do select acima
    -- insere nas variaveis os valores da primeira linha do resultado armazenado no cursor
    FETCH NEXT FROM crsrEmp into @codemp
    WHILE @@FETCH_STATUS = 0 BEGIN
      INSERT INTO USUARIOEMPRESA(
        UE_CODUSR
        ,UE_CODEMP
        ,UE_ATIVO
        ,UE_REG
        ,SIS_CODUSR) VALUES(
        IDENT_CURRENT('USUARIO')    -- UE_CODUSR
        ,@codemp                    -- UE_CODEMP
        ,@ativo                     -- UE_ATIVO
        ,'P'                        -- UE_REG
        ,@usrCodUsrNew              -- SIS_CODUSR
      );
      FETCH NEXT FROM crsrEmp into @codemp
    END
    CLOSE crsrEmp
    DEALLOCATE crsrEmp
    ---------------
    -- Gravando LOG
    ---------------
    INSERT INTO dbo.BKPUSUARIO(
      USR_ACAO
      ,USR_CODIGO
      ,USR_CPF     
      ,USR_APELIDO 
      ,USR_CODUP   
      ,USR_CODCRG  
      ,USR_EMAIL   
      ,USR_SENHA   
      ,USR_ATIVO   
      ,USR_REG     
      ,USR_VENCTO  
      ,USR_CODUSR
      ,USR_FECHAMENTO      
      ,USR_ADMPUB) VALUES(
      'I'                         -- USR_ACAO      
      ,IDENT_CURRENT('USUARIO')   -- USR_CODIGO
      ,@usrCpfNew                 -- USR_CPF     
      ,@usrApelidoNew             -- USR_APELIDO 
      ,@usrCodUpNew               -- USR_CODUP   
      ,@usrCodCrgNew              -- USR_CODCRG  
      ,@usrEmailNew               -- USR_EMAIL   
      ,@usrSenhaNew               -- USR_SENHA   
      ,@usrAtivoNew               -- USR_ATIVO   
      ,@usrRegNew                 -- USR_REG     
      ,GETDATE()                  -- USR_VENCTO  
      ,@usrCodUsrNew              -- USR_CODUSR  
      ,@usrFechamentoNew          -- USR_FECHAMENTO      
      ,@usrAdmPubNew              -- USR_ADMPUB  
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewUSUARIO_BU ON dbo.VUSUARIO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCpf INTEGER        = 0;      -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70)  ='ERRO';  -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @usrCodigoNew INTEGER;
  DECLARE @usrCpfNew VARCHAR(11);
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrCodUpNew INTEGER;
  DECLARE @upNomeNew VARCHAR(15);
  DECLARE @usrCodCrgNew VARCHAR(60);
  DECLARE @crgNomeNew VARCHAR(20);
  DECLARE @usrEmailNew VARCHAR(60);
  DECLARE @usrSenhaNew VARCHAR(15);
  DECLARE @usrAtivoNew VARCHAR(1);
  DECLARE @usrRegNew VARCHAR(1);
  DECLARE @usrVenctoNew DATE;
  DECLARE @usrCodUsrNew INTEGER;
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @usrFechamentoNew VARCHAR(1);  
  DECLARE @upD01New INTEGER;
  DECLARE @usrDireito31 INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @usrCodigoNew      = i.USR_CODIGO
         ,@usrCpfNew        = dbo.fncTranslate(i.USR_CPF,11)
         ,@usrApelidoNew    = dbo.fncTranslate(i.USR_APELIDO,15)
         ,@usrCodUpNew      = i.USR_CODUP
         ,@upNomeNew        = COALESCE(UP.UP_NOME,'ERRO')
         ,@usrCodCrgNew     = dbo.fncTranslate(i.USR_CODCRG,3)
         ,@crgNomeNew       = COALESCE(CRG.CRG_NOME,'ERRO')
         ,@usrEmailNew      = LOWER(dbo.fncTranslate(i.USR_EMAIL,60))
         ,@usrSenhaNew      = dbo.fncTranslate(i.USR_SENHA,15)
         ,@usrAtivoNew      = UPPER(i.USR_ATIVO)
         ,@usrRegNew        = UPPER(i.USR_REG)
         ,@usrVenctoNew     = i.USR_VENCTO
         ,@usrCodUsrNew     = i.USR_CODUSR
         ,@usrAdmPubNew     = UPPER(i.USR_ADMPUB)
         ,@usrFechamentoNew = UPPER(i.USR_FECHAMENTO)         
         ,@upD01New         = UP.UP_D01
         ,@usrDireito31     = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIOPERFIL UP ON i.USR_CODUP=UP.UP_CODIGO
    LEFT OUTER JOIN CARGO CRG ON i.USR_CODCRG=CRG.CRG_CODIGO AND CRG.CRG_ATIVO='S';
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @upNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIOPERFIL %i PARA ESTE REGISTRO',15,1,@usrCodUpNew);
    IF( @crgNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO CARGO %s PARA ESTE REGISTRO',15,1,@usrCodCrgNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @usrRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@usrRegNew,@usrDireito31 );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @usrCodigoOld INTEGER;
    DECLARE @usrCpfOld VARCHAR(11);
    DECLARE @usrApelidoOld VARCHAR(15);
    DECLARE @usrCodUpOld INTEGER;
    DECLARE @usrCodCrgOld VARCHAR(60);
    DECLARE @usrEmailOld VARCHAR(60);
    DECLARE @usrSenhaOld VARCHAR(15);
    DECLARE @usrAtivoOld VARCHAR(1);
    DECLARE @usrRegOld VARCHAR(1);
    DECLARE @usrAdmPubOld VARCHAR(1);
    DECLARE @usrFechamentoOld VARCHAR(1);    
    DECLARE @usrVenctoOld DATE;
    DECLARE @usrCodUsrOld INTEGER;
    --
    SELECT @usrCodigoOld      = d.USR_CODIGO
           ,@usrCpfOld        = d.USR_CPF
           ,@usrApelidoOld    = d.USR_APELIDO
           ,@usrCodUpOld      = d.USR_CODUP
           ,@usrCodCrgOld     = d.USR_CODCRG
           ,@usrEmailOld      = d.USR_EMAIL
           ,@usrSenhaOld      = d.USR_SENHA
           ,@usrAtivoOld      = d.USR_ATIVO
           ,@usrRegOld        = d.USR_REG
           ,@usrVenctoOld     = d.USR_VENCTO
           ,@usrCodUsrOld     = d.USR_CODUSR
           ,@usrAdmPubOld     = d.USR_ADMPUB
           ,@usrFechamentoOld = d.USR_FECHAMENTO
      FROM USUARIO d WHERE d.USR_CODIGO=@usrCodigoNew;  
    ------------------------------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -- Aqui tem um detalhe, se o usuario estiver alterando sua senha naum olho o direito
    ------------------------------------------------------------------------------------
    IF( @upD01New<3 ) BEGIN
      IF( @usrSenhaOld=@usrSenhaNew )
        RAISERROR('USUARIO %s NAO POSSUI DIREITO 01 PARA ALTERAR NA TABELA USUARIO',15,1,@usrApelidoNew);
    END  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @usrCodigoOld<>@usrCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo CPF deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @usrCpfOld<>@usrCpfNew ) BEGIN
      SELECT @uiCpf=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CPF=@usrCpfNew;
      IF( @uiCpf <> 0 )
        RAISERROR('CPF JA CADASTRADO NA TABELA USUARIO COM CODIGO %i',15,1,@uiCpf);
    END  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @usrRegOld <> @usrRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@usrRegOld,@usrRegNew,@usrDireito31 );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --
    IF( @usrSenhaOld<>@usrSenhaNew ) BEGIN
      SET @usrVenctoNew=DATEADD(day,180,@usrVenctoNew);
    END
    --  
    UPDATE dbo.USUARIO
       SET USR_CPF        = @usrCpfNew       
          ,USR_APELIDO    = @usrApelidoNew  
          ,USR_CODUP      = @usrCodUpNew    
          ,USR_CODCRG     = @usrCodCrgNew   
          ,USR_EMAIL      = @usrEmailNew    
          ,USR_SENHA      = @usrSenhaNew    
          ,USR_ATIVO      = @usrAtivoNew    
          ,USR_REG        = @usrRegNew      
          ,USR_VENCTO     = @usrVenctoNew   
          ,USR_CODUSR     = @usrCodUsrNew   
          ,USR_ADMPUB     = @usrAdmPubNew   
          ,USR_FECHAMENTO = @usrFechamentoNew             
    WHERE USR_CODIGO = @usrCodigoNew;     
    -- Gravando LOG
    IF( (@usrCpfOld<>@usrCpfNew) OR (@usrApelidoOld<>@usrApelidoNew) OR (@usrCodUpOld<>@usrCodUpNew) OR (@usrCodCrgOld<>@usrCodCrgNew) 
     OR (@usrEmailOld<>@usrEmailNew) OR (@usrSenhaOld<>@usrSenhaNew) OR (@usrAtivoOld<>@usrAtivoNew) 
     OR (@usrRegOld<>@usrRegNew) OR (@usrVenctoOld<>@usrVenctoNew) OR (@usrCodUsrOld<>@usrCodUsrNew) 
     OR (@usrFechamentoOld<>@usrFechamentoNew) OR (@usrAdmPubOld<>@usrAdmPubNew) OR (@usrCodigoOld<>@usrCodigoNew) ) BEGIN
      INSERT INTO dbo.BKPUSUARIO(
        USR_ACAO
        ,USR_CODIGO
        ,USR_CPF     
        ,USR_APELIDO 
        ,USR_CODUP   
        ,USR_CODCRG  
        ,USR_EMAIL   
        ,USR_SENHA   
        ,USR_ATIVO   
        ,USR_REG     
        ,USR_VENCTO  
        ,USR_CODUSR  
        ,USR_FECHAMENTO        
        ,USR_ADMPUB) VALUES(
        'A'                         -- USR_ACAO      
        ,@usrCodigoNew              -- USR_CODIGO
        ,@usrCpfNew                 -- USR_CPF     
        ,@usrApelidoNew             -- USR_APELIDO 
        ,@usrCodUpNew               -- USR_CODUP   
        ,@usrCodCrgNew              -- USR_CODCRG  
        ,@usrEmailNew               -- USR_EMAIL   
        ,@usrSenhaNew               -- USR_SENHA   
        ,@usrAtivoNew               -- USR_ATIVO   
        ,@usrRegNew                 -- USR_REG     
        ,@usrVenctoNew              -- USR_VENCTO  
        ,@usrCodUsrNew              -- USR_CODUSR  
        ,@usrFechamentoNew          -- USR_FECHAMENTO        
        ,@usrAdmPubNew              -- USR_ADMPUB  
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewUSUARIO_BD ON dbo.VUSUARIO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @usrCodigoOld INTEGER;
  DECLARE @usrCpfOld VARCHAR(11);
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrCodUpOld INTEGER;
  DECLARE @usrCodCrgOld VARCHAR(60);
  DECLARE @usrEmailOld VARCHAR(60);
  DECLARE @usrSenhaOld VARCHAR(15);
  DECLARE @usrAtivoOld VARCHAR(1);
  DECLARE @usrRegOld VARCHAR(1);
  DECLARE @usrVenctoOld DATE;
  DECLARE @usrCodUsrOld INTEGER;
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @usrFechamentoOld VARCHAR(1)
  DECLARE @upD01Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @usrCodigoOld      = d.USR_CODIGO
         ,@usrCpfOld        = d.USR_CPF
         ,@usrApelidoOld    = d.USR_APELIDO
         ,@usrCodUpOld      = d.USR_CODUP
         ,@usrCodCrgOld     = d.USR_CODCRG
         ,@usrEmailOld      = d.USR_EMAIL
         ,@usrSenhaOld      = d.USR_SENHA
         ,@usrAtivoOld      = d.USR_ATIVO
         ,@usrRegOld        = d.USR_REG
         ,@usrVenctoOld     = d.USR_VENCTO
         ,@usrCodUsrOld     = d.USR_CODUSR
         ,@usrAdmPubOld     = d.USR_ADMPUB
         ,@usrFechamentoOld = d.USR_FECHAMENTO         
         ,@upD01Old         = UP.UP_D01
    FROM deleted d
    LEFT OUTER JOIN USUARIOPERFIL UP ON d.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@usrCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD01Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 01 PARA EXCLUIR NA TABELA USUARIO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@usrRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    -------------------------------------------
    -- Excluido dos direitos em USUARIOEMPRESA
    -------------------------------------------
    --UPDATE VUSUARIOEMPRESA SET SIS_CODUSR=@usrCodUsrOld WHERE UE_CODUSR=@usrCodigoOld;
    --DELETE FROM VUSUARIOOPERACAO WHERE UE_CODUSR=@usrCodigoOld;
    DECLARE @ucCodUsr INTEGER;      
    DECLARE @ucCodClnOpe INTEGER;
    DECLARE crsr CURSOR FOR SELECT UO_CODUSR AS USUARIO
                                  ,UO_CODOPE AS CLIENTEOPERACAO
                             FROM USUARIOOPERACAO WHERE UO_CODUSR=@usrCodigoOld
    OPEN crsr
    FETCH NEXT FROM crsr into @ucCodUsr,@ucCodClnOpe
    WHILE @@FETCH_STATUS = 0 BEGIN
      UPDATE USUARIOOPERACAO SET SIS_CODUSR=@usrCodUsrOld WHERE ((UO_CODUSR=@usrCodigoOld) AND (UO_CODOPE=@ucCodClnOpe));
      DELETE FROM USUARIOOPERACAO WHERE ((UO_CODUSR=@usrCodigoOld) AND (UO_CODOPE=@ucCodClnOpe));
      FETCH NEXT FROM crsr into @ucCodUsr,@ucCodClnOpe;
    END
    CLOSE crsr
    DEALLOCATE crsr
    --
    UPDATE USUARIOSISTEMA SET US_DTEXCLUSAO=GETDATE() WHERE US_CODIGO=@usrCodigoOld;
    DELETE FROM dbo.USUARIO WHERE USR_CODIGO=@usrCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPUSUARIO(
      USR_ACAO
      ,USR_CODIGO
      ,USR_CPF     
      ,USR_APELIDO 
      ,USR_CODUP   
      ,USR_CODCRG  
      ,USR_EMAIL   
      ,USR_SENHA   
      ,USR_ATIVO   
      ,USR_REG     
      ,USR_VENCTO  
      ,USR_CODUSR  
      ,USR_FECHAMENTO      
      ,USR_ADMPUB) VALUES(
      'E'                 -- USR_ACAO      
      ,@usrCodigoOld      -- USR_CODIGO
      ,@usrCpfOld         -- USR_CPF     
      ,@usrApelidoOld     -- USR_APELIDO 
      ,@usrCodUpOld       -- USR_CODUP   
      ,@usrCodCrgOld      -- USR_CODCRG  
      ,@usrEmailOld       -- USR_EMAIL   
      ,@usrSenhaOld       -- USR_SENHA   
      ,@usrAtivoOld       -- USR_ATIVO   
      ,@usrRegOld         -- USR_REG     
      ,@usrVenctoOld      -- USR_VENCTO  
      ,@usrCodUsrOld      -- USR_CODUSR  
      ,@usrFechamentoOld  -- USR_FECHAMENTO      
      ,@usrAdmPubOld      -- USR_ADMPUB  
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPUSUARIO_BUD ON dbo.BKPUSUARIO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
---------------------------------------------------------------
--                 U S U A R I O P E R F I L
--trgusuarioperfil
---------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewUSUARIOPERFIL_BI ON dbo.VUSUARIOPERFIL
INSTEAD OF INSERT 
AS
BEGIN
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
   -- UP_CODIGO      | OK  |    |    | INT NN PK          | Codigo gerado pelo sistema
   -- UP_NOME        | OK  |    |    | VC(15) NN          | 
   -- UP_D01
   -- ATÉ
   -- UP_D50         | CC  |    |    | INT NN             |* 0|1|2|3|4
   -- UP_ATIVO       | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
   -- UP_REG         | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema 
   -- UP_CODUSR      | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
   -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
   -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
   -- UP.UP_D04      | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela  
   -- UP.UP_D31      | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
   -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function
   -- ---------------|-----|----|----|--------------------|----------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER    = 0;  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(15)  = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @upCodigoNew INTEGER;
  DECLARE @upNomeNew VARCHAR(15);
  DECLARE @upD01New INTEGER; DECLARE @upD02New INTEGER; DECLARE @upD03New INTEGER; DECLARE @upD04New INTEGER; DECLARE @upD05New INTEGER;
  DECLARE @upD06New INTEGER; DECLARE @upD07New INTEGER; DECLARE @upD08New INTEGER; DECLARE @upD09New INTEGER; DECLARE @upD10New INTEGER;
  DECLARE @upD11New INTEGER; DECLARE @upD12New INTEGER; DECLARE @upD13New INTEGER; DECLARE @upD14New INTEGER; DECLARE @upD15New INTEGER;
  DECLARE @upD16New INTEGER; DECLARE @upD17New INTEGER; DECLARE @upD18New INTEGER; DECLARE @upD19New INTEGER; DECLARE @upD20New INTEGER;
  DECLARE @upD21New INTEGER; DECLARE @upD22New INTEGER; DECLARE @upD23New INTEGER; DECLARE @upD24New INTEGER; DECLARE @upD25New INTEGER;
  DECLARE @upD26New INTEGER; DECLARE @upD27New INTEGER; DECLARE @upD28New INTEGER; DECLARE @upD29New INTEGER; DECLARE @upD30New INTEGER;
  DECLARE @upD31New INTEGER; DECLARE @upD32New INTEGER; DECLARE @upD33New INTEGER; DECLARE @upD34New INTEGER; DECLARE @upD35New INTEGER;
  DECLARE @upD36New INTEGER; DECLARE @upD37New INTEGER; DECLARE @upD38New INTEGER; DECLARE @upD39New INTEGER; DECLARE @upD40New INTEGER;
  DECLARE @upD41New INTEGER; DECLARE @upD42New INTEGER; DECLARE @upD43New INTEGER; DECLARE @upD44New INTEGER; DECLARE @upD45New INTEGER;
  DECLARE @upD46New INTEGER; DECLARE @upD47New INTEGER; DECLARE @upD48New INTEGER; DECLARE @upD49New INTEGER; DECLARE @upD50New INTEGER;
  DECLARE @upAtivoNew VARCHAR(1);
  DECLARE @upRegNew VARCHAR(1);
  DECLARE @upCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upDirNew INTEGER;
  DECLARE @usrDireito31 INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @upCodigoNew    = i.UP_CODIGO
         ,@upNomeNew     = dbo.fncTranslate(i.UP_NOME,15)
         ,@upD01New      = i.UP_D01
         ,@upD02New      = i.UP_D02
         ,@upD03New      = i.UP_D03
         ,@upD04New      = i.UP_D04
         ,@upD05New      = i.UP_D05
         ,@upD06New      = i.UP_D06
         ,@upD07New      = i.UP_D07
         ,@upD08New      = i.UP_D08
         ,@upD09New      = i.UP_D09
         ,@upD10New      = i.UP_D10
         ,@upD11New      = i.UP_D11
         ,@upD12New      = i.UP_D12
         ,@upD13New      = i.UP_D13
         ,@upD14New      = i.UP_D14
         ,@upD15New      = i.UP_D15
         ,@upD16New      = i.UP_D16
         ,@upD17New      = i.UP_D17
         ,@upD18New      = i.UP_D18
         ,@upD19New      = i.UP_D19
         ,@upD20New      = i.UP_D20
         ,@upD21New      = i.UP_D21
         ,@upD22New      = i.UP_D22
         ,@upD23New      = i.UP_D23
         ,@upD24New      = i.UP_D24
         ,@upD25New      = i.UP_D25
         ,@upD26New      = i.UP_D26
         ,@upD27New      = i.UP_D27
         ,@upD28New      = i.UP_D28
         ,@upD29New      = i.UP_D29
         ,@upD30New      = i.UP_D30
         ,@upD31New      = i.UP_D31
         ,@upD32New      = i.UP_D32
         ,@upD33New      = i.UP_D33
         ,@upD34New      = i.UP_D34
         ,@upD35New      = i.UP_D35
         ,@upD36New      = i.UP_D36
         ,@upD37New      = i.UP_D37
         ,@upD38New      = i.UP_D38
         ,@upD39New      = i.UP_D39
         ,@upD40New      = i.UP_D40
         ,@upD41New      = i.UP_D41
         ,@upD42New      = i.UP_D42
         ,@upD43New      = i.UP_D43
         ,@upD44New      = i.UP_D44
         ,@upD45New      = i.UP_D45
         ,@upD46New      = i.UP_D46
         ,@upD47New      = i.UP_D47
         ,@upD48New      = i.UP_D48
         ,@upD49New      = i.UP_D49
         ,@upD50New      = i.UP_D50
         ,@upAtivoNew    = UPPER(i.UP_ATIVO)
         ,@upRegNew      = UPPER(i.UP_REG)
         ,@upCodUsrNew   = i.UP_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upDirNew      = UP.UP_D04
         ,@usrDireito31  = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.UP_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@upCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upDirNew<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 04 PARA INCLUIR NA TABELA CLASSIF ALVO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(UP_CODIGO,0) FROM USUARIOPERFIL WHERE UP_NOME=@upNomeNew;
    IF( @uiCodigo <> 0 )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CLASSIF ALVO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(UP_NOME,'OK') FROM USUARIOPERFIL WHERE UP_CODIGO=@upCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA PERFIL %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @upRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@upRegNew,@usrDireito31 );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.USUARIOPERFIL( 
      UP_NOME
      ,UP_D01,UP_D02,UP_D03,UP_D04,UP_D05,UP_D06,UP_D07,UP_D08,UP_D09,UP_D10
      ,UP_D11,UP_D12,UP_D13,UP_D14,UP_D15,UP_D16,UP_D17,UP_D18,UP_D19,UP_D20
      ,UP_D21,UP_D22,UP_D23,UP_D24,UP_D25,UP_D26,UP_D27,UP_D28,UP_D29,UP_D30
      ,UP_D31,UP_D32,UP_D33,UP_D34,UP_D35,UP_D36,UP_D37,UP_D38,UP_D39,UP_D40
      ,UP_D41,UP_D42,UP_D43,UP_D44,UP_D45,UP_D46,UP_D47,UP_D48,UP_D49,UP_D50      
      ,UP_ATIVO
      ,UP_REG
      ,UP_CODUSR) VALUES(
      @upNomeNew     -- UP_NOME
      ,@upD01New,@upD02New,@upD03New,@upD04New,@upD05New,@upD06New,@upD07New,@upD08New,@upD09New,@upD10New
      ,@upD11New,@upD12New,@upD13New,@upD14New,@upD15New,@upD16New,@upD17New,@upD18New,@upD19New,@upD20New
      ,@upD21New,@upD22New,@upD23New,@upD24New,@upD25New,@upD26New,@upD27New,@upD28New,@upD29New,@upD30New
      ,@upD31New,@upD32New,@upD33New,@upD34New,@upD35New,@upD36New,@upD37New,@upD38New,@upD39New,@upD40New
      ,@upD41New,@upD42New,@upD43New,@upD44New,@upD45New,@upD46New,@upD47New,@upD48New,@upD49New,@upD50New
      ,@upAtivoNew   -- UP_ATIVO
      ,@upRegNew     -- UP_REG
      ,@upCodUsrNew  -- UP_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPUSUARIOPERFIL(
      UP_ACAO
      ,UP_CODIGO
      ,UP_NOME
      ,UP_D01,UP_D02,UP_D03,UP_D04,UP_D05,UP_D06,UP_D07,UP_D08,UP_D09,UP_D10
      ,UP_D11,UP_D12,UP_D13,UP_D14,UP_D15,UP_D16,UP_D17,UP_D18,UP_D19,UP_D20
      ,UP_D21,UP_D22,UP_D23,UP_D24,UP_D25,UP_D26,UP_D27,UP_D28,UP_D29,UP_D30
      ,UP_D31,UP_D32,UP_D33,UP_D34,UP_D35,UP_D36,UP_D37,UP_D38,UP_D39,UP_D40
      ,UP_D41,UP_D42,UP_D43,UP_D44,UP_D45,UP_D46,UP_D47,UP_D48,UP_D49,UP_D50
      ,UP_ATIVO
      ,UP_REG
      ,UP_CODUSR) VALUES(
      'I'                             -- UP_ACAO
      ,IDENT_CURRENT('USUARIOPERFIL') -- UP_CODIGO
      ,@upNomeNew                     -- UP_NOME
      ,@upD01New,@upD02New,@upD03New,@upD04New,@upD05New,@upD06New,@upD07New,@upD08New,@upD09New,@upD10New
      ,@upD11New,@upD12New,@upD13New,@upD14New,@upD15New,@upD16New,@upD17New,@upD18New,@upD19New,@upD20New
      ,@upD21New,@upD22New,@upD23New,@upD24New,@upD25New,@upD26New,@upD27New,@upD28New,@upD29New,@upD30New
      ,@upD31New,@upD32New,@upD33New,@upD34New,@upD35New,@upD36New,@upD37New,@upD38New,@upD39New,@upD40New
      ,@upD41New,@upD42New,@upD43New,@upD44New,@upD45New,@upD46New,@upD47New,@upD48New,@upD49New,@upD50New
      ,@upAtivoNew                    -- UP_ATIVO
      ,@upRegNew                      -- UP_REG
      ,@upCodUsrNew                   -- UP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewUSUARIOPERFIL_BU ON dbo.VUSUARIOPERFIL
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @upCodigoNew INTEGER;
  DECLARE @upNomeNew VARCHAR(15);
  DECLARE @upD01New INTEGER; DECLARE @upD02New INTEGER; DECLARE @upD03New INTEGER; DECLARE @upD04New INTEGER; DECLARE @upD05New INTEGER;
  DECLARE @upD06New INTEGER; DECLARE @upD07New INTEGER; DECLARE @upD08New INTEGER; DECLARE @upD09New INTEGER; DECLARE @upD10New INTEGER;
  DECLARE @upD11New INTEGER; DECLARE @upD12New INTEGER; DECLARE @upD13New INTEGER; DECLARE @upD14New INTEGER; DECLARE @upD15New INTEGER;
  DECLARE @upD16New INTEGER; DECLARE @upD17New INTEGER; DECLARE @upD18New INTEGER; DECLARE @upD19New INTEGER; DECLARE @upD20New INTEGER;
  DECLARE @upD21New INTEGER; DECLARE @upD22New INTEGER; DECLARE @upD23New INTEGER; DECLARE @upD24New INTEGER; DECLARE @upD25New INTEGER;
  DECLARE @upD26New INTEGER; DECLARE @upD27New INTEGER; DECLARE @upD28New INTEGER; DECLARE @upD29New INTEGER; DECLARE @upD30New INTEGER;
  DECLARE @upD31New INTEGER; DECLARE @upD32New INTEGER; DECLARE @upD33New INTEGER; DECLARE @upD34New INTEGER; DECLARE @upD35New INTEGER;
  DECLARE @upD36New INTEGER; DECLARE @upD37New INTEGER; DECLARE @upD38New INTEGER; DECLARE @upD39New INTEGER; DECLARE @upD40New INTEGER;
  DECLARE @upD41New INTEGER; DECLARE @upD42New INTEGER; DECLARE @upD43New INTEGER; DECLARE @upD44New INTEGER; DECLARE @upD45New INTEGER;
  DECLARE @upD46New INTEGER; DECLARE @upD47New INTEGER; DECLARE @upD48New INTEGER; DECLARE @upD49New INTEGER; DECLARE @upD50New INTEGER;
  DECLARE @upAtivoNew VARCHAR(1);
  DECLARE @upRegNew VARCHAR(1);
  DECLARE @upCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upDirNew INTEGER;
  DECLARE @usrDireito31 INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @upCodigoNew    = i.UP_CODIGO
         ,@upNomeNew     = dbo.fncTranslate(i.UP_NOME,15)
         ,@upD01New      = i.UP_D01
         ,@upD02New      = i.UP_D02
         ,@upD03New      = i.UP_D03
         ,@upD04New      = i.UP_D04
         ,@upD05New      = i.UP_D05
         ,@upD06New      = i.UP_D06
         ,@upD07New      = i.UP_D07
         ,@upD08New      = i.UP_D08
         ,@upD09New      = i.UP_D09
         ,@upD10New      = i.UP_D10
         ,@upD11New      = i.UP_D11
         ,@upD12New      = i.UP_D12
         ,@upD13New      = i.UP_D13
         ,@upD14New      = i.UP_D14
         ,@upD15New      = i.UP_D15
         ,@upD16New      = i.UP_D16
         ,@upD17New      = i.UP_D17
         ,@upD18New      = i.UP_D18
         ,@upD19New      = i.UP_D19
         ,@upD20New      = i.UP_D20
         ,@upD21New      = i.UP_D21
         ,@upD22New      = i.UP_D22
         ,@upD23New      = i.UP_D23
         ,@upD24New      = i.UP_D24
         ,@upD25New      = i.UP_D25
         ,@upD26New      = i.UP_D26
         ,@upD27New      = i.UP_D27
         ,@upD28New      = i.UP_D28
         ,@upD29New      = i.UP_D29
         ,@upD30New      = i.UP_D30
         ,@upD31New      = i.UP_D31
         ,@upD32New      = i.UP_D32
         ,@upD33New      = i.UP_D33
         ,@upD34New      = i.UP_D34
         ,@upD35New      = i.UP_D35
         ,@upD36New      = i.UP_D36
         ,@upD37New      = i.UP_D37
         ,@upD38New      = i.UP_D38
         ,@upD39New      = i.UP_D39
         ,@upD40New      = i.UP_D40
         ,@upD41New      = i.UP_D41
         ,@upD42New      = i.UP_D42
         ,@upD43New      = i.UP_D43
         ,@upD44New      = i.UP_D44
         ,@upD45New      = i.UP_D45
         ,@upD46New      = i.UP_D46
         ,@upD47New      = i.UP_D47
         ,@upD48New      = i.UP_D48
         ,@upD49New      = i.UP_D49
         ,@upD50New      = i.UP_D50
         ,@upAtivoNew    = UPPER(i.UP_ATIVO)
         ,@upRegNew      = UPPER(i.UP_REG)
         ,@upCodUsrNew   = i.UP_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upDirNew      = UP.UP_D04
         ,@usrDireito31  = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.UP_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@upCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upDirNew<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 04 PARA ALTERAR NA TABELA CLASSIF ALVO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @upCodigoOld INTEGER;
    DECLARE @upNomeOld VARCHAR(15);
    DECLARE @upD01Old INTEGER; DECLARE @upD02Old INTEGER; DECLARE @upD03Old INTEGER; DECLARE @upD04Old INTEGER; DECLARE @upD05Old INTEGER;
    DECLARE @upD06Old INTEGER; DECLARE @upD07Old INTEGER; DECLARE @upD08Old INTEGER; DECLARE @upD09Old INTEGER; DECLARE @upD10Old INTEGER;
    DECLARE @upD11Old INTEGER; DECLARE @upD12Old INTEGER; DECLARE @upD13Old INTEGER; DECLARE @upD14Old INTEGER; DECLARE @upD15Old INTEGER;
    DECLARE @upD16Old INTEGER; DECLARE @upD17Old INTEGER; DECLARE @upD18Old INTEGER; DECLARE @upD19Old INTEGER; DECLARE @upD20Old INTEGER;
    DECLARE @upD21Old INTEGER; DECLARE @upD22Old INTEGER; DECLARE @upD23Old INTEGER; DECLARE @upD24Old INTEGER; DECLARE @upD25Old INTEGER;
    DECLARE @upD26Old INTEGER; DECLARE @upD27Old INTEGER; DECLARE @upD28Old INTEGER; DECLARE @upD29Old INTEGER; DECLARE @upD30Old INTEGER;
    DECLARE @upD31Old INTEGER; DECLARE @upD32Old INTEGER; DECLARE @upD33Old INTEGER; DECLARE @upD34Old INTEGER; DECLARE @upD35Old INTEGER;
    DECLARE @upD36Old INTEGER; DECLARE @upD37Old INTEGER; DECLARE @upD38Old INTEGER; DECLARE @upD39Old INTEGER; DECLARE @upD40Old INTEGER;
    DECLARE @upD41Old INTEGER; DECLARE @upD42Old INTEGER; DECLARE @upD43Old INTEGER; DECLARE @upD44Old INTEGER; DECLARE @upD45Old INTEGER;
    DECLARE @upD46Old INTEGER; DECLARE @upD47Old INTEGER; DECLARE @upD48Old INTEGER; DECLARE @upD49Old INTEGER; DECLARE @upD50Old INTEGER;
    DECLARE @upAtivoOld VARCHAR(1);
    DECLARE @upRegOld VARCHAR(1);
    DECLARE @upCodUsrOld INTEGER;
    SELECT @upCodigoOld   = d.UP_CODIGO
           ,@upNomeOld    = d.UP_NOME
           ,@upD01Old     = d.UP_D01
           ,@upD02Old     = d.UP_D02
           ,@upD03Old     = d.UP_D03
           ,@upD04Old     = d.UP_D04
           ,@upD05Old     = d.UP_D05
           ,@upD06Old     = d.UP_D06
           ,@upD07Old     = d.UP_D07
           ,@upD08Old     = d.UP_D08
           ,@upD09Old     = d.UP_D09
           ,@upD10Old     = d.UP_D10
           ,@upD11Old     = d.UP_D11
           ,@upD12Old     = d.UP_D12
           ,@upD13Old     = d.UP_D13
           ,@upD14Old     = d.UP_D14
           ,@upD15Old     = d.UP_D15
           ,@upD16Old     = d.UP_D16
           ,@upD17Old     = d.UP_D17
           ,@upD18Old     = d.UP_D18
           ,@upD19Old     = d.UP_D19
           ,@upD20Old     = d.UP_D20
           ,@upD21Old     = d.UP_D21
           ,@upD22Old     = d.UP_D22
           ,@upD23Old     = d.UP_D23
           ,@upD24Old     = d.UP_D24
           ,@upD25Old     = d.UP_D25
           ,@upD26Old     = d.UP_D26
           ,@upD27Old     = d.UP_D27
           ,@upD28Old     = d.UP_D28
           ,@upD29Old     = d.UP_D29
           ,@upD30Old     = d.UP_D30
           ,@upD31Old     = d.UP_D31
           ,@upD32Old     = d.UP_D32
           ,@upD33Old     = d.UP_D33
           ,@upD34Old     = d.UP_D34
           ,@upD35Old     = d.UP_D35
           ,@upD36Old     = d.UP_D36
           ,@upD37Old     = d.UP_D37
           ,@upD38Old     = d.UP_D38
           ,@upD39Old     = d.UP_D39
           ,@upD40Old     = d.UP_D40
           ,@upD41Old     = d.UP_D41
           ,@upD42Old     = d.UP_D42
           ,@upD43Old     = d.UP_D43
           ,@upD44Old     = d.UP_D44
           ,@upD45Old     = d.UP_D45
           ,@upD46Old     = d.UP_D46
           ,@upD47Old     = d.UP_D47
           ,@upD48Old     = d.UP_D48
           ,@upD49Old     = d.UP_D49
           ,@upD50Old     = d.UP_D50
           ,@upAtivoOld   = d.UP_ATIVO
           ,@upRegOld     = d.UP_REG
           ,@upCodUsrOld  = d.UP_CODUSR         
      FROM USUARIOPERFIL d WHERE d.UP_CODIGO=@upCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @upCodigoOld<>@upCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @upNomeOld<>@upNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(UP_CODIGO,0) FROM USUARIOPERFIL WHERE UP_NOME=@upNomeNew;
      IF( @uiCodigo <> 0 )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA CLASSIF ALVO COM CODIGO %i',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @upRegOld <> @upRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@upRegOld,@upRegNew,@usrDireito31 );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.USUARIOPERFIL
       SET UP_NOME   = @upNomeNew
          ,UP_D01    = @upD01New
          ,UP_D02    = @upD02New
          ,UP_D03    = @upD03New
          ,UP_D04    = @upD04New
          ,UP_D05    = @upD05New
          ,UP_D06    = @upD06New
          ,UP_D07    = @upD07New
          ,UP_D08    = @upD08New
          ,UP_D09    = @upD09New
          ,UP_D10    = @upD10New
          ,UP_D11    = @upD11New
          ,UP_D12    = @upD12New
          ,UP_D13    = @upD13New
          ,UP_D14    = @upD14New
          ,UP_D15    = @upD15New
          ,UP_D16    = @upD16New
          ,UP_D17    = @upD17New
          ,UP_D18    = @upD18New
          ,UP_D19    = @upD19New
          ,UP_D20    = @upD20New
          ,UP_D21    = @upD21New
          ,UP_D22    = @upD22New
          ,UP_D23    = @upD23New
          ,UP_D24    = @upD24New
          ,UP_D25    = @upD25New
          ,UP_D26    = @upD26New
          ,UP_D27    = @upD27New
          ,UP_D28    = @upD28New
          ,UP_D29    = @upD29New
          ,UP_D30    = @upD30New
          ,UP_D31    = @upD31New
          ,UP_D32    = @upD32New
          ,UP_D33    = @upD33New
          ,UP_D34    = @upD34New
          ,UP_D35    = @upD35New
          ,UP_D36    = @upD36New
          ,UP_D37    = @upD37New
          ,UP_D38    = @upD38New
          ,UP_D39    = @upD39New
          ,UP_D40    = @upD40New       
          ,UP_D41    = @upD41New
          ,UP_D42    = @upD42New
          ,UP_D43    = @upD43New
          ,UP_D44    = @upD44New
          ,UP_D45    = @upD45New
          ,UP_D46    = @upD46New
          ,UP_D47    = @upD47New
          ,UP_D48    = @upD48New
          ,UP_D49    = @upD49New
          ,UP_D50    = @upD50New          
          ,UP_ATIVO  = @upAtivoNew
          ,UP_REG    = @upRegNew
          ,UP_CODUSR = @upCodUsrNew
    WHERE UP_CODIGO  = @upCodigoNew;     
    -- Gravando LOG
    IF( (@upNomeOld<>@upNomeNew) 
    OR (@upD01Old<>@upD01New) OR (@upD02Old<>@upD02New) OR (@upD03Old<>@upD03New) OR (@upD04Old<>@upD04New) OR (@upD05Old<>@upD05New) 
    OR (@upD06Old<>@upD06New) OR (@upD07Old<>@upD07New) OR (@upD08Old<>@upD08New) OR (@upD09Old<>@upD09New) OR (@upD10Old<>@upD10New)       
    OR (@upD11Old<>@upD11New) OR (@upD12Old<>@upD12New) OR (@upD13Old<>@upD13New) OR (@upD14Old<>@upD14New) OR (@upD15Old<>@upD15New) 
    OR (@upD16Old<>@upD16New) OR (@upD17Old<>@upD17New) OR (@upD18Old<>@upD18New) OR (@upD19Old<>@upD19New) OR (@upD20Old<>@upD20New) 
    OR (@upD21Old<>@upD21New) OR (@upD22Old<>@upD22New) OR (@upD23Old<>@upD23New) OR (@upD24Old<>@upD24New) OR (@upD25Old<>@upD25New) 
    OR (@upD26Old<>@upD26New) OR (@upD27Old<>@upD27New) OR (@upD28Old<>@upD28New) OR (@upD29Old<>@upD29New) OR (@upD30Old<>@upD30New) 
    OR (@upD31Old<>@upD31New) OR (@upD32Old<>@upD32New) OR (@upD33Old<>@upD33New) OR (@upD34Old<>@upD34New) OR (@upD35Old<>@upD35New) 
    OR (@upD36Old<>@upD36New) OR (@upD37Old<>@upD37New) OR (@upD38Old<>@upD38New) OR (@upD39Old<>@upD39New) OR (@upD40Old<>@upD40New) 
    OR (@upD41Old<>@upD41New) OR (@upD42Old<>@upD42New) OR (@upD43Old<>@upD43New) OR (@upD44Old<>@upD44New) OR (@upD45Old<>@upD45New) 
    OR (@upD46Old<>@upD46New) OR (@upD47Old<>@upD47New) OR (@upD48Old<>@upD48New) OR (@upD49Old<>@upD49New) OR (@upD50Old<>@upD50New)        
    OR (@upAtivoOld<>@upAtivoNew) OR (@upRegOld<>@upRegNew) ) BEGIN
      INSERT INTO dbo.BKPUSUARIOPERFIL(
        UP_ACAO
        ,UP_CODIGO
        ,UP_NOME
        ,UP_D01,UP_D02,UP_D03,UP_D04,UP_D05,UP_D06,UP_D07,UP_D08,UP_D09,UP_D10
        ,UP_D11,UP_D12,UP_D13,UP_D14,UP_D15,UP_D16,UP_D17,UP_D18,UP_D19,UP_D20
        ,UP_D21,UP_D22,UP_D23,UP_D24,UP_D25,UP_D26,UP_D27,UP_D28,UP_D29,UP_D30
        ,UP_D31,UP_D32,UP_D33,UP_D34,UP_D35,UP_D36,UP_D37,UP_D38,UP_D39,UP_D40
        ,UP_D41,UP_D42,UP_D43,UP_D44,UP_D45,UP_D46,UP_D47,UP_D48,UP_D49,UP_D50        
        ,UP_ATIVO
        ,UP_REG
        ,UP_CODUSR) VALUES(
        'A'            -- UP_ACAO
        ,@upCodigoNew  -- UP_CODIGO
        ,@upNomeNew    -- UP_NOME
        ,@upD01New,@upD02New,@upD03New,@upD04New,@upD05New,@upD06New,@upD07New,@upD08New,@upD09New,@upD10New
        ,@upD11New,@upD12New,@upD13New,@upD14New,@upD15New,@upD16New,@upD17New,@upD18New,@upD19New,@upD20New
        ,@upD21New,@upD22New,@upD23New,@upD24New,@upD25New,@upD26New,@upD27New,@upD28New,@upD29New,@upD30New
        ,@upD31New,@upD32New,@upD33New,@upD34New,@upD35New,@upD36New,@upD37New,@upD38New,@upD39New,@upD40New
        ,@upD41New,@upD42New,@upD43New,@upD44New,@upD45New,@upD46New,@upD47New,@upD48New,@upD49New,@upD50New        
        ,@upAtivoNew   -- UP_ATIVO
        ,@upRegNew     -- UP_REG
        ,@upCodUsrNew  -- UP_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewUSUARIOPERFIL_BD ON dbo.VUSUARIOPERFIL
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkIntUsr INTEGER = 0; -- Para procurar campo foreign key int (USUARIO)
  DECLARE @erroOld VARCHAR(70);  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @upCodigoOld INTEGER;
  DECLARE @upNomeOld VARCHAR(15);
  DECLARE @upD01Old INTEGER; DECLARE @upD02Old INTEGER; DECLARE @upD03Old INTEGER; DECLARE @upD04Old INTEGER; DECLARE @upD05Old INTEGER;
  DECLARE @upD06Old INTEGER; DECLARE @upD07Old INTEGER; DECLARE @upD08Old INTEGER; DECLARE @upD09Old INTEGER; DECLARE @upD10Old INTEGER;
  DECLARE @upD11Old INTEGER; DECLARE @upD12Old INTEGER; DECLARE @upD13Old INTEGER; DECLARE @upD14Old INTEGER; DECLARE @upD15Old INTEGER;
  DECLARE @upD16Old INTEGER; DECLARE @upD17Old INTEGER; DECLARE @upD18Old INTEGER; DECLARE @upD19Old INTEGER; DECLARE @upD20Old INTEGER;
  DECLARE @upD21Old INTEGER; DECLARE @upD22Old INTEGER; DECLARE @upD23Old INTEGER; DECLARE @upD24Old INTEGER; DECLARE @upD25Old INTEGER;
  DECLARE @upD26Old INTEGER; DECLARE @upD27Old INTEGER; DECLARE @upD28Old INTEGER; DECLARE @upD29Old INTEGER; DECLARE @upD30Old INTEGER;
  DECLARE @upD31Old INTEGER; DECLARE @upD32Old INTEGER; DECLARE @upD33Old INTEGER; DECLARE @upD34Old INTEGER; DECLARE @upD35Old INTEGER;
  DECLARE @upD36Old INTEGER; DECLARE @upD37Old INTEGER; DECLARE @upD38Old INTEGER; DECLARE @upD39Old INTEGER; DECLARE @upD40Old INTEGER;
  DECLARE @upD41Old INTEGER; DECLARE @upD42Old INTEGER; DECLARE @upD43Old INTEGER; DECLARE @upD44Old INTEGER; DECLARE @upD45Old INTEGER;
  DECLARE @upD46Old INTEGER; DECLARE @upD47Old INTEGER; DECLARE @upD48Old INTEGER; DECLARE @upD49Old INTEGER; DECLARE @upD50Old INTEGER;
  DECLARE @upAtivoOld VARCHAR(1);
  DECLARE @upRegOld VARCHAR(1);
  DECLARE @upCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @usrDireitoOld INTEGER;
  DECLARE @upDirOld INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @upCodigoOld    = d.UP_CODIGO
         ,@upNomeOld     = d.UP_NOME
         ,@upD01Old      = d.UP_D01
         ,@upD02Old      = d.UP_D02
         ,@upD03Old      = d.UP_D03
         ,@upD04Old      = d.UP_D04
         ,@upD05Old      = d.UP_D05
         ,@upD06Old      = d.UP_D06
         ,@upD07Old      = d.UP_D07
         ,@upD08Old      = d.UP_D08
         ,@upD09Old      = d.UP_D09
         ,@upD10Old      = d.UP_D10
         ,@upD11Old      = d.UP_D11
         ,@upD12Old      = d.UP_D12
         ,@upD13Old      = d.UP_D13
         ,@upD14Old      = d.UP_D14
         ,@upD15Old      = d.UP_D15
         ,@upD16Old      = d.UP_D16
         ,@upD17Old      = d.UP_D17
         ,@upD18Old      = d.UP_D18
         ,@upD19Old      = d.UP_D19
         ,@upD20Old      = d.UP_D20
         ,@upD21Old      = d.UP_D21
         ,@upD22Old      = d.UP_D22
         ,@upD23Old      = d.UP_D23
         ,@upD24Old      = d.UP_D24
         ,@upD25Old      = d.UP_D25
         ,@upD26Old      = d.UP_D26
         ,@upD27Old      = d.UP_D27
         ,@upD28Old      = d.UP_D28
         ,@upD29Old      = d.UP_D29
         ,@upD30Old      = d.UP_D30
         ,@upD31Old      = d.UP_D31
         ,@upD32Old      = d.UP_D32
         ,@upD33Old      = d.UP_D33
         ,@upD34Old      = d.UP_D34
         ,@upD35Old      = d.UP_D35
         ,@upD36Old      = d.UP_D36
         ,@upD37Old      = d.UP_D37
         ,@upD38Old      = d.UP_D38
         ,@upD39Old      = d.UP_D39
         ,@upD40Old      = d.UP_D40
         ,@upD41Old      = d.UP_D41
         ,@upD42Old      = d.UP_D42
         ,@upD43Old      = d.UP_D43
         ,@upD44Old      = d.UP_D44
         ,@upD45Old      = d.UP_D45
         ,@upD46Old      = d.UP_D46
         ,@upD47Old      = d.UP_D47
         ,@upD48Old      = d.UP_D48
         ,@upD49Old      = d.UP_D49
         ,@upD50Old      = d.UP_D50
         ,@upAtivoOld    = d.UP_ATIVO
         ,@upRegOld      = d.UP_REG
         ,@upCodUsrOld   = d.UP_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upDirOld      = UP.UP_D04
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.UP_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@upCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upDirOld<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 04 PARA EXCLUIR NA TABELA CLASSIF ALVO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@upRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    ------------------------------------------
    --   Checando a FK ALV_CODACL(ALVOCLAFFIC)
    ------------------------------------------
    SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODUP=@upCodigoOld;
    IF( @fkIntUsr > 0 )
      RAISERROR('PERFIL UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --
    --
    DELETE FROM dbo.USUARIOPERFIL WHERE UP_CODIGO=@upCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPUSUARIOPERFIL(
      UP_ACAO
      ,UP_CODIGO
      ,UP_NOME
      ,UP_D01,UP_D02,UP_D03,UP_D04,UP_D05,UP_D06,UP_D07,UP_D08,UP_D09,UP_D10
      ,UP_D11,UP_D12,UP_D13,UP_D14,UP_D15,UP_D16,UP_D17,UP_D18,UP_D19,UP_D20
      ,UP_D21,UP_D22,UP_D23,UP_D24,UP_D25,UP_D26,UP_D27,UP_D28,UP_D29,UP_D30
      ,UP_D31,UP_D32,UP_D33,UP_D34,UP_D35,UP_D36,UP_D37,UP_D38,UP_D39,UP_D40
      ,UP_D41,UP_D42,UP_D43,UP_D44,UP_D45,UP_D46,UP_D47,UP_D48,UP_D49,UP_D50              
      ,UP_ATIVO
      ,UP_REG
      ,UP_CODUSR) VALUES(
      'E'              -- UP_ACAO
      ,@upCodigoOld    -- UP_CODIGO
      ,@upNomeOld      -- UP_NOME
      ,@upD01Old,@upD02Old,@upD03Old,@upD04Old,@upD05Old,@upD06Old,@upD07Old,@upD08Old,@upD09Old,@upD10Old
      ,@upD11Old,@upD12Old,@upD13Old,@upD14Old,@upD15Old,@upD16Old,@upD17Old,@upD18Old,@upD19Old,@upD20Old
      ,@upD21Old,@upD22Old,@upD23Old,@upD24Old,@upD25Old,@upD26Old,@upD27Old,@upD28Old,@upD29Old,@upD30Old
      ,@upD31Old,@upD32Old,@upD33Old,@upD34Old,@upD35Old,@upD36Old,@upD37Old,@upD38Old,@upD39Old,@upD40Old
      ,@upD41Old,@upD42Old,@upD43Old,@upD44Old,@upD45Old,@upD46Old,@upD47Old,@upD48Old,@upD49Old,@upD50Old
      ,@upAtivoOld     -- UP_ATIVO
      ,@upRegOld       -- UP_REG
      ,@upCodUsrOld    -- UP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPUSUARIOPERFIL_BUD ON dbo.BKPUSUARIOPERFIL
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END 
-------------------------------------------------------------------------------------
--                                 V E I C U L O                                   --
--trgveiculo
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewVEICULO_BI ON dbo.VVEICULO
INSTEAD OF INSERT 
AS
BEGIN
  -- ------------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO             |INS  |UPD |DEL | TIPO               | Obs
  -- ------------------|-----|----|----|--------------------|----------------------------------------------------------
  -- VCL_CODIGO        | PK  |    |    | VC(20) NN          | 
  -- VCL_CODFVR        | SEL |    |    | INT NN             | Campo relacionado (FAVORECIDO)  
  -- FVR_APELIDO       | SEL |    |    | VC(15) NN          | Campo relacionado (FAVORECIDO)     
  -- VCL_CODVCR        | SEL |    |    | INT NN             | Campo relacionado (VEICULOCOR)
  -- VCR_NOME          | SEL |    |    | VC(30) NN          | Campo relacionado (VEICULOCOR)  
  -- VCL_CODVTP        | SEL |    |    | VC(3) NN           | Campo relacionado (VEICULOTIPO)
  -- VTP_NOME          | SEL |    |    | VC(20) NN          | Campo relacionado (VEICULOTOPO)    
  -- VCL_CODVMD        | SEL |    |    | INT NN             | Campo relacionado (VEICULOMODELO)
  -- VMD_NOME          | SEL |    |    | VC(20) NN          | Campo relacionado (VEICULOMODELO)    
  -- VCL_ANO           |     |    |    | INT NN             | Ano de fabricacao
  -- FVR_ATIVO         | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- FVR_REG           | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- VCL_CODUSR        |     |    |    | INT NN             |
  -- USR_APELIDO       | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB        | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D38            | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31            | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ------------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(20)=NULL;   -- Olhando duplicidade do codigo
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vclCodigoNew VARCHAR(20);
  DECLARE @vclCodFvrNew INTEGER;      
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @vclCodVcrNew INTEGER;
  DECLARE @vcrNomeNew VARCHAR(30);
  DECLARE @vclCodVtpNew VARCHAR(3);
  DECLARE @vtpNomeNew VARCHAR(20);
  DECLARE @vclCodVmdNew INTEGER;
  DECLARE @vmdNomeNew VARCHAR(20);
  DECLARE @vclAnoNew INTEGER;  
  DECLARE @vclAtivoNew VARCHAR(1);
  DECLARE @vclRegNew VARCHAR(1);
  DECLARE @vclCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vclCodigoNew    = dbo.fncTranslate(i.VCL_CODIGO,20)
         ,@vclCodFvrNew   = i.VCL_CODFVR
         ,@fvrApelidoNew  = COALESCE(FVR.FVR_APELIDO,'ERRO')         
         ,@vclCodVcrNew   = i.VCL_CODVCR         
         ,@vcrNomeNew     = COALESCE(VCR.VCR_NOME,'ERRO')
         ,@vclCodVtpNew   = dbo.fncTranslate(i.VCL_CODVTP,3)
         ,@vtpNomeNew     = COALESCE(VTP.VTP_NOME,'ERRO')
         ,@vclCodVmdNew   = i.VCL_CODVMD
         ,@vmdNomeNew     = COALESCE(VMD.VMD_NOME,'ERRO')
         ,@vclAnoNew      = i.VCL_ANO
         ,@vclAtivoNew    = UPPER(i.VCL_ATIVO)
         ,@vclRegNew      = UPPER(i.VCL_REG)
         ,@vclCodUsrNew   = i.VCL_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New       = UP.UP_D38
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.VCL_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'             
    LEFT OUTER JOIN VEICULOCOR VCR ON i.VCL_CODVCR=VCR.VCR_CODIGO AND VCR.VCR_ATIVO='S'
    LEFT OUTER JOIN VEICULOTIPO VTP ON i.VCL_CODVTP=VTP.VTP_CODIGO AND VTP.VTP_ATIVO='S'
    LEFT OUTER JOIN VEICULOMODELO VMD ON i.VCL_CODVMD=VMD.VMD_CODIGO AND VMD.VMD_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.VCL_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @fvrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@vclCodFvrNew);
    IF( @vcrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO COR %i PARA ESTE REGISTRO',15,1,@vclCodVcrNew);        
    IF( @vtpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO %s PARA ESTE REGISTRO',15,1,@vclCodVtpNew);        
    IF( @vmdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO MODELO %s PARA ESTE REGISTRO',15,1,@vclCodVmdNew);        
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vclCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @usrApelidoNew<>'SISTEMA' ) BEGIN    
      IF( @upD38New<2 )
        RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA INCLUIR NA TABELA VEICULO',15,1,@usrApelidoNew);
    END    
    --  
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(VCL_CODIGO,'OK') FROM VEICULO WHERE VCL_CODIGO=@vclCodigoNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA VEICULO %s',15,1,@uiCodigo);
    --  
    INSERT INTO dbo.VEICULO( 
      VCL_CODIGO
      ,VCL_CODFVR            
      ,VCL_CODVCR
      ,VCL_CODVTP
      ,VCL_CODVMD
      ,VCL_ANO      
      ,VCL_ATIVO
      ,VCL_REG
      ,VCL_CODUSR) VALUES(
      @vclCodigoNew   -- VCL_CODIGO
      ,@vclCodFvrNew  -- VCL_CODFVR            
      ,@vclCodVcrNew  -- VCL_CODVCR
      ,@vclCodVtpNew  -- VCL_CODVTP
      ,@vclCodVmdNew  -- VCL_CODVMD
      ,@vclAnoNew     -- VCL_ANO
      ,@vclAtivoNew   -- VCL_ATIVO
      ,@vclRegNew     -- VCL_REG
      ,@vclCodUsrNew  -- VCL_CODUSR         
    );     
    ---------------
    -- Gravando LOG
    ---------------
    INSERT INTO dbo.BKPVEICULO(
      VCL_ACAO
      ,VCL_CODIGO
      ,VCL_CODFVR            
      ,VCL_CODVCR
      ,VCL_CODVTP
      ,VCL_CODVMD
      ,VCL_ANO      
      ,VCL_ATIVO
      ,VCL_REG
      ,VCL_CODUSR) VALUES(
      'I'             -- VCL_ACAO
      ,@vclCodigoNew  -- VCL_CODIGO
      ,@vclCodFvrNew  -- VCL_CODFVR            
      ,@vclCodVcrNew  -- VCL_CODVCR
      ,@vclCodVtpNew  -- VCL_CODVTP
      ,@vclCodVmdNew  -- VCL_CODVMD
      ,@vclAnoNew     -- VCL_ANO      
      ,@vclAtivoNew   -- VCL_ATIVO
      ,@vclRegNew     -- VCL_REG
      ,@vclCodUsrNew  -- VCL_CODUSR         
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULO_BU ON dbo.VVEICULO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroNew VARCHAR(70); -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @vclCodigoNew VARCHAR(20);
  DECLARE @vclCodFvrNew INTEGER;      
  DECLARE @fvrApelidoNew VARCHAR(15);
  DECLARE @vclCodVcrNew INTEGER;
  DECLARE @vcrNomeNew VARCHAR(30);
  DECLARE @vclCodVtpNew VARCHAR(3);
  DECLARE @vtpNomeNew VARCHAR(20);
  DECLARE @vclCodVmdNew INTEGER;
  DECLARE @vmdNomeNew VARCHAR(20);
  DECLARE @vclAnoNew INTEGER;    
  DECLARE @vclAtivoNew VARCHAR(1);
  DECLARE @vclRegNew VARCHAR(1);
  DECLARE @vclCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @vclCodigoNew    = dbo.fncTranslate(i.VCL_CODIGO,20)
         ,@vclCodFvrNew   = i.VCL_CODFVR
         ,@fvrApelidoNew  = COALESCE(FVR.FVR_APELIDO,'ERRO')         
         ,@vclCodVcrNew   = i.VCL_CODVCR
         ,@vcrNomeNew     = COALESCE(VCR.VCR_NOME,'ERRO')
         ,@vclCodVtpNew   = dbo.fncTranslate(i.VCL_CODVTP,3)
         ,@vtpNomeNew     = COALESCE(VTP.VTP_NOME,'ERRO')
         ,@vclCodVmdNew   = i.VCL_CODVMD
         ,@vmdNomeNew     = COALESCE(VMD.VMD_NOME,'ERRO')
         ,@vclAnoNew      = i.VCL_ANO         
         ,@vclAtivoNew    = UPPER(i.VCL_ATIVO)
         ,@vclRegNew      = UPPER(i.VCL_REG)
         ,@vclCodUsrNew   = i.VCL_CODUSR         
         ,@usrApelidoNew  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New       = UP.UP_D38
         ,@upD31New       = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.VCL_CODFVR=FVR.FVR_CODIGO AND FVR.FVR_ATIVO='S'             
    LEFT OUTER JOIN VEICULOCOR VCR ON i.VCL_CODVCR=VCR.VCR_CODIGO AND VCR.VCR_ATIVO='S'
    LEFT OUTER JOIN VEICULOTIPO VTP ON i.VCL_CODVTP=VTP.VTP_CODIGO AND VTP.VTP_ATIVO='S'
    LEFT OUTER JOIN VEICULOMODELO VMD ON i.VCL_CODVMD=VMD.VMD_CODIGO AND VMD.VMD_ATIVO='S'    
    LEFT OUTER JOIN USUARIO USR ON i.VCL_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @fvrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@vclCodFvrNew);
    IF( @vcrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO COR %i PARA ESTE REGISTRO',15,1,@vclCodVcrNew);        
    IF( @vtpNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO TIPO %s PARA ESTE REGISTRO',15,1,@vclCodVtpNew);        
    IF( @vmdNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO MODELO %s PARA ESTE REGISTRO',15,1,@vclCodVmdNew);        
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vclCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA ALTERAR NA TABELA VEICULO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    ------------------------------------------------------------------------------------
    DECLARE @vclCodigoOld VARCHAR(20);
    DECLARE @vclCodFvrOld INTEGER;    
    DECLARE @vclCodVcrOld INTEGER;
    DECLARE @vclCodVtpOld VARCHAR(3);
    DECLARE @vclCodVmdOld INTEGER;
    DECLARE @vclAnoOld INTEGER;    
    DECLARE @vclAtivoOld VARCHAR(1);
    DECLARE @vclRegOld VARCHAR(1);
    DECLARE @vclCodUsrOld INTEGER;
    
    SELECT @vclCodigoOld    = d.VCL_CODIGO
           ,@vclCodFvrOld   = d.VCL_CODFVR
           ,@vclCodVcrOld   = d.VCL_CODVCR
           ,@vclCodVtpOld   = d.VCL_CODVTP
           ,@vclCodVmdOld   = d.VCL_CODVMD
           ,@vclAnoOld      = d.VCL_ANO
           ,@vclAtivoOld    = d.VCL_ATIVO
           ,@vclRegOld      = d.VCL_REG
           ,@vclCodUsrOld   = d.VCL_CODUSR         
      FROM VEICULO d WHERE d.VCL_CODIGO=@vclCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @vclCodigoOld<>@vclCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    --  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @vclRegOld <> @vclRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@vclRegOld,@vclRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.VEICULO
       SET VCL_CODFVR   = @vclCodFvrNew
           ,VCL_CODVCR  = @vclCodVcrNew       
           ,VCL_CODVTP  = @vclCodVtpNew
           ,VCL_CODVMD  = @vclCodVmdNew
           ,VCL_ANO     = @vclAnoNew           
           ,VCL_ATIVO   = @vclAtivoNew         
           ,VCL_REG     = @vclRegNew           
           ,VCL_CODUSR  = @vclCodUsrNew        
    WHERE VCL_CODIGO = @vclCodigoNew;     
    -- Gravando LOG

    IF( (@vclCodFvrOld<>@vclCodFvrNew) OR (@vclCodVcrOld<>@vclCodVcrNew) OR (@vclCodVtpOld<>@vclCodVtpNew) OR (@vclAnoOld<>@vclAnoNew) 
     OR (@vclCodVmdOld<>@vclCodVmdNew) OR (@vclAtivoOld<>@vclAtivoNew) OR (@vclRegOld<>@vclRegNew) 
     OR (@vclCodUsrOld<>@vclCodUsrNew) ) BEGIN
      INSERT INTO dbo.BKPVEICULO(
        VCL_ACAO
        ,VCL_CODIGO
        ,VCL_CODFVR              
        ,VCL_CODVCR
        ,VCL_CODVTP
        ,VCL_CODVMD
        ,VCL_ANO        
        ,VCL_ATIVO
        ,VCL_REG
        ,VCL_CODUSR) VALUES(
        'A'             -- VCL_ACAO
        ,@vclCodigoNew  -- VCL_CODIGO
        ,@vclCodFvrNew  -- VCL_CODFVR              
        ,@vclCodVcrNew  -- VCL_CODVCR
        ,@vclCodVtpNew  -- VCL_CODVTP
        ,@vclCodVmdNew  -- VCL_CODVMD
        ,@vclAnoNew     -- VCL_ANO        
        ,@vclAtivoNew   -- VCL_ATIVO
        ,@vclRegNew     -- VCL_REG
        ,@vclCodUsrNew  -- VCL_CODUSR         
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULO_BD ON dbo.VVEICULO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntAml INTEGER = 0;  -- Para procurar campo foreign key int (VEICULOLOTE)
  --DECLARE @fkIntAmp INTEGER = 0;  -- Para procurar campo foreign key int (VEICULOPRODUTO)  
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vclCodigoOld VARCHAR(20);
  DECLARE @vclCodFvrOld INTEGER;      
  DECLARE @vclCodVcrOld INTEGER;
  DECLARE @vclCodVtpOld VARCHAR(3);
  DECLARE @vclCodVmdOld INTEGER;
  DECLARE @vclAnoOld INTEGER;  
  DECLARE @vclAtivoOld VARCHAR(1);
  DECLARE @vclRegOld VARCHAR(1);
  DECLARE @vclCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD38Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vclCodigoOld    = d.VCL_CODIGO
         ,@vclCodFvrOld   = d.VCL_CODFVR      
         ,@vclCodVcrOld   = d.VCL_CODVCR
         ,@vclCodVtpOld   = d.VCL_CODVTP
         ,@vclCodVmdOld   = d.VCL_CODVMD
         ,@vclAnoOld      = d.VCL_ANO
         ,@vclAtivoOld    = d.VCL_ATIVO
         ,@vclRegOld      = d.VCL_REG
         ,@vclCodUsrOld   = d.VCL_CODUSR         
         ,@usrApelidoOld  = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld   = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38Old       = UP.UP_D38
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.VCL_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vclCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD38Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA EXCLUIR NA TABELA VEICULO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@vclRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    -----------------------------------------------
    --   Checando a FK AML_CODAM(VEICULOLOTE)
    --                 AMP_CODAM(VEICULOPRODUTO)
    -----------------------------------------------
    /*
    SELECT TOP 1 @fkIntAml=COALESCE(AML_CODIGO,0) FROM VEICULOLOTE WHERE AML_CODAM=@vclCodigoOld;
    IF( @fkIntAml > 0 )
      RAISERROR('VEICULO UTILIZADO NO LOTE %i',15,1,@fkIntAml);
    SELECT TOP 1 @fkIntAmp=COALESCE(AMP_CODIGO,0) FROM VEICULOPRODUTO WHERE AMP_CODAM=@vclCodigoOld;
    IF( @fkIntAmp > 0 )
      RAISERROR('VEICULO UTILIZADO NO PRODUTO %i',15,1,@fkIntAmp);
    */  
    --
    --
    DELETE FROM dbo.VEICULO WHERE VCL_CODIGO=@vclCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULO(
      VCL_ACAO
      ,VCL_CODIGO
      ,VCL_CODFVR            
      ,VCL_CODVCR
      ,VCL_CODVTP
      ,VCL_CODVMD
      ,VCL_ANO      
      ,VCL_ATIVO
      ,VCL_REG
      ,VCL_CODUSR) VALUES(
      'E'             -- VCL_ACAO
      ,@vclCodigoOld  -- VCL_CODIGO
      ,@vclCodFvrOld  -- VCL_CODFVR            
      ,@vclCodVcrOld  -- VCL_CODVCR
      ,@vclCodVtpOld  -- VCL_CODVTP
      ,@vclCodVmdOld  -- VCL_CODVMD
      ,@vclAnoOld     -- VCL_ANO      
      ,@vclAtivoOld   -- VCL_ATIVO
      ,@vclRegOld     -- VCL_REG
      ,@vclCodUsrOld  -- VCL_CODUSR         
    );
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPVEICULO_BUD ON dbo.BKPVEICULO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END 
-------------------------------------------------------------------------------------
--                                 V E I C U L O C O R
--trgveiculocor
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewVEICULOCOR_BI ON dbo.VVEICULOCOR
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- VCR_CODIGO     | PK  |    |    | INT                |  Auto incremento
  -- VCR_NOME       |     |    |    | VC(30) NN          |
  -- VCR_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- VCR_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- VCR_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D38         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @uiNome VARCHAR(30) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vcrCodigoNew INTEGER;
  DECLARE @vcrNomeNew VARCHAR(30);
  DECLARE @vcrAtivoNew VARCHAR(1);
  DECLARE @vcrRegNew VARCHAR(1);
  DECLARE @vcrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vcrCodigoNew   = i.VCR_CODIGO
         ,@vcrNomeNew    = dbo.fncTranslate(i.VCR_NOME,30)
         ,@vcrAtivoNew   = UPPER(i.VCR_ATIVO)
         ,@vcrRegNew     = UPPER(i.VCR_REG)
         ,@vcrCodUsrNew  = i.VCR_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New      = UP.UP_D38
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.VCR_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vcrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA INCLUIR NA TABELA VEICULOCOR',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(VCR_CODIGO,0) FROM VEICULOCOR WHERE VCR_NOME=@vcrNomeNew;
    IF( @uiCodigo <> 0 )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA VEICULOCOR COM CODIGO %i',15,1,@uiCodigo);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @vcrRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@vcrRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.VEICULOCOR( 
      VCR_NOME
      ,VCR_ATIVO
      ,VCR_REG
      ,VCR_CODUSR) VALUES(
      @vcrNomeNew     -- VCR_NOME
      ,@vcrAtivoNew   -- VCR_ATIVO
      ,@vcrRegNew     -- VCR_REG
      ,@vcrCodUsrNew  -- VCR_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULOCOR(
      VCR_ACAO
      ,VCR_CODIGO
      ,VCR_NOME
      ,VCR_ATIVO
      ,VCR_REG
      ,VCR_CODUSR) VALUES(
      'I'                     -- VCR_ACAO
      ,IDENT_CURRENT('VEICULOCOR')   -- VCR_CODIGO
      ,@vcrNomeNew            -- VCR_NOME
      ,@vcrAtivoNew           -- VCR_ATIVO
      ,@vcrRegNew             -- VCR_REG
      ,@vcrCodUsrNew          -- VCR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULOCOR_BU ON dbo.VVEICULOCOR
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @vcrCodigoNew INTEGER;
  DECLARE @vcrNomeNew VARCHAR(30);
  DECLARE @vcrAtivoNew VARCHAR(1);
  DECLARE @vcrRegNew VARCHAR(1);
  DECLARE @vcrCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @vcrCodigoNew   = i.VCR_CODIGO
         ,@vcrNomeNew    = dbo.fncTranslate(i.VCR_NOME,30)
         ,@vcrAtivoNew   = UPPER(i.VCR_ATIVO)
         ,@vcrRegNew     = UPPER(i.VCR_REG)
         ,@vcrCodUsrNew  = i.VCR_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New      = UP.UP_D38
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.VCR_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vcrCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA ALTERAR NA TABELA VEICULOCOR',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @vcrCodigoOld INTEGER;
    DECLARE @vcrNomeOld VARCHAR(30);
    DECLARE @vcrAtivoOld VARCHAR(1);
    DECLARE @vcrRegOld VARCHAR(1);
    DECLARE @vcrCodUsrOld INTEGER;
    SELECT @vcrCodigoOld   = d.VCR_CODIGO
           ,@vcrNomeOld    = d.VCR_NOME
           ,@vcrAtivoOld   = d.VCR_ATIVO
           ,@vcrRegOld     = d.VCR_REG
           ,@vcrCodUsrOld  = d.VCR_CODUSR         
      FROM VEICULOCOR d WHERE d.VCR_CODIGO=@vcrCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @vcrCodigoOld<>@vcrCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @vcrNomeOld<>@vcrNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(VCR_CODIGO,0) FROM VEICULOCOR WHERE VCR_NOME=@vcrNomeNew;
      IF( @uiCodigo <> 0 )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA VEICULOCOR COM CODIGO %i',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @vcrRegOld <> @vcrRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@vcrRegOld,@vcrRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.VEICULOCOR
       SET VCR_NOME   = @vcrNomeNew
          ,VCR_ATIVO  = @vcrAtivoNew
          ,VCR_REG    = @vcrRegNew
          ,VCR_CODUSR = @vcrCodUsrNew
    WHERE VCR_CODIGO  = @vcrCodigoNew;     
    -- Gravando LOG
    IF( (@vcrNomeOld<>@vcrNomeNew) OR (@vcrAtivoOld<>@vcrAtivoNew) OR (@vcrRegOld<>@vcrRegNew) ) BEGIN
      INSERT INTO dbo.BKPVEICULOCOR(
        VCR_ACAO
        ,VCR_CODIGO
        ,VCR_NOME
        ,VCR_ATIVO
        ,VCR_REG
        ,VCR_CODUSR) VALUES(
        'A'             -- VCR_ACAO
        ,@vcrCodigoNew  -- VCR_CODIGO
        ,@vcrNomeNew    -- VCR_NOME
        ,@vcrAtivoNew   -- VCR_ATIVO
        ,@vcrRegNew     -- VCR_REG
        ,@vcrCodUsrNew  -- VCR_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULOCOR_BD ON dbo.VVEICULOCOR
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @erroOld VARCHAR(70);       -- Buscando retorno de erro para funcao
  DECLARE @fkStrVcl VARCHAR(10)=NULL; -- Para procurar campo foreign key(VEICULO) 
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vcrCodigoOld INTEGER;
  DECLARE @vcrNomeOld VARCHAR(30);
  DECLARE @vcrAtivoOld VARCHAR(1);
  DECLARE @vcrRegOld VARCHAR(1);
  DECLARE @vcrCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD38Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vcrCodigoOld   = d.VCR_CODIGO
         ,@vcrNomeOld    = d.VCR_NOME
         ,@vcrAtivoOld   = d.VCR_ATIVO
         ,@vcrRegOld     = d.VCR_REG
         ,@vcrCodUsrOld  = d.VCR_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38Old      = UP.UP_D38
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.VCR_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vcrCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD38Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA EXCLUIR NA TABELA VEICULOCOR',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@vcrRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK VCL_CODVCR(VEICULO)
    --------------------------------------
    SELECT TOP 1 @fkStrVcl=COALESCE(VCL_CODIGO,NULL) FROM VEICULO WHERE VCL_CODVCR=@vcrCodigoOld;
    IF( @fkStrVcl IS NOT NULL )
      RAISERROR('COR UTILIZADO NO VEICULO %s',15,1,@fkStrVcl);
    --
    DELETE FROM dbo.VEICULOCOR WHERE VCR_CODIGO=@vcrCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULOCOR(
      VCR_ACAO
      ,VCR_CODIGO
      ,VCR_NOME
      ,VCR_ATIVO
      ,VCR_REG
      ,VCR_CODUSR) VALUES(
      'E'               -- VCR_ACAO
      ,@vcrCodigoOld    -- VCR_CODIGO
      ,@vcrNomeOld      -- VCR_NOME
      ,@vcrAtivoOld     -- VCR_ATIVO
      ,@vcrRegOld       -- VCR_REG
      ,@vcrCodUsrOld    -- VCR_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPVEICULOCOR_BUD ON dbo.BKPVEICULOCOR
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                               V E I C U L O F A B R I C A N T E
--trgveiculofabricante
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewVEICULOFABRICANTE_BI ON dbo.VVEICULOFABRICANTE
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- VFB_CODIGO     | PK  |    |    | VC(03) NN          |
  -- VFB_NOME       |     |    |    | VC(20) NN          |
  -- VFB_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- VFB_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- VFB_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D38         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vfbCodigoNew VARCHAR(3);
  DECLARE @vfbNomeNew VARCHAR(20);
  DECLARE @vfbAtivoNew VARCHAR(1);
  DECLARE @vfbRegNew VARCHAR(1);
  DECLARE @vfbCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vfbCodigoNew   = dbo.fncTranslate(i.VFB_CODIGO,3)
         ,@vfbNomeNew    = dbo.fncTranslate(i.VFB_NOME,20)
         ,@vfbAtivoNew   = UPPER(i.VFB_ATIVO)
         ,@vfbRegNew     = UPPER(i.VFB_REG)
         ,@vfbCodUsrNew  = i.VFB_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New      = UP.UP_D38
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.VFB_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vfbCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA INCLUIR NA TABELA VEICULOFABRICANTE',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(VFB_CODIGO,'OK') FROM VEICULOFABRICANTE WHERE VFB_NOME=@vfbNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA VEICULOFABRICANTE COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(VFB_NOME,'OK') FROM VEICULOFABRICANTE WHERE VFB_CODIGO=@vfbCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA VEICULOFABRICANTE %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @vfbRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@vfbRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.VEICULOFABRICANTE( 
      VFB_CODIGO
      ,VFB_NOME
      ,VFB_ATIVO
      ,VFB_REG
      ,VFB_CODUSR) VALUES(
      @vfbCodigoNew   -- VFB_CODIGO
      ,@vfbNomeNew    -- VFB_NOME
      ,@vfbAtivoNew   -- VFB_ATIVO
      ,@vfbRegNew     -- VFB_REG
      ,@vfbCodUsrNew  -- VFB_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULOFABRICANTE(
      VFB_ACAO
      ,VFB_CODIGO
      ,VFB_NOME
      ,VFB_ATIVO
      ,VFB_REG
      ,VFB_CODUSR) VALUES(
      'I'                      -- VFB_ACAO
      ,@vfbCodigoNew            -- VFB_CODIGO
      ,@vfbNomeNew              -- VFB_NOME
      ,@vfbAtivoNew             -- VFB_ATIVO
      ,@vfbRegNew               -- VFB_REG
      ,@vfbCodUsrNew            -- VFB_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULOFABRICANTE_BU ON dbo.VVEICULOFABRICANTE
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @vfbCodigoNew VARCHAR(3);
  DECLARE @vfbNomeNew VARCHAR(20);
  DECLARE @vfbAtivoNew VARCHAR(1);
  DECLARE @vfbRegNew VARCHAR(1);
  DECLARE @vfbCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @vfbCodigoNew   = i.VFB_CODIGO
         ,@vfbNomeNew    = dbo.fncTranslate(i.VFB_NOME,20)
         ,@vfbAtivoNew   = UPPER(i.VFB_ATIVO)
         ,@vfbRegNew     = UPPER(i.VFB_REG)
         ,@vfbCodUsrNew  = i.VFB_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New      = UP.UP_D38
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.VFB_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vfbCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA ALTERAR NA TABELA VEICULOFABRICANTE',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @vfbCodigoOld VARCHAR(3);
    DECLARE @vfbNomeOld VARCHAR(20);
    DECLARE @vfbAtivoOld VARCHAR(1);
    DECLARE @vfbRegOld VARCHAR(1);
    DECLARE @vfbCodUsrOld INTEGER;
    SELECT @vfbCodigoOld   = d.VFB_CODIGO
           ,@vfbNomeOld    = d.VFB_NOME
           ,@vfbAtivoOld   = d.VFB_ATIVO
           ,@vfbRegOld     = d.VFB_REG
           ,@vfbCodUsrOld  = d.VFB_CODUSR         
      FROM VEICULOFABRICANTE d WHERE d.VFB_CODIGO=@vfbCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @vfbCodigoOld<>@vfbCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @vfbNomeOld<>@vfbNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(VFB_CODIGO,'OK') FROM VEICULOFABRICANTE WHERE VFB_NOME=@vfbNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA VEICULOFABRICANTE COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @vfbRegOld <> @vfbRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@vfbRegOld,@vfbRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.VEICULOFABRICANTE
       SET VFB_NOME   = @vfbNomeNew
          ,VFB_ATIVO  = @vfbAtivoNew
          ,VFB_REG    = @vfbRegNew
          ,VFB_CODUSR = @vfbCodUsrNew
    WHERE VFB_CODIGO  = @vfbCodigoNew;     
    -- Gravando LOG
    IF( (@vfbNomeOld<>@vfbNomeNew) OR (@vfbAtivoOld<>@vfbAtivoNew) OR (@vfbRegOld<>@vfbRegNew) ) BEGIN
      INSERT INTO dbo.BKPVEICULOFABRICANTE(
        VFB_ACAO
        ,VFB_CODIGO
        ,VFB_NOME
        ,VFB_ATIVO
        ,VFB_REG
        ,VFB_CODUSR) VALUES(
        'A'            -- VFB_ACAO
        ,@vfbCodigoNew  -- VFB_CODIGO
        ,@vfbNomeNew    -- VFB_NOME
        ,@vfbAtivoNew   -- VFB_ATIVO
        ,@vfbRegNew     -- VFB_REG
        ,@vfbCodUsrNew  -- VFB_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULOFABRICANTE_BD ON dbo.VVEICULOFABRICANTE
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkCodVcl VARCHAR(10);  -- Para procurar campo foreign key str (VEICULO) 
  DECLARE @fkCodTc VARCHAR(3);    -- Para procurar campo foreign key str (PGRTIPOCARROCERIA) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vfbCodigoOld VARCHAR(3);
  DECLARE @vfbNomeOld VARCHAR(20);
  DECLARE @vfbAtivoOld VARCHAR(1);
  DECLARE @vfbRegOld VARCHAR(1);
  DECLARE @vfbCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD38Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vfbCodigoOld   = d.VFB_CODIGO
         ,@vfbNomeOld    = d.VFB_NOME
         ,@vfbAtivoOld   = d.VFB_ATIVO
         ,@vfbRegOld     = d.VFB_REG
         ,@vfbCodUsrOld  = d.VFB_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38Old      = UP.UP_D38
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.VFB_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vfbCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD38Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA EXCLUIR NA TABELA VEICULOFABRICANTE',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@vfbRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------------
    --        Checando a FK em VEICULO
    --                   FK em PGRTIPOCARROCERIA
    --------------------------------------------
    SELECT TOP 1 @fkCodVcl=COALESCE(VCL_CODIGO,'OK') FROM VEICULO WHERE VCL_CODVTP=@vfbCodigoOld;
    IF( @fkCodVcl <> 'OK' )
      RAISERROR('TIPO UTILIZADA NO VEICULO %s',15,1,@fkCodVcl);
    SELECT TOP 1 @fkCodTc=COALESCE(TC_CODVTP,'OK') FROM PGRTIPOCARROCERIA WHERE TC_CODVTP=@vfbCodigoOld;     
    IF( @fkCodTc <> 'OK' )
      RAISERROR('TIPO UTILIZADA NO TIPO DE CARROCERIA %s',15,1,@fkCodTc);
    --
    --
    DELETE FROM dbo.VEICULOFABRICANTE WHERE VFB_CODIGO=@vfbCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULOFABRICANTE(
      VFB_ACAO
      ,VFB_CODIGO
      ,VFB_NOME
      ,VFB_ATIVO
      ,VFB_REG
      ,VFB_CODUSR) VALUES(
      'E'               -- VFB_ACAO
      ,@vfbCodigoOld    -- VFB_CODIGO
      ,@vfbNomeOld      -- VFB_NOME
      ,@vfbAtivoOld     -- VFB_ATIVO
      ,@vfbRegOld       -- VFB_REG
      ,@vfbCodUsrOld    -- VFB_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPVEICULOFABRICANTE_BUD ON dbo.BKPVEICULOFABRICANTE
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                            V E I C U L O M O D E L O
--trgveiculomodelo
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewVEICULOMODELO_BI ON dbo.VVEICULOMODELO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- VMD_CODIGO     | PK  |    |    | INT NN             |
  -- VMD_NOME       |     |    |    | VC(20) NN          |
  -- VMD_CODVFB     | OK  |    |    | VC(3) NN           | Campo relacionado (VEICULOFABRICANTE)
  -- VFB_NOME       | SEL |    |    | VC(20) NN          | Campo relacionado (VEICULOFABRICANTE)   
  -- VMD_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- VMD_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- VMD_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D38         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo INTEGER    = 0;     -- Para procurar unique index
  --DECLARE @uiNome VARCHAR(20)  = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vmdCodigoNew INTEGER;
  DECLARE @vmdNomeNew VARCHAR(20);
  DECLARE @vmdCodVfbNew VARCHAR(3);
  DECLARE @vfbNomeNew VARCHAR(20);
  DECLARE @vmdAtivoNew VARCHAR(1);
  DECLARE @vmdRegNew VARCHAR(1);
  DECLARE @vmdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vmdCodigoNew   = i.VMD_CODIGO
         ,@vmdNomeNew    = dbo.fncTranslate(i.VMD_NOME,20)
         ,@vmdCodVfbNew  = dbo.fncTranslate(i.VMD_CODVFB,3)
         ,@vfbNomeNew    = COALESCE(VFB.VFB_NOME,'ERRO')
         ,@vmdAtivoNew   = UPPER(i.VMD_ATIVO)
         ,@vmdRegNew     = UPPER(i.VMD_REG)
         ,@vmdCodUsrNew  = i.VMD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New      = UP.UP_D38
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN VEICULOFABRICANTE VFB ON i.VMD_CODVFB=VFB.VFB_CODIGO AND VFB_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.VMD_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vmdCodUsrNew);
    IF( @vfbNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO MARCA %s PARA ESTE REGISTRO',15,1,@vmdCodVfbNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 16 PARA INCLUIR NA TABELA VEICULOMODELO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --SELECT @uiCodigo=COALESCE(VMD_CODIGO,'OK') FROM VEICULOMODELO WHERE VMD_NOME=@vmdNomeNew;
    --IF( @uiCodigo <> 'OK' )
    --  RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA VEICULOMODELO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    --SELECT @uiNome=COALESCE(VMD_NOME,'OK') FROM VEICULOMODELO WHERE VMD_CODIGO=@vmdCodigoNew;
    --IF( @uiNome <> 'OK' )
    --  RAISERROR('CODIGO JA CADASTRADO NA TABELA VEICULOMODELO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @vmdRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@vmdRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.VEICULOMODELO( 
      VMD_NOME
      ,VMD_CODVFB
      ,VMD_ATIVO
      ,VMD_REG
      ,VMD_CODUSR) VALUES(
      @vmdNomeNew     -- VMD_NOME
      ,@vmdCodVfbNew  -- VMD_CODVFB
      ,@vmdAtivoNew   -- VMD_ATIVO
      ,@vmdRegNew     -- VMD_REG
      ,@vmdCodUsrNew  -- VMD_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULOMODELO(
      VMD_ACAO
      ,VMD_CODIGO
      ,VMD_NOME
      ,VMD_CODVFB
      ,VMD_ATIVO
      ,VMD_REG
      ,VMD_CODUSR) VALUES(
      'I'                             -- VMD_ACAO
      ,IDENT_CURRENT('VEICULOMODELO') -- VMD_CODIGO
      ,@vmdNomeNew                    -- VMD_NOME
      ,@vmdCodVfbNew                  -- VMD_CODVFB
      ,@vmdAtivoNew                   -- VMD_ATIVO
      ,@vmdRegNew                     -- VMD_REG
      ,@vmdCodUsrNew                  -- VMD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULOMODELO_BU ON dbo.VVEICULOMODELO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @vmdCodigoNew INTEGER;
  DECLARE @vmdNomeNew VARCHAR(20);
  DECLARE @vmdCodVfbNew VARCHAR(3);
  DECLARE @vfbNomeNew VARCHAR(20);
  DECLARE @vmdAtivoNew VARCHAR(1);
  DECLARE @vmdRegNew VARCHAR(1);
  DECLARE @vmdCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @vmdCodigoNew   = i.VMD_CODIGO
         ,@vmdNomeNew    = dbo.fncTranslate(i.VMD_NOME,20)
         ,@vmdCodVfbNew  = dbo.fncTranslate(i.VMD_CODVFB,3)
         ,@vfbNomeNew    = COALESCE(VFB.VFB_NOME,'ERRO')
         ,@vmdAtivoNew   = UPPER(i.VMD_ATIVO)
         ,@vmdRegNew     = UPPER(i.VMD_REG)
         ,@vmdCodUsrNew  = i.VMD_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New      = UP.UP_D38
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN VEICULOFABRICANTE VFB ON i.VMD_CODVFB=VFB.VFB_CODIGO AND VFB_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.VMD_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vmdCodUsrNew);
    IF( @vfbNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO MARCA %s PARA ESTE REGISTRO',15,1,@vmdCodVfbNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 16 PARA ALTERAR NA TABELA VEICULOMODELO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @vmdCodigoOld INTEGER;
    DECLARE @vmdNomeOld VARCHAR(20);
    DECLARE @vmdCodVfbOld VARCHAR(3);    
    DECLARE @vmdAtivoOld VARCHAR(1);
    DECLARE @vmdRegOld VARCHAR(1);
    DECLARE @vmdCodUsrOld INTEGER;
    SELECT @vmdCodigoOld   = d.VMD_CODIGO
           ,@vmdNomeOld    = d.VMD_NOME
           ,@vmdCodVfbOld  = d.VMD_CODVFB
           ,@vmdAtivoOld   = d.VMD_ATIVO
           ,@vmdRegOld     = d.VMD_REG
           ,@vmdCodUsrOld  = d.VMD_CODUSR         
      FROM VEICULOMODELO d WHERE d.VMD_CODIGO=@vmdCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @vmdCodigoOld<>@vmdCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    --IF( @vmdNomeOld<>@vmdNomeNew ) BEGIN
    --  SELECT @uiCodigo=COALESCE(VMD_CODIGO,'OK') FROM VEICULOMODELO WHERE VMD_NOME=@vmdNomeNew;
    --  IF( @uiCodigo <> 'OK' )
    --    RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA VEICULOMODELO COM CODIGO %s',15,1,@uiCodigo);
    --END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @vmdRegOld <> @vmdRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@vmdRegOld,@vmdRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.VEICULOMODELO
       SET VMD_NOME   = @vmdNomeNew
          ,VMD_CODVFB = @vmdCodVfbNew
          ,VMD_ATIVO  = @vmdAtivoNew
          ,VMD_REG    = @vmdRegNew
          ,VMD_CODUSR = @vmdCodUsrNew
    WHERE VMD_CODIGO  = @vmdCodigoNew;     
    -- Gravando LOG
    IF( (@vmdNomeOld<>@vmdNomeNew) OR (@vmdCodVfbOld<>@vmdCodVfbNew) OR (@vmdAtivoOld<>@vmdAtivoNew) OR (@vmdRegOld<>@vmdRegNew) ) BEGIN
      INSERT INTO dbo.BKPVEICULOMODELO(
        VMD_ACAO
        ,VMD_CODIGO
        ,VMD_NOME
        ,VMD_CODVFB
        ,VMD_ATIVO
        ,VMD_REG
        ,VMD_CODUSR) VALUES(
        'A'             -- VMD_ACAO
        ,@vmdCodigoNew  -- VMD_CODIGO
        ,@vmdNomeNew    -- VMD_NOME
        ,@vmdCodVfbNew  -- VMD_CODVFB        
        ,@vmdAtivoNew   -- VMD_ATIVO
        ,@vmdRegNew     -- VMD_REG
        ,@vmdCodUsrNew  -- VMD_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULOMODELO_BD ON dbo.VVEICULOMODELO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkCodVcl VARCHAR(10);  -- Para procurar campo foreign key str (VEICULO) 
  --DECLARE @fkCodTc VARCHAR(3);    -- Para procurar campo foreign key str (PGRTIPOCARROCERIA) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vmdCodigoOld INTEGER;
  DECLARE @vmdNomeOld VARCHAR(20);
  DECLARE @vmdCodVfbOld VARCHAR(3);    
  DECLARE @vmdAtivoOld VARCHAR(1);
  DECLARE @vmdRegOld VARCHAR(1);
  DECLARE @vmdCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD38Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vmdCodigoOld   = d.VMD_CODIGO
         ,@vmdNomeOld    = d.VMD_NOME
         ,@vmdCodVfbOld  = d.VMD_CODVFB         
         ,@vmdAtivoOld   = d.VMD_ATIVO
         ,@vmdRegOld     = d.VMD_REG
         ,@vmdCodUsrOld  = d.VMD_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38Old      = UP.UP_D38
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.VMD_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vmdCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD38Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 16 PARA EXCLUIR NA TABELA VEICULOMODELO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@vmdRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------------
    --        Checando a FK em VEICULO
    --------------------------------------------
    SELECT TOP 1 @fkCodVcl=COALESCE(VCL_CODIGO,'OK') FROM VEICULO WHERE VCL_CODVMD=@vmdCodigoOld;
    IF( @fkCodVcl <> 'OK' )
      RAISERROR('MODELO UTILIZADA NO VEICULO %s',15,1,@fkCodVcl);
    --SELECT TOP 1 @fkCodTc=COALESCE(TC_CODVTP,'OK') FROM PGRTIPOCARROCERIA WHERE TC_CODVTP=@vmdCodigoOld;     
    --IF( @fkCodTc <> 'OK' )
    --  RAISERROR('TIPO UTILIZADA NO TIPO DE CARROCERIA %s',15,1,@fkCodTc);
    --
    --
    DELETE FROM dbo.VEICULOMODELO WHERE VMD_CODIGO=@vmdCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULOMODELO(
      VMD_ACAO
      ,VMD_CODIGO
      ,VMD_NOME
      ,VMD_CODVFB      
      ,VMD_ATIVO
      ,VMD_REG
      ,VMD_CODUSR) VALUES(
      'E'               -- VMD_ACAO
      ,@vmdCodigoOld    -- VMD_CODIGO
      ,@vmdNomeOld      -- VMD_NOME
      ,@vmdCodVfbOld    -- VMD_CODVFB
      ,@vmdAtivoOld     -- VMD_ATIVO
      ,@vmdRegOld       -- VMD_REG
      ,@vmdCodUsrOld    -- VMD_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPVEICULOMODELO_BUD ON dbo.BKPVEICULOMODELO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                               V E I C U L O T I P O
--trgveiculotipo
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewVEICULOTIPO_BI ON dbo.VVEICULOTIPO
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS  |UPD |DEL | TIPO               | Obs
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------
  -- VTP_CODIGO     | PK  |    |    | VC(03) NN          |
  -- VTP_NOME       |     |    |    | VC(20) NN          |
  -- VTP_ATIVO      | CC  |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- VTP_REG        | FNC |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- VTP_CODUSR     | OK  |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D38         | SEL |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|-----|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(3) = 'OK';  -- Para procurar unique index
  DECLARE @uiNome VARCHAR(20) = 'OK';   -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vtpCodigoNew VARCHAR(3);
  DECLARE @vtpNomeNew VARCHAR(20);
  DECLARE @vtpAtivoNew VARCHAR(1);
  DECLARE @vtpRegNew VARCHAR(1);
  DECLARE @vtpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vtpCodigoNew   = dbo.fncTranslate(i.VTP_CODIGO,3)
         ,@vtpNomeNew    = dbo.fncTranslate(i.VTP_NOME,20)
         ,@vtpAtivoNew   = UPPER(i.VTP_ATIVO)
         ,@vtpRegNew     = UPPER(i.VTP_REG)
         ,@vtpCodUsrNew  = i.VTP_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New      = UP.UP_D38
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.VTP_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vtpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA INCLUIR NA TABELA VEICULOTIPO',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(VTP_CODIGO,'OK') FROM VEICULOTIPO WHERE VTP_NOME=@vtpNomeNew;
    IF( @uiCodigo <> 'OK' )
      RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA VEICULOTIPO COM CODIGO %i',15,1,@uiCodigo);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiNome=COALESCE(VTP_NOME,'OK') FROM VEICULOTIPO WHERE VTP_CODIGO=@vtpCodigoNew;
    IF( @uiNome <> 'OK' )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA VEICULOTIPO %s',15,1,@uiNome);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @vtpRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@vtpRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.VEICULOTIPO( 
      VTP_CODIGO
      ,VTP_NOME
      ,VTP_ATIVO
      ,VTP_REG
      ,VTP_CODUSR) VALUES(
      @vtpCodigoNew   -- VTP_CODIGO
      ,@vtpNomeNew    -- VTP_NOME
      ,@vtpAtivoNew   -- VTP_ATIVO
      ,@vtpRegNew     -- VTP_REG
      ,@vtpCodUsrNew  -- VTP_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULOTIPO(
      VTP_ACAO
      ,VTP_CODIGO
      ,VTP_NOME
      ,VTP_ATIVO
      ,VTP_REG
      ,VTP_CODUSR) VALUES(
      'I'                      -- VTP_ACAO
      ,@vtpCodigoNew            -- VTP_CODIGO
      ,@vtpNomeNew              -- VTP_NOME
      ,@vtpAtivoNew             -- VTP_ATIVO
      ,@vtpRegNew               -- VTP_REG
      ,@vtpCodUsrNew            -- VTP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULOTIPO_BU ON dbo.VVEICULOTIPO
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo VARCHAR(6) = 'OK';  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);         -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @vtpCodigoNew VARCHAR(3);
  DECLARE @vtpNomeNew VARCHAR(20);
  DECLARE @vtpAtivoNew VARCHAR(1);
  DECLARE @vtpRegNew VARCHAR(1);
  DECLARE @vtpCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD38New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @vtpCodigoNew   = i.VTP_CODIGO
         ,@vtpNomeNew    = dbo.fncTranslate(i.VTP_NOME,20)
         ,@vtpAtivoNew   = UPPER(i.VTP_ATIVO)
         ,@vtpRegNew     = UPPER(i.VTP_REG)
         ,@vtpCodUsrNew  = i.VTP_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38New      = UP.UP_D38
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.VTP_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vtpCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD38New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 38 PARA ALTERAR NA TABELA VEICULOTIPO',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @vtpCodigoOld VARCHAR(3);
    DECLARE @vtpNomeOld VARCHAR(20);
    DECLARE @vtpAtivoOld VARCHAR(1);
    DECLARE @vtpRegOld VARCHAR(1);
    DECLARE @vtpCodUsrOld INTEGER;
    SELECT @vtpCodigoOld   = d.VTP_CODIGO
           ,@vtpNomeOld    = d.VTP_NOME
           ,@vtpAtivoOld   = d.VTP_ATIVO
           ,@vtpRegOld     = d.VTP_REG
           ,@vtpCodUsrOld  = d.VTP_CODUSR         
      FROM VEICULOTIPO d WHERE d.VTP_CODIGO=@vtpCodigoNew;  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @vtpCodigoOld<>@vtpCodigoNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    ---------------------------------------------------------------------
    -- Campo NOME deve ser unico da tabela
    ---------------------------------------------------------------------
    IF( @vtpNomeOld<>@vtpNomeNew ) BEGIN
      SELECT @uiCodigo=COALESCE(VTP_CODIGO,'OK') FROM VEICULOTIPO WHERE VTP_NOME=@vtpNomeNew;
      IF( @uiCodigo <> 'OK' )
        RAISERROR('DESCRITIVO JA CADASTRADO NA TABELA VEICULOTIPO COM CODIGO %s',15,1,@uiCodigo);
    END   
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @vtpRegOld <> @vtpRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@vtpRegOld,@vtpRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.VEICULOTIPO
       SET VTP_NOME   = @vtpNomeNew
          ,VTP_ATIVO  = @vtpAtivoNew
          ,VTP_REG    = @vtpRegNew
          ,VTP_CODUSR = @vtpCodUsrNew
    WHERE VTP_CODIGO  = @vtpCodigoNew;     
    -- Gravando LOG
    IF( (@vtpNomeOld<>@vtpNomeNew) OR (@vtpAtivoOld<>@vtpAtivoNew) OR (@vtpRegOld<>@vtpRegNew) ) BEGIN
      INSERT INTO dbo.BKPVEICULOTIPO(
        VTP_ACAO
        ,VTP_CODIGO
        ,VTP_NOME
        ,VTP_ATIVO
        ,VTP_REG
        ,VTP_CODUSR) VALUES(
        'A'            -- VTP_ACAO
        ,@vtpCodigoNew  -- VTP_CODIGO
        ,@vtpNomeNew    -- VTP_NOME
        ,@vtpAtivoNew   -- VTP_ATIVO
        ,@vtpRegNew     -- VTP_REG
        ,@vtpCodUsrNew  -- VTP_CODUSR
      );
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVEICULOTIPO_BD ON dbo.VVEICULOTIPO
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @fkCodVcl VARCHAR(10);  -- Para procurar campo foreign key str (VEICULO) 
  DECLARE @fkCodTc VARCHAR(3);    -- Para procurar campo foreign key str (PGRTIPOCARROCERIA) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vtpCodigoOld VARCHAR(3);
  DECLARE @vtpNomeOld VARCHAR(20);
  DECLARE @vtpAtivoOld VARCHAR(1);
  DECLARE @vtpRegOld VARCHAR(1);
  DECLARE @vtpCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD38Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vtpCodigoOld   = d.VTP_CODIGO
         ,@vtpNomeOld    = d.VTP_NOME
         ,@vtpAtivoOld   = d.VTP_ATIVO
         ,@vtpRegOld     = d.VTP_REG
         ,@vtpCodUsrOld  = d.VTP_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD38Old      = UP.UP_D38
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.VTP_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vtpCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD38Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 17 PARA EXCLUIR NA TABELA VEICULOTIPO',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@vtpRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------------
    --        Checando a FK em VEICULO
    --                   FK em PGRTIPOCARROCERIA
    --------------------------------------------
    SELECT TOP 1 @fkCodVcl=COALESCE(VCL_CODIGO,'OK') FROM VEICULO WHERE VCL_CODVTP=@vtpCodigoOld;
    IF( @fkCodVcl <> 'OK' )
      RAISERROR('TIPO UTILIZADA NO VEICULO %s',15,1,@fkCodVcl);
    SELECT TOP 1 @fkCodTc=COALESCE(TC_CODVTP,'OK') FROM PGRTIPOCARROCERIA WHERE TC_CODVTP=@vtpCodigoOld;     
    IF( @fkCodTc <> 'OK' )
      RAISERROR('TIPO UTILIZADA NO TIPO DE CARROCERIA %s',15,1,@fkCodTc);
    --
    --
    DELETE FROM dbo.VEICULOTIPO WHERE VTP_CODIGO=@vtpCodigoOld;
    -- Gravando LOG
    INSERT INTO dbo.BKPVEICULOTIPO(
      VTP_ACAO
      ,VTP_CODIGO
      ,VTP_NOME
      ,VTP_ATIVO
      ,VTP_REG
      ,VTP_CODUSR) VALUES(
      'E'               -- VTP_ACAO
      ,@vtpCodigoOld    -- VTP_CODIGO
      ,@vtpNomeOld      -- VTP_NOME
      ,@vtpAtivoOld     -- VTP_ATIVO
      ,@vtpRegOld       -- VTP_REG
      ,@vtpCodUsrOld    -- VTP_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPVEICULOTIPO_BUD ON dbo.BKPVEICULOTIPO
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END

-------------------------------------------------------------------------------------
--                                 V E N D E D O R                                 --
--trgvendedor
-------------------------------------------------------------------------------------
GO
CREATE TRIGGER dbo.TRGViewVENDEDOR_BI ON dbo.VVENDEDOR
INSTEAD OF INSERT 
AS
BEGIN
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO          |INS      |UPD |DEL | TIPO               | Obs
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------
  -- VND_CODFVR     | SEL/PK  |    |    | INT                | Campo relacionado (FAVORECIDO)
  -- FVR_NOME       | SEL     |    |    | VC(60)             | Campo relacionado (FAVORECIDO)
  -- VND_CODEMP     | PK      |    |    | INT                | Codigo da empresa
  -- VND_ATIVO      | CC      |    |    | VC(1) NN           | S|N     Se o registro pode ser usado em tabelas auxiliares
  -- VND_REG        | FNC     |    |    | VC(1) NN           | P|A|S   P=Publico  A=Administrador S=Sistema
  -- VND_CODUSR     | OK      |    |    | INT NN             | Codigo do Usuario em USUARIO que esta tentando INC/ALT/EXC
  -- USR_APELIDO    | SEL     |    |    | VC(15) NN          | Campo relacionado (USUARIO)
  -- USR_ADMPUB     | SEL     |    |    | VC(1) NN           | Retornar se o usuario eh PUB/ADM
  -- UP_D29         | SEL     |    |    | INT NN             | Recupera o direito de usuario para esta tabela
  -- UP_D31         | SEL     |    |    | INT NN             | Recupera o direito se pode transformar registro do sistema
  -- ---------------|---------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- ---------------------------------------------------------------------------------------------------------------      
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;        -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vndCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @vndCodEmpNew INTEGER;
  DECLARE @empApelidoNew VARCHAR(15);
  DECLARE @vndAtivoNew VARCHAR(1);
  DECLARE @vndRegNew VARCHAR(1);
  DECLARE @vndCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD29New INTEGER;
  DECLARE @upD31New INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vndCodFvrNew   = i.VND_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@vndCodEmpNew  = i.VND_CODEMP
         ,@empApelidoNew = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@vndAtivoNew   = UPPER(i.VND_ATIVO)
         ,@vndRegNew     = UPPER(i.VND_REG)
         ,@vndCodUsrNew  = i.VND_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD29New      = UP.UP_D29
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.VND_CODFVR=FVR.FVR_CODIGO AND FVR_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.VND_CODEMP=EMP.EMP_CODIGO AND EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.VND_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@vndCodEmpNew);
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@vndCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vndCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD29New<2 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 29 PARA INCLUIR NA TABELA VENDEDOR',15,1,@usrApelidoNew);
    ---------------------------------------------------------------------
    -- Verificando a chave primaria quando nao for identity
    ---------------------------------------------------------------------
    SELECT @uiCodigo=COALESCE(VND_CODFVR,0) FROM VENDEDOR WHERE ((VND_CODFVR=@vndCodFvrNew) AND (VND_CODEMP=@vndCodEmpNew));
    IF( @uicODIGO <> 0 )
      RAISERROR('CODIGO JA CADASTRADO NA TABELA VENDEDOR %s',15,1,@fvrNomeNew);
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
    ------------------------------------------------------------------
    IF( @vndRegNew <> 'P' ) BEGIN
      SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@vndRegNew,@upD31New );
      IF( @erroNew != 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    INSERT INTO dbo.VENDEDOR( 
      VND_CODFVR
      ,VND_CODEMP
      ,VND_ATIVO
      ,VND_REG
      ,VND_CODUSR) VALUES(
      @vndCodFvrNew   -- VND_CODFVR
      ,@vndCodEmpNew  -- VND_CODEMP
      ,@vndAtivoNew   -- VND_ATIVO
      ,@vndRegNew     -- VND_REG
      ,@vndCodUsrNew  -- VND_CODUSR
    );
    -- Gravando LOG
    INSERT INTO dbo.BKPVENDEDOR(
      VND_ACAO
      ,VND_CODFVR
      ,VND_CODEMP
      ,VND_ATIVO
      ,VND_REG
      ,VND_CODUSR) VALUES(
      'I'                         -- VND_ACAO
      ,@vndCodFvrNew              -- VND_CODFVR
      ,@vndCodEmpNew              -- VND_CODEMP
      ,@vndAtivoNew               -- VND_ATIVO
      ,@vndRegNew                 -- VND_REG
      ,@vndCodUsrNew              -- VND_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVENDEDOR_BU ON dbo.VVENDEDOR
INSTEAD OF UPDATE
AS
BEGIN
  SET NOCOUNT ON;  
  DECLARE @uiCodigo INTEGER = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70);   -- Buscando retorno de erro para funcao
  -----------------------
  -- Campos NEW da tabela
  -----------------------
  DECLARE @vndCodFvrNew INTEGER;
  DECLARE @fvrNomeNew VARCHAR(60);
  DECLARE @vndCodEmpNew INTEGER;  
  DECLARE @empApelidoNew VARCHAR(15);  
  DECLARE @vndAtivoNew VARCHAR(1);
  DECLARE @vndRegNew VARCHAR(1);
  DECLARE @vndCodUsrNew INTEGER;
  DECLARE @usrApelidoNew VARCHAR(15);
  DECLARE @usrAdmPubNew VARCHAR(1);
  DECLARE @upD29New INTEGER;
  DECLARE @upD31New INTEGER;
  -------------------------------------------------------
  -- Buscando os campos NEW para checagem antes do insert
  -------------------------------------------------------
  SELECT @vndCodFvrNew   = i.VND_CODFVR
         ,@fvrNomeNew    = COALESCE(FVR.FVR_NOME,'ERRO')
         ,@vndCodEmpNew  = i.VND_CODEMP
         ,@empApelidoNew = COALESCE(EMP.EMP_APELIDO,'ERRO')
         ,@vndAtivoNew   = UPPER(i.VND_ATIVO)
         ,@vndRegNew     = UPPER(i.VND_REG)
         ,@vndCodUsrNew  = i.VND_CODUSR         
         ,@usrApelidoNew = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubNew  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD29New      = UP.UP_D29
         ,@upD31New      = UP.UP_D31
    FROM inserted i
    LEFT OUTER JOIN FAVORECIDO FVR ON i.VND_CODFVR=FVR.FVR_CODIGO AND FVR_ATIVO='S'
    LEFT OUTER JOIN EMPRESA EMP ON i.VND_CODEMP=EMP.EMP_CODIGO AND EMP_ATIVO='S'
    LEFT OUTER JOIN USUARIO USR ON i.VND_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @empApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO EMPRESA %i PARA ESTE REGISTRO',15,1,@vndCodEmpNew);
    IF( @fvrNomeNew='ERRO' )
      RAISERROR('NAO LOCALIZADO FAVORECIDO %i PARA ESTE REGISTRO',15,1,@vndCodFvrNew);
    IF( @usrApelidoNew='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vndCodUsrNew);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de cadastro nesta tabela
    -------------------------------------------------------------
    IF( @upD29New<3 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 29 PARA ALTERAR NA TABELA VENDEDOR',15,1,@usrApelidoNew);
    ------------------------------------------------------------------------------------
    -- Se checar até aqui verifico os campos que estão no banco de dados antes de gravar  
    -- Campos OLD da tabela
    ------------------------------------------------------------------------------------
    DECLARE @vndCodFvrOld INTEGER;
    DECLARE @vndCodEmpOld INTEGER;
    DECLARE @vndAtivoOld VARCHAR(1);
    DECLARE @vndRegOld VARCHAR(1);
    DECLARE @vndCodUsrOld INTEGER;
    SELECT @vndCodFvrOld   = d.VND_CODFVR
           ,@vndCodEmpOld  = d.VND_CODEMP
           ,@vndAtivoOld   = d.VND_ATIVO
           ,@vndRegOld     = d.VND_REG
           ,@vndCodUsrOld  = d.VND_CODUSR         
      FROM VENDEDOR d WHERE ((d.VND_CODFVR=@vndCodFvrNew) AND (d.VND_CODEMP=@vndCodEmpNew));  
    ---------------------------------------------------------------------
    -- Primary Key nao pode ser alterada
    ---------------------------------------------------------------------
    IF( @vndCodFvrOld<>@vndCodFvrNew )
      RAISERROR('CAMPO CODIGO NAO PODE SER ALTERADO',15,1);  
    IF( @vndCodEmpOld<>@vndCodEmpNew )
      RAISERROR('CAMPO EMPRESA NAO PODE SER ALTERADO',15,1);  
    ------------------------------------------------------------------
    -- Verificando o campo USR_REG - Olhar todos, Old pode ser "S"
    ------------------------------------------------------------------
    IF( @vndRegOld <> @vndRegNew ) BEGIN
      SET @erroNew=dbo.fncCampoRegAlt( @usrAdmPubNew,@vndRegOld,@vndRegNew,@upD31New );
      IF( @erroNew <> 'OK' )
        RAISERROR(@erroNew,15,1);
    END    
    --  
    UPDATE dbo.VENDEDOR
       SET VND_ATIVO  = @vndAtivoNew
          ,VND_REG    = @vndRegNew
          ,VND_CODUSR = @vndCodUsrNew
    WHERE VND_CODFVR  = @vndCodFvrNew;     
    -- Gravando LOG
    IF( (@vndAtivoOld<>@vndAtivoNew) OR (@vndRegOld<>@vndRegNew) ) BEGIN
      INSERT INTO dbo.BKPVENDEDOR(
        VND_ACAO
        ,VND_CODFVR
        ,VND_CODEMP
        ,VND_ATIVO
        ,VND_REG
        ,VND_CODUSR) VALUES(
        'A'                         -- VND_ACAO
        ,@vndCodFvrNew              -- VND_CODFVR
        ,@vndCodEmpNew              -- VND_CODEMP
        ,@vndAtivoNew               -- VND_ATIVO
        ,@vndRegNew                 -- VND_REG
        ,@vndCodUsrNew              -- VND_CODUSR
      );  
    END
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGViewVENDEDOR_BD ON dbo.VVENDEDOR
INSTEAD OF DELETE
AS
BEGIN
  SET NOCOUNT ON;  
  --DECLARE @fkIntUsr INTEGER = 0;  -- Para procurar campo foreign key int (USUARIO)
  --DECLARE @fkIntCnt INTEGER = 0;  -- Para procurar campo foreign key int (CONTATO) 
  DECLARE @erroOld VARCHAR(70);   -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @vndCodFvrOld INTEGER;
  DECLARE @vndCodEmpOld INTEGER;
  DECLARE @vndAtivoOld VARCHAR(1);
  DECLARE @vndRegOld VARCHAR(1);
  DECLARE @vndCodUsrOld INTEGER;
  DECLARE @usrApelidoOld VARCHAR(15);
  DECLARE @usrAdmPubOld VARCHAR(1);
  DECLARE @upD29Old INTEGER;
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT @vndCodFvrOld   = d.VND_CODFVR
         ,@vndCodEmpOld  = d.VND_CODEMP
         ,@vndAtivoOld   = d.VND_ATIVO
         ,@vndRegOld     = d.VND_REG
         ,@vndCodUsrOld  = d.VND_CODUSR         
         ,@usrApelidoOld = COALESCE(USR.USR_APELIDO,'ERRO')
         ,@usrAdmPubOld  = COALESCE(USR.USR_ADMPUB,'P')
         ,@upD29Old      = UP.UP_D29
    FROM deleted d
    LEFT OUTER JOIN USUARIO USR ON d.VND_CODUSR=USR.USR_CODIGO AND USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO;    
  BEGIN TRY    
    -----------------------------
    -- VERIFICANDO A FOREIGN KEYs
    -----------------------------
    IF( @usrApelidoOld='ERRO' )
      RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@vndCodUsrOld);
    -------------------------------------------------------------
    -- Checando se o usuario tem direito de excluir nesta tabela
    -------------------------------------------------------------
    IF( @upD29Old<4 )
      RAISERROR('USUARIO %s NAO POSSUI DIREITO 29 PARA EXCLUIR NA TABELA VENDEDOR',15,1,@usrApelidoOld);
    ------------------------------
    -- Verificando o campo USR_REG
    ------------------------------
    SET @erroOld=dbo.fncCampoRegExc( @usrAdmPubOld,@vndRegOld );
    IF( @erroOld != 'OK' )
      RAISERROR(@erroOld,15,1);
    --------------------------------------
    --   Checando a FK CNT_CODCRG(CONTATO)
    --                 USR_CODCRG(USUARIO)
    --------------------------------------
    --SELECT TOP 1 @fkIntUsr=COALESCE(USR_CODIGO,0) FROM USUARIO WHERE USR_CODCRG=@vndCodigoOld;
    --IF( @fkIntUsr > 0 )
    --  RAISERROR('VENDEDOR UTILIZADO NO USUARIO %i',15,1,@fkIntUsr);
    --SELECT TOP 1 @fkIntCnt=COALESCE(CNT_CODIGO,0) FROM CONTATO WHERE CNT_CODCRG=@vndCodigoOld;
    --IF( @fkIntCnt > 0 )
    --  RAISERROR('VENDEDOR UTILIZADO NO USUARIO %i',15,1,@fkIntCnt);
    --
    --
    DELETE FROM dbo.VENDEDOR WHERE ((VND_CODFVR=@vndCodFvrOld) AND (VND_CODEMP=@vndCodEmpOld));
    -- Gravando LOG
    INSERT INTO dbo.BKPVENDEDOR(
      VND_ACAO
      ,VND_CODFVR
      ,VND_CODEMP
      ,VND_ATIVO
      ,VND_REG
      ,VND_CODUSR) VALUES(
      'E'                         -- VND_ACAO
      ,@vndCodFvrOld              -- VND_CODFVR
      ,@vndCodEmpOld              -- VND_CODEMP
      ,@vndAtivoOld               -- VND_ATIVO
      ,@vndRegOld                 -- VND_REG
      ,@vndCodUsrOld              -- VND_CODUSR
    );  
  END TRY
  BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    RETURN;
  END CATCH
END
GO
CREATE TRIGGER dbo.TRGBKPVENDEDOR_BUD ON dbo.BKPVENDEDOR
INSTEAD OF UPDATE,DELETE 
AS 
BEGIN
  -- Nenhum registro da tabela BKP pode ser alterado ou excluido
  SET NOCOUNT ON;    
  RAISERROR('REGISTRO NAO PODE SER ALTERADO/EXCLUIDO', 16, 10);
END
-------------------------------------------------------------------------------------
--                               I N S E R T S                                     --
-------------------------------------------------------------------------------------
GO
-- USUARIO 1 e 2 NATIVOS DO SISTEMA
INSERT INTO VUSUARIO(USR_CODIGO,USR_CPF,USR_APELIDO,USR_CODUP,USR_CODCRG,USR_EMAIL,USR_SENHA,USR_ATIVO,USR_REG,USR_ADMPUB,USR_FECHAMENTO,USR_CODUSR) VALUES(1,'00000000001','ADMIN','1','ADM','admin@trac.com.br','ADMIN123','S','A','A','N',2);
INSERT INTO VUSUARIO(USR_CODIGO,USR_CPF,USR_APELIDO,USR_CODUP,USR_CODCRG,USR_EMAIL,USR_SENHA,USR_ATIVO,USR_REG,USR_ADMPUB,USR_FECHAMENTO,USR_CODUSR) VALUES(2,'00000000000','SISTEMA','1','GRN','sistema@trac.com.br','SISTEMA123','S','S','A','N',2);  
INSERT INTO VUSUARIO(USR_CODIGO,USR_CPF,USR_APELIDO,USR_CODUP,USR_CODCRG,USR_EMAIL,USR_SENHA,USR_ATIVO,USR_REG,USR_ADMPUB,USR_FECHAMENTO,USR_CODUSR) VALUES(3,'21535390808','MARCIA','1','GRN','marcia@trac.com.br','MARCIA123','S','A','A','N',2);
INSERT INTO VUSUARIO(USR_CODIGO,USR_CPF,USR_APELIDO,USR_CODUP,USR_CODCRG,USR_EMAIL,USR_SENHA,USR_ATIVO,USR_REG,USR_ADMPUB,USR_FECHAMENTO,USR_CODUSR) VALUES(4,'30901069817','PEDRO','1','GRN','pedro@trac.com.br','PEDRO123','S','A','A','N',2);
INSERT INTO VUSUARIO(USR_CODIGO,USR_CPF,USR_APELIDO,USR_CODUP,USR_CODCRG,USR_EMAIL,USR_SENHA,USR_ATIVO,USR_REG,USR_ADMPUB,USR_FECHAMENTO,USR_CODUSR) VALUES(5,'05272388804','PAULO','1','GRN','paulo@trac.com.br','PAULO123','S','A','A','N',2);
INSERT INTO VUSUARIO(USR_CODIGO,USR_CPF,USR_APELIDO,USR_CODUP,USR_CODCRG,USR_EMAIL,USR_SENHA,USR_ATIVO,USR_REG,USR_ADMPUB,USR_FECHAMENTO,USR_CODUSR) VALUES(6,'05272388801','ORLANDO','1','GRN','orlando@trac.com.br','ORLANDO321','S','A','A','N',2);
GO
INSERT INTO dbo.VCARGO(CRG_CODIGO,CRG_NOME,CRG_ATIVO ,CRG_REG ,CRG_CODUSR) VALUES('ADM','ADMINISTRADOR'  ,'S'       ,'P'     ,1);  
INSERT INTO dbo.VCARGO(CRG_CODIGO,CRG_NOME,CRG_ATIVO ,CRG_REG ,CRG_CODUSR) VALUES('CNT','CONTADOR'       ,'S'       ,'P'     ,1);   
INSERT INTO dbo.VCARGO(CRG_CODIGO,CRG_NOME,CRG_ATIVO ,CRG_REG ,CRG_CODUSR) VALUES('GRN','GERENTE'        ,'S'       ,'P'     ,1); 
/*  
SELECT 'INSERT INTO VUSUARIO(USR_CODIGO,USR_CPF,USR_APELIDO,USR_CODUP,USR_CODCRG,USR_EMAIL,USR_SENHA,USR_ATIVO,USR_REG,USR_ADMPUB,USR_FECHAMENTO,USR_CODUSR) VALUES('
+CAST(USR_CODIGO AS VARCHAR(10))
+','''+CAST(USR_CPF AS VARCHAR(20))
+''','''+CAST(USR_APELIDO AS VARCHAR(20))
+''','''+CAST(USR_CODUP AS VARCHAR(10))
+''','''+CAST(USR_CODCRG AS VARCHAR(10))
+''','''+CAST(USR_EMAIL AS VARCHAR(60))
+''','''+CAST(USR_SENHA AS VARCHAR(20))
+''','''+CAST(USR_ATIVO AS VARCHAR(10))
+''','''+CAST(USR_REG AS VARCHAR(10))
+''','''+CAST(USR_ADMPUB AS VARCHAR(10))
+''','''+CAST(USR_FECHAMENTO AS VARCHAR(10))
+''',1);'
FROM USUARIO
*/  
GO
INSERT INTO dbo.VPAIS( PAI_CODIGO,PAI_NOME,PAI_DDI,PAI_ATIVO ,PAI_REG ,PAI_CODUSR) VALUES(1058,'brasil'   ,55,'s','p',1);   
INSERT INTO dbo.VPAIS( PAI_CODIGO,PAI_NOME,PAI_DDI,PAI_ATIVO ,PAI_REG ,PAI_CODUSR) VALUES(1060,'colombia' ,57,'s','p',1);
GO
INSERT INTO VLOGRADOURO VALUES('AER','AEROPORTO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('AL','ALAMEDA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('AP','APARTAMENTO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('AV','AVENIDA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('BC','BECO SEM SAIDA MESMO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('BL','BLOCO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('CAM','CAMINHO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('ESCD','ESCADINHA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('EST','ESTACAO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('ETR','ESTRADA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('FAZ','FAZENDA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('FORT','FORTALEZA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('GL','GALERIA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('LD','LADEIRA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('LGO','LARGO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('PCA','PRACA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('PRQ','PARQUE','S','P',1)
INSERT INTO VLOGRADOURO VALUES('PR','PRAIA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('QD','QUADRA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('KM','QUILOMETRO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('QTA','QUINTA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('ROD','RODOVIA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('RUA','RUA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('SQD','SUPER QUADRA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('TRV','TRAVESSA','S','P',1)
INSERT INTO VLOGRADOURO VALUES('VD','VIADUTO','S','P',1)
INSERT INTO VLOGRADOURO VALUES('VL','VILA','S','P',1)
GO
INSERT INTO dbo.VREGIAO( REG_CODIGO  ,REG_NOME         ,REG_CODPAI,REG_ATIVO ,REG_REG ,REG_CODUSR) VALUES(
                        'NO'        ,'NORTE'          ,1058,'s'       ,'p'     ,1);   
INSERT INTO dbo.VREGIAO( REG_CODIGO  ,REG_NOME         ,REG_CODPAI,REG_ATIVO ,REG_REG ,REG_CODUSR) VALUES(
                        'ND'        ,'NORDESTE'       ,1058,'s'       ,'p'     ,1);   
INSERT INTO dbo.VREGIAO( REG_CODIGO  ,REG_NOME         ,REG_CODPAI,REG_ATIVO ,REG_REG ,REG_CODUSR) VALUES(
                        'SUL'       ,'SUL'            ,1058,'s'       ,'p'     ,1);   
INSERT INTO dbo.VREGIAO( REG_CODIGO  ,REG_NOME         ,REG_CODPAI,REG_ATIVO ,REG_REG ,REG_CODUSR) VALUES(
                        'SD'        ,'SUDESTE'        ,1058,'s'       ,'p'     ,1);   
INSERT INTO dbo.VREGIAO( REG_CODIGO  ,REG_NOME         ,REG_CODPAI,REG_ATIVO ,REG_REG ,REG_CODUSR) VALUES(
                        'CO'        ,'CENTRO OESTE'   ,1058,'s'       ,'p'     ,1);
GO
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('SP','SAO PAULO'          ,18,'SD'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('RJ','RIO DE JANEIRO'     ,18,'SD'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('MG','MINAS GERAIS'       ,18,'SD'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('AC','ACRE'               ,18,'NO'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('AL','ALAGOAS'            ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('AM','AMAZONAS'           ,18,'NO'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('AP','AMAPA'              ,18,'NO'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('BA','BAHIA'              ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('CE','CEARA'              ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('DF','DISTRITO FEDERAL'   ,18,'CO'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('ES','ESPIRITO SANTO'     ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('GO','GOIAS'              ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('MA','MARANHAO'           ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('MT','MATO GROSSO'        ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('PA','PARA'               ,18,'NO'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('PB','PARAIBA'            ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('PE','PERNAMBUCO'         ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('PI','PIAUI'              ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('PR','PARANA'             ,18,'SUL'  ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('RN','RIO GRANDE DO NORTE',18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('RO','RONDONIA'           ,18,'NO'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('RR','RORAIMA'            ,18,'NO'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('RS','RIO GRANDE DO SUL'  ,18,'SUL'  ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('SC','SANTA CATARINA'     ,18,'SUL'  ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('SE','SERGIPE'            ,18,'ND'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('TO','TOCANTINS'          ,18,'NO'   ,'S','P',1);
INSERT INTO VESTADO(EST_CODIGO,EST_NOME,EST_ALIQICMS,EST_CODREG,EST_ATIVO,EST_REG,EST_CODUSR) VALUES('MS','MATO GROSSO SUL'    ,18,'ND'   ,'S','P',1);
GO   
INSERT INTO VCIDADE VALUES('1200401','RIO BRANCO','AC','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('1302603','MANAUS','AM','11','-3.13163330','-59.98250410','S','P',1);
INSERT INTO VCIDADE VALUES('1600105','AMAPA','AP','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('2111300','SAO LUIS','MA','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('2211001','TERESINA','PI','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('2304400','FORTALEZA','CE','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('2507507','JOAO PESSOA','PB','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('2611606','RECIFE','PE','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('2704302','MACEIO','AL','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('2800308','ARACAJU','SE','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('2927408','SALVADOR','BA','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('3106200','BELO HORIZONTE','MG','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('3205309','VITORIA','ES','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('3304557','RIO DE JANEIRO','RJ','11','-22.91101370','-43.20937270','S','P',1);
INSERT INTO VCIDADE VALUES('3509502','CAMPINAS','SP','11','-22.90556000','-47.06083000','S','P',1);
INSERT INTO VCIDADE VALUES('3516408','FRANCO DA ROCHA','SP','11','-23.33280380','-46.72444600','S','P',1);
INSERT INTO VCIDADE VALUES('3518800','GUARULHOS','SP','11','-23.44306020','-46.52445900','S','P',1);
INSERT INTO VCIDADE VALUES('3520442','ILHA SOLTEIRA','SP','11','-20.48300000','-51.32797500','S','P',1);
INSERT INTO VCIDADE VALUES('3543402','RIBEIRAO PRETO','SP','11','-21.17833300','-47.80666710','S','P',1);
INSERT INTO VCIDADE VALUES('3550308','SAO PAULO','SP','11','-23.55065070','-46.63338240','S','P',1);
INSERT INTO VCIDADE VALUES('4106902','CURITIBA','PR','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('4209102','JOINVILLE','SC','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('4314902','PORTO ALEGRE','RS','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('5002704','CAMPO GRANDE','MS','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('5103403','CUIABA','MT','11','0.00000000','0.00000000','S','P',1);
INSERT INTO VCIDADE VALUES('5208707','GOIANIA','GO','11','0.00000000','0.00000000','S','P',1);
/*
SELECT 'INSERT INTO VCIDADE VALUES('
+''''+CAST(CDD_CODIGO AS VARCHAR(10))
+''','''+CAST(CDD_NOME AS VARCHAR(30))
+''','''+CAST(CDD_CODEST AS VARCHAR(3))
+''','''+CAST(CDD_DDD AS VARCHAR(10))
+''','''+CAST(CDD_LATITUDE AS VARCHAR(20))
+''','''+CAST(CDD_LONGITUDE AS VARCHAR(20))
+''','''+CAST(CDD_ATIVO AS VARCHAR(3))
+''','''+CAST(CDD_REG AS VARCHAR(3))
+''',1);'
FROM CIDADE
*/
GO
INSERT INTO VEMPRESATRIBFED VALUES('S','SIMPLES','S','P',1);
INSERT INTO VEMPRESATRIBFED VALUES('P','PRESUMIDO','S','P',1);
GO
INSERT INTO VEMPRESATIPO VALUES('ATA','ATACADISTA','S','P',1);
INSERT INTO VEMPRESATIPO VALUES('IMP','IMPORTADORA','S','P',1);
INSERT INTO VEMPRESATIPO VALUES('IND','INDUSTRIA','S','P',1);
INSERT INTO VEMPRESATIPO VALUES('SER','SERVICO','S','P',1);
GO
INSERT INTO VEMPRESARAMO VALUES('ALI' ,'ALIMENTICIO'            ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('BRI' ,'BRINQUEDOS'             ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('CER' ,'CEREALISTA'             ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('COS' ,'COSMETICO'              ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('EE'  ,'ELETRO ELETRONICO'      ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('HPL' ,'HIGIENE PESS/LIMPREZA'  ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('MAD' ,'MADEIREIRA'             ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('MC'  ,'MATERIAL CONSTRUCAO'    ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('ME'  ,'MATERIAL ELETRICO'      ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('MED' ,'MEDICAMENTOS'           ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('PAP' ,'PAPELARIA'              ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('SER' ,'SERVICO'                ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('TV'  ,'TINTA E VERNIZ'         ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('VEI' ,'VEICULOS'               ,'S','P',1);
INSERT INTO VEMPRESARAMO VALUES('VES' ,'VESTUARIO'              ,'S','P',1);
GO
INSERT INTO VEMPRESAREGTRIB VALUES('1','SIMPLES NAC'                              ,'S','P',1);
INSERT INTO VEMPRESAREGTRIB VALUES('2','SIMPLES NAC EXCESSO SUBLIME RECEITA BRUTA','S','P',1);
INSERT INTO VEMPRESAREGTRIB VALUES('3','REGIME NORMAL'                            ,'S','P',1);
GO
INSERT INTO VCFOP(CFO_CODIGO,CFO_NOME,CFO_ENTSAI,CFO_RELCOMPRA,CFO_RELVENDA,CFO_ATIVO,CFO_REG,CFO_CODUSR) VALUES('5.102','VENDA DE MERC ADQ DE TERC DENTRO ESTADO','S','S','S','S','P',1);
INSERT INTO VCFOP(CFO_CODIGO,CFO_NOME,CFO_ENTSAI,CFO_RELCOMPRA,CFO_RELVENDA,CFO_ATIVO,CFO_REG,CFO_CODUSR) VALUES('6.102','VENDA ADQ DE TERC DENTRO ESTADO','S','S','S','S','P',1);
GO
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('ARM','ARMAZEM'            ,'J'  ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('CER','CEREALISTA'         ,'FJ' ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('CON','CONDOMINIO'         ,'J'  ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('CF','CONSUMIDOR FINAL'    ,'FJ' ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('EP','ENTE PUBLICO'        ,'J'  ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('EXP','EXPORTADOR'         ,'J'  ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('IND','INDUSTRIA'          ,'J'  ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('NOR','NORMAL'             ,'J'  ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('SIM','SIMPLES'            ,'J'  ,'S','P',1);
INSERT INTO VCATEGORIA(CTG_CODIGO,CTG_NOME,CTG_FISJUR,CTG_ATIVO,CTG_REG,CTG_CODUSR) VALUES('ZFM','ZONA FRANCA MANAUS' ,'J'  ,'S','P',1);
GO
INSERT INTO dbo.VCONTARESUMO(CTR_CODIGO,CTR_NOME,CTR_ATIVO,CTR_REG,CTR_CODUSR) VALUES('0.00.0000','NAO INFORMADO' ,'S'  ,'S'  ,1);
INSERT INTO dbo.VCONTARESUMO(CTR_CODIGO,CTR_NOME,CTR_ATIVO,CTR_REG,CTR_CODUSR) VALUES('1.01.0001','CLIENTE'       ,'S'  ,'S'  ,1);
INSERT INTO dbo.VCONTARESUMO(CTR_CODIGO,CTR_NOME,CTR_ATIVO,CTR_REG,CTR_CODUSR) VALUES('1.01.0002','BANCO'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VCONTARESUMO(CTR_CODIGO,CTR_NOME,CTR_ATIVO,CTR_REG,CTR_CODUSR) VALUES('2.01.0001','FORNECEDOR'    ,'S'  ,'S'  ,1);
INSERT INTO dbo.VCONTARESUMO(CTR_CODIGO,CTR_NOME,CTR_ATIVO,CTR_REG,CTR_CODUSR) VALUES('5.01.0001','RECEITA SERVICO'    ,'S'  ,'S'  ,1);
GO
INSERT INTO dbo.VEMPRESA(
  EMP_NOME
  ,EMP_APELIDO
  ,EMP_CNPJ
  ,EMP_INSESTAD
  ,EMP_CODCDD
  ,EMP_CODLGR
  ,EMP_ENDERECO
  ,EMP_NUMERO
  ,EMP_CEP
  ,EMP_BAIRRO
  ,EMP_FONE
  ,EMP_CODETF
  ,EMP_ALIQCOFINS
  ,EMP_ALIQPIS
  ,EMP_ALIQCSLL
  ,EMP_BCPRESUMIDO
  ,EMP_ALIQIRPRESUMIDO
  ,EMP_ALIQCSLLPRESUMIDO
  ,EMP_ALIQIRRF
  ,EMP_ANEXOSIMPLES
  ,EMP_CODETP
  ,EMP_CODERM
  ,EMP_CODERT
  ,EMP_SMTPUSERNAME
  ,EMP_SMTPPASSWORD
  ,EMP_SMTPHOST
  ,EMP_SMTPPORT
  ,EMP_CERTPATH
  ,EMP_CERTSENHA
  ,EMP_CERTVALIDADE
  ,EMP_PRODHOMOL
  ,EMP_CONTINGENCIA
  ,EMP_ATIVO
  ,EMP_REG
  ,EMP_CODUSR) VALUES(
  'TOTALTRAC LTDA'  -- EMP_NOME
  ,'TOTALTRAC'      -- EMP_APELIDO
  ,'10200300000422' -- EMP_CNPJ
  ,''               -- EMP_INSESTAD
  ,'3550308'        -- EMP_CODCDD
  ,'RUA'            -- EMP_CODLGR
  ,'ANDORINA'       -- EMP_ENDERECO
  ,'136'            -- EMP_NUMERO
  ,'20300400'       -- EMP_CEP
  ,'JD VALERIA'     -- EMP_BAIRRO
  ,'24563340'       -- EMP_FONE
  ,'S'              -- EMP_CODETF
  ,7.60             -- EMP_ALIQCOFINS
  ,1.65             -- EMP_ALIQPIS
  ,9.00             -- EMP_ALIQCSLL
  ,0.00             -- EMP_BCPRESUMIDO
  ,0.00             -- EMP_ALIQIRPRESUMIDO
  ,0.00             -- EMP_ALIQCSLLPRESUMIDO
  ,0.00             -- EMP_ALIQIRRF
  ,3                -- EMP_ANEXOSIMPLES
  ,'SER'            -- EMP_CODETP
  ,'VEI'            -- EMP_CODERM
  ,'3'              -- EMP_CODERT
  ,null             -- EMP_SMTPUSERNAME
  ,null             -- EMP_SMTPPASSWORD
  ,null             -- EMP_SMTPHOST
  ,null             -- EMP_SMTPPORT
  ,null             -- EMP_CERTPATH
  ,null             -- EMP_CERTSENHA
  ,null             -- EMP_CERTVALIDADE
  ,'P'             -- EMP_PRODHOMOL
  ,'N'              -- EMP_CONTINGENCIA
  ,'S'              -- EMP_ATIVO
  ,'P'              -- EMP_REG
  ,1                -- EMP_CODUSR
);
GO
INSERT INTO dbo.VSPED(SPD_CODIGO,SPD_NOME,SPD_ATIVO ,SPD_REG ,SPD_CODUSR) VALUES('**','NAO ENTRA SPED'        ,'S'  ,'S'  ,1);
INSERT INTO dbo.VSPED(SPD_CODIGO,SPD_NOME,SPD_ATIVO ,SPD_REG ,SPD_CODUSR) VALUES('00','CONTA SINTETICA'       ,'S'  ,'S'  ,1);
INSERT INTO dbo.VSPED(SPD_CODIGO,SPD_NOME,SPD_ATIVO ,SPD_REG ,SPD_CODUSR) VALUES('01','CONTAS DE ATIVO'       ,'S'  ,'S'  ,1);
INSERT INTO dbo.VSPED(SPD_CODIGO,SPD_NOME,SPD_ATIVO ,SPD_REG ,SPD_CODUSR) VALUES('02','CONTAS DE PASSIVO'     ,'S'  ,'S'  ,1);
INSERT INTO dbo.VSPED(SPD_CODIGO,SPD_NOME,SPD_ATIVO ,SPD_REG ,SPD_CODUSR) VALUES('03','PATRIMONIO LIQUIDO'    ,'S'  ,'S'  ,1);
INSERT INTO dbo.VSPED(SPD_CODIGO,SPD_NOME,SPD_ATIVO ,SPD_REG ,SPD_CODUSR) VALUES('04','CONTA DE RESULTADO'    ,'S'  ,'S'  ,1);
INSERT INTO dbo.VSPED(SPD_CODIGO,SPD_NOME,SPD_ATIVO ,SPD_REG ,SPD_CODUSR) VALUES('05','CONTA DE COMPENSACAO'  ,'S'  ,'S'  ,1);
INSERT INTO dbo.VSPED(SPD_CODIGO,SPD_NOME,SPD_ATIVO ,SPD_REG ,SPD_CODUSR) VALUES('09','OUTRAS'                ,'S'  ,'S'  ,1);
GO
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('000','NAO SE APLICA'                 ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('036','BANCO BRADESCO BBI SA'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('745','BANCO CITIBANK SA'             ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('001','BANCO DO BRASIL SA'            ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('389','BANCO MERCANTIL DO BRASIL SA'  ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('623','BANCO PANAMERICANO SA'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('033','BANCO SANTANDER SA'            ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('341','ITAU UNIBANCO SA'              ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOCODIGO(BCD_CODIGO,BCD_NOME,BCD_ATIVO ,BCD_REG ,BCD_CODUSR) VALUES('237','BANCO BRADESCO SA'             ,'S'  ,'S'  ,1);
GO
INSERT INTO dbo.VBANCOSTATUS(BST_CODIGO,BST_NOME,BST_ATIVO ,BST_REG ,BST_CODUSR) VALUES('BCO','BANCO'            ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOSTATUS(BST_CODIGO,BST_NOME,BST_ATIVO ,BST_REG ,BST_CODUSR) VALUES('FF','FUNDOFIXO'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VBANCOSTATUS(BST_CODIGO,BST_NOME,BST_ATIVO ,BST_REG ,BST_CODUSR) VALUES('EF','EXTRA FINANCEIRO'  ,'S'  ,'S'  ,1);
GO
INSERT INTO VEMBALAGEM VALUES('BD' ,'BALDE'           ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('BR' ,'BR'              ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('CJ' ,'CONJUNTO'        ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('CO' ,'CONCERTO'        ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('CT' ,'CENTO'           ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('CX' ,'CAIXA'           ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('FD' ,'FARDO'           ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('GL' ,'GALAO'           ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('HR' ,'HORA'            ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('LT' ,'LITRO'           ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('M'  ,'METRO'           ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('M2' ,'METRO QUADRADO'  ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('M3' ,'METRO CUBICO'    ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('PC' ,'PECA'            ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('PCT','PACOTE'          ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('RL' ,'ROLO'            ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('UN' ,'UNIDADE'         ,'S'  ,'S'  ,1);
INSERT INTO VEMBALAGEM VALUES('VD' ,'VIDRO'           ,'S'  ,'S'  ,1);
GO
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('BOL','BOLETO'           ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('BOR','BORDERO'          ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('CAI','CAIXINHA'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('CAR','CARTEIRA'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('CC' ,'CREDITO EM CONTA' ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('CD' ,'COB DESCONTO'     ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('CS' ,'COB SIMPLES'      ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('CHE','CHEQUE'           ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('CRT','CARTORIO'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('DEP','DEPOSITO'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('DC' ,'DEBITO EM CONTA'  ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('EF' ,'EXTRA FINANCEIRO' ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('SP' ,'SISPAG'           ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('TED','TED'              ,'S'  ,'S'  ,1);
INSERT INTO dbo.VFORMACOBRANCA(FC_CODIGO,FC_NOME,FC_ATIVO ,FC_REG ,FC_CODUSR) VALUES('TRA','TRANSFERENCIA'    ,'S'  ,'S'  ,1);
GO
INSERT INTO dbo.VMOEDA(MOE_CODIGO,MOE_NOME,MOE_ATIVO,MOE_REG,MOE_CODUSR) VALUES('R$','REAL'   ,'S'  ,'P'  ,1);
INSERT INTO dbo.VMOEDA(MOE_CODIGO,MOE_NOME,MOE_ATIVO,MOE_REG,MOE_CODUSR) VALUES('US$','DOLAR' ,'S'  ,'P'  ,1);
GO
INSERT INTO VNATUREZAOPERACAO VALUES('1','VENDA'                  ,'1','S','S',1);
INSERT INTO VNATUREZAOPERACAO VALUES('2','DEVOLUCAO'              ,'1','S','S',1);
INSERT INTO VNATUREZAOPERACAO VALUES('3','TRANSFERENCIA'          ,'1','S','S',1);
INSERT INTO VNATUREZAOPERACAO VALUES('4','VENDA DE ATIVO'         ,'1','S','S',1);
INSERT INTO VNATUREZAOPERACAO VALUES('5','BRINDE'                 ,'1','S','S',1);
INSERT INTO VNATUREZAOPERACAO VALUES('6','DEMONSTRACAO'           ,'1','S','S',1);
INSERT INTO VNATUREZAOPERACAO VALUES('7','REMESSA PARA CONSERTO'  ,'1','S','S',1);
INSERT INTO VNATUREZAOPERACAO VALUES('8','COMPLEMENTO ICMS'       ,'1','S','S',1);
INSERT INTO VNATUREZAOPERACAO VALUES('9','NF AJUSTE'              ,'1','S','S',1);
GO
INSERT INTO VNCM VALUES('3404.90.29','CERA LIQUIDA'                             ,'S','P',1);
INSERT INTO VNCM VALUES('3405.40.00','SABOES, AGENTES ORGANICOS DE SUPERFICIE'  ,'S','P',1);
INSERT INTO VNCM VALUES('3819.00.00','FLUIDO DE FREIO'                          ,'S','P',1);
INSERT INTO VNCM VALUES('3820.00.00','ADITIVO RADIADOR'                         ,'S','P',1);
INSERT INTO VNCM VALUES('3824.90.29','CORRETOR LIQUIDO'                         ,'S','P',1);
GO
INSERT INTO VPAGARTITULO VALUES('B','BORDERO'                   ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('C','CONTRATO'                  ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('E','LANCAMENTO EXTRA'          ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('F','FATURAMENTO'               ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('L','CADASTRO FINANCEIRO'       ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('O','DEPOSITO NAO IDENTIFICADO' ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('P','PREVISAO EM DEFINITIVO'    ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('R','RECIBO'                    ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('N','TARIFA'                    ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('T','TRANSFERENCIA'             ,'S','S',1);
INSERT INTO VPAGARTITULO VALUES('D','DESMEMBRAMENTO'            ,'S','S',1);
GO
INSERT INTO VPRODUTOORIGEM VALUES('0','NACIONAL'                ,'S','S',1);
INSERT INTO VPRODUTOORIGEM VALUES('1','IMPORTACAO DIRETA'       ,'S','S',1);
INSERT INTO VPRODUTOORIGEM VALUES('2','IMPORTADO MERC INTERNO'  ,'S','S',1);
GO
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('001','SIGNATARIO DA ECD COM E-CNPJ OU E-PJ','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('203','DIRETOR','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('204','CONSELHEIRO DE ADMINISTRACAO','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('205','ADMINISTRADOR','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('206','ADMINISTRADOR DO GRUPO','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('207','ADMINISTRADOR DE SOCIEDADE FILIADA','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('220','ADMINISTRADOR JUDICIAL PF','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('222','ADMINISTRADOR JUDICIAL PJ PROFISSIONAL RESP','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('223','ADMINISTRADOR JUDICIAL/GESTOR','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('226','GESTOR JUDICIAL','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('309','PROCURADOR','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('312','INVENTARIANTE','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('313','LIQUIDANTE','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('315','INTERVENTOR','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('801','EMPRESARIO','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('900','CONTADOR/CONTABILISTA','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('910','CONTADOR/CONTABILISTA RESP TERMO VERIFIC P/ FINS DE SUBSTIT ECD','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('920','AUDITOR INDEPENDENTE RESP TERMO VERIFIC P/ FINS SUBSTIT ECD','S','P',1);
INSERT INTO VQUALIFICACAOCONT(QC_CODIGO,QC_NOME,QC_ATIVO,QC_REG,QC_CODUSR) VALUES('999','OUTROS','S','P',1);
GO
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('CON','CONTRATO'            ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('CX','CAIXINHA'             ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('DEP','DEPOSITO'            ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('DN','DARF NORMAL'          ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('EF','EXTRA FINANCEIRO'     ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('FAT','FATURA'              ,'S','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('GNR','GNRE'                ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('GR','GUIA RECOLHIMENTO'    ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('ND','NOTA DEBITO'          ,'S','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('NFP','NF PRODUTO'          ,'P','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('NFS','NF SERVICO'          ,'S','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('REC','RECIBO'              ,'S','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('REQ','REQUISICAO'          ,'P','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('RPA','REC PAGTO AUTONOMO'  ,'S','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('RPS','REC PAGTO SERVICO'   ,'S','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('TAR','TARIFA BANCARIA'     ,'N','S' ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('TEC','TRANSF ENTRE CONTAS' ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VTIPODOCUMENTO(TD_CODIGO,TD_NOME,TD_SERIENF,TD_ATIVO ,TD_REG ,TD_CODUSR) VALUES('TED','TED'                 ,'N','S'  ,'S'  ,1);
GO
INSERT INTO dbo.VAGENDATAREFA(AT_CODIGO,AT_NOME,AT_ATIVO ,AT_REG ,AT_CODUSR) VALUES(1,'CONFERIR EXTRATO BANCARIO'   ,'S'  ,'S'  ,1);
INSERT INTO dbo.VAGENDATAREFA(AT_CODIGO,AT_NOME,AT_ATIVO ,AT_REG ,AT_CODUSR) VALUES(2,'POSICAO DE TITULOS VENCIDOS' ,'S'  ,'S'  ,1);
INSERT INTO dbo.VAGENDATAREFA(AT_CODIGO,AT_NOME,AT_ATIVO ,AT_REG ,AT_CODUSR) VALUES(3,'INICIAR FATURAMENTO'         ,'S'  ,'S'  ,1);
INSERT INTO dbo.VAGENDATAREFA(AT_CODIGO,AT_NOME,AT_ATIVO ,AT_REG ,AT_CODUSR) VALUES(4,'PAGAMENTO ICMS'              ,'S'  ,'S'  ,1);
INSERT INTO dbo.VAGENDATAREFA(AT_CODIGO,AT_NOME,AT_ATIVO ,AT_REG ,AT_CODUSR) VALUES(5,'FOLHA DE PAGAMENTO'          ,'S'  ,'S'  ,1);
INSERT INTO dbo.VAGENDATAREFA(AT_CODIGO,AT_NOME,AT_ATIVO ,AT_REG ,AT_CODUSR) VALUES(6,'NOVO CONTRATO CADASTRADO'    ,'S'  ,'S'  ,1);
GO
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('01','NAO SE APLICA'           ,'S'  ,'S'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('02','ASSINATURA'              ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('03','AGUA/LUZ'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('04','BANCOS'                  ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('05','BENEFICIOS'              ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('06','CLIENTES'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('07','DESPESA ADM'             ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('08','DIVERSOS'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('09','CELULAR'                 ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('10','COMERCIAL'               ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('11','CONSULTORIA'             ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('12','COPA E COZINHA'          ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('13','CORREIO'                 ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('14','DESPESAS'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('15','FRETE'                   ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('16','IMPOSTOS'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('17','INFORMATICA'             ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('18','INTERNET'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('19','IPVA'                    ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('20','MANUTENCAO PREDIAL'      ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('21','MAO DE OBRA TEMPORARIA'  ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('22','MATERIAL LIMPEZA'        ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('23','MATERIAL ESCRITORIO'     ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('24','OCUPACAO'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('25','PARCEIROS'               ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('26','PUBLICACOES'             ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('27','SALARIOS'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('28','SEG/LIMPEZA'             ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('29','SEGURO'                  ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('30','SINDICATO'               ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('31','SOCIOS'                  ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('32','TECNOLOGIA'              ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('33','TELEFONIA'               ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('34','UNIFORMES'               ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('35','VALE TRANSPORTE'         ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('36','VEICULOS'                ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('37','VIAGENS'                 ,'S'  ,'P'  ,1);
INSERT INTO dbo.VGRUPOFAVORECIDO(GF_CODIGO,GF_NOME,GF_ATIVO ,GF_REG ,GF_CODUSR) VALUES('38','ADVOGADOS'               ,'S'  ,'P'  ,1);
GO
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.'              ,'ATIVO'                                    ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.'           ,'CIRCULANTE'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.01.'        ,'DISPONIBILIDADES'                         ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.01.01.'     ,'CAIXA'                                    ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.01.01.0001' ,'FUNDO FIXO'                               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.01.02.'     ,'FUNDO FIXO'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.01.02.0001' ,'BANCO'                                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.'        ,'CREDITOS'                                 ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.01.'     ,'ADIANTAMENTO A FORNECEDORES'              ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.01.0001' ,'ADIANTAMENTO A FORNECEDORES'              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.02.'     ,'CLIENTES'                                 ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.02.0001' ,'CLIENTES A RECEBER'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.'     ,'IMPOSTOS E CONTRIB A RECUPERAR'           ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0001' ,'PIS A RECUPERAR'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0002' ,'COFINS A RECUPERAR'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0003' ,'CSLL A RECUPERAR'                         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0004' ,'IRRF A RECUPERAR'                         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0005' ,'ISS A RECUPERAR'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0006' ,'INSS A RECUPERAR'                         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0007' ,'IPI A RECUPERAR'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0008' ,'SIMPLES A RECUPERAR'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0009' ,'ICMS A RECUPERAR'                         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0010' ,'COMPENSACAO DE IMPOSTOS E TAXAS'          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0011' ,'(-) PIS APURCAO'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0012' ,'(-) COFINS APURACAO'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0013' ,'(-) CSLL APURACAO'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0014' ,'(-) IRRF APURACAO'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0015' ,'(-) ISS APURACAO'                         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.05.0016' ,'(-) INSS APURACAO'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.07.'     ,'OUTRAS'                                   ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.01.05.07.0001' ,'OUTRAS CONTAS A RECEBER'                  ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.'           ,'REALIZAVEL A LONGO PRAZO'                 ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.'        ,'CREDITOS'                                 ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.04.'     ,'DEPOSITOS JUDICIAIS'                      ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.04.0001' ,'DEPOSITOS JUDICIAIS - FISCAIS'            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.04.0002' ,'DEPOSITOS JUDICIAIS - TRABALHISTAS'       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.04.0003' ,'DEPOSITOS JUDICIAIS - CIVEIS'             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.'     ,'OUTRAS CONTAS'                            ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0001' ,'EMPRESTIMOS A RECEBER'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0002' ,'ADIANTAMENTO DE FUNCIONARIOS'             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0003' ,'ADIANTAMENTO DE FERIAS'                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0004' ,'ADIANTAMENTO DE 13. SALARIO'              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0005' ,'MUTUOS A RECEBER'                         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0006' ,'COMPENSACAO DE FOLHA DE PAGAMENTO'        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0007' ,'COMPENSACAO DE FOLHA DE EMPRESTIMOS'      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0008' ,'COMPENSACAO DE ENTRADAS E SAIDAS'         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0009' ,'COMPENSACAO DE MOV JUDICAL'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.03.01.08.0010' ,'TRANSFERENCIA ENTRE CONTAS'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.'           ,'PERMANENTE'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.01.'        ,'INVESTIMENTOS'                            ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.01.01.'     ,'PARTICIPACOES PERM EM COLIG OU CONT'      ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.01.01.0001' ,'INVESTIMENTOS EM EMPRESAS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.'        ,'IMOBILIZADO'                              ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.01.'     ,'TERRENOS'                                 ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.01.0001' ,'IMOVEIS'                                  ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.03.'     ,'EQUIPAMENTOS, MAQ E INST INDUSTRIAIS'     ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.03.0001' ,'EQUIPAMENTOS DE INFORMATICA'              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.03.0002' ,'EQUIPAMENTOS DIVERSOS'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.04.'     ,'VEiCULOS'                                 ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.04.0001' ,'VEICULOS'                                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.05.'     ,'MOVEIS, UTENSiLIOS E INST COMERCIAIS'     ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.05.0001' ,'MOVEIS E UTENSILIOS'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.09.'     ,'OUTRAS IMOBILIZAcoES'                     ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.09.0001' ,'BENFEITORIAS EM IMOVEIS DE TERCEIROS'     ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.03.09.0002' ,'BENFEITORIAS EM BENS DE TERCEIROS'        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.05.'        ,'INTANGIVEL'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.05.09.'     ,'SOFTWARE OU PROGRAMAS DE COMPUTADOR'      ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.05.09.0001' ,'INVESTIMENTOS EM SOFTWARE'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.05.09.0002' ,'INVESTIMENTOS EM PORTAL DE VENDAS'        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.05.13.'     ,'DESENVOLVIMENTO DE PRODUTOS'              ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.05.13.0001' ,'INVESTIMENTOS EM CAPACIT PROFISSIONAL'    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('1.05.05.13.0002' ,'INVESTIMENTO EM MARCAS/BRANDING'          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.'              ,'PASSIVO'                                  ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.'           ,'CIRCULANTE'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.'        ,'OBRIGACOES DE CURTO PRAZO'                ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.01.'     ,'FORNECEDORES'                             ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.01.0001' ,'CONTAS A PAGAR'                           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.03.'     ,'FINANCIAMENTOS A CURTO PRAZO'             ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.03.0001' ,'OUTROS CONTAS A PAGAR'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.03.0002' ,'ADIANTAMENTO A CLIENTE'                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.'     ,'IMPOSTOS, TAXAS E CONTRIB A RECOLHER'     ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0001' ,'PIS A PAGAR'                              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0002' ,'COFINS A PAGAR'                           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0003' ,'CONTRIBUICAO SOCIAL A PAGAR'              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0004' ,'IMPOSTO DE RENDA A PAGAR'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0005' ,'ISS A PAGAR'                              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0006' ,'INSS A PAGAR'                             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0007' ,'IPI A PAGAR'                              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0008' ,'SIMPLES A PAGAR'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0009' ,'ICMS A PAGAR'                             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0010' ,'OUTRAS TAXAS E TRIBUTOS ESTAD A PAGAR'    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0011' ,'OUTRAS TAXAS E TRIBUTOS MUNICIP PAGAR'    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0012' ,'CONTRIBUICOES FEDERAIS RETIDAS A PAGAR'   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0013' ,'PARCELAMENTO REFIS A RECOLHER'            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0014' ,'PARCELAMENTO SIMPLES A RECOLHER'          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0015' ,'IR RETIDO A PAGAR'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0016' ,'ISS RETIDO A PAGAR'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.05.0017' ,'INSS RETIDO A PAGAR'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.07.'     ,'FGTS A RECOLHER'                          ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.07.0001' ,'FGTS A PAGAR'                             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.11.'     ,'CONTRIB PREVIDENCIaRIAS A RECOLHER'       ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.11.0001' ,'ENCARGOS SOCIAIS A PAGAR'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.11.0002' ,'IR RETIDO FOLHA A PAGAR'                  ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.11.0003' ,'INSS RETIDO FOLHA A PAGAR'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.13.'     ,'SALaRIOS A PAGAR'                         ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.13.0001' ,'SALARIOS A PAGAR'                         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.13.0002' ,'ESTAGIARIOS A PAGAR'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.25.'     ,'OUTRAS CONTAS'                            ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.25.0001' ,'BENEFICIOS A PAGAR'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.25.0002' ,'FERIAS A PAGAR'                           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.25.0003' ,'13. SALARIO A PAGAR'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.25.0004' ,'RESCISOES A PAGAR'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.25.0005' ,'OUTROS PAGAMENTOS PESSOAL'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.01.01.25.0006' ,'PROLABORE A PAGAR'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.03.'           ,'EXIGIVELA LONGO PRAZO'                    ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.03.01.'        ,'OBRIGACOES A LONGO PRAZO'                 ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.03.01.03.'     ,'FINANCIAMENTOS A LONGO PRAZO'             ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.03.01.03.0001' ,'EMPRESTIMOS A PAGAR'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.03.01.03.0002' ,'MUTUOS A PAGAR'                           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.'           ,'PATRIMONIO LIQUIDO'                       ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.01.'        ,'CAPITAL REALIZADO'                        ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.01.01.'     ,'CAPITAL SUBSC DE DOMIC E RESID NO PAiS'   ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.01.01.0001' ,'CAPITAL SOCIAL SUBSCRITO'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.01.03.'     ,'(-) CAPITAL A INT DE DOM E RESID NO PAIS' ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.01.03.0001' ,'(-) CAPITAL SOCIAL A INTEGRALIZAR'      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.'        ,'RESERVAS'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.01.'     ,'RESERVAS DE CAPITAL'                    ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.01.0001' ,'APORTE DE CAPITAL'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.01.0002' ,'(-) RETIRADAS'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.01.0003' ,'COMPENSACAO DE SALDOS INICIAIS'         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.05.'     ,'RESERVAS DE LUCROS'                     ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.05.0001' ,'LUCROS ACUMULADOS'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.05.0002' ,'PREJUIZOS ACUMULADOS'                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('2.05.03.05.0003' ,'RESULTADO DO EXERCICIO'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.'              ,'CUSTOS'                                 ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.'           ,'CUSTO DOS BENS E SERVICOS PRODUZIDOS'   ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.'        ,'CUSTO DOS SERVICOS PRODUZIDOS'          ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.03.'     ,'REMUN A DIRIG LIGADOS a PROD DE SERV'   ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.03.0001' ,'PROLABORE'                              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.'     ,'CUSTO DO PESSOAL APLIC NA PROD DE SERV' ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0001' ,'SALARIOS'                               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0002' ,'ESTAGIARIOS'                            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0003' ,'FERIAS'                                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0004' ,'13. SALARIO'                            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0005' ,'RESCISOES'                              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0006' ,'OUTRAS DESPESAS COM PESSOAL'            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0007' ,'ACOES JUDICIAIS TRABALHISTAS'           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0008' ,'INSALUBRIDADE'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0009' ,'HORAS EXTRAS 100%'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0010' ,'HORAS EXTRAS 80%'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0011' ,'HORAS EXTRAS 60%'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0012' ,'FOLGA TRABALHADA'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.05.0013' ,'OUTROS PAGAMENTOS COM PESSOAL'          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.15.'     ,'ENCARGOS SOCIAIS PREVIDeNCIA SOCIAL'    ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.15.0001' ,'INSS'                                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.17.'     ,'ENCARGOS SOCIAIS FGTS'                  ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.17.0001' ,'FGTS'                                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.19.'     ,'ENCARGOS SOCIAIS OUTROS'                ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.19.0001' ,'ASSISTENCIA MEDICA'                     ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.19.0002' ,'ASSISTENCIA ODONTOLOGICA'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.19.0003' ,'VALE TRANSPORTE'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.19.0004' ,'AUXILIOS DIVERSOS'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.19.0005' ,'CONTRIBUICOES SINDICAIS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.21.'     ,'ALIMENTAcaO DO TRABALHADOR'             ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.21.0001' ,'VALE REFEICAO'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('3.03.03.21.0002' ,'CESTA BASICA'                           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.'              ,'DESPESAS'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.'           ,'DESPESAS OPERAC DAS ATIVIDADES EM GERAL','**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.'        ,'DESPESAS OPERAC DAS ATIVIDADES EM GERAL','**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.'     ,'DESPESAS OPERAC DAS ATIVIDADES EM GERAL','**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0001' ,'ALUGUEL'                                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0002' ,'CONDOMINIO'                             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0003' ,'IPTU'                                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0004' ,'ENERGIA ELETRICA'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0005' ,'AGUA'                                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0006' ,'MANUTENCAO PREDIAL'                     ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0007' ,'TELEFONIA E COMUNICACAO'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0008' ,'OUTRAS DESPESAS COM OCUPACAO'           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0009' ,'MATERIAL DE ESCRITORIO'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0010' ,'MATERIAL DE INFORMATICA'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0011' ,'IMPRESSOS DIVERSOS'                     ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0012' ,'MATERIAIS DIVERSOS'                     ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0013' ,'ASSESSORIA JURIDICA'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0014' ,'ASSESSORIA CONTABIL'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0015' ,'ASSESSORIA DE INFORMATICA'              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0016' ,'ASSESSORIA FINANCEIRA'                  ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0017' ,'ASSESSORIA DE DEPTO PESSOAL'            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0018' ,'ASSESSORIAS DIVERSAS'                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0019' ,'SERVICOS DE MOTOBOY E FRETES'           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0020' ,'MANUTENCAO DE EQUIPAMENTOS'             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0021' ,'SERVICOS DE TERCEIROS DIVERSOS'         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0022' ,'HOSTING / SERVIDORES'                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0023' ,'EMAILS EXTERNOS / CLOUND'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0024' ,'FERRAMENTAS DE BUSCA WEB'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0025' ,'ANUNCIOS E MARKETING PERIODICOS'        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0026' ,'ANUNCIOS E MARKETING WEB'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0027' ,'ANUNCIOS E MARKETING MIDIA'             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0028' ,'ASSESSORIA DE IMPRENSA'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0029' ,'REGISTRO DE MARCAS/PATENTES'            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0030' ,'PIS RETIDO DE TERCEIROS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0031' ,'COFINS RETIDO DE TERCEIROS'             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0032' ,'CSLL RETIDO DE TERCEIROS'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0033' ,'IRRF RETIDO DE TERCEIROS'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0034' ,'ISS RETIDO DE TERCEIROS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0035' ,'INSS RETIDO DE TERCEIROS'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0036' ,'ACOES JUDICIAIS FISCAIS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0037' ,'ACOES JUDICIAIS CIVEIS'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0038' ,'DESPESA COM EVENTOS'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0039' ,'DESPESA COM VIAGENS'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0040' ,'DESPESAS COM PROPAGANDA'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0041' ,'DESPESAS COM MARCAS E PATENTES'         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0042' ,'BRINDES E DOACOES'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0043' ,'ASSINATURAS DE PERIODICOS'              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0044' ,'COMBUSTIVEL'                            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0045' ,'PEDAGIOS'                               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0046' ,'DESPESA COM BENS DE PEQ VALOR'          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0047' ,'DESPESAS COM CARTORIOS'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0048' ,'DESPESAS COM VEICULOS'                  ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0049' ,'COPA E COZINHA'                         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0050' ,'DESPESAS ADM DIVERSAS'                  ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0051' ,'LOCACAO DE EQUIPAMENTOS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0052' ,'LOCACAO DE VEICULOS'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0053' ,'LEASING DE VEICULOS'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0054' ,'LEASING DE EQUIPAMENTOS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0055' ,'CPMF'                                   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0056' ,'TARIFAS BANCARIAS'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0057' ,'OUTRAS DESPESAS BANCARIAS'              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0058' ,'OUTRAS RECEITAS BANCARIAS'              ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0059' ,'VARIACAO CAMBIAL ATIVA'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0060' ,'VARIACAO CAMBIAL PASSIVA'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0061' ,'DESP. CAMBIAIS DIVERSAS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0062' ,'JUROS RECEBIDOS APLICACOES FINANCEIRAS' ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0063' ,'JUROS RECEBIDOS EMPRESTIMOS TERCEIROS'  ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0064' ,'JUROS RECEBIDOS CONTRATOS DE MUTUO'     ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0065' ,'JUROS RECEBIDOS OUTROS'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0066' ,'JUROS INCORRIDOS CAPITAL DE GIRO'       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0067' ,'JUROS INCORRIDOS EMPREST LONGO PRAZO'   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0068' ,'JUROS INCORRIDOS CONTA GARANTIDA'       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0069' ,'JUROS INCORRIDOS EMPRESTIMO TERCEIROS'  ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0070' ,'JUROS INCORRIDOS CONTRATOS DE MUTUO'    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0071' ,'JUROS INCORRIDOS CAPITAL PROPRIO'       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0072' ,'JUROS INCORRIDOS OUTROS'                ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0073' ,'DESP. FINANCEIRAS DIVERSAS'             ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0074' ,'OPERADORAS CARTOES DE CREDITO'          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0075' ,'OPERADORAS CARTOES DE DEBITO'           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0076' ,'OPERADORAS PAYPAL'                      ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('4.01.01.01.0077' ,'EMISSAO E CUSTODIA DE BOLETOS'          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.'              ,'RECEITAS'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.'           ,'RECEITAS'                               ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.'        ,'RECEITA LIQUIDA'                        ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.01.'     ,'RECEITA BRUTA'                          ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.01.0001' ,'RECEITA DE SERVICOS'                    ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.02.'     ,'OUTRAS RECEITAS'                        ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.02.0002' ,'OUTRAS RECEITAS'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.02.0003' ,'COMISSOES POR VENDAS / INTERMEDIACAO'   ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.'     ,'DEDUCOES DA RECEITA BRUTA'              ,'**','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0001' ,'PIS APURACAO'                           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0002' ,'COFINS APURACAO'                        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0003' ,'CSLL APURACAO'                          ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0004' ,'IMPOSTO DE RENDA'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0005' ,'ISS APURACAO'                           ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0006' ,'INSS APURACAO (FATURAMENTO)'            ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0007' ,'SIMPLES APURACAO'                       ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0008' ,'COMISSOES SOBRE VENDAS'                 ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0009' ,'COMISSOES PORTAL DE VENDAS WEB'         ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0010' ,'COMISSOES REPRESENTANTES'               ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0011' ,'CANCELAMENTO DE VENDAS/SERVICOS'        ,'00','S','P',1);
INSERT INTO VBALANCO(BLN_CODIGO,BLN_NOME,BLN_CODSPD,BLN_ATIVO,BLN_REG,BLN_CODUSR) VALUES('5.01.01.03.0012' ,'DEVOLUCAO DE VENDAS'                    ,'00','S','P',1);
GO
INSERT INTO VPAGARTIPO VALUES('CP','CONTAS A PAGAR'        ,-1 ,'S','S','S','S',1);
INSERT INTO VPAGARTIPO VALUES('CR','CONTAS A RECEBER'      ,1  ,'S','S','S','S',1);
INSERT INTO VPAGARTIPO VALUES('DT','DESCONTO TOTAL'        ,0  ,'N','S','S','S',1);
INSERT INTO VPAGARTIPO VALUES('EX','TITULO EXCLUIDO'       ,0  ,'N','N','S','S',1);
INSERT INTO VPAGARTIPO VALUES('LE','LANCTO EXTRA'          ,1  ,'N','S','S','S',1);
INSERT INTO VPAGARTIPO VALUES('MP','MENSAL A PAGAR'        ,-1 ,'N','N','S','S',1);
INSERT INTO VPAGARTIPO VALUES('MR','MENSAL A RECEBER'      ,1  ,'N','N','S','S',1);
INSERT INTO VPAGARTIPO VALUES('OP','ORDEM DE PRODUCAO'     ,1  ,'N','S','S','P',1);
INSERT INTO VPAGARTIPO VALUES('PP','PROVISAORIO A PAGAR'   ,-1 ,'N','N','S','P',1);
INSERT INTO VPAGARTIPO VALUES('PR','PROVISAORIO A RECEBER' ,1  ,'N','N','S','S',1);
INSERT INTO VPAGARTIPO VALUES('RQ','REQUISICAO'            ,1  ,'N','S','S','S',1);
GO
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('00','S','TRIBUTADA INTEGRALMENTE'        ,'S',0.00   ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('10','S','TRIB COBRA ICMS POR ST'         ,'S',0.00   ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('20','S','COM REDUCAO DE BASE DE CALCULO' ,'S',100.00 ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('40','S','ISENTA'                         ,'N',100.00 ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('41','S','NAO TRIBUTADA'                  ,'N',100.00 ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('50','S','COM SUSPENSAO'                  ,'N',0.00   ,100.00 ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('51','S','COM DIFERIMENTO'                ,'N',0.00   ,100.00 ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('60','S','ICMS COBRADO ANT POR ST'        ,'N',0.00   ,100.00 ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('70','S','COM RED BC COBRANCA ICMS POR ST','S',100.00 ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('90','S','OUTRAS'                         ,'S',0.00   ,100.00 ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('00','E','TRIBUTADA INTEGRALMENTE'        ,'S',0.00   ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('20','E','COM REDUCAO DE BASE DE CALCULO' ,'S',100.00 ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('40','E','ISENTA'                         ,'N',100.00 ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('41','E','NAO TRIBUTADA'                  ,'N',100.00 ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('50','E','COM SUSPENSAO'                  ,'N',0.00   ,100.00 ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('51','E','COM DIFERIMENTO'                ,'N',0.00   ,100.00 ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('60','E','ICMS COBRADO ANT POR ST'        ,'N',0.00   ,100.00 ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('70','E','COM RED BC COBRANCA ICMS POR ST','S',100.00 ,0.00   ,'N','S','P',1);
INSERT INTO VCSTICMS(ICM_CODIGO,ICM_ENTSAI,ICM_NOME,ICM_SNALIQ,ICM_PCISENTAS,ICM_PCOUTRAS,ICM_REDUCAOBC,ICM_ATIVO,ICM_REG,ICM_CODUSR) VALUES('90','E','OUTRAS'                         ,'S',0.00   ,100.00 ,'N','S','P',1);
GO
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('00','E','ENTRADA RECUP CREDITO'       ,'S',0.00   ,0.00   ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('01','E','ENTRADA TRIB ALIQ ZERO'      ,'N',100.00 ,0.00   ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('02','E','ENTRADA ISENTA'              ,'N',100.00 ,0.00   ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('03','E','ENTRADA NAO TRIBUTADA MESMO' ,'N',0.00   ,100.00 ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('04','E','ENTRADA IMUNE'               ,'N',0.00   ,100.00 ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('05','E','ENTRADA COM SUSPENSAO'       ,'N',0.00   ,100.00 ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('49','E','OUTRAS ENTRADAS'             ,'S',0.00   ,0.00   ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('50','S','SAIDA TRIBUTADA'             ,'S',0.00   ,0.00   ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('51','S','SAIDA TRIB ALIQ ZERO'        ,'N',100.00 ,0.00   ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('52','S','SAIDA ISENTA'                ,'N',100.00 ,0.00   ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('53','S','SAIDA NAO TRIBUTADA'         ,'N',100.00 ,0.00   ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('54','S','SAIDA IMUNE'                 ,'N',0.00   ,100.00 ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('55','S','SAIDA COM SUSPENSAO'         ,'N',0.00   ,100.00 ,'S','P',1);
INSERT INTO VCSTIPI(IPI_CODIGO,IPI_ENTSAI,IPI_NOME,IPI_SNALIQ,IPI_PCISENTAS,IPI_PCOUTRAS,IPI_ATIVO,IPI_REG,IPI_CODUSR) VALUES('99','S','OUTRAS SAIDAS'               ,'S',0.00   ,0.00   ,'S','P',1);
GO
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('01','S','OPERACAO TRIBUTAV ALIQ BASICA'                               ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('02','S','OPERACAO TRIBUTAV ALIQ DIFERENCIADA'                         ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('03','S','OPERACAO TRIBUTAV ALIQ POR UNID MEDIDA PRODUTO'              ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('04','S','OPERACAO TRIBUTAV MOFASICA-REVENDA ALIQ ZERO'                ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('05','S','OPERACAO TRIBUTAV SUBSTIT TRIBUTARIA'                        ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('06','S','OPERACAO TRIBUTAV ALIQ ZERO'                                 ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('07','S','OPERACAO ISENTA CONTRIBUICAO'                                ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('08','S','OPER SEM INCIDENCIA CONTRIBUICAO'                            ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('09','S','OPER COM SUSPENSAO da CONTRIBUICAO'                          ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('49','S','OUTRAS OPERAC SAIDA'                                         ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('50','S','OPER DIREITO CRED VINC RECEITA TRIB MERC INTERNO'            ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('51','S','OPER DIREITO CRED VINC RECEITA NAO TRIB MERC INTERNO'        ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('52','S','OPER DIREITO CRED VINC RECEITA EXPORT'                       ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('53','S','OPER DIREITO CRED VINC RECEITA TRIB NAO TRIB MERC INT'       ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('54','S','OPER DIREITO CRED VINC RECEITA TRIB MERC INTERNO/EXP'        ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('55','S','OPER DIREITO CRED VINC RECEITA NAO TRIB MERC INT/EXP'        ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('56','S','OPER DIREITO CRED VINC RECEITA TRIB N TRIB MERC INT/EXP'     ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('60','S','CRED PRESUM OPER AQUIS VINCUL RECEITA TRIB MERC INTERNO'     ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('61','S','CRED PRESUM OPER AQUIS VINCUL RECEITA NAO TRIB MERC INT'     ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('62','S','CRED PRESUM OPER AQUIS VINCUL RECEITA EXPORT'                ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('63','S','CRED PRESUM OPER AQUIS VINCUL RECEITA TRIB N TRIB MERC INT'  ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('64','S','CRED PRESUM OPER AQUIS VINCUL RECEITA TRIB MERC INT/EXP'     ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('65','S','CRED PRESUM OPER AQUIS VINCUL RECEITA NAO TRIB MERC INT/EXP' ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('66','S','CRED PRESUM OPER AQUIS VINCUL RECEITA TRIB N TRIB MERC I/E'  ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('67','S','CRED PRESUM OUTRAS OPERAC'                                   ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('70','S','OPER AQUISICAO SEM DIREITO CRED'                             ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('71','S','OPER AQUISICAO COM ISENCAO'                                  ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('72','S','OPER AQUISICAO COM SUSPENSAO'                                ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('73','S','OPER AQUISICAO ALIQ ZERO'                                    ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('74','S','OPER AQUISICAO SEM INCIDENCIA CONTRIBUICAO'                  ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('75','S','OPER AQUISICAO SUBSTIT TRIBUTARIA'                           ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('98','S','OUTRAS OPERAC ENTRADA'                                       ,'S',100.00,0.00,'S','P',1);
INSERT INTO VCSTPIS(PIS_CODIGO,PIS_ENTSAI,PIS_NOME,PIS_SNALIQ,PIS_PCISENTAS,PIS_PCOUTRAS,PIS_ATIVO,PIS_REG,PIS_CODUSR) VALUES('99','S','OUTRAS OPERAC'                                               ,'S',100.00,0.00,'S','P',1);
GO
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('101', 'S','PERMITE APROVEITAMENTO DE CREDITO DO ICMS'        ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('102', 'S','NAO PERMITE APROVEITAMENTO DE CREDITO DO ICMS'    ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('103', 'S','OPERACAO ISENTA DE ICMS'                          ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('201', 'S','PERMITE APROVEITAMENTO DE CREDITO DO ICMS-ST'     ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('202', 'S','NAO PERMITE APROVEITAMENTO DE CREDITO DO ICMS-ST' ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('203', 'S','OPERACAO ISENTA DE ICMS E ICMS-ST'                ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('300', 'S','OPERACAO IMUNE DE ICMS'                           ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('400', 'S','OPERACAO TOTALMENTE ISENTA DE ICMS'               ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('500', 'S','OPERACAO COM ICMS-ST ANTECIPADO'                  ,'S',100.00,0.00,'N','S','P',1);
INSERT INTO VCSTSIMPLES(SN_CODIGO,SN_ENTSAI,SN_NOME,SN_SNALIQ,SN_PCISENTAS,SN_PCOUTRAS,SN_REDUCAOBC,SN_ATIVO,SN_REG,SN_CODUSR) VALUES('900', 'S','OUTRAS OPERACOES'                                 ,'S',100.00,0.00,'N','S','P',1);
GO
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('00','341','NAO NECESSARIO'     ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('00','237','NAO NECESSARIO'     ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('01','341','INCLUIR'            ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('06','341','ALT DE VENCIMENTO'  ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('34','341','BAIXA MANUAL'       ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('09','341','PROTESTAR'          ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('01','237','INCLUIR'            ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('02','237','PEDIDO DE BAIXA'    ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('04','237','ABATIMENTO'         ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('06','237','ALT DE VENCIMENTO'  ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('07','237','CONCESSAO DE DESC'  ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('09','237','PROTESTAR'          ,'S','P',1);
INSERT INTO VCNABINSTRUCAO(CI_CODIGO,CI_CODBCD,CI_NOME,CI_ATIVO,CI_REG,CI_CODUSR) VALUES('03','341','ENTRADA REJEITADA'  ,'S','P',1);
GO
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('02'  ,'341'  ,'ENTRADA CONFIRMADA'             ,'AGE'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('03'  ,'341'  ,'ENTRADA REJEITADA'              ,'REC'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('04'  ,'341'  ,'ALTERACAO DE DADOS ENTRADA'     ,'AGE'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('05'  ,'341'  ,'ALTERACAO DE DADOS BAIXA'       ,'AGE'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('06'  ,'341'  ,'LIQUIDACAO NORMAL'              ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('07'  ,'341'  ,'LIQUIDACAO PARCIAL'             ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('08'  ,'341'  ,'LIQUIDACAO EM CARTORIO'         ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('09'  ,'341'  ,'BAIXA SIMPLES'                  ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('10'  ,'341'  ,'BAIXA POR TER SIDO LIQUIDADO'   ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('11'  ,'341'  ,'EM SER (SO NO RETORNO MENSAL)'  ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('12'  ,'341'  ,'ABATIMENTO CONCEDIDO'           ,'AGE'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('13'  ,'341'  ,'ABATIMENTO CANCELADO'           ,'REC'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('14'  ,'341'  ,'VENCIMENTO ALTERADO'            ,'AGE'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('15'  ,'341'  ,'BAIXAS REJEITADAS'              ,'REC'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('23'  ,'341'  ,'TARIFA ENVIO CATORIO'           ,'AGE'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('24'  ,'341'  ,'PROTESTO REJEITADO'             ,'REC'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('32'  ,'341'  ,'BAIXA POR PROTESTO'             ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('47'  ,'341'  ,'BAIXA PARA DESCONTO'            ,'AGE'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('59'  ,'341'  ,'BAIXA POR CC SISPAG'            ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('60'  ,'341'  ,'ENTRADA REJEITADA CARNE'        ,'REC'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('72'  ,'341'  ,'BAIXA POR CC'                   ,'BAI'  ,'S','P',1);
INSERT INTO VCNABRETORNO(CR_CODIGO,CR_CODBCD,CR_NOME,CR_EXECUTA,CR_ATIVO,CR_REG,CR_CODUSR) VALUES('73'  ,'341'  ,'COBRANCA SIMPLES'               ,'REC'  ,'S','P',1);
GO
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201801,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201802,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201803,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201804,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201805,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201806,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201807,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201808,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201809,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201810,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201811,1,'N','S','P',1);
INSERT INTO VCOMPETENCIA(CMP_CODIGO,CMP_CODEMP,CMP_FECHAMENTO,CMP_ATIVO,CMP_REG,CMP_CODUSR) VALUES(201812,1,'N','S','P',1);
GO
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('1','COMPRA BENS'                 ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('2','COMPRA MATERIAIS'            ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('3','CONCESSIONARIAS'             ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('4','EMPRESTIMOS EFETUADO'        ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('5','EMPRESTIMOS TOMADOS'         ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('6','ENTRADAS'                    ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('7','FUNCIONARIOS'                ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('8','GUIA RECOLHIMENTO'           ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('9','JUDICIAS'                    ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('10','LEASING/LOCACAO'            ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('11','OCUPACAO'                   ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('12','OUTRAS'                     ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('13','SINDICATOS'                 ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('14','SOCIOS'                     ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('15','TERCEIROS'                  ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('16','TRANSPORTE'                 ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('17','EMPRESTIMOS EFETUADO'       ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('18','EMPRESTIMOS TOMADOS'        ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('19','SAIDAS'                     ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('20','NF VENDA PRODUTO'           ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('21','TARIFA BANCARIA'            ,'N','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('22','COMERCIAIS'                 ,'L','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('23','TRANSFERENCIA DEBITO'       ,'T','S','S',1);
INSERT INTO dbo.VPADRAO(PDR_CODIGO,PDR_NOME,PDR_CODPTT,PDR_ATIVO ,PDR_REG ,PDR_CODUSR) VALUES('24','TRANSFERENCIA CEDITO'       ,'T','S','S',1);
GO
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('1' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('1' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('1' ,'MP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('2' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('2' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('2' ,'MP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('3' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('3' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('3' ,'MP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('4' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('4' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('4' ,'MP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('5' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('5' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('5' ,'MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('6' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('6' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('6' ,'MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('7' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('7' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('7' ,'MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('8' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('8' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('8' ,'MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('9' ,'CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('9' ,'PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('9' ,'MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('10','CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('10','PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('10','MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('11','CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('11','PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('11','MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('12','CP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('12','PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('12','MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('13','CP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('13','PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('13','MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('14','CP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('14','PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('14','MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('15','CP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('15','PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('15','MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('16','CP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('16','PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('16','MP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('17','CR'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('17','PR'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('17','MR'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('18','CR'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('18','PR'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('18','MR'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('19','CR'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('19','PR'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('19','MR'  ,'S','S',1); 
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('20','CR'  ,'S','S',1); 
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('21','CP'  ,'S','S',1); 
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('21','CR'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('22','CP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('22','PP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('22','MP'  ,'S','S',1);      
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('23','CP'  ,'S','S',1);
INSERT INTO dbo.VPADRAOGRUPO(PG_CODPDR,PG_CODPTP,PG_ATIVO ,PG_REG ,PG_CODUSR) VALUES('24','CR'  ,'S','S',1);

GO
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(1,'GASTOS COM EVENTOS'                               ,'NFP','BOL','D','4.01.01.01.0038','22','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(2,'GASTOS COM MARCAS E PATENTES'                     ,'NFP','BOL','D','4.01.01.01.0041','22','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(3,'GASTOS COM PROPAGANDA'                            ,'NFP','BOL','D','4.01.01.01.0040','22','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(4,'GASTOS COM VIAGENS'                               ,'NFP','BOL','D','4.01.01.01.0039','22','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(5,'COMPRA CARROS/MOTOS/CAMINHOES'                    ,'NFP','BOL','D','1.05.03.04.0001','1','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(6,'COMPRA COMPUT/IMPRESSORAS/PERIFERICOS'            ,'NFP','BOL','D','1.05.03.03.0001','1','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(7,'COMPRA IMOV/TERRENOS/CASAS/APTOS'                 ,'NFP','BOL','D','1.05.03.01.0001','1','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(8,'COMPRA MOVEIS E UTENSILIOS EM GERAL'              ,'NFP','BOL','D','1.05.03.05.0001','1','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(9,'COMPRA OUTROS TIPOS EQUIPS'                       ,'NFP','BOL','D','1.05.03.03.0002','1','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(10,'GASTOS COM BENS PEQ VALOR'                       ,'NFP','BOL','D','4.01.01.01.0046','1','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(11,'COMPRA MATERIAL INFORMATICA'                     ,'NFP','BOL','D','4.01.01.01.0010','2','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(12,'COMPRA IMPRESSOS DIVERSOS'                       ,'NFP','BOL','D','4.01.01.01.0011','2','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(13,'COMPRA MATERIAIS DIVERSOS'                       ,'NFP','BOL','D','4.01.01.01.0012','2','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(14,'COMPRA MATERIAL ESCRITORIO'                      ,'NFP','BOL','D','4.01.01.01.0009','2','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(15,'PGTO CONTA AGUA IMOV USADOS EMPRESA'             ,'NFP','BOL','D','4.01.01.01.0005','3','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(16,'PGTO CONTA ENERG ELETR IMOV USADOS EMPRESA'      ,'NFP','BOL','D','4.01.01.01.0004','3','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(17,'PGTO CONTA INTERNET LINK UTILIZADO EMPRESA'      ,'NFP','BOL','D','4.01.01.01.0007','3','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(18,'PGTO CONTA TELEF FIXA LINHAS UTILIZ EMPRESA'     ,'NFP','BOL','D','4.01.01.01.0007','3','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(19,'PGTO CONTA TELEF MOVEL APAREL UTILIZ EMPRESA'    ,'NFP','BOL','D','4.01.01.01.0007','3','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(20,'ENVIO ADTO PARA FORNECEDORES'                    ,'NFP','BOL','D','1.01.05.01.0001','4','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(21,'ENVIO EMPRESTIMOS PARA COLABORADORES'            ,'NFP','BOL','D','1.03.01.08.0001','4','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(22,'ENVIO EMPRESTIMOS PARA EMPRESAS DO GRUPO'        ,'NFP','BOL','D','1.03.01.08.0001','4','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(23,'ENVIO EMPRESTIMOS PARA OUTRAS EMPRESAS'          ,'NFP','BOL','D','1.03.01.08.0001','4','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(24,'ENVIO EMPRESTIMOS PARA SOCIOS'                   ,'NFP','BOL','D','1.03.01.08.0001','4','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(25,'ADTO PARA FUNCIONARIOS'                          ,'NFP','BOL','D','1.03.01.08.0001','4','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(26,'RETORNO ADTO PARA FORNECEDORES'                  ,'NFP','BOL','C','1.01.05.01.0001','17','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(27,'RETORNO EMPRESTIMOS EFETUADOS COLABORADORES'     ,'NFP','BOL','C','1.03.01.08.0001','17','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(28,'RETORNO EMPRESTIMOS EFETUADOS EMPRESAS GRUPO'    ,'NFP','BOL','C','1.03.01.08.0001','17','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(29,'RETORNO EMPRESTIMOS EFETUADOS OUTRAS EMPRESAS'   ,'NFP','BOL','C','1.03.01.08.0001','17','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(30,'RETORNO EMPRESTIMOS EFETUADOS SOCIOS'            ,'NFP','BOL','C','1.03.01.08.0001','17','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(31,'PGTO EMPRESTIMOS BANCARIOS'                      ,'NFP','BOL','D','2.01.01.03.0001','5','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(32,'PGTO EMPRESTIMOS EMPRESAS DO GRUPO'              ,'NFP','BOL','D','2.01.01.03.0001','5','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(33,'PGTO EMPRESTIMOS OUTRAS PESSOAS FISICAS'         ,'NFP','BOL','D','2.01.01.03.0001','5','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(34,'PGTO EMPRESTIMOS OUTRAS PESSOAS JURIDICAS'       ,'NFP','BOL','D','2.01.01.03.0001','5','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(35,'PGTO EMPRESTIMOS SOCIOS'                         ,'NFP','BOL','D','2.01.01.03.0001','5','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(36,'RECBTO EMPRESTIMOS BANCARIOS'                    ,'NFP','BOL','C','2.01.01.03.0001','18','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(37,'RECBTO EMPRESTIMOS EMPRESAS DO GRUPO'            ,'NFP','BOL','C','2.01.01.03.0001','18','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(38,'RECBTO EMPRESTIMOS OUTRAS PESSOAS FISICAS'       ,'NFP','BOL','C','2.01.01.03.0001','18','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(39,'RECBTO EMPRESTIMOS OUTRAS PESSOAS JURIDICAS'     ,'NFP','BOL','C','2.01.01.03.0001','18','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(40,'RECBTO EMPRESTIMOS SOCIOS'                       ,'NFP','BOL','C','2.01.01.03.0001','18','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(41,'DEVOL ADTO CLIENTES'                             ,'NFP','BOL','D','2.01.01.03.0002','6','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(42,'DEVOL COMISSAO VENDAS'                           ,'NFP','BOL','D','5.01.01.02.0003','6','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(43,'DEVOL INVESTIMENTO OUTRAS PESSOAS FISICAS'       ,'NFP','BOL','D','2.01.01.03.0001','6','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(44,'DEVOL INVESTIMENTO OUTRAS PESSOAS JURIDICAS'     ,'NFP','BOL','D','2.01.01.03.0001','6','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(45,'DEVOL VENDA EQUIPS INFORMATICA'                  ,'NFP','BOL','D','1.05.03.03.0001','6','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(46,'DEVOL VENDA IMOV'                                ,'NFP','BOL','D','1.05.03.01.0001','6','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(48,'DEVOL VENDA OUTROS BENS DIVERSOS'                ,'NFP','BOL','D','1.05.03.03.0002','6','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(49,'DEVOL VENDA VEIC'                                ,'NFP','BOL','D','1.05.03.04.0001','6','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(50,'RECBTO ADTO CLIENTES'                            ,'NFP','BOL','C','2.01.01.03.0002','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(51,'RECBTO COMISSAO VENDAS'                          ,'NFP','BOL','C','5.01.01.02.0003','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(52,'RECBTO INVESTIM OUTRAS PESSOAS FISICAS'          ,'NFP','BOL','C','2.01.01.03.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(53,'RECBTO INVESTIM OUTRAS PESSOAS JURIDICAS'        ,'NFP','BOL','C','2.01.01.03.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(54,'RECBTO OUTROS VLRS/DIVERSOS'                     ,'NFP','BOL','C','5.01.01.01.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(55,'RECBTO VENDA EQUIPS INFORMATICA'                 ,'NFP','BOL','C','1.05.03.03.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(56,'RECBTO VENDA IMOV'                               ,'NFP','BOL','C','1.05.03.01.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(57,'RECBTO VENDA MOVEIS E UTENSILIOS'                ,'NFP','BOL','C','1.05.03.05.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(58,'RECBTO VENDA OUTROS BENS DIVERSOS'               ,'NFP','BOL','C','1.05.03.03.0002','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(59,'RECBTO VENDA VEIC'                               ,'NFP','BOL','C','1.05.03.04.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(60,'13 SALARIO COLABORADORES REGISTRADOS'            ,'NFP','BOL','D','1.03.01.08.0004','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(61,'BOLSA AUXILIO MENSAL ESTAGIARIO'                 ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(62,'CESTA BASICA DOS COLABORADORES'                  ,'NFP','BOL','D','1.03.01.08.0002','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(63,'FERIAS COLABORADORS REGISTRADOS'                 ,'NFP','BOL','D','1.03.01.08.0003','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(64,'OUTRAS DESPESAS COM COLABORADORES'               ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(65,'OUTROS AUXILIOS OU VLRS PARA COLABORADORES'      ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(66,'RESCISOES EX-COLABORADORES'                      ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(67,'SALARIO MENSAL COLABORADOR REGISTRADO'           ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(68,'VALE REFEICAO COLABORADORES'                     ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(69,'VALE TRANSPORTE COLABORADORES'                   ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(70,'PGTO MENSAL ASSISTENCIA MEDICA DA EMPRESA'       ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(71,'PGTO MENSAL PLANO ODONTOLOGICO DA EMPRESA'       ,'NFP','BOL','D','1.03.01.08.0006','7','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(72,'GUIA ARREC ESTAD GARE-ICMS NORMAL'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(73,'GUIA ARREC ESTAD GARE-IPVA'                      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(74,'GUIA ARREC ESTAD GARE-LICENC VEIC'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(75,'GUIA ARREC ESTAD GARE-MULTAS TRANSITO'           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(76,'GUIA NAC RECOLH ESTAD GNRE-ICMS DIF ALIQ'        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(77,'GUIA NAC RECOLH ESTAD GNRE-ICMS SUBST TRIB'      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(78,'DARF CODIGO 0220-IMP RENDA'                      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(79,'DARF CODIGO 0490-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(80,'DARF CODIGO 0561-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.03.01.08.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(81,'DARF CODIGO 0588-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.03.01.08.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(82,'DARF CODIGO 0916-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(83,'DARF CODIGO 0924-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(84,'DARF CODIGO 1599-IMP RENDA'                      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(85,'DARF CODIGO 1708-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(86,'DARF CODIGO 2030-CONT. SOCIAL'                   ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(87,'DARF CODIGO 2063-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(88,'DARF CODIGO 2089-IMP RENDA'                      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(89,'DARF CODIGO 2172-COFINS'                         ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(90,'DARF CODIGO 2319-IMP RENDA'                      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(91,'DARF CODIGO 2362-IMP RENDA'                      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(92,'DARF CODIGO 2372-CONT SOCIAL'                    ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(93,'DARF CODIGO 2469-CONT SOCIAL'                    ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(94,'DARF CODIGO 2484-CONT SOCIAL'                    ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(95,'DARF CODIGO 3208-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(96,'DARF CODIGO 3223-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(97,'DARF CODIGO 3277-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(98,'DARF CODIGO 3280-IMP RENDA RETIDO'               ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(99,'DARF CODIGO 3317-IMP RENDA'                      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(100,'DARF CODIGO 3320-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(101,'DARF CODIGO 3373-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(102,'DARF CODIGO 3426-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(103,'DARF CODIGO 3703-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(104,'DARF CODIGO 4574-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(105,'DARF CODIGO 5204-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(106,'DARF CODIGO 5217-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(107,'DARF CODIGO 5273-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(108,'DARF CODIGO 5286-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(109,'DARF CODIGO 5299-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(110,'DARF CODIGO 5434-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(111,'DARF CODIGO 5442-COFINS'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(112,'DARF CODIGO 5602-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(113,'DARF CODIGO 5625-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(114,'DARF CODIGO 5629-COFINS'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(115,'DARF CODIGO 5706-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(116,'DARF CODIGO 5856-COFINS'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(117,'DARF CODIGO 5928-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(118,'DARF CODIGO 5936-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(119,'DARF CODIGO 5944-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(120,'DARF CODIGO 5952-PIS/COFINS/CONT. SOCIAL'       ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(121,'DARF CODIGO 5960-COFINS'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(122,'DARF CODIGO 5979-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(123,'DARF CODIGO 5987-CONT. SOCIAL'                  ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(124,'DARF CODIGO 5993-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(125,'DARF CODIGO 6012-CONT. SOCIAL'                  ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(126,'DARF CODIGO 6800-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(127,'DARF CODIGO 6813-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(128,'DARF CODIGO 6824-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(129,'DARF CODIGO 6840-COFINS'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(130,'DARF CODIGO 6891-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(131,'DARF CODIGO 6904-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(132,'DARF CODIGO 6912-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(133,'DARF CODIGO 7987-COFINS'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(134,'DARF CODIGO 8045-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(135,'DARF CODIGO 8053-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(136,'DARF CODIGO 8109-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(137,'DARF CODIGO 8301-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(138,'DARF CODIGO 8468-IMP. RENDA RETIDO'             ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(139,'DARF CODIGO 8496-PIS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(140,'DARF CODIGO 8645-COFINS'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(141,'DARF CODIGO 8673-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(142,'DARF CODIGO 9004-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(143,'DARF CODIGO 9017-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(144,'DARF CODIGO 9020-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(145,'DARF CODIGO 9025-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(146,'DARF CODIGO 9032-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(147,'DARF CODIGO 9058-IMP RENDA'                     ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(148,'DARF CODIGO 9100-PARCELAMENTO REFIS'            ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(149,'DARF CODIGO 9113-PARCELAMENTO REFIS'            ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(150,'DARF CODIGO 9126-PARCELAMENTO REFIS'            ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(151,'DARF CODIGO 9222-PARCELAMENTO REFIS'            ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(152,'DARF CODIGO 9385-IMP RENDA RETIDO'              ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(153,'DAS DO SIMPLES NAC-MENSAL'                      ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(154,'DAS DO SIMPLES NAC-PARCELAMENTO'                ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(155,'DOC ARREC MUNIC DAM-ISS FATURAMENTO'            ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(156,'DOC ARREC MUNIC DAM-ISS RETIDO TERCEIROS'       ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(157,'DOC ARREC MUNIC DAM-MULTAS TRANSITO'            ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(158,'DOC ARREC MUNIC DAM-TFA'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(159,'DOC ARREC MUNIC DAM-TFE'                        ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(160,'DOC ARREC MUNIC DAM-TRSS'                       ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(161,'FGTS CODIGO 115-FUNDO GARANTIA'                 ,'NFP','BOL','D','1.03.01.08.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(162,'FGTS CODIGO 650-FUNDO GARANTIA'                 ,'NFP','BOL','D','1.03.01.08.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(163,'GPS CODIGO 2003-INSS'                           ,'NFP','BOL','D','1.03.01.08.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(164,'GPS CODIGO 2100-INSS'                           ,'NFP','BOL','D','1.03.01.08.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(165,'GPS CODIGO 2119-INSS'                           ,'NFP','BOL','D','1.03.01.08.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(166,'GPS CODIGO 2631-INSS'                           ,'NFP','BOL','D','1.01.05.05.0010','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(167,'DARF CODIGO 2991-INSS'                          ,'NFP','BOL','D','5.01.01.03.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(168,'DARF CODIGO 2985-INSS'                          ,'NFP','BOL','D','5.01.01.03.0006','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(169,'PGTO CARNE IPTU IMOV USADOS EMPRESA'            ,'NFP','BOL','D','4.01.01.01.0003','8','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(170,'REMESSA DEPOSITOS JUDICIAS ACOES CIVEIS'        ,'NFP','BOL','D','1.03.01.04.0003','9','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(171,'REMESSA DEPOSITOS JUDICIAS ACOES FISCAIS'       ,'NFP','BOL','D','1.03.01.04.0001','9','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(172,'REMESSA DEPOSITOS JUDICIAS ACOES TRABAL'        ,'NFP','BOL','D','1.03.01.04.0002','9','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(173,'RETORNO ACOES JUDICIAIS CIVEIS CRED'            ,'NFP','BOL','C','1.03.01.04.0003','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(173,'RETORNO ACOES JUDICIAIS CIVEIS DEBITO'          ,'NFP','BOL','D','1.01.05.07.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(174,'RETORNO ACOES JUDICIAIS FISCAIS CREDITO'        ,'NFP','BOL','C','1.03.01.04.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(174,'RETORNO ACOES JUDICIAIS FISCAIS DEBITO'         ,'NFP','BOL','D','1.01.05.07.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(175,'RETORNO ACOES JUDICIAIS TRABALHISTAS CRED'      ,'NFP','BOL','C','1.03.01.04.0002','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(175,'RETORNO ACOES JUDICIAIS TRABALHISTAS DEB'       ,'NFP','BOL','D','1.01.05.07.0001','19','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(176,'LEASING EQUIPS'                                 ,'NFP','BOL','D','4.01.01.01.0054','10','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(177,'LEASING VEIC'                                   ,'NFP','BOL','D','4.01.01.01.0053','10','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(178,'LOCACAO EQUIPS'                                 ,'NFP','BOL','D','4.01.01.01.0051','10','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(179,'LOCACAO VEIC'                                   ,'NFP','BOL','D','4.01.01.01.0052','10','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(180,'PGTO MANUT CONSERTOS IMOV USADOS EMPRESA'       ,'NFP','BOL','D','4.01.01.01.0006','11','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(181,'OUTRAS CONTAS IMOV UTILIZ EMPRESA'              ,'NFP','BOL','D','4.01.01.01.0008','11','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(182,'PGTO ALUGUEL IMOV USADOS EMPRESA'               ,'NFP','BOL','D','4.01.01.01.0001','11','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(183,'PGTO CONDOMINIO IMOV USADOS EMPRESA'            ,'NFP','BOL','D','4.01.01.01.0002','11','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(184,'GASTOS REFORMAS EM IMOV TERCEIROS'              ,'NFP','BOL','D','1.05.03.09.0001','11','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(185,'GASTOS COM JORNAIS/REVISTAS/ASSINATURAS'        ,'NFP','BOL','D','4.01.01.01.0043','12','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(186,'GASTOS COM BRINDES E DOACOES'                   ,'NFP','BOL','D','4.01.01.01.0042','12','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(187,'GASTOS COM CARTORIOS'                           ,'NFP','BOL','D','4.01.01.01.0047','12','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(188,'GASTOS COM COPA E COZINHA'                      ,'NFP','BOL','D','4.01.01.01.0049','12','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(189,'GASTOS DIVERSOS ESCRITORIO'                     ,'NFP','BOL','D','4.01.01.01.0050','12','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(190,'GASTOS COM REFORMA EM BENS TERCEIROS'           ,'NFP','BOL','D','1.05.03.09.0002','12','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(191,'CONTRIBUICAO ASSISTENCIAL COLABORADORES'        ,'NFP','BOL','D','3.03.03.19.0005','13','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(192,'CONTRIBUICAO CONFEDERATIVA COLABORADORES'       ,'NFP','BOL','D','3.03.03.19.0005','13','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(193,'CONTRIBUICAO ODONTOLOGICA COLABORADORES'        ,'NFP','BOL','D','3.03.03.19.0005','13','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(194,'MENSALIDADE SINDICATOS FUNCION E PATRONAL'      ,'NFP','BOL','D','3.03.03.19.0005','13','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(195,'TAXA NEGOCIAL SINDICATOS'                       ,'NFP','BOL','D','3.03.03.19.0005','13','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(196,'PGTO DO PROLABORE DOS SOCIOS'                   ,'NFP','BOL','D','3.03.03.03.0001','14','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(197,'PGTO MENSAL SOCIOS OU CONTAS DOS MESMOS'        ,'NFP','BOL','D','2.05.03.01.0002','14','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(198,'COMISSOES VENDEDORES'                           ,'NFP','BOL','D','5.01.01.03.0008','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(199,'SERVICOS TERCEIROS DIVERSOS'                    ,'NFP','BOL','D','4.01.01.01.0021','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(200,'SERVICOS ASSESSORIA CONTABIL'                   ,'NFP','BOL','D','4.01.01.01.0014','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(201,'SERVICOS ASSESSORIA DEPTO PESSOAL'              ,'NFP','BOL','D','4.01.01.01.0017','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(202,'SERVICOS ASSESSORIA INFORMATICA'                ,'NFP','BOL','D','4.01.01.01.0015','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(203,'SERVICOS ASSESSORIA FINANCEIRA'                 ,'NFP','BOL','D','4.01.01.01.0016','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(204,'SERVICOS ASSESSORIA JURIDICA'                   ,'NFP','BOL','D','4.01.01.01.0013','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(205,'SERVICOS ASSESSORIAS DIVERSAS'                  ,'NFP','BOL','D','4.01.01.01.0018','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(206,'SERVICOS MANUT EQUIPS'                          ,'NFP','BOL','D','4.01.01.01.0020','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(207,'SERVICOS MOTOBOY E FRETES'                      ,'NFP','BOL','D','4.01.01.01.0019','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(208,'SERVICOS HOSTING/SERVIDORES'                    ,'NFP','BOL','D','4.01.01.01.0022','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(209,'SERVICOS EMAILS EXTERNOS/CLOUND'                ,'NFP','BOL','D','4.01.01.01.0023','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(210,'SERVICOS FERRAMENTAS BUSCA WEB'                 ,'NFP','BOL','D','4.01.01.01.0024','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(211,'SERVICOS ANUNCIOS E MARKETING PERIODICOS'       ,'NFP','BOL','D','4.01.01.01.0025','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(212,'SERVICOS ANUNCIOS E MARKETING WEB'              ,'NFP','BOL','D','4.01.01.01.0026','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(213,'SERVICOS ANUNCIOS E MARKETING MIDIA'            ,'NFP','BOL','D','4.01.01.01.0027','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(214,'SERVICOS ASSESSORIA IMPRENSA'                   ,'NFP','BOL','D','4.01.01.01.0028','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(215,'SERVICOS REGISTRO MARCAS/PATENTES'              ,'NFP','BOL','D','4.01.01.01.0029','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(216,'COMISSOES PORTAIS VENDAS WEB'                   ,'NFP','BOL','D','5.01.01.03.0009','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(217,'COMISSOES REPRESENTANTES COMERCIAIS'            ,'NFP','BOL','D','5.01.01.03.0010','15','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(218,'GASTOS VEIC EXCETO MANUT/COMPRA/LOCACAO'        ,'NFP','BOL','D','4.01.01.01.0021','16','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(219,'GASTOS COMBUSTIVEL'                             ,'NFP','BOL','D','4.01.01.01.0044','16','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(220,'GASTOS PEDAGIOS'                                ,'NFP','BOL','D','4.01.01.01.0045','16','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(221,'RATEIO DIVERSOS'                                     ,'NFP','BOL','D','4.01.01.01.0045','12','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(222,'VENDA'                                          ,'NFP','BOL','D','5.01.01.02.0002','20','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(223,'DEVOL'                                          ,'NFP','BOL','D','5.01.01.02.0002','20','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(224,'TRANSFERENCIA'                                  ,'NFP','BOL','D','5.01.01.02.0002','20','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(225,'VENDA ATIVO'                                    ,'NFP','BOL','D','5.01.01.02.0002','20','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(226,'BRINDE'                                         ,'NFP','BOL','D','5.01.01.02.0002','20','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(227,'DEMONSTRACAO'                                   ,'NFP','BOL','D','5.01.01.02.0002','20','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(228,'REMESSA PARA CONSERTO'                          ,'NFP','BOL','D','5.01.01.02.0002','20','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(229,'DESPESA CPMF'                                   ,'TAR','DC' ,'D','4.01.01.01.0055','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(230,'DESPESA TARIFAS MENSAIS'                        ,'TAR','DC' ,'D','4.01.01.01.0056','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(231,'DESPESAS EVENTUAIS'                             ,'TAR','DC' ,'D','4.01.01.01.0057','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(232,'ENTRADAS EVENTUAIS'                             ,'TAR','DC' ,'D','4.01.01.01.0058','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(233,'PERDA EM OPERACAO CAMBIO'                       ,'TAR','DC' ,'D','4.01.01.01.0060','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(234,'OUTRAS DESPESAS COM OPERACOES CAMBIO'           ,'TAR','DC' ,'D','4.01.01.01.0061','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(235,'JUROS PAGO USO CAPITAL GIRO'                    ,'TAR','DC' ,'D','4.01.01.01.0066','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(236,'JUROS PAGO EMPRESTIMOS BANCARIOS'               ,'TAR','DC' ,'D','4.01.01.01.0067','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(237,'JUROS PAGO USO CAPITAL CTA GARANTIDA'           ,'TAR','DC' ,'D','4.01.01.01.0068','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(238,'JUROS PAGO EMPRESTIMOS TERCEIROS'               ,'TAR','DC' ,'D','4.01.01.01.0069','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(239,'JUROS PAGO EMPRESTIMOS EMPRESAS DO GRUPO'       ,'TAR','DC' ,'D','4.01.01.01.0070','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(240,'JUROS PAGO EMPRESTIMOS SOCIOS/ADM'              ,'TAR','DC' ,'D','4.01.01.01.0071','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(241,'JUROS PAGOS EM OUTRAS OPERACOES'                ,'TAR','DC' ,'D','4.01.01.01.0072','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(242,'OUTRAS DESPESAS COM OPERACOES FINANC'           ,'TAR','DC' ,'D','4.01.01.01.0073','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(243,'TAXAS OPERADORAS-CARTAO DEBITO'                 ,'TAR','DC' ,'D','4.01.01.01.0074','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(244,'TAXAS OPERADORAS-CARTAO CREDITO'                ,'TAR','DC' ,'D','4.01.01.01.0075','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(245,'TAXAS OPERADORAS-PAYPAL'                        ,'TAR','DC' ,'D','4.01.01.01.0076','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(246,'TAXAS BANCOS-CUSTODIA E EMISSAO BOLETOS'        ,'TAR','DC' ,'D','4.01.01.01.0077','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(247,'GANHO EM OPERACAO CAMBIO'                       ,'TAR','CC' ,'C','4.01.01.01.0059','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(248,'JUROS RECEBIDO APLICACOES FINANC BANCARIAS'     ,'TAR','CC' ,'C','4.01.01.01.0062','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(249,'JUROS RECEBIDO EMPRESTIMOS TERCEIROS'           ,'TAR','CC' ,'C','4.01.01.01.0063','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(250,'JUROS RECEBIDO EMPRESTIMOS EMPRESAS DO GRUPO'   ,'TAR','CC' ,'C','4.01.01.01.0064','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(251,'JUROS RECEBIDO OUTRAS OPERACOES'                ,'TAR','CC' ,'C','4.01.01.01.0065','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(252,'OUTROS CRED CONTA NAO RELAC ANTERIORMENTE'      ,'TAR','CC' ,'C','5.01.01.01.0001','21','S','P',1);
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(253,'ADTO FORNECEDORES'                              ,'REC','DEP','D','1.01.05.01.0001','6','S','P',1);  
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(254,'ADTO CLIENTES'                                  ,'REC','DEP','C','2.01.01.03.0002','19','S','P',1);    
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(255,'DEVOL ADTOTO FORNECEDORES'                      ,'REC','DEP','C','1.01.05.01.0001','19','S','P',1);  
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(258,'TRANSFERENCIA DEBITO'                           ,'TEC','TRA','D','1.03.01.08.0010','23','S','P',1);  
INSERT INTO VPADRAOTITULO(PT_CODIGO,PT_NOME,PT_CODTD,PT_CODFC,PT_DEBCRE,PT_CODCC,PT_CODPDR,PT_ATIVO,PT_REG,PT_CODUSR) VALUES(259,'TRANSFERENCIA CREDITO'                          ,'TEC','TRA','C','1.03.01.08.0010','24','S','P',1);  
GO
UPDATE VUSUARIO SET USR_SENHA='ADMIN123',USR_PRIMEIROACESSO='N' WHERE USR_CODIGO=1;  
UPDATE VUSUARIO SET USR_SENHA='MARCIA123' ,USR_PRIMEIROACESSO='N' WHERE USR_CODIGO=2;  
UPDATE VUSUARIO SET USR_SENHA='PEDRO123' ,USR_PRIMEIROACESSO='N' WHERE USR_CODIGO=3;  
UPDATE VUSUARIO SET USR_SENHA='PAULO123' ,USR_PRIMEIROACESSO='N' WHERE USR_CODIGO=4;  
GO
INSERT INTO VFAVORECIDO(
  FVR_CODIGO
  ,FVR_NOME
  ,FVR_APELIDO
  ,FVR_BAIRRO
  ,FVR_CNPJCPF
  ,FVR_CEP
  ,FVR_CODCDD
  ,FVR_FISJUR
  ,FVR_INSMUNIC
  ,FVR_CONTATO
  ,FVR_ENDERECO
  ,FVR_FONE
  ,FVR_INS
  ,FVR_CADMUNIC
  ,FVR_EMAIL
  ,FVR_CODCTG
  ,FVR_SENHA
  ,FVR_COMPLEMENTO
  ,FVR_NUMERO
  ,FVR_CODLGR
  ,FVR_ATIVO
  ,FVR_REG
  ,FVR_CODUSR) VALUES(
  1                             -- FVR_CODIGO
  ,'ORLANDO APARECIDO POLONIO'  -- FVR_NOME
  ,'ORLANDO'                    -- FVR_APELIDO
  ,'VALEIRA'                    -- FVR_BAIRRO
  ,'22100100000122'             -- FVR_CNPJCPF
  ,'20030187'                   -- FVR_CEP
  ,'3550308'                    -- FVR_CODCDD
  ,'F'                          -- FVR_FISJUR
  ,''                           -- FVR_INSMUNIC
  ,'O MESMO'                    -- FVR_CONTATO
  ,'ANDORINHA'                  -- FVR_ENDERECO
  ,'24563323'                   -- FVR_FONE
  ,''                           -- FVR_INS
  ,''                           -- FVR_CADMUNIC
  ,'orlandopolonio@uol.com.br'  -- FVR_EMAIL
  ,'SIM'                        -- FVR_CODCTG
  ,'orlando'                    -- FVR_SENHA
  ,''                           -- FVR_COMPLEMENTO
  ,'136'                        -- FVR_NUMERO
  ,'RUA'                        -- FVR_CODLGR
  ,'S'                          -- FVR_ATIVO
  ,'P'                          -- FVR_REG
  ,1);                          -- FVR_CODUSR
GO
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1492,'1,2,3,4 VOCE TREINAMENTO E DESENVOLVIMENTO EM RECURSOS HUMAN','1234VOCE','BAIRRO','10452425000195','03116000','3550308','J',NULL,'SEM CONTATO','R DO ORATORIO','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','1606','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1480,'4TAKES INDUSTRIA, COMERCIO, SERVICOS E PARTICIPACOES LTDA','4TAKKES','BAIRRO','18502792000168','04310060','3550308','J',NULL,'SEM CONTATO','AV PEDRO SEVERINO JUNIOR','29808844',NULL,NULL,'financeiro@4takes.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','366','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1472,'A S INFORMATICA LTDA - EPP','ASINFORMATICA','BAIRRO','62931548000102','04055000','3550308','J',NULL,'SEM CONTATO','R FAGUNDES DIAS','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','411','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2634,'A. MELLAGI FILHO ME','MELLAGI','BAIRRO','07585353000140','01419000','3550308','J',NULL,'SEM CONTATO','SANTOS CONJ 605','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','211','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3084,'ACIR DOS SANTOS 15191217845','ACIRME','BAIRRO','24394036000165','06140000','3550308','J',NULL,'SEM CONTATO','R AGOSTINHO NAVARRO','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','971','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1649,'AETATIS SECURITIZADORA','AETATIS','BAIRRO','02808481000191','04543011','3550308','J',NULL,'SEM CONTATO','PRESIDENTE JUSCELINO KUBITSCHEK 4º ANDAR ','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','50','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2680,'AGILETREND SOFTWARE E SERVICOS LTDA','AGILTREND','BAIRRO','12417636000112','04547005','3550308','J',NULL,'SEM CONTATO','GOMES DE CARVALHO','29808844',NULL,NULL,'thais@bissystem.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','1356','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2870,'AGNES CARDOSO DE OLIVEIRA','AGNESCARDOSO','BAIRRO','13248105000106','06660020','3550308','J',NULL,'SEM CONTATO','CESAR BERTOZZI','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','08','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3266,'AGNES CARDOSO DE OLIVEIRA 18551978802','AGNESPJ','BAIRRO','27663105000187','06660020','3550308','J',NULL,'SEM CONTATO','R CESAR BERTOZZI','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','8','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3127,'AINTER BA COMERCIO DE EQUIPAMENTOS - EIRELI - ME','AINTERBA','BAIRRO','21196477000164','45658464','3550308','J',NULL,'SEM CONTATO','R C (DT INDUSTRIAL)','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','SN','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2624,'ALLIS SOLUCOES INTELIGENTES S.A','ALLIS','BAIRRO','08219000000199','01311000','3550308','J',NULL,'SEM CONTATO','BRIGADEIRO FARIA LIMA','29808844',NULL,NULL,'fiscal@allis.com.br;','SIM','TOTALTRAC','SEM COMPLEMENTO','1355','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1650,'ALTERE SECURITIZADORA','ALTERE','BAIRRO','02783423000150','04543000','3550308','J',NULL,'SEM CONTATO','PRESIDENTE JUSCELINO KUBITSCHEK','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','50','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1539,'AMAZON SERVICOS DE VAREJO DO BRASIL LTDA.','AMAZON','BAIRRO','15436940000103','04543000','3550308','J',NULL,'SEM CONTATO','AV PRESIDENTE JUSCELINO KUBITSCHEK','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','2041','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1450,'ANDRE ALVES DOS SANTOS','ANDRECARETTE','BAIRRO','17332721864','06716155','3550308','J',NULL,'SEM CONTATO','ESTRADA DO CAPUAVA','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','2333 ','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1434,'ANGELA M O VIEIRA','ANGELAVIEIRA','BAIRRO','07921895743','04004012','3550308','J',NULL,'SEM CONTATO','CARLOS STEINEN','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','412','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3019,'ANIERI SCHMID E NATACCI SOCIEDADE DE ADVOGADOS','ASN','BAIRRO','17823046000103','01402000','3550308','J',NULL,'SEM CONTATO','BRIGADEIRO LUIS ANTONIO','29808844',NULL,NULL,'acir@bissystem.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','2504','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1528,'APPLE COMPUTER BRASIL LTDA','APPLEBRASIL','BAIRRO','00623904000335','13213086','3550308','J',NULL,'SEM CONTATO','ROD VICE PREFEITO HERMENEGILDO TONOLLI','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','1500','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1597,'ARTES GRAFICAS NOBRE LTDA ME','ARTESGRAFICA','BAIRRO','01716716000152','01324001','3550308','J',NULL,'SEM CONTATO','MAJOR DIOGO','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','223','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3193,'ASCENTY DATA CENTERS E TELECOMUNICACOES S/A','ASCENTY','BAIRRO','13743550000223','13069320','3550308','J',NULL,'SEM CONTATO','AV PIERRE SIMON DE LAPLACE','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','1211','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1498,'ASTHI COMERCIAL LTDA - ME','ASTHI','BAIRRO','58840380000152','05419000','3550308','J',NULL,'SEM CONTATO','AV PEDROSO DE MORAIS','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','351','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3151,'ATERA INFORMATICA LTDA','ATERA','BAIRRO','39040597000133','04210061','3550308','J',NULL,'SEM CONTATO','R OLIVEIRA ALVES','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','147','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1453,'AUGUSTO DE MIRANDA EMPREENDIMENTOS E PARTICIPACOES LTDA','AUGUSTODEMIRAND','BAIRRO','17205057000120','05424010','3550308','J',NULL,'SEM CONTATO','R PAES LEME','29808844',NULL,NULL,'carla.teixeira@inkorporadora.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','524','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1572,'AUSTRALIAN CENTRE VIAGENS E TURISMO LTDA - ME','AUSCENTRE','BAIRRO','05950757000160','04561000','3550308','J',NULL,'SEM CONTATO','GUARARAPES','29808844',NULL,NULL,'financeiro3@australiancentre.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','622','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3309,'AXIL CLOUD SERVICOS DE TECNOLOGIA DA INFORMACAO LTDA.','AXIL','BAIRRO','27331387000115','13069320','3550308','J',NULL,'SEM CONTATO','AV PIERRE SIMON DE LAPLACE','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','1211','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2691,'AXISMED - GESTAO PREVENTIVA DE SAUDE','AXISMED','BAIRRO','04453459000100','04794000','3550308','J',NULL,'SEM CONTATO','AVENIDA DAS NAÇÕES UNIDAS BL 2 - 18°ANDAR','29808844',NULL,NULL,'silvia.goncalves@axismed.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','13797','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3313,'AZ MOTO EXPRESSO LTDA - ME','AZMOTOEXPRESS','BAIRRO','07107849000108','04020040','3550308','J',NULL,'SEM CONTATO','R CORONEL LISBOA','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','475','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3267,'B2W COMPANHIA DIGITAL','SHOPTIME','BAIRRO','00776574001390','23575450','3550308','J',NULL,'SEM CONTATO','EST DA LAMA PRETA','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','2705','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1331,'B2W COMPANHIA DIGITAL','AMERICANAS.COM','BAIRRO','00776574000741','06696000','3550308','J',NULL,'SEM CONTATO','R ESTRADA DOS ALPES','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','555','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1435,'DIGITAL DESIGN GRAF LTDA - ME','DIGITALDESIGN','BAIRRO','09436416000121','04104001','3550308','J',NULL,'SEM CONTATO','R CORREIA DIAS','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','282','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2725,'DIGITALTEK BPO SOFTWARE LTDA','DIGITALTEK','BAIRRO','11403927000199','04730000','3550308','J',NULL,'SEM CONTATO','R DOUTOR RUBENS GOMES BUENO','29808844',NULL,NULL,'financeiro@tecfort.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','157','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2635,'DOC SOLUTION INFORMATICA','DOCSOLUTION','BAIRRO','07870005000114','04730000','3550308','J',NULL,'SEM CONTATO','DOUTOR RUBENS GOMES BUENO','29808844',NULL,NULL,'carina@docsolution.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','155','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3150,'DOMICILI INDUSTRIA E COMERCIO DE ALIMENTOS LTDA','DOMICILI','BAIRRO','02668458000149','07112100','3550308','J',NULL,'SEM CONTATO','R JOSE CAMPANELLA','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','380','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3082,'DPI3 - COMERCIAL E TECNOLOGIA EM INFORMATICA LTDA. - EPP','DPI3','BAIRRO','07031356000131','04730010','3550308','J',NULL,'SEM CONTATO','R VERAVA','29808844',NULL,NULL,'contasapagar@dpi3.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','90','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1430,'E-COMMERCE APPLICATION STORE INTERMEDIACAO DE NEGOCIOS LTDA.','VTEXSTORE','BAIRRO','18672088000153','04548005','3550308','J',NULL,'SEM CONTATO','AV DR. CARDOSO DE MELO','29808844',NULL,NULL,'contasapagar@vtex.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','1.750','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1382,'E-FLOWS PARTICIPACOES LTDA. - ME','EFLOWS','BAIRRO','10570267000178','06710700','3550308','J',NULL,'SEM CONTATO','R ADIB AUADA','29808844',NULL,NULL,'luiz.fernandes@eflows.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','35','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2707,'EAS INFORMATICA E SERVICOS LTDA','EAS','BAIRRO','02083170000102','04730000','3550308','J',NULL,'SEM CONTATO','DR. RUBENS GOMES BUENO','29808844',NULL,NULL,'financeiro3@easservice.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','155','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1360,'EBM - DISTRIBUICAO E LOGISTICA LTDA','EBMDISTRIBUICAO','BAIRRO','11705549000602','08141550','3550308','J',NULL,'SEM CONTATO','AV BANDEIRA DOS CATAGUAZES','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','203','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1354,'ECCO DO BRASIL INFORMATICA E ELETRONICOS LTDA.','ECCODOBRASIL','BAIRRO','05827094000867','13069320','3550308','J',NULL,'SEM CONTATO','AV PIERRE SIMON DE LAPLACE','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','901','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3111,'EDGAR OLIVEIRA GIARDINA 35846072801','GIARDINADESIGN','BAIRRO','24694839000135','08420318','3550308','J',NULL,'SEM CONTATO','R SANTA RITA DA ESTRELA','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','67','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2681,'EFFORTI COMERCIO E SERVICOS DE TECNOLOGIA DA INFORMATICA LTD','EFFORT','BAIRRO','12603127000184','04547005','3550308','J',NULL,'SEM CONTATO','GOMES DE CARVALHO','29808844',NULL,NULL,'thais@bissystem.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','1356','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3144,'ELETRICA COMERCIAL ANDRA LTDA','ANDRA','BAIRRO','47674429000209','01207001','3550308','J',NULL,'SEM CONTATO','R SANTA IFIGENIA','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','517','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3165,'WYLESS TELECOMUNICACOES LTDA','WYLESSTELECOM','BAIRRO','24492478000144','04715002','3550308','J',NULL,'SEM CONTATO','R AMERICO BRASILIENSE','29808844',NULL,NULL,'kbrazil@korewireless.com','SIM','TOTALTRAC','SEM COMPLEMENTO','1490','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2825,'WYLESS TM DATA BRASIL PROCESSAMENTO DE DADOS LTDA','TMDATA','BAIRRO','04077333000170','05690050','3550308','J',NULL,'SEM CONTATO','R MINISTRO NELSON HUNGRIA','29808844',NULL,NULL,'kbrazil@korewireless.com','SIM','TOTALTRAC','SEM COMPLEMENTO','239','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3141,'YURI DE OLIVEIRA PORTO BONFIM 39900513851','DATACLIMA1','BAIRRO','22884667000137','04208050','3550308','J',NULL,'SEM CONTATO','R SILVA BUENO','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','519','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3025,'ZIMBA EMPREENDIMENTOS IMOBILIARIOS LTDA.','ZIMBAEMPREEN','BAIRRO','11992668000189','04511001','3550308','J',NULL,'SEM CONTATO','R AFONSO BRAZ','29808844',NULL,NULL,'samantha@bissystem.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','644','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3029,'ZIMBA GESTORA DE RECURSOS LTDA.','ZIMBAGESTORA','BAIRRO','19477265000103','06454040','3550308','J',NULL,'SEM CONTATO','AL MAMORE','29808844',NULL,NULL,'samantha@bissystem.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','503','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3282,'ZURICH MINAS BRASIL SEGUROS S.A.','ZURICH','BAIRRO','17197385000121','30112021','3550308','J',NULL,'SEM CONTATO','AV GETULIO VARGAS','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','1420','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1722,'ÁSTER SECURITIZADORA S.A','ASTERSECURIT','BAIRRO','10608405000160','04543011','3550308','J',NULL,'SEM CONTATO','PRESIDENTE JUSCELINO KUBITSCHEK','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','50','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2894,'W4 MOGI MIRIM EXPEDITO EMPREENDIMENTO IMOBILIARIO LTDA','W4MMEXPEDITO','BAIRRO','14429447000195','04531004','3550308','J',NULL,'SEM CONTATO','PEDROSO ALVARENGA','29808844',NULL,NULL,'lawrence.brown@w4cap.com','SIM','TOTALTRAC','SEM COMPLEMENTO','990','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2893,'W4 PRESIDENTE PRUDENTE MARCONDES EMPREENDIMENTO IMOBILIARIO','W4PPMARCONDE','BAIRRO','14429650000161','04531004','3550308','J',NULL,'SEM CONTATO','PEDROSO ALVARENGA','29808844',NULL,NULL,'lawrence.brown@w4cap.com','SIM','TOTALTRAC','SEM COMPLEMENTO','990','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2896,'W4 RIBEIRAO PRETO ANHANGUERA EMPREENDIMENTO IMOBILIARIO LTDA','W4RPANHANGUE','BAIRRO','14429496000128','04531004','3550308','J',NULL,'SEM CONTATO','PEDROSO ALVARENGA','29808844',NULL,NULL,'lawrence.brown@w4cap.com','SIM','TOTALTRAC','SEM COMPLEMENTO','990','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(2895,'W4 RIBEIRAO PRETO BANANAL EMPREENDIMENTO IMOBILIARIO LTDA','W4RPBANANAL','BAIRRO','14429118000144','04531004','3550308','J',NULL,'SEM CONTATO','PEDROSO ALVARENGA','29808844',NULL,NULL,'lawrence.brown@w4cap.com','SIM','TOTALTRAC','SEM COMPLEMENTO','990','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3254,'WCS CONSULTORIA E AUDITORIA TRIBUTARIA EIRELI','WELLINGTONPJ','BAIRRO','27515541000109','04475460','3550308','J',NULL,'SEM CONTATO','R HALEVY','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','92','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3275,'VENETO TELECOMUNICACOES LTDA','VIVOSTACRUZ','BAIRRO','03418924004864','04036100','3550308','J',NULL,'SEM CONTATO','R DOMINGOS DE MORAIS','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','2.564','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1439,'VIA VAREJO S/A','CASASBAHIASA','BAIRRO','33041260101270','04036100','3550308','J',NULL,'SEM CONTATO','R DOMINGOS DE MORAIS','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','2564','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1491,'VINHO EM FOCO COMERCIO DE BEBIDAS LTDA - ME','VINHOEMFOCO','BAIRRO','22540484000102','01327000','3550308','J',NULL,'SEM CONTATO','R TREZE DE MAIO','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','860','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3197,'VOSTTRO COMERCIO E SERVICO DE INFORMATICA E VIDEO LTDA - ME','VOSTTRO','BAIRRO','11619862000113','02996000','3550308','J',NULL,'SEM CONTATO','R ANTONIO DE CABEZON','29808844',NULL,NULL,'alice@compactascanners.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','457','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1553,'VTEX - VITRINE TEXTIL LTDA','VTEX','BAIRRO','09212860000163','28990000','3550308','J',NULL,'SEM CONTATO','DOUTOR LUIZ JANUARIO, SALA 201','29808844',NULL,NULL,'administrativo@vtex.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','406','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(3022,'W.W.SPORTS IMPORTADORA,EXPORTADORA E COMERCIAL LTDA','WWSPORTS','BAIRRO','03248412000133','01451000','3550308','J',NULL,'SEM CONTATO','BRIGADEIRO FARIA LIMA','29808844',NULL,NULL,'financeiro@wwsports.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','2152','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1521,'UBER DO BRASIL TECNOLOGIA LTDA.','UBER','BAIRRO','17895646000187','20091020','3550308','J',NULL,'SEM CONTATO','R CANDELARIA','29808844',NULL,NULL,'','SIM','TOTALTRAC','SEM COMPLEMENTO','65','RUA',0,0,'S','P',1)
INSERT INTO VFAVORECIDO(FVR_CODIGO,FVR_NOME,FVR_APELIDO,FVR_BAIRRO,FVR_CNPJCPF,FVR_CEP,FVR_CODCDD,FVR_FISJUR,FVR_INSMUNIC,FVR_CONTATO,FVR_ENDERECO,FVR_FONE,FVR_INS,FVR_CADMUNIC,FVR_EMAIL,FVR_CODCTG,FVR_SENHA,FVR_COMPLEMENTO,FVR_NUMERO,FVR_CODLGR,FVR_GFCP,FVR_GFCR,FVR_ATIVO,FVR_REG,FVR_CODUSR) VALUES(1379,'UBI PENHA BY ZIMBA SPE EMPREENDIMENTOS IMOBILIARIOS LTDA','UBIPENHA','BAIRRO','22228077000156','04511001','3550308','J',NULL,'SEM CONTATO','R AFONSO BRAZ','29808844',NULL,NULL,'samantha@bissystem.com.br','SIM','TOTALTRAC','SEM COMPLEMENTO','644','RUA',0,0,'S','P',1)
GO
UPDATE VFAVORECIDO SET FVR_GFCP=01,FVR_GFCR=02 WHERE FVR_CODIGO=1;
UPDATE VFAVORECIDO SET FVR_GFCP=03,FVR_GFCR=04 WHERE FVR_CODIGO=2;
UPDATE VFAVORECIDO SET FVR_GFCP=05,FVR_GFCR=06 WHERE FVR_CODIGO=3;
UPDATE VFAVORECIDO SET FVR_GFCP=07,FVR_GFCR=08 WHERE FVR_CODIGO=4;
UPDATE VFAVORECIDO SET FVR_GFCP=09,FVR_GFCR=10 WHERE FVR_CODIGO=5;
UPDATE VFAVORECIDO SET FVR_GFCP=11,FVR_GFCR=12 WHERE FVR_CODIGO=6;
UPDATE VFAVORECIDO SET FVR_GFCP=13,FVR_GFCR=14 WHERE FVR_CODIGO=7;
UPDATE VFAVORECIDO SET FVR_GFCP=15,FVR_GFCR=16 WHERE FVR_CODIGO=8;
UPDATE VFAVORECIDO SET FVR_GFCP=17,FVR_GFCR=18 WHERE FVR_CODIGO=9;
UPDATE VFAVORECIDO SET FVR_GFCP=19,FVR_GFCR=20 WHERE FVR_CODIGO=10;
UPDATE VFAVORECIDO SET FVR_GFCP=21,FVR_GFCR=22 WHERE FVR_CODIGO=11;
UPDATE VFAVORECIDO SET FVR_GFCP=23,FVR_GFCR=24 WHERE FVR_CODIGO=12;
UPDATE VFAVORECIDO SET FVR_GFCP=25,FVR_GFCR=26 WHERE FVR_CODIGO=13;
UPDATE VFAVORECIDO SET FVR_GFCP=27,FVR_GFCR=28 WHERE FVR_CODIGO=14;
UPDATE VFAVORECIDO SET FVR_GFCP=29,FVR_GFCR=30 WHERE FVR_CODIGO=15;
UPDATE VFAVORECIDO SET FVR_GFCP=31,FVR_GFCR=32 WHERE FVR_CODIGO=16;
UPDATE VFAVORECIDO SET FVR_GFCP=33,FVR_GFCR=34 WHERE FVR_CODIGO=17;
UPDATE VFAVORECIDO SET FVR_GFCP=35,FVR_GFCR=36 WHERE FVR_CODIGO=18;
UPDATE VFAVORECIDO SET FVR_GFCP=37,FVR_GFCR=34 WHERE FVR_CODIGO=19;
UPDATE VFAVORECIDO SET FVR_GFCP=35,FVR_GFCR=32 WHERE FVR_CODIGO=20;
UPDATE VFAVORECIDO SET FVR_GFCP=33,FVR_GFCR=30 WHERE FVR_CODIGO=21;
UPDATE VFAVORECIDO SET FVR_GFCP=31,FVR_GFCR=28 WHERE FVR_CODIGO=22;
UPDATE VFAVORECIDO SET FVR_GFCP=29,FVR_GFCR=26 WHERE FVR_CODIGO=23;
UPDATE VFAVORECIDO SET FVR_GFCP=27,FVR_GFCR=24 WHERE FVR_CODIGO=24;
UPDATE VFAVORECIDO SET FVR_GFCP=25,FVR_GFCR=22 WHERE FVR_CODIGO=25;
UPDATE VFAVORECIDO SET FVR_GFCP=23,FVR_GFCR=20 WHERE FVR_CODIGO=26;
UPDATE VFAVORECIDO SET FVR_GFCP=21,FVR_GFCR=18 WHERE FVR_CODIGO=27;
UPDATE VFAVORECIDO SET FVR_GFCP=19,FVR_GFCR=16 WHERE FVR_CODIGO=28;
UPDATE VFAVORECIDO SET FVR_GFCP=17,FVR_GFCR=14 WHERE FVR_CODIGO=29;
UPDATE VFAVORECIDO SET FVR_GFCP=15,FVR_GFCR=12 WHERE FVR_CODIGO=30;
UPDATE VFAVORECIDO SET FVR_GFCP=13,FVR_GFCR=10 WHERE FVR_CODIGO=31;
UPDATE VFAVORECIDO SET FVR_GFCP=11,FVR_GFCR=08 WHERE FVR_CODIGO=32;
UPDATE VFAVORECIDO SET FVR_GFCP=09,FVR_GFCR=06 WHERE FVR_CODIGO=33;
UPDATE VFAVORECIDO SET FVR_GFCP=07,FVR_GFCR=04 WHERE FVR_CODIGO=34;
UPDATE VFAVORECIDO SET FVR_GFCP=05,FVR_GFCR=02 WHERE FVR_CODIGO=35;
UPDATE VFAVORECIDO SET FVR_GFCP=03,FVR_GFCR=04 WHERE FVR_CODIGO=36;
UPDATE VFAVORECIDO SET FVR_GFCP=05,FVR_GFCR=06 WHERE FVR_CODIGO=37;
UPDATE VFAVORECIDO SET FVR_GFCP=07,FVR_GFCR=08 WHERE FVR_CODIGO=38;
UPDATE VFAVORECIDO SET FVR_GFCP=09,FVR_GFCR=10 WHERE FVR_CODIGO=39;
UPDATE VFAVORECIDO SET FVR_GFCP=11,FVR_GFCR=12 WHERE FVR_CODIGO=40;
UPDATE VFAVORECIDO SET FVR_GFCP=13,FVR_GFCR=14 WHERE FVR_CODIGO=41;
UPDATE VFAVORECIDO SET FVR_GFCP=15,FVR_GFCR=16 WHERE FVR_CODIGO=42;
UPDATE VFAVORECIDO SET FVR_GFCP=17,FVR_GFCR=18 WHERE FVR_CODIGO=43;
UPDATE VFAVORECIDO SET FVR_GFCP=19,FVR_GFCR=20 WHERE FVR_CODIGO=44;
UPDATE VFAVORECIDO SET FVR_GFCP=21,FVR_GFCR=22 WHERE FVR_CODIGO=45;
UPDATE VFAVORECIDO SET FVR_GFCP=23,FVR_GFCR=24 WHERE FVR_CODIGO=46;
UPDATE VFAVORECIDO SET FVR_GFCP=25,FVR_GFCR=26 WHERE FVR_CODIGO=47;
UPDATE VFAVORECIDO SET FVR_GFCP=27,FVR_GFCR=28 WHERE FVR_CODIGO=48;
UPDATE VFAVORECIDO SET FVR_GFCP=29,FVR_GFCR=30 WHERE FVR_CODIGO=49;
UPDATE VFAVORECIDO SET FVR_GFCP=31,FVR_GFCR=28 WHERE FVR_CODIGO=50;
UPDATE VFAVORECIDO SET FVR_GFCP=33,FVR_GFCR=26 WHERE FVR_CODIGO=51;
UPDATE VFAVORECIDO SET FVR_GFCP=35,FVR_GFCR=24 WHERE FVR_CODIGO=52;
UPDATE VFAVORECIDO SET FVR_GFCP=37,FVR_GFCR=22 WHERE FVR_CODIGO=53;
UPDATE VFAVORECIDO SET FVR_GFCP=35,FVR_GFCR=20 WHERE FVR_CODIGO=54;
UPDATE VFAVORECIDO SET FVR_GFCP=33,FVR_GFCR=18 WHERE FVR_CODIGO=55;
UPDATE VFAVORECIDO SET FVR_GFCP=31,FVR_GFCR=16 WHERE FVR_CODIGO=56;
UPDATE VFAVORECIDO SET FVR_GFCP=29,FVR_GFCR=14 WHERE FVR_CODIGO=57;
UPDATE VFAVORECIDO SET FVR_GFCP=27,FVR_GFCR=12 WHERE FVR_CODIGO=58;
UPDATE VFAVORECIDO SET FVR_GFCP=25,FVR_GFCR=10 WHERE FVR_CODIGO=59;
UPDATE VFAVORECIDO SET FVR_GFCP=23,FVR_GFCR=08 WHERE FVR_CODIGO=60;
UPDATE VFAVORECIDO SET FVR_GFCP=21,FVR_GFCR=06 WHERE FVR_CODIGO=61;
UPDATE VFAVORECIDO SET FVR_GFCP=19,FVR_GFCR=04 WHERE FVR_CODIGO=62;
GO
INSERT INTO VBANCO(BNC_CODIGO
  ,BNC_CODEMP
  ,BNC_NOME
  ,BNC_CODFVR
  ,BNC_ENTRAFLUXO
  ,BNC_CODBST
  ,BNC_PADRAOFLUXO
  ,BNC_CODBCD
  ,BNC_AGENCIA
  ,BNC_AGENCIADV
  ,BNC_CONTA
  ,BNC_CONTADV
  ,BNC_ATIVO
  ,BNC_REG
  ,BNC_CODUSR) VALUES(
  1             -- BNC_CODIGO
  ,1            -- BNC_CODEMP
  ,'ITAU-31906' -- BNC_NOME
  ,1            -- BNC_CODFVR
  ,'S'          -- BNC_ENTRAFLUXO
  ,'BCO'        -- BNC_CODBST
  ,'S'          -- BNC_PADRAOFLUXO
  ,'341'        -- BNC_CODBCD
  ,'0593'       -- BNC_AGENCIA
  ,'0'          -- BNC_AGENCIADV
  ,'31906'      -- BNC_CONTA
  ,'4'          -- BNC_CONTADV
  ,'S'          -- BNC_ATIVO
  ,'P'          -- BNC_REG
  ,1);
GO  
INSERT INTO VBANCO(BNC_CODIGO
  ,BNC_CODEMP
  ,BNC_NOME
  ,BNC_CODFVR
  ,BNC_ENTRAFLUXO
  ,BNC_CODBST
  ,BNC_PADRAOFLUXO
  ,BNC_CODBCD
  ,BNC_AGENCIA
  ,BNC_AGENCIADV
  ,BNC_CONTA
  ,BNC_CONTADV
  ,BNC_ATIVO
  ,BNC_REG
  ,BNC_CODUSR) VALUES(
  2             -- BNC_CODIGO
  ,1            -- BNC_CODEMP
  ,'BRADESCO'   -- BNC_NOME
  ,37           -- BNC_CODFVR
  ,'S'          -- BNC_ENTRAFLUXO
  ,'BCO'        -- BNC_CODBST
  ,'N'          -- BNC_PADRAOFLUXO
  ,'237'        -- BNC_CODBCD
  ,'342'        -- BNC_AGENCIA
  ,'1'          -- BNC_AGENCIADV
  ,'600'        -- BNC_CONTA
  ,'1'          -- BNC_CONTADV
  ,'S'          -- BNC_ATIVO
  ,'P'          -- BNC_REG
  ,1);
GO
INSERT INTO VCNABERRO VALUES('341','CR','0303','NAO FOI POSSIVEL ATRIBUIR A AGENCIA PELO CEP OU CEP INVALIDO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0304','SIGLA DO ESTADO INVALIDA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0305','PRAZO DA OPERACAO MENOR QUE PRAZO MINIMO OU MAIOR QUE O MAXIMO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0307','VLR DO TITULO MAIOR QUE 10.000.000,00','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0308','NAO INFORMADO OU DESLOCADO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0309','AGENCIA ENCERRADA ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0310','NAO INFORMADO OU DESLOCADO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0311','CEP NAO NUMERICO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0312','NOME NAO INFORMADO OU DESLOCADO (BANCOS CORRESPONDENTES) ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0313','CEP INCOMPATIVEL COM A SIGLA DO ESTADO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0314','NOSSO NUMERO JA REGISTRADO NO CADASTRO DO BANCO OU FORA DA FAIXA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0315','NOSSO NUMERO EM DUPLICIDADE NO MESMO MOVIMENTO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0318','DATA DE ENTRADA INVALIDA PARA OPERAR COM ESTA CARTEIRA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0319','OCORRENCIA INVALIDA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0321','AGENCIA COBRADORA INVALIDA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0322','CARTEIRA NAO PERMITIDA (NECESSARIO CADASTRAR FAIXA LIVRE)','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0326','AGENCIA/CONTA NAO LIBERADA PARA OPERAR COM COBRANCA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0327','CNPJ DO CEDENTE INAPTO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0329','CATEGORIA DA CONTA INVALIDA ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0330','ENTRADAS BLOQUEADAS, CONTA SUSPENSA EM COBRANCA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0331','CONTA NAO TEM PERMISSAO PARA PROTESTAR (CONTATE SEU GERENTE)','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0335','IOF MAIOR QUE 5%','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0336','QTDADE DE MOEDA INCOMPATIVEL COM VLR DO TITULO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0337','NAO NUMERICO OU IGUAL A ZEROS','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0342','NOSSO NUMERO FORA DE FAIXA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0352','EMPRESA NAO ACEITA BANCO CORRESPONDENTE','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0353','EMPRESA NAO ACEITA BANCO CORRESPONDENTE - COBRANCA MENSAGEM','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0354','BANCO CORRESPONDENTE - TITULO COM VENCTO INFERIOR A 15 DIAS','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0355','CEP NAO PERTENCE À DEPOSITARIA INFORMADA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0356','VENCTO SUPERIOR A 180 DIAS DA DATA DE ENTRADA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0357','CEP SO DEPOSITARIA BCO DO BRASIL COM VENCTO INFERIOR A 8 DIAS','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0360','VLR DO ABATIMENTO INVALIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0361','JUROS DE MORA MAIOR QUE O PERMITIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0365','TAXA INVALIDA (VENDOR)','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0366','INVALIDA/FORA DE PRAZO DE OPERACAO (MINIMO OU MAXIMO)','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0367','VLR DO TITULO/QTDADE DE MOEDA INVALIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0368','CARTEIRA INVALIDA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0369','CARTEIRA INVALIDA PARA TITULOS COM RATEIO DE CREDITO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0370','CEDENTE NAO CADASTRADO PARA FAZER RATEIO DE CREDITO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0378','DUPLICIDADE DE AGENCIA/CONTA BENEFICIARIA DO RATEIO DE CREDITO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0380','QTDADE DE CONTAS BENEFICIARIAS DO RATEIO MAIOR DO QUE O PERMITIDO (MAX DE 30 CONTAS POR TITULO)','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0381','CONTA PARA RATEIO DE CREDITO INVALIDA/NAO PERTENCE AO ITAU','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0382','DESCONTO/ABATIMENTO NAO PERMITIDO PARA TITULOS COM RATEIO DE CREDITO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0383','VLR DO TITULO MENOR QUE A SOMA DOS VLRES ESTIPULADOS PARA RATEIO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0384','AGENCIA/CONTA BENEFICIARIA DO RATEIO E A CENTRALIZADORA DE CREDITO DO CEDENTE','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0385','AGENCIA/CONTA DO CEDENTE E CONTRATUAL/RATEIO DE CREDITO NAO PERMITIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0386','CODIGO DO TIPO DE VLR INVALIDO/NAO PREVISTO PARA TITULOS COM RATEIO DE CREDITO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0387','REGISTRO TIPO 4 SEM INFORMACAO DE AGENCIAS/CONTAS BENEFICIARIAS DO RATEIO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0390','COBRANCA MENSAGEM - NUMERO DA LINHA DA MENSAGEM INVALIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0397','COBRANCA MENSAGEM SEM MENSAGEM (SO DE CAMPOS FIXOS), POREM COM REGISTRO DO TIPO 7 OU 8','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0398','REGISTRO MENSAGEM SEM FLASH CADASTRADO OU FLASH INFORMADO DIFERENTE DO CADASTRADO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0399','CONTA DE COBRANCA COM FLASH CADASTRADO E SEM REGISTRO DE MENSAGEM CORRESPONDENTE','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0391','DAC AGENCIA/CONTA CORRENTE INVALIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0392','DAC AGENCIA/CONTA/CARTEIRA/NOSSO NUMERO INVALIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0393','SIGLA ESTADO INVALIDA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0394','SIGLA ESTADA INCOMPATIVEL COM CEP DO SACADO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0395','CEP DO SACADO NAO NUMERICO OU INVALIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','0396','ENDERECO/NOME/CIDADE SACADO INVALIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1702','AGENCIA COBRADORA INVALIDA OU COM O MESMO CONTEUDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1704','SIGLA DO ESTADO INVALIDA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1705','DATA DE VENCTO INVALIDA OU COM O MESMO CONTEUDO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1706','VLR DO TITULO COM OUTRA ALTERACAO SIMULTANEA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1708','NOME DO SACADO COM O MESMO CONTEUDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1709','AGENCIA/CONTA INCORRETA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1711','CEP INVALIDO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1713','SEU NUMERO COM O MESMO CONTEUDO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1716','ABATIMENTO/ALTERACAO DO VLR DO TITULO OU SOLICITACAO DE BAIXA BLOQUEADA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1720','ESPECIE INVALIDA','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1721','AGENCIA COBRADORA NAO CONSTA NO CADASTRO DE DEPOSITARIA OU EM ENCERRAMENTO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1723','DATA DE EMISSAO DO TITULO INVALIDA OU COM MESMO CONTEUDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1741','CAMPO ACEITE INVALIDO OU COM MESMO CONTEUDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1742','ALTERACAO INVALIDA PARA TITULO VENCIDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1743','ALTERACAO BLOQUEADA VENCTO JA ALTERADO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1753','INSTRUCAO COM O MESMO CONTEUDO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1754','DATA VENCTO PARA BANCOS CORRESPONDENTES INFERIOR AO ACEITO PELO BANCO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1755','ALTERACOES IGUAIS PARA O MESMO CONTROLE (AGENCIA/CONTA/CARTEIRA/NOSSO NUMERO)','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1756','CNPJ/CPF INVALIDO NAO NUMERICO OU ZERADO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1757','PRAZO DE VENCTO INFERIOR A 15 DIAS','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1760','VLR DE IOF ALTERACAO NAO PERMITIDA PARA CARTEIRAS DE N.S. MOEDA VARIAVEL','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1761','TITULO JA BAIXADO OU LIQUIDADO OU NAO EXISTE TITULO CORRESPONDENTE NO SISTEMA ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1766','ALTERACAO NAO PERMITIDA PARA CARTEIRAS DE NOTAS DE SEGUROS MOEDA VARIAVEL ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1781','ALTERACAO BLOQUEADA TITULO COM PROTESTO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1787','ALTERACAO BLOQUEADA TITULO COM RATEIO DE CREDITO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1601','INSTRUCAO/OCORRENCIA NAO EXISTENTE','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1603','CONTA NAO TEM PERMISSAO PARA PROTESTAR (CONTATE SEU GERENTE)','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1606','NOSSO NUMERO IGUAL A ZEROS ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1609','CNPJ/CPF DO SACADOR/AVALISTA INVALIDO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1610','VLR DO ABATIMENTO IGUAL OU MAIOR QUE O VLR DO TITULO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1614','REGISTRO EM DUPLICIDADE ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1615','CNPJ/CPF INFORMADO SEM NOME DO SACADOR/AVALISTA ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1619','VLR DO ABATIMENTO MAIOR QUE 90% DO VLR DO TITULO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1621','TITULO NAO REGISTRADO NO SISTEMA ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1622','TITULO BAIXADO OU LIQUIDADO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1623','INSTRUCAO NAO ACEITA POR TER SIDO EMITIDO ULTIMO AVISO AO SACADO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1624','INSTRUCAO INCOMPATIVEL - EXISTE INSTRUCAO DE PROTESTO PARA O TITULO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1625','INSTRUCAO INCOMPATIVEL NAO EXISTE INSTRUCAO DE PROTESTO PARA O TITULO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1626','INSTRUCAO NAO ACEITA POR JA TER SIDO EMITIDA A ORDEM DE PROTESTO AO CARTORIO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1627','INSTRUCAO NAO ACEITA POR NAO TER SIDO EMITIDA A ORDEM DE PROTESTO AO CARTORIO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1628','JA EXISTE UMA MESMA INSTRUCAO CADASTRADA ANTERIORMENTE PARA O TITULO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1629','VLR LIQUIDO + VLR DO ABATIMENTO DIFERENTE DO VLR DO TITULO REGISTRADO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1630','EXISTE UMA INSTRUCAO DE NAO PROTESTAR ATIVA PARA O TITULO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1631','EXISTE UMA OCORRENCIA DO SACADO QUE BLOQUEIA A INSTRUCAO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1632','DEPOSITARIA DO TITULO = 9999 OU CARTEIRA NAO ACEITA PROTESTO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1633','ALTERACAO DE VENCTO IGUAL À REGISTRADA NO SISTEMA OU QUE TORNA O TITULO VENCIDO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1634','INSTRUCAO DE EMISSAO DE AVISO DE COBRANCA PARA TITULO VENCIDO ANTES DO VENCTO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1635','SOLICITACAO DE CANCELAMENTO DE INSTRUCAO INEXISTENTE','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1636','TITULO SOFRENDO ALTERACAO DE CONTROLE (AGENCIA/CONTA/CARTEIRA/NOSSO NUMERO) ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1637','INSTRUCAO NAO PERMITIDA PARA A CARTEIRA ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1638','INSTRUCAO NAO PERMITIDA PARA TITULO COM RATEIO DE CREDITO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1501','CARTEIRA/Nº NUMERO NAO NUMERICO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1504','NOSSO NUMERO EM DUPLICIDADE NUM MESMO MOVIMENTO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1505','SOLICITACAO DE BAIXA PARA TITULO JA BAIXADO OU LIQUIDADO ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1506','SOLICITACAO DE BAIXA PARA TITULO NAO REGISTRADO NO SISTEMA ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1507','COBRANCA PRAZO CURTO SOLICITACAO DE BAIXA P/ TITULO NAO REGISTRADO NO SISTEMA ','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1508','SOLICITACAO DE BAIXA PARA TITULO EM FLOATING','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1510','VLR DO TITULO FAZ PARTE DE GARANTIA DE EMPRESTIMO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1511','PAGO ATRAVES DO SISPAG POR CREDITO EM C/C E NAO BAIXADO','R','S','P',1)
INSERT INTO VCNABERRO VALUES('341','CR','1816','ABATIMENTO/ALTERACAO DO VLR DO TITULO OU SOLICITACAO DE BAIXA BLOQUEADOS','R','S','P',1)
GO
INSERT INTO VVENDEDOR VALUES(1,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(2,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(3,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(4,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(5,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(6,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(7,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(8,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(9,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(10,1,'S','P',1);
INSERT INTO VVENDEDOR VALUES(11,1,'S','P',1);
GO
INSERT INTO VOPERADORA VALUES(1,'S','P',1);
INSERT INTO VOPERADORA VALUES(2,'S','P',1);
INSERT INTO VOPERADORA VALUES(3,'S','P',1);
INSERT INTO VOPERADORA VALUES(4,'S','P',1);
INSERT INTO VOPERADORA VALUES(5,'S','P',1);
INSERT INTO VOPERADORA VALUES(6,'S','P',1);
INSERT INTO VOPERADORA VALUES(7,'S','P',1);
INSERT INTO VOPERADORA VALUES(8,'S','P',1);
INSERT INTO VOPERADORA VALUES(9,'S','P',1);
INSERT INTO VOPERADORA VALUES(10,'S','P',1);
INSERT INTO VOPERADORA VALUES(11,'S','P',1);
GO
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('AUT','AUTO'         ,'N','S'  ,'S'  ,1);
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('CRD','CREDENCIADO'  ,'N','S'  ,'P'  ,1);
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('CLN','CLIENTE'      ,'N','S'  ,'P'  ,1);
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('EMP','EMPENHO'      ,'S','S'  ,'S'  ,1); --ESTE REGISTRO EH DO SISTEMA(CHAVE PARA EMPENHO)
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('EST','ESTOQUE'      ,'S','S'  ,'S'  ,1); --ESTE REGISTRO EH DO SISTEMA(CHAVE PARA ENTRADA)
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('INS','INSTALADOR'   ,'N','S'  ,'P'  ,1);
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('MNT','MANUTENCAO'   ,'S','S'  ,'P'  ,1);
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('SUC','SUCATA'       ,'N','S'  ,'S'  ,1); --ESTE REGISTRO EH DO SISTEMA(CHAVE PARA BAIXA)
INSERT INTO dbo.VPONTOESTOQUE(PE_CODIGO,PE_NOME,PE_SUCATA,PE_ATIVO ,PE_REG ,PE_CODUSR) VALUES('TRC','TERCEIRO'     ,'N','S'  ,'P'  ,1);
GO
INSERT INTO VGRUPOPRODUTO VALUES('ABD','ABRACADEIRA','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('AJM','ANTI JAMMER','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('ATN','ANTENA','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('AUT','AUTO','S','S',1);
INSERT INTO VGRUPOPRODUTO VALUES('BDP','BOTAO DE PANICO','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('BZR','BUZZER','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('CAL','CARRETA LARTERNA','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('CHC','CHICOTE','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('CHP','CHIP','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('CRG','CARREGADOR','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('FSV','FUSIVEL','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('FTI','FITA ISOLANTE','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('IRF','LEITOR DE RFID','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('ISC','ISCA','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('PRT','PORTATIL','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('PTR','PORTA RELE','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('RAT','AUTO RAT','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('RBK','BACKUP','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('RLP','RELE','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('RS','RASTREADOR SIMPLES','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('RST','RASTREADOR','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('SLC','SILICONE','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('SRN','SIRENE','S','P',1);
INSERT INTO VGRUPOPRODUTO VALUES('TCD','TECLADO','S','P',1);
/*
SELECT 'INSERT INTO VGRUPOPRODUTO VALUES('
+''''+CAST(GP_CODIGO AS VARCHAR(10))
+''','''+CAST(GP_NOME AS VARCHAR(30))
+''','''+CAST(GP_ATIVO AS VARCHAR(3))
+''','''+CAST(GP_REG AS VARCHAR(3))
+''',1);'
FROM GRUPOPRODUTO
*/
GO
INSERT INTO VFABRICANTE VALUES(7,'FTI','S','P',1);
INSERT INTO VFABRICANTE VALUES(8,'ABD','S','P',1);
INSERT INTO VFABRICANTE VALUES(11,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(11,'CHP','S','P',1);
INSERT INTO VFABRICANTE VALUES(12,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(12,'RST','S','P',1);
INSERT INTO VFABRICANTE VALUES(13,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(13,'RST','S','P',1);
INSERT INTO VFABRICANTE VALUES(14,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(14,'RST','S','P',1);
INSERT INTO VFABRICANTE VALUES(15,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(16,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(17,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(18,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(19,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(20,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(21,'CHC','S','P',1);
INSERT INTO VFABRICANTE VALUES(35,'PRT','S','P',1);
INSERT INTO VFABRICANTE VALUES(55,'SRN','S','P',1);
INSERT INTO VFABRICANTE VALUES(43,'AJM','S','P',1);
INSERT INTO VFABRICANTE VALUES(56,'SRN','S','P',1);
INSERT INTO VFABRICANTE VALUES(57,'SRN','S','P',1);
INSERT INTO VFABRICANTE VALUES(58,'SRN','S','P',1);
INSERT INTO VFABRICANTE VALUES(59,'SRN','S','P',1);
GO
INSERT INTO VTRANSPORTADORA VALUES(1,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(2,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(3,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(4,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(5,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(6,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(7,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(8,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(9,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(10,1,'S','P',1);
INSERT INTO VTRANSPORTADORA VALUES(11,1,'S','P',1);
GO
INSERT INTO VFERIADO VALUES('2018-03-28',1,'MEU ANIVERSARIO',1,1,'S','P',1);
INSERT INTO VFERIADO VALUES('2018-12-25',1,'NATAL',1,1,'S','P',1);
GO
/*
SELECT 'INSERT INTO VSERIENF VALUES('
+''+CAST(SNF_CODIGO AS VARCHAR(60))
+','''+CAST(SNF_SERIE AS VARCHAR(20))
+''','''+CAST(SNF_ENTSAI AS VARCHAR(1))
+''','''+CAST(SNF_CODTD AS VARCHAR(20))
+''','''+CAST(SNF_INFORMARNF AS VARCHAR(1))
+''','+CAST(SNF_NFINICIO AS VARCHAR(20))
+','+CAST(SNF_NFFIM AS VARCHAR(20))
+','''+CAST(SNF_IDF AS VARCHAR(20))
+''','''+CAST(SNF_MODELO AS VARCHAR(20))
+''','''+CAST(SNF_INDICE AS VARCHAR(20))
+''','''+CAST(SNF_LIVRO AS VARCHAR(20))
+''','''+CAST(SNF_ENVIO AS VARCHAR(20))
+''','+CAST(SNF_CODFLL AS VARCHAR(20))
+''','+CAST(SNF_CODEMP AS VARCHAR(20))
+','''+CAST(SNF_ATIVO AS VARCHAR(1))
+''','''+CAST(SNF_REG AS VARCHAR(1))
+''',1);'
FROM SERIENF
*/
INSERT INTO VSERIENF VALUES(1,'01','E','NFS','N',1,1,'21222','55','indice','S','P',1001,1,'S','P',1);
INSERT INTO VSERIENF VALUES(2,'01','S','NFS','N',1,1,'21222','55','indice','S','P',1001,1,'S','P',1);
INSERT INTO VSERIENF VALUES(3,'01','E','NFP','N',1,1,'21222','55','indice','S','P',1001,1,'S','P',1);
INSERT INTO VSERIENF VALUES(4,'01','S','NFP','N',1,1,'21222','55','indice','S','P',1001,1,'S','P',1);
INSERT INTO VSERIENF VALUES(5,'01','S','RPS','N',1,1,'21222','55','indice','S','P',1001,1,'S','P',1);
INSERT INTO VSERIENF VALUES(5,'01','S','REC','N',1,1,'21222','55','indice','S','P',1001,1,'S','P',1);
GO
INSERT INTO GENERATOR VALUES('PAGAR',0);
INSERT INTO GENERATOR VALUES('GRUPOMODELOPRODUTO',0);
INSERT INTO GENERATOR VALUES('GRUPOMODELOLOTE',0);
INSERT INTO GENERATOR VALUES('PEDIDO',0);
INSERT INTO GENERATOR VALUES('ITEMCONTRATO',0);
GO
INSERT INTO VSERVICOPREFEITURA VALUES('2803','3550308','LOCACAO EQUIPAMENTO','FED2803',5.00,'S','S','P',1);
INSERT INTO VSERVICOPREFEITURA VALUES('2803','3543402','LOCACAO EQUIPAMENTO','FED2803',5.00,'S','S','P',1);
INSERT INTO VSERVICOPREFEITURA VALUES('2804','3543402','LOCACAO RP2804','FED2804',5.00,'S','S','P',1);
INSERT INTO VSERVICOPREFEITURA VALUES('2804','3550308','LOCACAO RP2804','FED2804',5.00,'S','S','P',1);
INSERT INTO VSERVICOPREFEITURA VALUES('2805','3543402','SERV BI','FED2805',5.00,'S','S','P',1);
INSERT INTO VSERVICOPREFEITURA VALUES('2805','3550308','SERV BI','FED2805',5.00,'S','S','P',1);

GO
INSERT INTO VSERVICO VALUES(1,'SERV DE COMUNICACAO' ,'S','S','5.00','100.00','S','3.00','S','1.65','S','3.00','S','0.65','S','5.01.01.01.0002','2803','NSA','1','S','S','S','P',1);
INSERT INTO VSERVICO VALUES(2,'SERV DE ATIVACAO'    ,'S','S','5.00','100.00','S','3.00','S','1.65','S','3.00','S','0.65','S','5.01.01.01.0004','2803','NSA','1','S','S','S','P',1);
INSERT INTO VSERVICO VALUES(3,'SERV DE BI'          ,'S','S','5.00','100.00','S','3.00','S','1.65','S','3.00','S','0.65','S','5.01.01.01.0003','2804','NSA','1','S','N','S','P',1);
/*
SELECT 'INSERT INTO VSERVICO VALUES('
+''+CAST(SRV_CODIGO AS VARCHAR(10))
+','''+CAST(SRV_NOME AS VARCHAR(60))
+''','''+CAST(SRV_ENTSAI AS VARCHAR(1))
+''','''+CAST(SRV_INSS AS VARCHAR(1))
+''','''+CAST(SRV_INSSALIQ AS VARCHAR(10))
+''','''+CAST(SRV_INSSBASECALC AS VARCHAR(10))
+''','''+CAST(SRV_IRRF AS VARCHAR(1))
+''','''+CAST(SRV_IRRFALIQ AS VARCHAR(10))
+''','''+CAST(SRV_PIS AS VARCHAR(1))
+''','''+CAST(SRV_PISALIQ AS VARCHAR(10))
+''','''+CAST(SRV_COFINS AS VARCHAR(1))
+''','''+CAST(SRV_COFINSALIQ AS VARCHAR(10))
+''','''+CAST(SRV_CSLL AS VARCHAR(1))
+''','''+CAST(SRV_CSLLALIQ AS VARCHAR(10))
+''','''+CAST(SRV_ISS AS VARCHAR(1))
+''','''+CAST(SRV_CODCC AS VARCHAR(15))
+''','''+CAST(SRV_CODSPR AS VARCHAR(10))
+''','''+CAST(SRV_CODPRD AS VARCHAR(15))
+''','''+CAST(SRV_CODEMP AS VARCHAR(10))
+''','''+CAST(SRV_PODEVENDA AS VARCHAR(1))
+''','''+CAST(SRV_PODELOCACAO AS VARCHAR(1))
+''','''+CAST(SRV_ATIVO AS VARCHAR(1))
+''','''+CAST(SRV_REG AS VARCHAR(1))
+''',1);'
FROM SERVICO
*/
GO
INSERT INTO VALIQUOTASIMPLES VALUES(3,'1','1','0.00','180000.00','6.0000','0.0000','0.0000','0.0000','0.0000','4.0000','0.0000','0.0000','2.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'2','1','180000.01','360000.00','8.2100','0.0000','0.0000','1.4200','0.0000','4.0000','0.0000','0.0000','2.7900','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'3','1','360000.01','540000.00','10.2600','0.4800','0.4300','1.4300','0.3500','4.0700','0.0000','0.0000','3.5000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'4','1','540000.01','720000.00','11.3100','0.5300','0.5300','1.5600','0.3800','4.4700','0.0000','0.0000','3.8400','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'5','1','720000.01','900000.00','11.4000','0.5300','0.5200','1.5800','0.3800','4.5200','0.0000','0.0000','3.8700','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'6','1','900000.01','1080000.00','12.4200','0.5700','0.5700','1.7300','0.4000','4.9200','0.0000','0.0000','4.2300','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'7','1','1080000.01','1260000.00','12.5400','0.5900','0.5600','1.7400','0.4200','4.9700','0.0000','0.0000','4.2600','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'8','1','1260000.01','1440000.00','12.6800','0.5900','0.5700','1.7600','0.4200','5.0300','0.0000','0.0000','4.3100','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'9','1','1440000.01','1620000.00','13.5500','0.6300','0.6100','1.8800','0.4500','5.3700','0.0000','0.0000','4.6100','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'10','1','1620000.01','1800000.00','13.6800','0.6300','0.6400','1.8900','0.4500','5.4200','0.0000','0.0000','4.6500','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'11','1','1800000.01','1980000.00','14.9300','0.6900','0.6900','2.0700','0.5000','5.9800','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'12','1','1980000.01','2160000.00','15.0600','0.6900','0.6900','2.0900','0.5000','6.0900','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'13','1','2160000.01','2340000.00','15.2000','0.7100','0.7000','2.1000','0.5000','6.1900','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'14','1','2340000.01','2520000.00','15.3500','0.7100','0.7000','2.1300','0.5100','6.3000','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'15','1','2520000.01','2700000.00','15.4800','0.7200','0.7000','2.1500','0.5100','6.4000','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'16','1','2700000.01','2880000.00','16.8500','0.7800','0.7600','2.3400','0.5600','7.4100','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'17','1','2880000.01','3060000.00','16.9800','0.7800','0.7800','2.3600','0.5600','7.5000','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'18','1','3060000.01','3240000.00','17.1300','0.8000','0.7900','2.3700','0.5700','7.6000','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'19','1','3240000.01','3420000.00','17.2700','0.8000','0.7900','2.4000','0.5700','7.7100','0.0000','0.0000','5.0000','P',1)
INSERT INTO VALIQUOTASIMPLES VALUES(3,'20','1','3420000.01','3600000.00','17.4200','0.8100','0.7900','2.4200','0.5700','7.8300','0.0000','2.8800','5.0000','P',1)
GO
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201801,'1','0.00','0.00','0.0000','201701','201712','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201802,'1','0.00','0.00','0.0000','201702','201801','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201803,'1','0.00','0.00','0.0000','201703','201802','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201804,'1','0.00','0.00','0.0000','201704','201803','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201805,'1','0.00','0.00','0.0000','201705','201804','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201806,'1','0.00','0.00','0.0000','201706','201805','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201807,'1','0.00','0.00','0.0000','201707','201806','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201808,'1','0.00','0.00','0.0000','201708','201807','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201809,'1','0.00','0.00','0.0000','201709','201808','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201810,'1','0.00','0.00','0.0000','201710','201809','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201811,'1','0.00','164671.34','2.0000','201711','201810','1','3','1','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201812,'1','0.00','0.00','0.0000','201712','201811','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201901,'1','0.00','0.00','0.0000','201801','201812','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201902,'1','0.00','0.00','0.0000','201802','201901','0','0','0','P',1)
INSERT INTO FECHAMESSIMPLES(FMS_CODMES,FMS_CODEMP,FMS_VLRMES,FMS_VLRACUMULADO,FMS_ALIQUOTA,FMS_MESINI,FMS_MESFIN,FMS_ATUALIZAR,FMS_ANEXO,FMS_ITEM,FMS_REG,FMS_CODUSR) VALUES(201903,'1','0.00','0.00','0.0000','201803','201902','0','0','0','P',1)
GO
INSERT INTO VGRUPOMODELO VALUES(1,15,'CHICOTE ST300HD','CHC','14','N','N','N','N','N','S','N','NSA','NSA','NSA','NSA','10.60','12.60','10.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(2,11,'CHICOTE ANTI JAMMER KARITEC','CHC','69','N','N','N','N','N','S','N','NSA','NSA','NSA','NSA','12.50','14.50','12.50','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(3,12,'CHICOTE ANTI JAMMER SMART CAR','CHC','69','N','N','N','N','N','S','N','NSA','NSA','NSA','NSA','1.30','5.30','1.30','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(4,15,'CHIP TMDATA VIVO','CHP','34','S','S','S','S','S','N','N','NSA','NSA','NSA','NSA','2.60','4.60','2.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(5,11,'CHIP TMDATA CLARO','CHP','19','S','S','S','S','S','N','N','NSA','NSA','NSA','NSA','3.60','5.60','3.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(6,14,'RASTREADOR ST310U','RST','34','S','N','N','N','N','N','N','NSA','NSA','NSA','NSA','4.60','6.60','4.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(7,13,'RASTREADOR ST300HD','RST','34','S','N','N','N','N','N','N','NSA','NSA','NSA','NSA','5.60','7.60','5.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(8,12,'RASTREADOR 0003','RST','34','S','N','N','N','N','N','N','NSA','NSA','NSA','NSA','6.60','8.60','6.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(9,35,'PORTATIL AZUL','PRT','34','S','S','N','N','N','S','N','NSA','NSA','NSA','NSA','7.60','9.60','7.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(10,56,'SIRENE DO TIMAO','SRN','34','S','N','N','N','N','S','N','NSA','NSA','NSA','NSA','8.60','10.60','8.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(11,8,'ABRACADEIRA 25CM','ABD','49','N','N','N','N','N','N','N','NSA','NSA','NSA','NSA','11.60','15.18','11.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(12,8,'ABRACADEIRA 50CM','ABD','29','N','N','N','N','N','N','N','NSA','NSA','NSA','NSA','12.10','16.20','12.10','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(13,7,'FITA ISO','FTI','29','N','N','N','N','N','N','N','NSA','NSA','NSA','NSA','13.20','17.22','13.20','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(14,43,'ANTIJAMMER','AJM','19','S','N','N','N','N','N','N','NSA','NSA','NSA','NSA','14.30','18.24','14.30','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(15,43,'ANTENA VERMELHA','AJM','65','S','S','S','S','S','S','S','NSA','NSA','NSA','NSA','15.40','19.26','15.40','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(16,0,'AUTO','AUT','0','N','N','N','N','N','S','S','ABD_CHP_FTI_RST','11_5_4_13_8_7_6','ATN_CHC_FSV_PTR_RLP','2_3_1','16.50','20.28','16.50','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(17,0,'AUTO COM ANTIJAMMER','AUT','0','N','N','N','N','N','S','S','ABD_AJM_CHC_CHP_FTI_PTR_RLP_RST','11_12_2_3_1_5_8_7_6','SRN','10','17.60','21.30','17.60','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(18,0,'AUTO COM BUZZER','AUT','0','N','N','N','N','N','S','S','ABD_BZR_CHP_RST','17_18_23_7_6_10_8','ATN_CHC_FSV_FTI_PTR_RLP','5_2_3_1_11_19_21_22','18.70','22.32','18.70','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(19,0,'TELEMETRIA','AUT','0','N','N','N','N','N','S','S','ABD_CHC_CHP_FSV_FTI_IRF_PTR_RLP_RST_SLC','17_18_3_1_7_6_25_19_26_21_22_9_24','BZR','23','19.80','23.52','19.80','S','P',1);
INSERT INTO VGRUPOMODELO VALUES(20,0,'(COM BLOQUEIO ELETRONICO)','AUT','0','N','N','N','N','N','S','S','ABD','11_12','NSA','23','20.90','24.62','20.90','S','P',1);
/*
SELECT 'INSERT INTO VGRUPOMODELO VALUES('
+''+CAST(GM_CODIGO AS VARCHAR(10))
+','+CAST(GM_CODFBR AS VARCHAR(10))
+','''+CAST(GM_NOME AS VARCHAR(60))
+''','''+CAST(GM_CODGP AS VARCHAR(3))
+''','''+CAST(GM_ESTOQUE AS VARCHAR(3))
+''','''+CAST(GM_NUMSERIE AS VARCHAR(3))
+''','''+CAST(GM_SINCARD AS VARCHAR(3))
+''','''+CAST(GM_OPERADORA AS VARCHAR(3))
+''','''+CAST(GM_FONE AS VARCHAR(3))
+''','''+CAST(GM_VENDA AS VARCHAR(3))
+''','''+CAST(GM_LOCACAO AS VARCHAR(3))
+''','''+CAST(GM_CONTRATO AS VARCHAR(3))
+''','''+CAST(GM_GPOBRIGATORIO AS VARCHAR(40))
+''','''+CAST(GM_GMOBRIGATORIO AS VARCHAR(70))
+''','''+CAST(GM_GPACEITO AS VARCHAR(40))
+''','''+CAST(GM_GMACEITO AS VARCHAR(70))
+''','''+CAST(GM_VALORVISTA AS VARCHAR(20))
+''','''+CAST(GM_VALORPRAZO AS VARCHAR(20))
+''','''+CAST(GM_VALORVISTA AS VARCHAR(20))
+''','''+CAST(GM_ATIVO AS VARCHAR(3))
+''','''+CAST(GM_REG AS VARCHAR(3))
+''',1);'
FROM GRUPOMODELO
*/
GO
INSERT INTO VPRODUTO(PRD_CODIGO,PRD_CODEMP,PRD_NOME,PRD_CODNCM,PRD_ST,PRD_ALIQICMS,PRD_REDUCAOBC,PRD_IPI,PRD_ALIQIPI,PRD_CSTIPI,PRD_CODEMB,PRD_VLRVENDA,PRD_CODPO,PRD_CODBARRAS,PRD_PESOBRUTO,PRD_PESOLIQUIDO,PRD_ATIVO,PRD_REG,PRD_CODUSR) VALUES('01.01.0001','1','PRODUTO 01.01.0001','3404.90.29','N','18','0','N','0','52','PCT','100','0','200100100','2','1','S','P','1')
INSERT INTO VPRODUTO(PRD_CODIGO,PRD_CODEMP,PRD_NOME,PRD_CODNCM,PRD_ST,PRD_ALIQICMS,PRD_REDUCAOBC,PRD_IPI,PRD_ALIQIPI,PRD_CSTIPI,PRD_CODEMB,PRD_VLRVENDA,PRD_CODPO,PRD_CODBARRAS,PRD_PESOBRUTO,PRD_PESOLIQUIDO,PRD_ATIVO,PRD_REG,PRD_CODUSR) VALUES('01.01.0002','1','PRODUTO 01.01.0002','3405.40.00','N','18','0','N','0','52','PCT','100','0','200100100','2','1','S','P','1')
INSERT INTO VPRODUTO(PRD_CODIGO,PRD_CODEMP,PRD_NOME,PRD_CODNCM,PRD_ST,PRD_ALIQICMS,PRD_REDUCAOBC,PRD_IPI,PRD_ALIQIPI,PRD_CSTIPI,PRD_CODEMB,PRD_VLRVENDA,PRD_CODPO,PRD_CODBARRAS,PRD_PESOBRUTO,PRD_PESOLIQUIDO,PRD_ATIVO,PRD_REG,PRD_CODUSR) VALUES('01.01.0003','1','PRODUTO 01.01.0003','3819.00.00','N','18','0','N','0','52','PCT','100','0','200100100','2','1','S','P','1')
INSERT INTO VPRODUTO(PRD_CODIGO,PRD_CODEMP,PRD_NOME,PRD_CODNCM,PRD_ST,PRD_ALIQICMS,PRD_REDUCAOBC,PRD_IPI,PRD_ALIQIPI,PRD_CSTIPI,PRD_CODEMB,PRD_VLRVENDA,PRD_CODPO,PRD_CODBARRAS,PRD_PESOBRUTO,PRD_PESOLIQUIDO,PRD_ATIVO,PRD_REG,PRD_CODUSR) VALUES('01.01.0004','1','PRODUTO 01.01.0004','3820.00.00','N','18','0','N','0','52','PCT','100','0','200100100','2','1','S','P','1')
INSERT INTO VPRODUTO(PRD_CODIGO,PRD_CODEMP,PRD_NOME,PRD_CODNCM,PRD_ST,PRD_ALIQICMS,PRD_REDUCAOBC,PRD_IPI,PRD_ALIQIPI,PRD_CSTIPI,PRD_CODEMB,PRD_VLRVENDA,PRD_CODPO,PRD_CODBARRAS,PRD_PESOBRUTO,PRD_PESOLIQUIDO,PRD_ATIVO,PRD_REG,PRD_CODUSR) VALUES('01.01.0005','1','PRODUTO 01.01.0005','3824.90.29','N','18','0','N','0','52','PCT','100','0','200100100','2','1','S','P','1')
GO
/*
SELECT 'INSERT INTO VPONTOESTOQUEIND VALUES('
+''+CAST(PEI_CODFVR AS VARCHAR(10))
+','''+CAST(PEI_CODPE AS VARCHAR(20))
+''','''+CAST(PEI_ATIVO AS VARCHAR(1))
+''','''+CAST(PEI_REG AS VARCHAR(1))
+''',1);'
FROM PONTOESTOQUEIND
*/
INSERT INTO VPONTOESTOQUEIND VALUES(1,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(2,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(3,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(4,'MNT','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(7,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(8,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(9,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(10,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(11,'MNT','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(14,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(15,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(16,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(17,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(18,'MNT','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(21,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(22,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(23,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(24,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(25,'MNT','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(28,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(29,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(30,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(31,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(32,'MNT','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(35,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(36,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(37,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(38,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(39,'MNT','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(42,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(43,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(44,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(44,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(45,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(46,'MNT','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(49,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(50,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(51,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(52,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(53,'MNT','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(56,'TRC','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(57,'CLN','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(58,'CRD','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(59,'INS','S','P',1);
INSERT INTO VPONTOESTOQUEIND VALUES(60,'MNT','S','P',1);
GO
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(1,'0','11','ABD','AUT','0','8','568','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(2,'0','11','ABD','AUT','0','8','569','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(3,'0','11','ABD','AUT','0','8','567','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(4,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(5,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(6,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(7,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(8,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(9,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(10,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(11,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(12,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(13,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(14,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(15,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(16,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(17,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(18,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(19,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(20,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(21,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(22,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(23,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(24,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(25,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(26,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(27,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(28,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(29,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(30,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(31,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(32,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(33,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(34,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(35,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(36,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(37,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(38,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(39,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(40,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(41,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(42,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(43,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(44,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(45,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(46,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(47,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(48,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(49,'0','11','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','1','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(50,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(51,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(52,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(53,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(54,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(55,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(56,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(57,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(58,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(59,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(60,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(61,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(62,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(63,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(64,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(65,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(66,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(67,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(68,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(69,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(70,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(71,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(72,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(73,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(74,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(75,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(76,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(77,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(78,'0','12','ABD','EST','0','8','0','NSA','NSA','NSA','NSA','NSA','2','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(79,'0','15','AJM','EST','0','43','0','53578088','54451509','VIVO','134182','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(80,'0','15','AJM','EST','0','43','0','17888935','18762356','VIVO','135370','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(81,'0','15','AJM','EST','0','43','0','39204142','40077563','VIVO','136558','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(82,'0','15','AJM','EST','0','43','0','16234787','17108208','VIVO','137746','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(83,'0','15','AJM','EST','0','43','0','50659977','51533398','VIVO','138934','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(84,'0','15','AJM','EST','0','43','0','21605721','22479142','VIVO','140122','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(85,'0','15','AJM','EST','0','43','0','51938187','52811608','VIVO','141310','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(86,'0','15','AJM','EST','0','43','0','28122465','28995886','VIVO','168632','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(87,'0','15','AJM','EST','0','43','0','36535360','37408781','VIVO','251091','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(88,'0','15','AJM','EST','0','43','0','43023869','43897290','VIVO','267634','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(89,'0','15','AJM','EST','0','43','0','46949277','47822698','VIVO','188046','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(90,'0','15','AJM','EST','0','43','0','30852829','31726250','VIVO','233779','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(91,'0','15','AJM','EST','0','43','0','20779320','21652741','VIVO','369857','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(92,'0','15','AJM','EST','0','43','0','27574117','28447538','VIVO','458704','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(93,'0','15','AJM','EST','0','43','0','33558251','34431672','VIVO','401424','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(94,'0','15','AJM','EST','0','43','0','35415424','36288845','VIVO','3665771','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(95,'0','15','AJM','EST','0','43','0','32845841','33719262','VIVO','13235804','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(96,'0','15','AJM','EST','0','43','0','25024190','25897611','VIVO','13036840','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(97,'0','15','AJM','EST','0','43','0','19471220','20344641','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(98,'0','15','AJM','EST','0','43','0','58222606','59096027','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(99,'0','15','AJM','EST','0','43','0','34473411','35346832','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(100,'0','15','AJM','EST','0','43','0','37961095','38834516','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(101,'0','15','AJM','EST','0','43','0','61401552','62274973','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(102,'0','15','AJM','EST','0','43','0','23159805','24033226','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(103,'0','15','AJM','EST','0','43','0','60109865','60983286','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(104,'0','15','AJM','EST','0','43','0','53323169','54196590','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(105,'0','15','AJM','EST','0','43','0','30802753','31676174','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(106,'0','15','AJM','EST','0','43','0','44729642','45603063','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(107,'0','15','AJM','EST','0','43','0','24851072','25724493','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(108,'0','15','AJM','EST','0','43','0','29197982','30071403','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(109,'0','15','AJM','EST','0','43','0','39325227','40198648','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(110,'0','15','AJM','EST','0','43','0','50804653','51678074','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(111,'0','15','AJM','EST','0','43','0','26899075','27772496','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(112,'0','15','AJM','EST','0','43','0','29023073','29896494','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(113,'0','15','AJM','EST','0','43','0','35061174','35934595','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(114,'0','15','AJM','EST','0','43','0','31986601','32860022','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(115,'0','15','AJM','EST','0','43','0','54689011','55562432','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(116,'0','15','AJM','EST','0','43','0','28161686','29035107','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(117,'0','15','AJM','EST','0','43','0','33035062','33908483','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(118,'0','15','AJM','EST','0','43','0','55260117','56133538','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(119,'0','15','AJM','EST','0','43','0','38556549','39429970','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(120,'0','15','AJM','EST','0','43','0','28859630','29733051','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(121,'0','15','AJM','EST','0','43','0','42332667','43206088','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(122,'0','15','AJM','EST','0','43','0','48157621','49031042','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(123,'0','15','AJM','EST','0','43','0','25058426','25931847','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(124,'0','15','AJM','EST','0','43','0','22140614','23014035','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(125,'0','15','AJM','EST','0','43','0','48731606','49605027','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(126,'0','15','AJM','EST','0','43','0','60670244','61543665','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(127,'0','15','AJM','EST','0','43','0','33036728','33910149','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(128,'0','15','AJM','EST','0','43','0','35470143','36343564','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(129,'0','15','AJM','EST','0','43','0','52307740','53181161','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(130,'0','15','AJM','EST','0','43','0','38732927','39606348','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(131,'0','15','AJM','EST','0','43','0','22845992','23719413','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(132,'0','15','AJM','EST','0','43','0','18293889','19167310','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(133,'0','15','AJM','EST','0','43','0','57153158','58026579','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(134,'0','15','AJM','EST','0','43','0','60452730','61326151','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(135,'0','15','AJM','EST','0','43','0','41401738','42275159','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(136,'0','15','AJM','EST','0','43','0','17222481','18095902','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(137,'0','15','AJM','EST','0','43','0','18746179','19619600','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(138,'0','15','AJM','EST','0','43','0','19315518','20188939','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(139,'0','15','AJM','EST','0','43','0','31201606','32075027','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(140,'0','15','AJM','EST','0','43','0','23233771','24107192','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(141,'0','15','AJM','EST','0','43','0','40781592','41655013','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(142,'0','15','AJM','EST','0','43','0','35682575','36555996','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(143,'0','15','AJM','EST','0','43','0','61239155','62112576','VIVO','79397','200200','3','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(144,'0','14','AJM','EST','0','43','0','48640173','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(145,'0','14','AJM','EST','0','43','0','63287356','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(146,'0','14','AJM','EST','0','43','0','77517675','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(147,'0','14','AJM','EST','0','43','0','74410267','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(148,'0','14','AJM','EST','0','43','0','28099683','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(149,'0','14','AJM','EST','0','43','0','40511295','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(150,'0','14','AJM','EST','0','43','0','51996542','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(151,'0','14','AJM','EST','0','43','0','62436353','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(152,'0','14','AJM','EST','0','43','0','63525566','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(153,'0','14','AJM','EST','0','43','0','72278133','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(154,'0','14','AJM','EST','0','43','0','21684102','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(155,'0','14','AJM','EST','0','43','0','38522692','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(156,'0','14','AJM','EST','0','43','0','31945110','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(157,'0','14','AJM','EST','0','43','0','37076134','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(158,'0','14','AJM','EST','0','43','0','22356753','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(159,'0','14','AJM','EST','0','43','0','51679328','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(160,'0','14','AJM','EST','0','43','0','30539854','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(161,'0','14','AJM','EST','0','43','0','58329593','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(162,'0','14','AJM','EST','0','43','0','42638019','NSA','NSA','NSA','NSA','4','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(163,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(164,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(165,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(166,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(167,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(168,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(169,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(170,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(171,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(172,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(173,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(174,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(175,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(176,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(177,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(178,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(179,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(180,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(181,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(182,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(183,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(184,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(185,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(186,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(187,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(188,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(189,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(190,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(191,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(192,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(193,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(194,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(195,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(196,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(197,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(198,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(199,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(200,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(201,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(202,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(203,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(204,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(205,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(206,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(207,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(208,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(209,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(210,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(211,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(212,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(213,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(214,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(215,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(216,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(217,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(218,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(219,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(220,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(221,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(222,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(223,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(224,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(225,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(226,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(227,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(228,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(229,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(230,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(231,'0','2','CHC','EST','0','11','0','NSA','NSA','NSA','NSA','NSA','5','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(232,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(233,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(234,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(235,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(236,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(237,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(238,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(239,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(240,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(241,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(242,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(243,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(244,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(245,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(246,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(247,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(248,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(249,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(250,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(251,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(252,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(253,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(254,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(255,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(256,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(257,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(258,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(259,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(260,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(261,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(262,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(263,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(264,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(265,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(266,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(267,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(268,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(269,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(270,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(271,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(272,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(273,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(274,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(275,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(276,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(277,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(278,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(279,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(280,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(281,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(282,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(283,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(284,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(285,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(286,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(287,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(288,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(289,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(290,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(291,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(292,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(293,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(294,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(295,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(296,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(297,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(298,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(299,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(300,'0','3','CHC','EST','0','12','0','NSA','NSA','NSA','NSA','NSA','6','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(301,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(302,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(303,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(304,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(305,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(306,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(307,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(308,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(309,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(310,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(311,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(312,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(313,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(314,'0','1','CHC','EST','0','15','0','NSA','NSA','NSA','NSA','NSA','7','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(315,'0','5','CHP','AUT','0','11','568','58933364','33950947','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(316,'0','5','CHP','AUT','0','11','569','46372661','23570817','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(317,'0','5','CHP','EST','0','11','0','57902040','33206384','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(318,'0','5','CHP','EST','0','11','0','40318423','58421212','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(319,'0','5','CHP','AUT','0','11','567','23500076','60397845','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(320,'0','5','CHP','EST','0','11','0','58041793','34849995','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(321,'0','5','CHP','EST','0','11','0','53760419','46008816','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(322,'0','5','CHP','EST','0','11','0','16590316','54300978','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(323,'0','5','CHP','EST','0','11','0','47091606','54029721','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(324,'0','5','CHP','EST','0','11','0','40820025','23720793','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(325,'0','5','CHP','EST','0','11','0','61605857','57168043','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(326,'0','5','CHP','EST','0','11','0','22106013','20394565','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(327,'0','5','CHP','EST','0','11','0','49407229','56922602','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(328,'0','5','CHP','EST','0','11','0','37507169','49114566','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(329,'0','5','CHP','EST','0','11','0','37821275','58287622','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(330,'0','5','CHP','EST','0','11','0','23196601','30976158','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(331,'0','5','CHP','EST','0','11','0','17446293','55486794','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(332,'0','5','CHP','EST','0','11','0','55442826','60891834','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(333,'0','5','CHP','EST','0','11','0','54190926','48165874','VIVO','26412020','200','8','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(334,'0','4','CHP','EST','0','15','0','58933688','92884959','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(335,'0','4','CHP','EST','0','15','0','46372985','69944126','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(336,'0','4','CHP','EST','0','15','0','57902364','91109072','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(337,'0','4','CHP','EST','0','15','0','40318747','98740283','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(338,'0','4','CHP','EST','0','15','0','23500400','83898569','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(339,'0','4','CHP','EST','0','15','0','58042117','92892436','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(340,'0','4','CHP','EST','0','15','0','53760743','99769883','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(341,'0','4','CHP','EST','0','15','0','16590640','70891942','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(342,'0','4','CHP','EST','0','15','0','47091930','101121975','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(343,'0','4','CHP','EST','0','15','0','40820349','64541466','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(344,'0','4','CHP','EST','0','15','0','61606181','118774548','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(345,'0','4','CHP','EST','0','15','0','22106337','42501226','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(346,'0','4','CHP','EST','0','15','0','49407553','106330479','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(347,'0','4','CHP','EST','0','15','0','37507493','86622383','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(348,'0','4','CHP','EST','0','15','0','37821599','96109545','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(349,'0','4','CHP','EST','0','15','0','23196925','54173407','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(350,'0','4','CHP','EST','0','15','0','17446617','72933735','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(351,'0','4','CHP','EST','0','15','0','55443150','114376838','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(352,'0','4','CHP','EST','0','15','0','169819988','100564235','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(353,'0','4','CHP','EST','0','15','0','154755485','112096738','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(354,'0','4','CHP','EST','0','15','0','166291112','94513121','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(355,'0','4','CHP','EST','0','15','0','148707495','77694774','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(356,'0','4','CHP','EST','0','15','0','131889148','112236491','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(357,'0','4','CHP','EST','0','15','0','166430865','107955117','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(358,'0','4','CHP','EST','0','15','0','162149491','70785014','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(359,'0','4','CHP','EST','0','15','0','124979388','101286304','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(360,'0','4','CHP','EST','0','15','0','155480678','95014723','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(361,'0','4','CHP','EST','0','15','0','149209097','115800555','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(362,'0','4','CHP','EST','0','15','0','169994929','76300711','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(363,'0','4','CHP','EST','0','15','0','130495085','103601927','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(364,'0','4','CHP','EST','0','15','0','157796301','91701867','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(365,'0','4','CHP','EST','0','15','0','145896241','92015973','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(366,'0','4','CHP','EST','0','15','0','146210347','77391299','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(367,'0','4','CHP','EST','0','15','0','131585673','71640991','VIVO','26412020','200','9','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(368,'0','13','FTI','AUT','0','7','568','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(369,'0','13','FTI','AUT','0','7','569','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(370,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(371,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(372,'0','13','FTI','AUT','0','7','567','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(373,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(374,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(375,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(376,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(377,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(378,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(379,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(380,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(381,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(382,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(383,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(384,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(385,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(386,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(387,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(388,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(389,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(390,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(391,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(392,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(393,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(394,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(395,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(396,'0','13','FTI','EST','0','7','0','NSA','NSA','NSA','NSA','NSA','10','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(397,'0','9','PRT','EST','0','35','0','151818647','268135758','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(398,'0','9','PRT','EST','0','35','0','116317111','265328547','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(399,'0','9','PRT','EST','0','35','0','149011436','288070466','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(400,'0','9','PRT','EST','0','35','0','139059030','246457999','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(401,'0','9','PRT','EST','0','35','0','107398969','258333522','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(402,'0','9','PRT','EST','0','35','0','150934553','304465179','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(403,'0','9','PRT','EST','0','35','0','153530626','241013208','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(404,'0','9','PRT','EST','0','35','0','87482582','235696487','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(405,'0','9','PRT','EST','0','35','0','148213905','253575720','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(406,'0','9','PRT','EST','0','35','0','105361815','285742544','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(407,'0','9','PRT','EST','0','35','0','180380729','244988292','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(408,'0','9','PRT','EST','0','35','0','64607563','220345595','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(409,'0','9','PRT','EST','0','35','0','155738032','279867908','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(410,'0','9','PRT','EST','0','35','0','124129876','258061020','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(411,'0','9','PRT','EST','0','35','0','133931144','211301476','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(412,'0','9','PRT','EST','0','35','0','77370332','167750684','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(413,'0','9','PRT','EST','0','35','0','90380352','260200340','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(414,'0','9','PRT','EST','0','35','0','169819988','440204211','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(415,'0','9','PRT','EST','0','35','0','270384223','537236446','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(416,'0','9','PRT','EST','0','35','0','266852223','527656456','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(417,'0','9','PRT','EST','0','35','0','260804233','487206502','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(418,'0','9','PRT','EST','0','35','0','226402269','470527908','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(419,'0','9','PRT','EST','0','35','0','244125639','518511621','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(420,'0','9','PRT','EST','0','35','0','274385982','507320487','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(421,'0','9','PRT','EST','0','35','0','232934505','459200197','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(422,'0','9','PRT','EST','0','35','0','226265692','476761093','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(423,'0','9','PRT','EST','0','35','0','250495401','515505053','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(424,'0','9','PRT','EST','0','35','0','265009652','511305292','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(425,'0','9','PRT','EST','0','35','0','246295640','480392652','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(426,'0','9','PRT','EST','0','35','0','234097012','483595180','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(427,'0','9','PRT','EST','0','35','0','249498168','487410382','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(428,'0','9','PRT','EST','0','35','0','237912214','461513860','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(429,'0','9','PRT','EST','0','35','0','223601646','426828310','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(430,'0','9','PRT','EST','0','35','0','203226664','203226664','NSA','NSA','NSA','11','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(431,'0','8','RST','AUT','0','12','568','419954405','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(432,'0','8','RST','AUT','0','12','569','381645658','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(433,'0','8','RST','EST','0','12','0','437081902','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(434,'0','8','RST','EST','0','12','0','385517029','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(435,'0','8','RST','EST','0','12','0','365732491','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(436,'0','8','RST','AUT','0','12','567','455399732','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(437,'0','8','RST','EST','0','12','0','394543834','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(438,'0','8','RST','EST','0','12','0','323179069','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(439,'0','8','RST','EST','0','12','0','401789625','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(440,'0','8','RST','EST','0','12','0','391104359','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(441,'0','8','RST','EST','0','12','0','425369021','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(442,'0','8','RST','EST','0','12','0','284953158','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(443,'0','8','RST','EST','0','12','0','435605940','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(444,'0','8','RST','EST','0','12','0','382190896','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(445,'0','8','RST','EST','0','12','0','345232620','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(446,'0','8','RST','EST','0','12','0','245121016','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(447,'0','8','RST','EST','0','12','0','350580692','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(448,'0','8','RST','EST','0','12','0','610024199','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(449,'0','8','RST','EST','0','12','0','807620669','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(450,'0','8','RST','EST','0','12','0','794508679','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(451,'0','8','RST','EST','0','12','0','748010735','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(452,'0','8','RST','EST','0','12','0','696930177','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(453,'0','8','RST','EST','0','12','0','762637260','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(454,'0','8','RST','EST','0','12','0','781706469','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(455,'0','8','RST','EST','0','12','0','692134702','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(456,'0','8','RST','EST','0','12','0','703026785','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(457,'0','8','RST','EST','0','12','0','766000454','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(458,'0','8','RST','EST','0','12','0','776314944','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(459,'0','8','RST','EST','0','12','0','726688292','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(460,'0','8','RST','EST','0','12','0','717692192','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(461,'0','8','RST','EST','0','12','0','736908550','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(462,'0','8','RST','EST','0','12','0','699426074','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(463,'0','8','RST','EST','0','12','0','650429956','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(464,'0','8','RST','EST','0','12','0','406453328','NSA','NSA','NSA','NSA','12','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(465,'0','7','RST','EST','0','13','0','419954526','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(466,'0','7','RST','EST','0','13','0','381645779','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(467,'0','7','RST','EST','0','13','0','437082023','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(468,'0','7','RST','EST','0','13','0','385517150','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(469,'0','7','RST','EST','0','13','0','365732612','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(470,'0','7','RST','EST','0','13','0','455399853','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(471,'0','7','RST','EST','0','13','0','394543955','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(472,'0','7','RST','EST','0','13','0','323179190','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(473,'0','7','RST','EST','0','13','0','401789746','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(474,'0','7','RST','EST','0','13','0','391104480','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(475,'0','7','RST','EST','0','13','0','425369142','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(476,'0','7','RST','EST','0','13','0','284953279','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(477,'0','7','RST','EST','0','13','0','435606061','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(478,'0','7','RST','EST','0','13','0','382191017','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(479,'0','7','RST','EST','0','13','0','345232741','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(480,'0','7','RST','EST','0','13','0','245121137','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(481,'0','7','RST','EST','0','13','0','350580813','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(482,'0','7','RST','EST','0','13','0','610024320','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(483,'0','7','RST','EST','0','13','0','807620790','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(484,'0','7','RST','EST','0','13','0','794508800','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(485,'0','7','RST','EST','0','13','0','748010856','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(486,'0','7','RST','EST','0','13','0','696930298','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(487,'0','7','RST','EST','0','13','0','762637381','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(488,'0','7','RST','EST','0','13','0','781706590','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(489,'0','7','RST','EST','0','13','0','692134823','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(490,'0','7','RST','EST','0','13','0','703026906','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(491,'0','7','RST','EST','0','13','0','766000575','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(492,'0','7','RST','EST','0','13','0','776315065','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(493,'0','7','RST','EST','0','13','0','726688413','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(494,'0','7','RST','EST','0','13','0','717692313','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(495,'0','7','RST','EST','0','13','0','736908671','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(496,'0','7','RST','EST','0','13','0','699426195','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(497,'0','7','RST','EST','0','13','0','650430077','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(498,'0','7','RST','EST','0','13','0','406453449','NSA','NSA','NSA','NSA','13','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(499,'0','6','RST','EST','0','14','0','419956871','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(500,'0','6','RST','EST','0','14','0','381648124','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(501,'0','6','RST','EST','0','14','0','437084368','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(502,'0','6','RST','EST','0','14','0','385519495','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(503,'0','6','RST','EST','0','14','0','365734957','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(504,'0','6','RST','EST','0','14','0','455402198','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(505,'0','6','RST','EST','0','14','0','394546300','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(506,'0','6','RST','EST','0','14','0','323181535','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(507,'0','6','RST','EST','0','14','0','401792091','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(508,'0','6','RST','EST','0','14','0','391106825','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(509,'0','6','RST','EST','0','14','0','425371487','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(510,'0','6','RST','EST','0','14','0','284955624','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(511,'0','6','RST','EST','0','14','0','435608406','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(512,'0','6','RST','EST','0','14','0','382193362','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(513,'0','6','RST','EST','0','14','0','345235086','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(514,'0','6','RST','EST','0','14','0','245123482','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(515,'0','6','RST','EST','0','14','0','350583158','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(516,'0','6','RST','EST','0','14','0','610026665','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(517,'0','6','RST','EST','0','14','0','807623135','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(518,'0','6','RST','EST','0','14','0','794511145','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(519,'0','6','RST','EST','0','14','0','748013201','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(520,'0','6','RST','EST','0','14','0','696932643','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(521,'0','6','RST','EST','0','14','0','762639726','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(522,'0','6','RST','EST','0','14','0','781708935','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(523,'0','6','RST','EST','0','14','0','692137168','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(524,'0','6','RST','EST','0','14','0','703029251','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(525,'0','6','RST','EST','0','14','0','766002920','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(526,'0','6','RST','EST','0','14','0','776317410','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(527,'0','6','RST','EST','0','14','0','726690758','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(528,'0','6','RST','EST','0','14','0','717694658','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(529,'0','6','RST','EST','0','14','0','736911016','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(530,'0','6','RST','EST','0','14','0','699428540','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(531,'0','6','RST','EST','0','14','0','650432422','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(532,'0','6','RST','EST','0','14','0','406455794','NSA','NSA','NSA','NSA','14','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(533,'0','10','SRN','EST','0','56','0','419958070','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(534,'0','10','SRN','EST','0','56','0','381649323','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(535,'0','10','SRN','EST','0','56','0','437085567','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(536,'0','10','SRN','EST','0','56','0','385520694','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(537,'0','10','SRN','EST','0','56','0','365736156','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(538,'0','10','SRN','EST','0','56','0','455403397','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(539,'0','10','SRN','EST','0','56','0','394547499','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(540,'0','10','SRN','EST','0','56','0','323182734','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(541,'0','10','SRN','EST','0','56','0','401793290','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(542,'0','10','SRN','EST','0','56','0','391108024','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(543,'0','10','SRN','EST','0','56','0','425372686','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(544,'0','10','SRN','EST','0','56','0','284956823','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(545,'0','10','SRN','EST','0','56','0','435609605','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(546,'0','10','SRN','EST','0','56','0','382194561','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(547,'0','10','SRN','EST','0','56','0','345236285','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(548,'0','10','SRN','EST','0','56','0','245124681','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(549,'0','10','SRN','EST','0','56','0','350584357','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(550,'0','10','SRN','EST','0','56','0','610027864','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(551,'0','10','SRN','EST','0','56','0','807624334','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(552,'0','10','SRN','EST','0','56','0','794512344','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(553,'0','10','SRN','EST','0','56','0','748014400','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(554,'0','10','SRN','EST','0','56','0','696933842','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(555,'0','10','SRN','EST','0','56','0','762640925','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(556,'0','10','SRN','EST','0','56','0','781710134','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(557,'0','10','SRN','EST','0','56','0','692138367','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(558,'0','10','SRN','EST','0','56','0','703030450','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(559,'0','10','SRN','EST','0','56','0','766004119','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(560,'0','10','SRN','EST','0','56','0','776318609','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(561,'0','10','SRN','EST','0','56','0','726691957','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(562,'0','10','SRN','EST','0','56','0','717695857','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(563,'0','10','SRN','EST','0','56','0','736912215','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(564,'0','10','SRN','EST','0','56','0','699429739','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(565,'0','10','SRN','EST','0','56','0','650433621','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(566,'0','10','SRN','EST','0','56','0','406456993','NSA','NSA','NSA','NSA','15','NSA','0',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(567,'3','16','AUT','EMP','0','0','0','455399732','NSA','NSA','NSA','NSA','16','NSA','4',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(568,'3','16','AUT','EMP','0','0','0','419954405','NSA','NSA','NSA','NSA','16','NSA','4',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(569,'3','16','AUT','EMP','0','0','0','381645658','NSA','NSA','NSA','NSA','16','NSA','4',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(572,'3','16','AUT','EMP','0','0','0','437081902','NSA','NSA','NSA','NSA','17','NSA','4',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(573,'3','16','AUT','EMP','0','0','0','385517029','NSA','NSA','NSA','NSA','17','NSA','4',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(574,'3','16','AUT','EMP','0','0','0','365732491','NSA','NSA','NSA','NSA','17','NSA','4',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(575,'0','16','AUT','EST','0','0','0','394543834','NSA','NSA','NSA','NSA','17','NSA','4',1);
INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES(576,'0','16','AUT','EST','0','0','0','323179069','NSA','NSA','NSA','NSA','17','NSA','4',1);
/*
SELECT 'INSERT INTO VGRUPOMODELOPRODUTO(GMP_CODIGO,GMP_CODCNTT,GMP_CODGM,GMP_CODGP,GMP_CODPE,GMP_CODFVR,GMP_CODFBR,GMP_CODAUT,GMP_NUMSERIE,GMP_SINCARD,GMP_OPERADORA,GMP_FONE,GMP_CONTRATO,GMP_CODGML,GMP_PLACACHASSI,GMP_COMPOSICAO,GMP_CODUSR) VALUES('
+''+CAST(GMP_CODIGO AS VARCHAR(10))
+','''+CAST(GMP_CODCNTT AS VARCHAR(20))
+''','''+CAST(GMP_CODGM AS VARCHAR(20))
+''','''+CAST(GMP_CODGP AS VARCHAR(10))
+''','''+CAST(GMP_CODPE AS VARCHAR(10))
+''','''+CAST(GMP_CODFVR AS VARCHAR(10))
+''','''+CAST(GMP_CODFBR AS VARCHAR(10))
+''','''+CAST(GMP_CODAUT AS VARCHAR(10))
+''','''+CAST(GMP_NUMSERIE AS VARCHAR(20))
+''','''+CAST(GMP_SINCARD AS VARCHAR(20))
+''','''+CAST(GMP_OPERADORA AS VARCHAR(15))
+''','''+CAST(GMP_FONE AS VARCHAR(15))
+''','''+CAST(GMP_CONTRATO AS VARCHAR(10))
+''','''+CAST(GMP_CODGML AS VARCHAR(10))
+''','''+CAST(GMP_PLACACHASSI AS VARCHAR(20))
+''','''+CAST(GMP_COMPOSICAO AS VARCHAR(10))
+''',1);'
FROM GRUPOMODELOPRODUTO
*/
GO
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(1,'11','2018-12-11','49','1','49',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(2,'12','2018-12-11','29','50','78',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(3,'15','2018-12-11','65','79','143',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(4,'14','2018-12-11','19','144','162',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(5,'2','2018-12-11','69','163','231',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(6,'3','2018-12-11','69','232','300',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(7,'1','2018-12-11','14','301','314',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(8,'5','2018-12-11','19','315','333',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(9,'4','2018-12-11','34','334','367',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(10,'13','2018-12-11','29','368','396',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(11,'9','2018-12-11','34','397','430',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(12,'8','2018-12-11','34','431','464',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(13,'7','2018-12-11','34','465','498',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(14,'6','2018-12-11','34','499','532',1);
INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES(15,'10','2018-12-11','34','533','566',1);
/*
SELECT 'INSERT INTO VGRUPOMODELOLOTE(GML_CODIGO,GML_CODGM,GML_DATA,GML_ENTRADA,GML_CODGMPINI,GML_CODGMPFIM,GML_CODUSR) VALUES('
+''+CAST(GML_CODIGO AS VARCHAR(10))
+','''+CAST(GML_CODGM AS VARCHAR(20))
+''','''+CAST(GML_DATA AS VARCHAR(10))
+''','''+CAST(GML_ENTRADA AS VARCHAR(10))
+''','''+CAST(GML_CODGMPINI AS VARCHAR(10))
+''','''+CAST(GML_CODGMPFIM AS VARCHAR(10))
+''',1);'
FROM GRUPOMODELOLOTE
*/
GO
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('1','NAO SE APLICA','S','S',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('3','AMARELO','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('4','AZUL','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('5','BEGE','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('6','BRANCA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('7','CINZA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('8','DOURADA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('9','GRENA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('10','LARANJA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('11','MARROM','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('12','PRATA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('13','PRETA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('14','ROSA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('15','ROXA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('16','VERDE','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('17','VERMELHA','S','P',1);
INSERT INTO VVEICULOCOR(VCR_CODIGO,VCR_NOME,VCR_ATIVO ,VCR_REG ,VCR_CODUSR) VALUES('18','FANTASIA','S','P',1);
GO 
INSERT INTO VVEICULOFABRICANTE VALUES('AGL','AGRALE','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('ANT','ANTONINI','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('BRO','BOREAL','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('BSA','BIASI','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('BTL','VITAL MARRARA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('CHG','CHARGER','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('CHV','CHEVROLET','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('CTR','CITROEN','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('DBR','DAMBROZ','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('DF','DAF','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('FCH','FACHINI','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('FIT','FIAT','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('FLL','FOLLE','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('FNF','FREENHALF','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('FRD','FORD','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('FRG','FURGOBENTO','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('GFR','GAFOR','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('GLG','GALEGO','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('GMM','GMC','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('GRR','GUERRA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('HB','HBZ','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('HND','HONDA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('HWO','HOWO','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('HYN','HYUNDAI','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('IBR','IBIPORA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('IDR','IDEROL','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('ITL','INTERNACIONAL','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('IVC','IVECO','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('KA','KIA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('KNT','KRONORTE','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('KRN','KRONE','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('LBL','LIBRELATO','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('LNC','LENCOIS','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('MBZ','MERCEDES BENZ','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('MLL','MELLON','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('MN','MAN','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('MNS','MANOS','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('MTB','MITSUBISHI','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('MTR','MATRA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('MXF','MAXFORT','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('NJU','NIJU','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('NMO','NOMA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('NSA','NAO SE APLICA','S','S',1);
INSERT INTO VVEICULOFABRICANTE VALUES('PGT','PEUGEOT','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('PLM','PALMEIRA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('PMA','PUMA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('PPP','PPL','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('PRN','PARNAIBA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('PST','PASTRE','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('PTC','PRATICSIDER','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RDI','RODOVIA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RDL','RODOLINEA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RDM','RODOMOURA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RDO','RODOFORT','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RDT','RODOTEC','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RDV','RODOVALE','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RHD','RHODOSS','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RND','RANDON','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('RNT','RENAULT','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('SCH','SCHIFFER','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('SCN','SCANIA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('SNT','SINOTRUK','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('SPD','SAO PEDRO','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('SSA','SSANGYONG','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('TCT','TECTRAN','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('THM','THERMOSARA','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('THS','THERMOSUL','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('TNS','TANESFILL','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('TRC','TURISCAR','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('TRL','TRIELHT','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('TSS','ROSSETI','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('UNC','UNICAR','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('VOL','VOLVO','S','P',1);
INSERT INTO VVEICULOFABRICANTE VALUES('VW','VOLKSWAGEM','S','P',1);
GO
INSERT INTO VVEICULOTIPO VALUES('CRR','CARRO','S','P',1);
INSERT INTO VVEICULOTIPO VALUES('CRT','CARRETA','S','P',1);
INSERT INTO VVEICULOTIPO VALUES('CMN','CAMINHAO','S','P',1);
INSERT INTO VVEICULOTIPO VALUES('NSA','NAO SE APLICA','S','S',1);
GO
INSERT INTO VVEICULOMODELO VALUES('1','NAO SE APLICA','VOL','S','S',1);
INSERT INTO VVEICULOMODELO VALUES('2','CONSTELATION','VW','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('3','FH','SCN','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('4','R134','VOL','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('5','STRALIS HD 740S 42TZ','IVC','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('6','INTERNATIONAL 9800P7','ITL','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('7','IVECO CURSOR 450E33T','IVC','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('8','IVECO DAILY 35S14DCS','IVC','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('9','STRALIS HD 570S38T','IVC','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('10','STRALIHD 450 S38 TN1','IVC','S','P',1);
INSERT INTO VVEICULOMODELO VALUES('11','STRALIHD 740 S42 TZN','IVC','S','P',1);
GO
UPDATE GENERATOR SET GNR_VALOR=576 WHERE GNR_CODIGO='GRUPOMODELOPRODUTO';
UPDATE GENERATOR SET GNR_VALOR=15 WHERE GNR_CODIGO='GRUPOMODELOLOTE';
UPDATE GENERATOR SET GNR_VALOR=20 WHERE GNR_CODIGO='GRUPOMODELO';
/*
LIMPAR ESTOQUE
DELETE FROM GRUPOMODELOLOTE;
DELETE FROM GRUPOMODELOPRODUTO;
DELETE FROM DUPLICIDADEGMP
UPDATE PONTOESTOQUE SET PE_ESTOQUE=0;
UPDATE GRUPOMODELO SET GM_ESTOQUE=0;
*/



/*

ALTER TRIGGER [dbo].[TRGViewNFPRODUTO_BI] ON [dbo].[VNFPRODUTO]
INSTEAD OF INSERT 
AS
BEGIN
  -- ------------------|------|----|----|--------------------|----------------------------------------------------------   
  -- CAMPO             |INS   |UPD |DEL | TIPO               | Obs
  -- ------------------|------|----|----|--------------------|----------------------------------------------------------
  -- NFP_NUMNF         | PK   |    |    | int, not null      |
  -- NFP_CODSNF        | PK   |    |    | int, not null      |
	-- SNF_CODFLL        | SEL  |    |    | int                | codigo da filial (SERIENF)
  -- NFP_EMISSOR       |      |    |    | vc(14), not null   |
	-- EMISSOR           | SEL  |    |    | vc(60)             | nome do emissor (FAVORECIDO)
  -- NFP_CODNO         |      |    |    | int, not null      | 
	-- OPERACAO          | SEL  |    |    | vc(30)             | nome da natureza de operacao (NATUREZAOPERACAO)
  -- NFP_GUIA          |      |    |    | int, not null      |
  -- NFP_VLRITENS      |      |    |    | n(15,2), not null  | deve ser a soma do valor dos itens (qtdade * unitario)
  -- NFP_VLRFRETE      |      |    |    | n(15,2), not null  | deve ser a soma do frete nos itens
  -- NFP_VLRSEGURO     |      |    |    | n(15,2), not null  | deve ser a soma do seguro nos itens
  -- NFP_VLROUTRAS     |      |    |    | n(15,2), not null  | deve ser a soma do campo outras nos itens
  -- NFP_VLRIPI        |      |    |    | n(15,2), not null  | deve ser a soma do ipi nos itens 
  -- NFP_VLRICMS       |      |    |    | n(15,2), not null  | deve ser a soma do icms dos itens
  -- NFP_VLRST         |      |    |    | n(15,2), not null  | deve ser a soma do st dos itens
  -- NFP_VLRPIS        |      |    |    | n(15,2), not null  | deve ser a soma do pis dos itens
  -- NFP_VLRCOFINS     |      |    |    | n(15,2), not null  | deve ser a soma do cofins dos itens 
  -- NFP_VLRDESCONTO   |      |    |    | n(15,2), not null  | deve ser a soma do desconto nos itens 
  -- NFP_VLRTOTAL      |      |    |    | n(15,2), not null  | deve ser a soma de ((itens+frete+st+ipi+st+outras+seguro)-desconto)
  -- NFP_CODTRN        |      |    |    | int, not null      | codigo da transportadora
	-- TRANSPORTADORA    | SEL  |    |    | vc(60)             | nome da transportadora (FAVORECIDO)
  -- NFP_VOLUME        |      |    |    | vc(10), null       | qtdade de volumes transportados
  -- NFP_ESPECIE       |      |    |    | vc(10), null       | especie de volumes transportados
  -- NFP_CODVND        |      |    |    | int, not null      | codigo do vendedor
	-- VENDEDOR          | SEL  |    |    | vc(60)             | nome do vendedor (FAVORECIDO)
  -- NFP_DTCANCELA     |      |    |    | date, null         | data do cancelamento da nota
  -- NFP_CODCMP        |      |    |    | int, not null      | mes de competencia
	-- CMP_NOME          | SEL  |    |    | vc(6)              | apelido do mes de competencia
  -- NFP_LIVRO         |      |    |    | vc(1), not null    | S=livro/arquivos fiscais, N=nao sai em relatorios fiscais/livros fiscais/arquivos fiscais
  -- NFP_DTENTRADA     |      |    |    | date, not null     | no caso de nota de saida sera preenchido com a emissao da nota
  -- NFP_PESOBRUTO     |      |    |    | n(15,4), not null  |
  -- NFP_PESOLIQUIDO   |      |    |    | n(15,4), not null  |
  -- NFP_RECIBONFE     |      |    |    | vc(20), null       | protocolo de autorizacao da nfe
  -- NFP_CHAVENFE      |      |    |    | vc(50), null       | chave de acesso da nota eletronica
  -- NFP_CANCNFE       |      |    |    | vc(20), null       | protocolo de cancelamento
  -- NFP_ENTSAI        |      |    |    | vc(1), not null    | 
  -- NFP_ATIVO         |      |    |    | vc(1), not null    | S-Ativo, N-Inativo
  -- NFP_REG           |      |    |    | vc(1), not null    | A-Administrador, P-Publico, S-Sistema
  -- NFP_CODUSR        |      |    |    | int, not null      | codigo do usuario
  -- US_APELIDO        | SEL  |    |    | vc(15)             | apelido do usuario (inc/exc/alt) (USUARIOSISTEMA)
  -- ------------------|------|----|----|--------------------|----------------------------------------------------------   
  -- [OK]=Checado no trigger   [CC]=Check constraint  [SEL]=Select  [FNC]=function  [DEF]=default
  -- -----------------------------------------------------------------------------------------------------------------
  SET NOCOUNT ON;  
  DECLARE @uiCodigo Integer    = 0;  -- Para procurar unique index
  DECLARE @erroNew VARCHAR(70) = 'OK';  -- Buscando retorno de erro para funcao
  -------------------
  -- Campos da tabela
  -------------------
  DECLARE @nfpNumNfNew        Integer;
  DECLARE @nfpCodSnfNew       Integer;
	DECLARE @snfCodFllNew       Integer;
  DECLARE @nfpEmissorNew      VarChar(14);
	DECLARE @EmissorNew         VarChar(60);
  DECLARE @nfpCodNoNew        Integer;
	DECLARE @OperacaoNew        varchar(30);
  DECLARE @nfpGuiaNew         Integer;
  DECLARE @nfpVlrItensNew     Numeric(15,2);
  DECLARE @nfpVlrFreteNew     Numeric(15,2);
  DECLARE @nfpVlrSeguroNew    Numeric(15,2);
  DECLARE @nfpVlrOutrasNew    Numeric(15,2);
  DECLARE @nfpVlrIpiNew       Numeric(15,2);
  DECLARE @nfpVlrIcmsNew      Numeric(15,2);
  DECLARE @nfpVlrStNew        Numeric(15,2);
  DECLARE @nfpVlrPisNew       Numeric(15,2);
  DECLARE @nfpVlrCofinsNew    Numeric(15,2);
  DECLARE @nfpVlrDescontoNew  Numeric(15,2);
  DECLARE @nfpVlrTotalNew     Numeric(15,2);
  DECLARE @nfpCodTrnNew       Integer;
	DECLARE @TransportadoraNew  Varchar(60);
  DECLARE @nfpVolumeNew       Varchar(10);
  DECLARE @nfpEspecieNew      varchar(10);
  DECLARE @nfpCodVndNew       Integer;
	DECLARE @VendedorNew        varchar(60);
  DECLARE @nfpDtCancelaNew    date;
  DECLARE @nfpCodCmpNew       Integer;
	DECLARE @cmpNomeNew         varchar(60);
  DECLARE @nfpLivroNew        varchar(1);
  DECLARE @nfpDtEntradaNew    date;
  DECLARE @nfpPesoBrutoNew    numeric(15,4);
  DECLARE @nfpPesoLiquidoNew  numeric(15,4);
  DECLARE @nfpReciboNfeNew    varchar(20);
  DECLARE @nfpChaveNfeNew     varchar(50);
  DECLARE @nfpCancNfeNew      varchar(20);
  DECLARE @nfpEntSaiNew       varchar(1);
  DECLARE @nfpAtivoNew        varchar(1);
  DECLARE @nfpRegGNew         varchar(1);
  DECLARE @nfpCodUsrNew       integer;
  DECLARE @UsApelidoNew       varchar(15);
  DECLARE @usrAdmPubNew       VARCHAR(1);
  DECLARE @direito            varchar(1);
  --
  --
  ---------------------------------------------------
  -- Buscando os campos para checagem antes do insert
  ---------------------------------------------------
  SELECT   @nfpNumNfNew         = I.NFP_NUMNF
          ,@nfpCodSnfNew        = I.NFP_CODSNF
          ,@SnfCodFllNew        = coalesce(I.SNF_CODFLL,0)
          ,@nfpEmissorNew       = I.NFP_EMISSOR
          ,@EmissorNew          = coalesce(I.EMISSOR,'ERRO')
          ,@nfpCodNoNew         = I.NFP_CODNO
          ,@OperacaoNew         = coalesce(I.OPERACAO,'ERRO')
          ,@nfpGuiaNew          = I.NFP_GUIA 
          ,@nfpVlrItensNew      = I.NFP_VLRITENS 
          ,@nfpVlrFreteNew      = I.NFP_VLRFRETE 
          ,@nfpVlrSeguroNew     = I.NFP_VLRSEGURO 
          ,@nfpVlrOutrasNew     = I.NFP_VLROUTRAS
          ,@nfpVlrIpiNew        = I.NFP_VLRIPI 
          ,@nfpVlrIcmsNew       = I.NFP_VLRICMS 
          ,@nfpVlrStNew         = I.NFP_VLRST 
          ,@nfpVlrIpiNew        = I.NFP_VLRIPI 
          ,@nfpVlrCofinsNew     = I.NFP_VLRCOFINS 
          ,@nfpVlrDescontoNew   = I.NFP_VLRDESCONTO 
          ,@nfpVlrTotalNew      = I.NFP_VLRTOTAL 
          ,@nfpCodTrnNew        = I.NFP_CODTRN 
          ,@TransportadoraNew   = coalesce(I.TRANSPORTADORA,'ERRO')
          ,@nfpVolumeNew        = I.NFP_VOLUME 
          ,@nfpEspecieNew       = I.NFP_ESPECIE 
          ,@nfpCodVndNew        = I.NFP_CODVND 
          ,@VendedorNew         = coalesce(I.VENDEDOR,'ERRO')
          ,@nfpDtCancelaNew     = I.NFP_DTCANELA 
          ,@nfpCodCmpNew        = I.NFP_CODCMP 
          ,@CmpNomeNew          = coalesce(I.CMP_NOME,'ERRO')
          ,@nfpLivroNew         = I.NFP_LIVRO
          ,@nfpDtEntradaNew     = I.NFP_DTENTRADA 
          ,@nfpPesoBrutoNew     = I.NFP_PESOBRUTO 
          ,@nfpPesoLiquidoNew   = I.NFP_PESOLIQUIDO 
          ,@nfpReciboNfeNew     = I.NFP_RECIBONFE 
          ,@nfpChaveNfeNew      = I.NFP_CHAVENFE 
          ,@nfpCancNfeNew       = I.NFP_CANCNFE 
          ,@nfpEntSaiNew        = I.NFP_ENTSAI 
          ,@nfpAtivoNew         = I.NFP_ATIVO 
          ,@nfpRegNew           = I.NFP_REG 
          ,@nfpCodUsrNew        = I.NFP_CODUSR 
          ,@UsApelidoNew        = coalesce(I.US_APELIDO,'ERRO')
          ,@usrAdmPubNew        = COALESCE(USR.USR_ADMPUB,'P')
          ,@direito             = coalesce(UP.UP_D26,0)
    FROM inserted i
    LEFT OUTER JOIN USUARIO USR ON i.NFP_CODUSR=USR.USR_CODIGO AND USR.USR_ATIVO='S'
    LEFT OUTER JOIN USUARIOPERFIL UP ON USR.USR_CODUP=UP.UP_CODIGO
    LEFT OUTER JOIN USUARIOSISTEMA U ON U.US_CODIGO=i.NFP_CODUSR
    LEFT OUTER JOIN FAVORECIDO E ON E.FVR_CNPJCPF=i.NFP_EMISSOR
    LEFT OUTER JOIN SERIENF S ON S.SNF_CODIGO=i.NFP_CODSNF
    LEFT OUTER JOIN NATUREZAOPERACAO O ON O.NO_CODIGO=i.NFP_CODNO
    LEFT OUTER JOIN TRANSPORTADORA T ON T.TRN_CODFVR=i.NFP_CODTRN
    LEFT OUTER JOIN FAVORECIDO TF ON TF.FVR_CODIGO=t.TRN_CODFVR
    LEFT OUTER JOIN FAVORECIDO V ON V.FVR_CODIGO=i.NFP_CODVND
    LEFT OUTER JOIN COMPETENCIA M ON M.CMP_CODIGO=i.NFP_CODCMP
    --
    --
    BEGIN TRY    
      -----------------------------
      -- VERIFICANDO A FOREIGN KEYs
      -----------------------------
      IF( @cmpNomeNew='ERRO' )
        RAISERROR('NAO LOCALIZADO COMPETENCIA %i PARA ESTE REGISTRO',15,1,@nfpCodCmpNew);
      IF( @snfCodFllNew=0 )
        RAISERROR('NAO LOCALIZADO FILIAL %i PARA ESTE REGISTRO',15,1,@nfpCodSnfNew);
      IF( @EmissorNew='ERRO' )
        RAISERROR('NAO LOCALIZADO EMISSOR %s PARA ESTE REGISTRO',15,1,@nfpEmissorNew);
      IF( @OperacaoNew='ERRO' )
        RAISERROR('NAO LOCALIZADO NATUREZA OPERACAO %s PARA ESTE REGISTRO',15,1,@nfpCodNoNew);
      IF( @TransportadoraNew='ERRO' )
        RAISERROR('NAO LOCALIZADO TRANSPORTADORA %i PARA ESTE REGISTRO',15,1,@nfpCodTrnNew);
      IF( @VendedorNew='ERRO' )
        RAISERROR('NAO LOCALIZADO VENDEDOR %i PARA ESTE REGISTRO',15,1,@nfpCodVndNew);
      IF( @UsApelidoNew='ERRO' )
        RAISERROR('NAO LOCALIZADO USUARIO %i PARA ESTE REGISTRO',15,1,@nfpCodUsrNew);
      -------------------------------------------------------------
      -- Checando se o usuario tem direito de cadastro nesta tabela
      -------------------------------------------------------------
      IF( @direito<2 )
        RAISERROR('USUARIO %s NAO POSSUI DIREITO 26 PARA INCLUIR NA TABELA NOTA DE PRODUTO',15,1,@US_APELIDONew);
      ---------------------------------------------------------------------
      -- NUMERO DA NOTA + SERIE devem ser unico
      ---------------------------------------------------------------------
      SELECT @uiCodigo=COALESCE(NFP_GUIA,0) FROM NFPRODUTO WHERE NFP_NUMNF=@nfpNumNfNew AND NFP_CODSNF=@nfpCodSnfNew;
      IF( @uiCodigo > 0 )
        RAISERROR('JA EXISTE UMA NOTA COM ESTE NUMERO/SERIE, LANCAMENTO %i',15,1,@uiCodigo);
      ---------------------------------------------------------------------
      -- ALGUMAS REGRAS GERAIS
      ---------------------------------------------------------------------
      IF( @nfpVlrTotalNew<>((@nfpVlrItensNew+@nfpVlrFreteNew+@nfpVlrStNew+@nfpVlrIpiNew+@nfpVlrOutrasNew+@nfpVlrSeguroNew)-@nfpVlrDescontoNew) )  
        RAISERROR('VALOR TOTAL DA NOTA DIVERGE DE (ITENS+FRETE+ST+IPI+OUTRAS+SEGURO-DESCONTO)',15,1);
      ------------------------------------------------------------------
      -- Verificando o campo USR_REG - Soh olhar se for diferente de "P"
      ------------------------------------------------------------------
      IF( @nfpREGNew <> 'P' ) BEGIN
        SET @erroNew=dbo.fncCampoRegInc( @usrAdmPubNew,@nfpRegNew,@direito );
        IF( @erroNew != 'OK' )
          RAISERROR(@erroNew,15,1);
      END    
      --  
      INSERT INTO dbo.NFPRODUTO
        (NFP_NUMNF
        ,NFP_CODSNF
        ,NFP_EMISSOR
        ,NFP_CODNO
        ,NFP_GUIA
        ,NFP_VLRITENS
        ,NFP_VLRFRETE
        ,NFP_VLRSEGURO
        ,NFP_VLROUTRAS
        ,NFP_VLRIPI
        ,NFP_VLRICMS
        ,NFP_VLRST
        ,NFP_VLRPIS
        ,NFP_VLRCOFINS
        ,NFP_VLRDESCONTO
        ,NFP_VLRTOTAL
        ,NFP_CODTRN
        ,NFP_VOLUME
        ,NFP_ESPECIE
        ,NFP_CODVND
        ,NFP_DTCANCELA
        ,NFP_CODCMP
        ,NFP_LIVRO
        ,NFP_DTENTRADA
        ,NFP_PESOBRUTO
        ,NFP_PESOLIQUIDO
        ,NFP_RECIBONFE
        ,NFP_CHAVENFE
        ,NFP_CANCNFE
        ,NFP_ENTSAI
        ,NFP_ATIVO
        ,NFP_REG
        ,NFP_CODUSR
        ) VALUES
        (@nfpNumNfNew
        ,@nfpCodSnfNew
        ,@nfpEmissorNew
        ,@nfpCodNoNew
        ,@nfpGuiaNew
        ,@nfpVlrItensNew
        ,@nfpVlrFreteNew
        ,@nfpVlrSeguroNew
        ,@nfpVlrOutrasNew
        ,@nfpVlrIpiNew
        ,@nfpVlrIcmsNew
        ,@nfpVlrStNew
        ,@nfpVlrIpiNew
        ,@nfpVlrCofinsNew
        ,@nfpVlrDescontoNew
        ,@nfpVlrTotalNew
        ,@nfpCodTrnNew
        ,@nfpVolumeNew
        ,@nfpEspecieNew
        ,@nfpCodVndNew
        ,@nfpDtCancelaNew
        ,@nfpCodCmpNew
        ,@nfpLivroNew
        ,@nfpDtEntradaNew
        ,@nfpPesoBrutoNew
        ,@nfpPesoLiquidoNew
        ,@nfpReciboNfeNew
        ,@nfpChaveNfeNew
        ,@nfpCancNfeNew
        ,@nfpEntSaiNew
        ,@nfpAtivoNew
        ,@nfpRegNew
        ,@nfpCodUsrNew
      );
      -- Gravando LOG
      INSERT INTO dbo.BKPNFPRODUTO
        (NFP_ACAO
        ,NFP_NUMNF
        ,NFP_CODSNF
        ,NFP_EMISSOR
        ,NFP_CODNO
        ,NFP_GUIA
        ,NFP_VLRITENS
        ,NFP_VLRFRETE
        ,NFP_VLRSEGURO
        ,NFP_VLROUTRAS
        ,NFP_VLRIPI
        ,NFP_VLRICMS
        ,NFP_VLRST
        ,NFP_VLRPIS
        ,NFP_VLRCOFINS
        ,NFP_VLRDESCONTO
        ,NFP_VLRTOTAL
        ,NFP_CODTRN
        ,NFP_VOLUME
        ,NFP_ESPECIE
        ,NFP_CODVND
        ,NFP_DTCANCELA
        ,NFP_CODCMP
        ,NFP_LIVRO
        ,NFP_DTENTRADA
        ,NFP_PESOBRUTO
        ,NFP_PESOLIQUIDO
        ,NFP_RECIBONFE
        ,NFP_CHAVENFE
        ,NFP_CANCNFE
        ,NFP_ENTSAI
        ,NFP_ATIVO
        ,NFP_REG
        ,NFP_CODUSR
        ) VALUES
        ('I'
        ,@nfpNumNfNew
        ,@nfpCodSnfNew
        ,@nfpEmissorNew
        ,@nfpCodNoNew
        ,@nfpGuiaNew
        ,@nfpVlrItensNew
        ,@nfpVlrFreteNew
        ,@nfpVlrSeguroNew
        ,@nfpVlrOutrasNew
        ,@nfpVlrIpiNew
        ,@nfpVlrIcmsNew
        ,@nfpVlrStNew
        ,@nfpVlrIpiNew
        ,@nfpVlrCofinsNew
        ,@nfpVlrDescontoNew
        ,@nfpVlrTotalNew
        ,@nfpCodTrnNew
        ,@nfpVolumeNew
        ,@nfpEspecieNew
        ,@nfpCodVndNew
        ,@nfpDtCancelaNew
        ,@nfpCodCmpNew
        ,@nfpLivroNew
        ,@nfpDtEntradaNew
        ,@nfpPesoBrutoNew
        ,@nfpPesoLiquidoNew
        ,@nfpReciboNfeNew
        ,@nfpChaveNfeNew
        ,@nfpCancNfeNew
        ,@nfpEntSaiNew
        ,@nfpAtivoNew
        ,@nfpRegNew
        ,@nfpCodUsrNew
      );  
    END TRY
    BEGIN CATCH
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage=ERROR_MESSAGE(),@ErrorSeverity=ERROR_SEVERITY(),@ErrorState=ERROR_STATE();
      RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
      RETURN;
    END CATCH
  END
  
  --
  --
  -------------------------------------------------------------------------------------
  --                               N F P R O D U T O                                 --
  -------------------------------------------------------------------------------------
GO
*/

